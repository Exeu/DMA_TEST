
DMA_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a64  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08004c04  08004c04  00014c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d70  08004d70  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004d70  08004d70  00014d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d78  08004d78  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d78  08004d78  00014d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d7c  08004d7c  00014d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004d80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000070  08004df0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  08004df0  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f748  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f5d  00000000  00000000  0002f7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd8  00000000  00000000  00031748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c20  00000000  00000000  00032420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001736c  00000000  00000000  00033040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f481  00000000  00000000  0004a3ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fa97  00000000  00000000  0005982d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e92c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f7c  00000000  00000000  000e9318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004bec 	.word	0x08004bec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004bec 	.word	0x08004bec

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <HAL_TIM_PWM_PulseFinishedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	//HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
}
 8000580:	bf00      	nop
 8000582:	370c      	adds	r7, #12
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr

0800058c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
/* USER CODE END 0 */

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim) {
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]

}
 8000594:	bf00      	nop
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b590      	push	{r4, r7, lr}
 80005a2:	b0d5      	sub	sp, #340	; 0x154
 80005a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a6:	f000 fd65 	bl	8001074 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005aa:	f000 f969 	bl	8000880 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ae:	f000 fab9 	bl	8000b24 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005b2:	f000 fa6d 	bl	8000a90 <MX_USART2_UART_Init>
  MX_DMA_Init();
 80005b6:	f000 fa95 	bl	8000ae4 <MX_DMA_Init>
  MX_TIM1_Init();
 80005ba:	f000 f9c9 	bl	8000950 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  uint32_t indx=0;
 80005be:	2300      	movs	r3, #0
 80005c0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  uint16_t pwmData[(24*4)+50];
  uint32_t color = ((10<<16) | (10<<8) | (10));
 80005c4:	4bab      	ldr	r3, [pc, #684]	; (8000874 <main+0x2d4>)
 80005c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

  for (int i=23; i>=0; i--) {
 80005ca:	2317      	movs	r3, #23
 80005cc:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80005d0:	e021      	b.n	8000616 <main+0x76>
  			if (color&(1<<i)) {
 80005d2:	2201      	movs	r2, #1
 80005d4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80005d8:	fa02 f303 	lsl.w	r3, r2, r3
 80005dc:	461a      	mov	r2, r3
 80005de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80005e2:	4013      	ands	r3, r2
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d006      	beq.n	80005f6 <main+0x56>
  				pwmData[indx] = 58;  // 2/3 of 90
 80005e8:	463b      	mov	r3, r7
 80005ea:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80005ee:	213a      	movs	r1, #58	; 0x3a
 80005f0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80005f4:	e005      	b.n	8000602 <main+0x62>
  			} else {
  				pwmData[indx] = 29;  // 1/3 of 90
 80005f6:	463b      	mov	r3, r7
 80005f8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80005fc:	211d      	movs	r1, #29
 80005fe:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  			}
  			indx++;
 8000602:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8000606:	3301      	adds	r3, #1
 8000608:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  for (int i=23; i>=0; i--) {
 800060c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8000610:	3b01      	subs	r3, #1
 8000612:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8000616:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800061a:	2b00      	cmp	r3, #0
 800061c:	dad9      	bge.n	80005d2 <main+0x32>
  }

  for (int i=23; i>=0; i--) {
 800061e:	2317      	movs	r3, #23
 8000620:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8000624:	e021      	b.n	800066a <main+0xca>
  			if (color&(1<<i)) {
 8000626:	2201      	movs	r2, #1
 8000628:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800062c:	fa02 f303 	lsl.w	r3, r2, r3
 8000630:	461a      	mov	r2, r3
 8000632:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000636:	4013      	ands	r3, r2
 8000638:	2b00      	cmp	r3, #0
 800063a:	d006      	beq.n	800064a <main+0xaa>
  				pwmData[indx] = 58;  // 2/3 of 90
 800063c:	463b      	mov	r3, r7
 800063e:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8000642:	213a      	movs	r1, #58	; 0x3a
 8000644:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8000648:	e005      	b.n	8000656 <main+0xb6>
  			} else {
  				pwmData[indx] = 29;  // 1/3 of 90
 800064a:	463b      	mov	r3, r7
 800064c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8000650:	211d      	movs	r1, #29
 8000652:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  			}
  			indx++;
 8000656:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800065a:	3301      	adds	r3, #1
 800065c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  for (int i=23; i>=0; i--) {
 8000660:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000664:	3b01      	subs	r3, #1
 8000666:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800066a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800066e:	2b00      	cmp	r3, #0
 8000670:	dad9      	bge.n	8000626 <main+0x86>
  }

  for (int i=23; i>=0; i--) {
 8000672:	2317      	movs	r3, #23
 8000674:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8000678:	e021      	b.n	80006be <main+0x11e>
  			if (color&(1<<i)) {
 800067a:	2201      	movs	r2, #1
 800067c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000680:	fa02 f303 	lsl.w	r3, r2, r3
 8000684:	461a      	mov	r2, r3
 8000686:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800068a:	4013      	ands	r3, r2
 800068c:	2b00      	cmp	r3, #0
 800068e:	d006      	beq.n	800069e <main+0xfe>
  				pwmData[indx] = 58;  // 2/3 of 90
 8000690:	463b      	mov	r3, r7
 8000692:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8000696:	213a      	movs	r1, #58	; 0x3a
 8000698:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 800069c:	e005      	b.n	80006aa <main+0x10a>
  			} else {
  				pwmData[indx] = 29;  // 1/3 of 90
 800069e:	463b      	mov	r3, r7
 80006a0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80006a4:	211d      	movs	r1, #29
 80006a6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  			}
  			indx++;
 80006aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80006ae:	3301      	adds	r3, #1
 80006b0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  for (int i=23; i>=0; i--) {
 80006b4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80006b8:	3b01      	subs	r3, #1
 80006ba:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80006be:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	dad9      	bge.n	800067a <main+0xda>
  }

  for (int i=23; i>=0; i--) {
 80006c6:	2317      	movs	r3, #23
 80006c8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80006cc:	e021      	b.n	8000712 <main+0x172>
  			if (color&(1<<i)) {
 80006ce:	2201      	movs	r2, #1
 80006d0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80006d4:	fa02 f303 	lsl.w	r3, r2, r3
 80006d8:	461a      	mov	r2, r3
 80006da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80006de:	4013      	ands	r3, r2
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d006      	beq.n	80006f2 <main+0x152>
  				pwmData[indx] = 58;  // 2/3 of 90
 80006e4:	463b      	mov	r3, r7
 80006e6:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80006ea:	213a      	movs	r1, #58	; 0x3a
 80006ec:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80006f0:	e005      	b.n	80006fe <main+0x15e>
  			} else {
  				pwmData[indx] = 29;  // 1/3 of 90
 80006f2:	463b      	mov	r3, r7
 80006f4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80006f8:	211d      	movs	r1, #29
 80006fa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  			}
  			indx++;
 80006fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8000702:	3301      	adds	r3, #1
 8000704:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  for (int i=23; i>=0; i--) {
 8000708:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800070c:	3b01      	subs	r3, #1
 800070e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8000712:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000716:	2b00      	cmp	r3, #0
 8000718:	dad9      	bge.n	80006ce <main+0x12e>
  }

for (int i=0; i<50; i++)
 800071a:	2300      	movs	r3, #0
 800071c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8000720:	e00f      	b.n	8000742 <main+0x1a2>
{
	pwmData[indx] = 0;
 8000722:	463b      	mov	r3, r7
 8000724:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8000728:	2100      	movs	r1, #0
 800072a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	indx++;
 800072e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8000732:	3301      	adds	r3, #1
 8000734:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
for (int i=0; i<50; i++)
 8000738:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800073c:	3301      	adds	r3, #1
 800073e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8000742:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8000746:	2b31      	cmp	r3, #49	; 0x31
 8000748:	ddeb      	ble.n	8000722 <main+0x182>
}

  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 800074a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800074e:	b29b      	uxth	r3, r3
 8000750:	463a      	mov	r2, r7
 8000752:	2100      	movs	r1, #0
 8000754:	4848      	ldr	r0, [pc, #288]	; (8000878 <main+0x2d8>)
 8000756:	f002 f85f 	bl	8002818 <HAL_TIM_PWM_Start_DMA>
  //HAL_TIM_Base_Start_IT(&htim1);
  //HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
  /* USER CODE END 2 */
  uint32_t indx2=0;
 800075a:	2300      	movs	r3, #0
 800075c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  uint32_t color2 = (((rand() % 5)<<16) | ((rand() % 5)<<8) | ((rand() % 5)));
 8000760:	f003 fa42 	bl	8003be8 <rand>
 8000764:	4601      	mov	r1, r0
 8000766:	4b45      	ldr	r3, [pc, #276]	; (800087c <main+0x2dc>)
 8000768:	fb83 2301 	smull	r2, r3, r3, r1
 800076c:	105a      	asrs	r2, r3, #1
 800076e:	17cb      	asrs	r3, r1, #31
 8000770:	1ad2      	subs	r2, r2, r3
 8000772:	4613      	mov	r3, r2
 8000774:	009b      	lsls	r3, r3, #2
 8000776:	4413      	add	r3, r2
 8000778:	1aca      	subs	r2, r1, r3
 800077a:	0414      	lsls	r4, r2, #16
 800077c:	f003 fa34 	bl	8003be8 <rand>
 8000780:	4601      	mov	r1, r0
 8000782:	4b3e      	ldr	r3, [pc, #248]	; (800087c <main+0x2dc>)
 8000784:	fb83 2301 	smull	r2, r3, r3, r1
 8000788:	105a      	asrs	r2, r3, #1
 800078a:	17cb      	asrs	r3, r1, #31
 800078c:	1ad2      	subs	r2, r2, r3
 800078e:	4613      	mov	r3, r2
 8000790:	009b      	lsls	r3, r3, #2
 8000792:	4413      	add	r3, r2
 8000794:	1aca      	subs	r2, r1, r3
 8000796:	0213      	lsls	r3, r2, #8
 8000798:	431c      	orrs	r4, r3
 800079a:	f003 fa25 	bl	8003be8 <rand>
 800079e:	4601      	mov	r1, r0
 80007a0:	4b36      	ldr	r3, [pc, #216]	; (800087c <main+0x2dc>)
 80007a2:	fb83 2301 	smull	r2, r3, r3, r1
 80007a6:	105a      	asrs	r2, r3, #1
 80007a8:	17cb      	asrs	r3, r1, #31
 80007aa:	1ad2      	subs	r2, r2, r3
 80007ac:	4613      	mov	r3, r2
 80007ae:	009b      	lsls	r3, r3, #2
 80007b0:	4413      	add	r3, r2
 80007b2:	1aca      	subs	r2, r1, r3
 80007b4:	ea44 0302 	orr.w	r3, r4, r2
 80007b8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	  for (int i=23; i>=0; i--) {
 80007bc:	2317      	movs	r3, #23
 80007be:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80007c2:	e021      	b.n	8000808 <main+0x268>
	  			if (color2&(1<<i)) {
 80007c4:	2201      	movs	r2, #1
 80007c6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80007ca:	fa02 f303 	lsl.w	r3, r2, r3
 80007ce:	461a      	mov	r2, r3
 80007d0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80007d4:	4013      	ands	r3, r2
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d006      	beq.n	80007e8 <main+0x248>
	  				pwmData[indx2] = 58;  // 2/3 of 90
 80007da:	463b      	mov	r3, r7
 80007dc:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80007e0:	213a      	movs	r1, #58	; 0x3a
 80007e2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80007e6:	e005      	b.n	80007f4 <main+0x254>
	  			} else {
	  				pwmData[indx2] = 29;  // 1/3 of 90
 80007e8:	463b      	mov	r3, r7
 80007ea:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80007ee:	211d      	movs	r1, #29
 80007f0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  			}
	  			indx2++;
 80007f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80007f8:	3301      	adds	r3, #1
 80007fa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	  for (int i=23; i>=0; i--) {
 80007fe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000802:	3b01      	subs	r3, #1
 8000804:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8000808:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800080c:	2b00      	cmp	r3, #0
 800080e:	dad9      	bge.n	80007c4 <main+0x224>
	  }

	  for (int i=23; i>=0; i--) {
 8000810:	2317      	movs	r3, #23
 8000812:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8000816:	e021      	b.n	800085c <main+0x2bc>
	  			if (color2&(1<<i)) {
 8000818:	2201      	movs	r2, #1
 800081a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800081e:	fa02 f303 	lsl.w	r3, r2, r3
 8000822:	461a      	mov	r2, r3
 8000824:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000828:	4013      	ands	r3, r2
 800082a:	2b00      	cmp	r3, #0
 800082c:	d006      	beq.n	800083c <main+0x29c>
	  				pwmData[indx2] = 58;  // 2/3 of 90
 800082e:	463b      	mov	r3, r7
 8000830:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8000834:	213a      	movs	r1, #58	; 0x3a
 8000836:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 800083a:	e005      	b.n	8000848 <main+0x2a8>
	  			} else {
	  				pwmData[indx2] = 29;  // 1/3 of 90
 800083c:	463b      	mov	r3, r7
 800083e:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8000842:	211d      	movs	r1, #29
 8000844:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  			}
	  			indx2++;
 8000848:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800084c:	3301      	adds	r3, #1
 800084e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	  for (int i=23; i>=0; i--) {
 8000852:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000856:	3b01      	subs	r3, #1
 8000858:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800085c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000860:	2b00      	cmp	r3, #0
 8000862:	dad9      	bge.n	8000818 <main+0x278>
	  }

	  indx2=0;
 8000864:	2300      	movs	r3, #0
 8000866:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

	  HAL_Delay(30);
 800086a:	201e      	movs	r0, #30
 800086c:	f000 fc74 	bl	8001158 <HAL_Delay>
  {
 8000870:	e776      	b.n	8000760 <main+0x1c0>
 8000872:	bf00      	nop
 8000874:	000a0a0a 	.word	0x000a0a0a
 8000878:	200000f8 	.word	0x200000f8
 800087c:	66666667 	.word	0x66666667

08000880 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b094      	sub	sp, #80	; 0x50
 8000884:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000886:	f107 0320 	add.w	r3, r7, #32
 800088a:	2230      	movs	r2, #48	; 0x30
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f003 f9a2 	bl	8003bd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a4:	2300      	movs	r3, #0
 80008a6:	60bb      	str	r3, [r7, #8]
 80008a8:	4b27      	ldr	r3, [pc, #156]	; (8000948 <SystemClock_Config+0xc8>)
 80008aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ac:	4a26      	ldr	r2, [pc, #152]	; (8000948 <SystemClock_Config+0xc8>)
 80008ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b2:	6413      	str	r3, [r2, #64]	; 0x40
 80008b4:	4b24      	ldr	r3, [pc, #144]	; (8000948 <SystemClock_Config+0xc8>)
 80008b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008c0:	2300      	movs	r3, #0
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	4b21      	ldr	r3, [pc, #132]	; (800094c <SystemClock_Config+0xcc>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a20      	ldr	r2, [pc, #128]	; (800094c <SystemClock_Config+0xcc>)
 80008ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008ce:	6013      	str	r3, [r2, #0]
 80008d0:	4b1e      	ldr	r3, [pc, #120]	; (800094c <SystemClock_Config+0xcc>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008dc:	2301      	movs	r3, #1
 80008de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008e0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e6:	2302      	movs	r3, #2
 80008e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008f0:	2304      	movs	r3, #4
 80008f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80008f4:	2348      	movs	r3, #72	; 0x48
 80008f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008f8:	2302      	movs	r3, #2
 80008fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008fc:	2304      	movs	r3, #4
 80008fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000900:	f107 0320 	add.w	r3, r7, #32
 8000904:	4618      	mov	r0, r3
 8000906:	f001 fa6b 	bl	8001de0 <HAL_RCC_OscConfig>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000910:	f000 f976 	bl	8000c00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000914:	230f      	movs	r3, #15
 8000916:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000918:	2302      	movs	r3, #2
 800091a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000920:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000924:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000926:	2300      	movs	r3, #0
 8000928:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800092a:	f107 030c 	add.w	r3, r7, #12
 800092e:	2102      	movs	r1, #2
 8000930:	4618      	mov	r0, r3
 8000932:	f001 fccd 	bl	80022d0 <HAL_RCC_ClockConfig>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800093c:	f000 f960 	bl	8000c00 <Error_Handler>
  }
}
 8000940:	bf00      	nop
 8000942:	3750      	adds	r7, #80	; 0x50
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40023800 	.word	0x40023800
 800094c:	40007000 	.word	0x40007000

08000950 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b096      	sub	sp, #88	; 0x58
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000956:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000964:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800096e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	60da      	str	r2, [r3, #12]
 800097c:	611a      	str	r2, [r3, #16]
 800097e:	615a      	str	r2, [r3, #20]
 8000980:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	2220      	movs	r2, #32
 8000986:	2100      	movs	r1, #0
 8000988:	4618      	mov	r0, r3
 800098a:	f003 f925 	bl	8003bd8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800098e:	4b3e      	ldr	r3, [pc, #248]	; (8000a88 <MX_TIM1_Init+0x138>)
 8000990:	4a3e      	ldr	r2, [pc, #248]	; (8000a8c <MX_TIM1_Init+0x13c>)
 8000992:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000994:	4b3c      	ldr	r3, [pc, #240]	; (8000a88 <MX_TIM1_Init+0x138>)
 8000996:	2200      	movs	r2, #0
 8000998:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800099a:	4b3b      	ldr	r3, [pc, #236]	; (8000a88 <MX_TIM1_Init+0x138>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 80009a0:	4b39      	ldr	r3, [pc, #228]	; (8000a88 <MX_TIM1_Init+0x138>)
 80009a2:	2259      	movs	r2, #89	; 0x59
 80009a4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a6:	4b38      	ldr	r3, [pc, #224]	; (8000a88 <MX_TIM1_Init+0x138>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009ac:	4b36      	ldr	r3, [pc, #216]	; (8000a88 <MX_TIM1_Init+0x138>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b2:	4b35      	ldr	r3, [pc, #212]	; (8000a88 <MX_TIM1_Init+0x138>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009b8:	4833      	ldr	r0, [pc, #204]	; (8000a88 <MX_TIM1_Init+0x138>)
 80009ba:	f001 fe85 	bl	80026c8 <HAL_TIM_Base_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80009c4:	f000 f91c 	bl	8000c00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009cc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80009d2:	4619      	mov	r1, r3
 80009d4:	482c      	ldr	r0, [pc, #176]	; (8000a88 <MX_TIM1_Init+0x138>)
 80009d6:	f002 f991 	bl	8002cfc <HAL_TIM_ConfigClockSource>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80009e0:	f000 f90e 	bl	8000c00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009e4:	4828      	ldr	r0, [pc, #160]	; (8000a88 <MX_TIM1_Init+0x138>)
 80009e6:	f001 febe 	bl	8002766 <HAL_TIM_PWM_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80009f0:	f000 f906 	bl	8000c00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f4:	2300      	movs	r3, #0
 80009f6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f8:	2300      	movs	r3, #0
 80009fa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a00:	4619      	mov	r1, r3
 8000a02:	4821      	ldr	r0, [pc, #132]	; (8000a88 <MX_TIM1_Init+0x138>)
 8000a04:	f002 fde8 	bl	80035d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000a0e:	f000 f8f7 	bl	8000c00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a12:	2360      	movs	r3, #96	; 0x60
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 40;
 8000a16:	2328      	movs	r3, #40	; 0x28
 8000a18:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a22:	2300      	movs	r3, #0
 8000a24:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a26:	2300      	movs	r3, #0
 8000a28:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a32:	2200      	movs	r2, #0
 8000a34:	4619      	mov	r1, r3
 8000a36:	4814      	ldr	r0, [pc, #80]	; (8000a88 <MX_TIM1_Init+0x138>)
 8000a38:	f002 f89e 	bl	8002b78 <HAL_TIM_PWM_ConfigChannel>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000a42:	f000 f8dd 	bl	8000c00 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a46:	2300      	movs	r3, #0
 8000a48:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a56:	2300      	movs	r3, #0
 8000a58:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a5e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a60:	2300      	movs	r3, #0
 8000a62:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	4619      	mov	r1, r3
 8000a68:	4807      	ldr	r0, [pc, #28]	; (8000a88 <MX_TIM1_Init+0x138>)
 8000a6a:	f002 fe23 	bl	80036b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000a74:	f000 f8c4 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a78:	4803      	ldr	r0, [pc, #12]	; (8000a88 <MX_TIM1_Init+0x138>)
 8000a7a:	f000 f943 	bl	8000d04 <HAL_TIM_MspPostInit>

}
 8000a7e:	bf00      	nop
 8000a80:	3758      	adds	r7, #88	; 0x58
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	200000f8 	.word	0x200000f8
 8000a8c:	40010000 	.word	0x40010000

08000a90 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a94:	4b11      	ldr	r3, [pc, #68]	; (8000adc <MX_USART2_UART_Init+0x4c>)
 8000a96:	4a12      	ldr	r2, [pc, #72]	; (8000ae0 <MX_USART2_UART_Init+0x50>)
 8000a98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a9a:	4b10      	ldr	r3, [pc, #64]	; (8000adc <MX_USART2_UART_Init+0x4c>)
 8000a9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aa0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <MX_USART2_UART_Init+0x4c>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <MX_USART2_UART_Init+0x4c>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aae:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <MX_USART2_UART_Init+0x4c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ab4:	4b09      	ldr	r3, [pc, #36]	; (8000adc <MX_USART2_UART_Init+0x4c>)
 8000ab6:	220c      	movs	r2, #12
 8000ab8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aba:	4b08      	ldr	r3, [pc, #32]	; (8000adc <MX_USART2_UART_Init+0x4c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <MX_USART2_UART_Init+0x4c>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ac6:	4805      	ldr	r0, [pc, #20]	; (8000adc <MX_USART2_UART_Init+0x4c>)
 8000ac8:	f002 fe46 	bl	8003758 <HAL_UART_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ad2:	f000 f895 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000140 	.word	0x20000140
 8000ae0:	40004400 	.word	0x40004400

08000ae4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	607b      	str	r3, [r7, #4]
 8000aee:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <MX_DMA_Init+0x3c>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a0b      	ldr	r2, [pc, #44]	; (8000b20 <MX_DMA_Init+0x3c>)
 8000af4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <MX_DMA_Init+0x3c>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2100      	movs	r1, #0
 8000b0a:	2039      	movs	r0, #57	; 0x39
 8000b0c:	f000 fc23 	bl	8001356 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000b10:	2039      	movs	r0, #57	; 0x39
 8000b12:	f000 fc3c 	bl	800138e <HAL_NVIC_EnableIRQ>

}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40023800 	.word	0x40023800

08000b24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08a      	sub	sp, #40	; 0x28
 8000b28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
 8000b36:	60da      	str	r2, [r3, #12]
 8000b38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	613b      	str	r3, [r7, #16]
 8000b3e:	4b2d      	ldr	r3, [pc, #180]	; (8000bf4 <MX_GPIO_Init+0xd0>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a2c      	ldr	r2, [pc, #176]	; (8000bf4 <MX_GPIO_Init+0xd0>)
 8000b44:	f043 0304 	orr.w	r3, r3, #4
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b2a      	ldr	r3, [pc, #168]	; (8000bf4 <MX_GPIO_Init+0xd0>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0304 	and.w	r3, r3, #4
 8000b52:	613b      	str	r3, [r7, #16]
 8000b54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	4b26      	ldr	r3, [pc, #152]	; (8000bf4 <MX_GPIO_Init+0xd0>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a25      	ldr	r2, [pc, #148]	; (8000bf4 <MX_GPIO_Init+0xd0>)
 8000b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b23      	ldr	r3, [pc, #140]	; (8000bf4 <MX_GPIO_Init+0xd0>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	4b1f      	ldr	r3, [pc, #124]	; (8000bf4 <MX_GPIO_Init+0xd0>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a1e      	ldr	r2, [pc, #120]	; (8000bf4 <MX_GPIO_Init+0xd0>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b1c      	ldr	r3, [pc, #112]	; (8000bf4 <MX_GPIO_Init+0xd0>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	60bb      	str	r3, [r7, #8]
 8000b8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	4b18      	ldr	r3, [pc, #96]	; (8000bf4 <MX_GPIO_Init+0xd0>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4a17      	ldr	r2, [pc, #92]	; (8000bf4 <MX_GPIO_Init+0xd0>)
 8000b98:	f043 0302 	orr.w	r3, r3, #2
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <MX_GPIO_Init+0xd0>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0302 	and.w	r3, r3, #2
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2120      	movs	r1, #32
 8000bae:	4812      	ldr	r0, [pc, #72]	; (8000bf8 <MX_GPIO_Init+0xd4>)
 8000bb0:	f001 f8fc 	bl	8001dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bba:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000bbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	4619      	mov	r1, r3
 8000bca:	480c      	ldr	r0, [pc, #48]	; (8000bfc <MX_GPIO_Init+0xd8>)
 8000bcc:	f000 ff6a 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bd0:	2320      	movs	r3, #32
 8000bd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	4619      	mov	r1, r3
 8000be6:	4804      	ldr	r0, [pc, #16]	; (8000bf8 <MX_GPIO_Init+0xd4>)
 8000be8:	f000 ff5c 	bl	8001aa4 <HAL_GPIO_Init>

}
 8000bec:	bf00      	nop
 8000bee:	3728      	adds	r7, #40	; 0x28
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	40020000 	.word	0x40020000
 8000bfc:	40020800 	.word	0x40020800

08000c00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c04:	b672      	cpsid	i
}
 8000c06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <Error_Handler+0x8>
	...

08000c0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	607b      	str	r3, [r7, #4]
 8000c16:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <HAL_MspInit+0x4c>)
 8000c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1a:	4a0f      	ldr	r2, [pc, #60]	; (8000c58 <HAL_MspInit+0x4c>)
 8000c1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c20:	6453      	str	r3, [r2, #68]	; 0x44
 8000c22:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <HAL_MspInit+0x4c>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	603b      	str	r3, [r7, #0]
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <HAL_MspInit+0x4c>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	4a08      	ldr	r2, [pc, #32]	; (8000c58 <HAL_MspInit+0x4c>)
 8000c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_MspInit+0x4c>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c46:	603b      	str	r3, [r7, #0]
 8000c48:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c4a:	2007      	movs	r0, #7
 8000c4c:	f000 fb78 	bl	8001340 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c50:	bf00      	nop
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40023800 	.word	0x40023800

08000c5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a22      	ldr	r2, [pc, #136]	; (8000cf4 <HAL_TIM_Base_MspInit+0x98>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d13e      	bne.n	8000cec <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	4b21      	ldr	r3, [pc, #132]	; (8000cf8 <HAL_TIM_Base_MspInit+0x9c>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c76:	4a20      	ldr	r2, [pc, #128]	; (8000cf8 <HAL_TIM_Base_MspInit+0x9c>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c7e:	4b1e      	ldr	r3, [pc, #120]	; (8000cf8 <HAL_TIM_Base_MspInit+0x9c>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8000c8a:	4b1c      	ldr	r3, [pc, #112]	; (8000cfc <HAL_TIM_Base_MspInit+0xa0>)
 8000c8c:	4a1c      	ldr	r2, [pc, #112]	; (8000d00 <HAL_TIM_Base_MspInit+0xa4>)
 8000c8e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8000c90:	4b1a      	ldr	r3, [pc, #104]	; (8000cfc <HAL_TIM_Base_MspInit+0xa0>)
 8000c92:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000c96:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c98:	4b18      	ldr	r3, [pc, #96]	; (8000cfc <HAL_TIM_Base_MspInit+0xa0>)
 8000c9a:	2240      	movs	r2, #64	; 0x40
 8000c9c:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c9e:	4b17      	ldr	r3, [pc, #92]	; (8000cfc <HAL_TIM_Base_MspInit+0xa0>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000ca4:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <HAL_TIM_Base_MspInit+0xa0>)
 8000ca6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000caa:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cac:	4b13      	ldr	r3, [pc, #76]	; (8000cfc <HAL_TIM_Base_MspInit+0xa0>)
 8000cae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000cb2:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cb4:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <HAL_TIM_Base_MspInit+0xa0>)
 8000cb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cba:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8000cbc:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <HAL_TIM_Base_MspInit+0xa0>)
 8000cbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cc2:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000cc4:	4b0d      	ldr	r3, [pc, #52]	; (8000cfc <HAL_TIM_Base_MspInit+0xa0>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <HAL_TIM_Base_MspInit+0xa0>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000cd0:	480a      	ldr	r0, [pc, #40]	; (8000cfc <HAL_TIM_Base_MspInit+0xa0>)
 8000cd2:	f000 fb77 	bl	80013c4 <HAL_DMA_Init>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8000cdc:	f7ff ff90 	bl	8000c00 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4a06      	ldr	r2, [pc, #24]	; (8000cfc <HAL_TIM_Base_MspInit+0xa0>)
 8000ce4:	625a      	str	r2, [r3, #36]	; 0x24
 8000ce6:	4a05      	ldr	r2, [pc, #20]	; (8000cfc <HAL_TIM_Base_MspInit+0xa0>)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000cec:	bf00      	nop
 8000cee:	3710      	adds	r7, #16
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40010000 	.word	0x40010000
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	20000098 	.word	0x20000098
 8000d00:	40026428 	.word	0x40026428

08000d04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b088      	sub	sp, #32
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 030c 	add.w	r3, r7, #12
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a12      	ldr	r2, [pc, #72]	; (8000d6c <HAL_TIM_MspPostInit+0x68>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d11e      	bne.n	8000d64 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <HAL_TIM_MspPostInit+0x6c>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	4a10      	ldr	r2, [pc, #64]	; (8000d70 <HAL_TIM_MspPostInit+0x6c>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	6313      	str	r3, [r2, #48]	; 0x30
 8000d36:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <HAL_TIM_MspPostInit+0x6c>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	60bb      	str	r3, [r7, #8]
 8000d40:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d46:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d54:	2301      	movs	r3, #1
 8000d56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d58:	f107 030c 	add.w	r3, r7, #12
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4805      	ldr	r0, [pc, #20]	; (8000d74 <HAL_TIM_MspPostInit+0x70>)
 8000d60:	f000 fea0 	bl	8001aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d64:	bf00      	nop
 8000d66:	3720      	adds	r7, #32
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40010000 	.word	0x40010000
 8000d70:	40023800 	.word	0x40023800
 8000d74:	40020000 	.word	0x40020000

08000d78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08a      	sub	sp, #40	; 0x28
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a19      	ldr	r2, [pc, #100]	; (8000dfc <HAL_UART_MspInit+0x84>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d12b      	bne.n	8000df2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	4b18      	ldr	r3, [pc, #96]	; (8000e00 <HAL_UART_MspInit+0x88>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da2:	4a17      	ldr	r2, [pc, #92]	; (8000e00 <HAL_UART_MspInit+0x88>)
 8000da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da8:	6413      	str	r3, [r2, #64]	; 0x40
 8000daa:	4b15      	ldr	r3, [pc, #84]	; (8000e00 <HAL_UART_MspInit+0x88>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <HAL_UART_MspInit+0x88>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	4a10      	ldr	r2, [pc, #64]	; (8000e00 <HAL_UART_MspInit+0x88>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <HAL_UART_MspInit+0x88>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000dd2:	230c      	movs	r3, #12
 8000dd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dde:	2303      	movs	r3, #3
 8000de0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000de2:	2307      	movs	r3, #7
 8000de4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de6:	f107 0314 	add.w	r3, r7, #20
 8000dea:	4619      	mov	r1, r3
 8000dec:	4805      	ldr	r0, [pc, #20]	; (8000e04 <HAL_UART_MspInit+0x8c>)
 8000dee:	f000 fe59 	bl	8001aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000df2:	bf00      	nop
 8000df4:	3728      	adds	r7, #40	; 0x28
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40004400 	.word	0x40004400
 8000e00:	40023800 	.word	0x40023800
 8000e04:	40020000 	.word	0x40020000

08000e08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <NMI_Handler+0x4>

08000e0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e12:	e7fe      	b.n	8000e12 <HardFault_Handler+0x4>

08000e14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e18:	e7fe      	b.n	8000e18 <MemManage_Handler+0x4>

08000e1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e1e:	e7fe      	b.n	8000e1e <BusFault_Handler+0x4>

08000e20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <UsageFault_Handler+0x4>

08000e26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e54:	f000 f960 	bl	8001118 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000e60:	4802      	ldr	r0, [pc, #8]	; (8000e6c <DMA2_Stream1_IRQHandler+0x10>)
 8000e62:	f000 fbb5 	bl	80015d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000098 	.word	0x20000098

08000e70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
	return 1;
 8000e74:	2301      	movs	r3, #1
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <_kill>:

int _kill(int pid, int sig)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000e8a:	f002 fe7b 	bl	8003b84 <__errno>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2216      	movs	r2, #22
 8000e92:	601a      	str	r2, [r3, #0]
	return -1;
 8000e94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <_exit>:

void _exit (int status)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000ea8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f7ff ffe7 	bl	8000e80 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000eb2:	e7fe      	b.n	8000eb2 <_exit+0x12>

08000eb4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]
 8000ec4:	e00a      	b.n	8000edc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ec6:	f3af 8000 	nop.w
 8000eca:	4601      	mov	r1, r0
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	1c5a      	adds	r2, r3, #1
 8000ed0:	60ba      	str	r2, [r7, #8]
 8000ed2:	b2ca      	uxtb	r2, r1
 8000ed4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	617b      	str	r3, [r7, #20]
 8000edc:	697a      	ldr	r2, [r7, #20]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	dbf0      	blt.n	8000ec6 <_read+0x12>
	}

return len;
 8000ee4:	687b      	ldr	r3, [r7, #4]
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3718      	adds	r7, #24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b086      	sub	sp, #24
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	60f8      	str	r0, [r7, #12]
 8000ef6:	60b9      	str	r1, [r7, #8]
 8000ef8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000efa:	2300      	movs	r3, #0
 8000efc:	617b      	str	r3, [r7, #20]
 8000efe:	e009      	b.n	8000f14 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	1c5a      	adds	r2, r3, #1
 8000f04:	60ba      	str	r2, [r7, #8]
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	3301      	adds	r3, #1
 8000f12:	617b      	str	r3, [r7, #20]
 8000f14:	697a      	ldr	r2, [r7, #20]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	dbf1      	blt.n	8000f00 <_write+0x12>
	}
	return len;
 8000f1c:	687b      	ldr	r3, [r7, #4]
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3718      	adds	r7, #24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <_close>:

int _close(int file)
{
 8000f26:	b480      	push	{r7}
 8000f28:	b083      	sub	sp, #12
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
	return -1;
 8000f2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	b083      	sub	sp, #12
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
 8000f46:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f4e:	605a      	str	r2, [r3, #4]
	return 0;
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <_isatty>:

int _isatty(int file)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	b083      	sub	sp, #12
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
	return 1;
 8000f66:	2301      	movs	r3, #1
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
	return 0;
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3714      	adds	r7, #20
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
	...

08000f90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f98:	4a14      	ldr	r2, [pc, #80]	; (8000fec <_sbrk+0x5c>)
 8000f9a:	4b15      	ldr	r3, [pc, #84]	; (8000ff0 <_sbrk+0x60>)
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fa4:	4b13      	ldr	r3, [pc, #76]	; (8000ff4 <_sbrk+0x64>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d102      	bne.n	8000fb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fac:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <_sbrk+0x64>)
 8000fae:	4a12      	ldr	r2, [pc, #72]	; (8000ff8 <_sbrk+0x68>)
 8000fb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fb2:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <_sbrk+0x64>)
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4413      	add	r3, r2
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d207      	bcs.n	8000fd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fc0:	f002 fde0 	bl	8003b84 <__errno>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	220c      	movs	r2, #12
 8000fc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fce:	e009      	b.n	8000fe4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fd0:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <_sbrk+0x64>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fd6:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <_sbrk+0x64>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4413      	add	r3, r2
 8000fde:	4a05      	ldr	r2, [pc, #20]	; (8000ff4 <_sbrk+0x64>)
 8000fe0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3718      	adds	r7, #24
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20020000 	.word	0x20020000
 8000ff0:	00000400 	.word	0x00000400
 8000ff4:	2000008c 	.word	0x2000008c
 8000ff8:	20000198 	.word	0x20000198

08000ffc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001000:	4b06      	ldr	r3, [pc, #24]	; (800101c <SystemInit+0x20>)
 8001002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001006:	4a05      	ldr	r2, [pc, #20]	; (800101c <SystemInit+0x20>)
 8001008:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800100c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001020:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001058 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001024:	480d      	ldr	r0, [pc, #52]	; (800105c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001026:	490e      	ldr	r1, [pc, #56]	; (8001060 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001028:	4a0e      	ldr	r2, [pc, #56]	; (8001064 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800102a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800102c:	e002      	b.n	8001034 <LoopCopyDataInit>

0800102e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800102e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001030:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001032:	3304      	adds	r3, #4

08001034 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001034:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001036:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001038:	d3f9      	bcc.n	800102e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800103a:	4a0b      	ldr	r2, [pc, #44]	; (8001068 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800103c:	4c0b      	ldr	r4, [pc, #44]	; (800106c <LoopFillZerobss+0x26>)
  movs r3, #0
 800103e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001040:	e001      	b.n	8001046 <LoopFillZerobss>

08001042 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001042:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001044:	3204      	adds	r2, #4

08001046 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001046:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001048:	d3fb      	bcc.n	8001042 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800104a:	f7ff ffd7 	bl	8000ffc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800104e:	f002 fd9f 	bl	8003b90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001052:	f7ff faa5 	bl	80005a0 <main>
  bx  lr    
 8001056:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001058:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800105c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001060:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001064:	08004d80 	.word	0x08004d80
  ldr r2, =_sbss
 8001068:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800106c:	20000198 	.word	0x20000198

08001070 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001070:	e7fe      	b.n	8001070 <ADC_IRQHandler>
	...

08001074 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001078:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <HAL_Init+0x40>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a0d      	ldr	r2, [pc, #52]	; (80010b4 <HAL_Init+0x40>)
 800107e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001082:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001084:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <HAL_Init+0x40>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a0a      	ldr	r2, [pc, #40]	; (80010b4 <HAL_Init+0x40>)
 800108a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800108e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001090:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <HAL_Init+0x40>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a07      	ldr	r2, [pc, #28]	; (80010b4 <HAL_Init+0x40>)
 8001096:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800109a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800109c:	2003      	movs	r0, #3
 800109e:	f000 f94f 	bl	8001340 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010a2:	2000      	movs	r0, #0
 80010a4:	f000 f808 	bl	80010b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010a8:	f7ff fdb0 	bl	8000c0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40023c00 	.word	0x40023c00

080010b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010c0:	4b12      	ldr	r3, [pc, #72]	; (800110c <HAL_InitTick+0x54>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	4b12      	ldr	r3, [pc, #72]	; (8001110 <HAL_InitTick+0x58>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	4619      	mov	r1, r3
 80010ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80010d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010d6:	4618      	mov	r0, r3
 80010d8:	f000 f967 	bl	80013aa <HAL_SYSTICK_Config>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e00e      	b.n	8001104 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2b0f      	cmp	r3, #15
 80010ea:	d80a      	bhi.n	8001102 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ec:	2200      	movs	r2, #0
 80010ee:	6879      	ldr	r1, [r7, #4]
 80010f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010f4:	f000 f92f 	bl	8001356 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010f8:	4a06      	ldr	r2, [pc, #24]	; (8001114 <HAL_InitTick+0x5c>)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010fe:	2300      	movs	r3, #0
 8001100:	e000      	b.n	8001104 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
}
 8001104:	4618      	mov	r0, r3
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20000000 	.word	0x20000000
 8001110:	20000008 	.word	0x20000008
 8001114:	20000004 	.word	0x20000004

08001118 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <HAL_IncTick+0x20>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	461a      	mov	r2, r3
 8001122:	4b06      	ldr	r3, [pc, #24]	; (800113c <HAL_IncTick+0x24>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4413      	add	r3, r2
 8001128:	4a04      	ldr	r2, [pc, #16]	; (800113c <HAL_IncTick+0x24>)
 800112a:	6013      	str	r3, [r2, #0]
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	20000008 	.word	0x20000008
 800113c:	20000184 	.word	0x20000184

08001140 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  return uwTick;
 8001144:	4b03      	ldr	r3, [pc, #12]	; (8001154 <HAL_GetTick+0x14>)
 8001146:	681b      	ldr	r3, [r3, #0]
}
 8001148:	4618      	mov	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	20000184 	.word	0x20000184

08001158 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001160:	f7ff ffee 	bl	8001140 <HAL_GetTick>
 8001164:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001170:	d005      	beq.n	800117e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001172:	4b0a      	ldr	r3, [pc, #40]	; (800119c <HAL_Delay+0x44>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	461a      	mov	r2, r3
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	4413      	add	r3, r2
 800117c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800117e:	bf00      	nop
 8001180:	f7ff ffde 	bl	8001140 <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	68fa      	ldr	r2, [r7, #12]
 800118c:	429a      	cmp	r2, r3
 800118e:	d8f7      	bhi.n	8001180 <HAL_Delay+0x28>
  {
  }
}
 8001190:	bf00      	nop
 8001192:	bf00      	nop
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000008 	.word	0x20000008

080011a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011b0:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <__NVIC_SetPriorityGrouping+0x44>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011b6:	68ba      	ldr	r2, [r7, #8]
 80011b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011bc:	4013      	ands	r3, r2
 80011be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011d2:	4a04      	ldr	r2, [pc, #16]	; (80011e4 <__NVIC_SetPriorityGrouping+0x44>)
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	60d3      	str	r3, [r2, #12]
}
 80011d8:	bf00      	nop
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011ec:	4b04      	ldr	r3, [pc, #16]	; (8001200 <__NVIC_GetPriorityGrouping+0x18>)
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	0a1b      	lsrs	r3, r3, #8
 80011f2:	f003 0307 	and.w	r3, r3, #7
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	2b00      	cmp	r3, #0
 8001214:	db0b      	blt.n	800122e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	f003 021f 	and.w	r2, r3, #31
 800121c:	4907      	ldr	r1, [pc, #28]	; (800123c <__NVIC_EnableIRQ+0x38>)
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	095b      	lsrs	r3, r3, #5
 8001224:	2001      	movs	r0, #1
 8001226:	fa00 f202 	lsl.w	r2, r0, r2
 800122a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	e000e100 	.word	0xe000e100

08001240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	6039      	str	r1, [r7, #0]
 800124a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800124c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001250:	2b00      	cmp	r3, #0
 8001252:	db0a      	blt.n	800126a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	b2da      	uxtb	r2, r3
 8001258:	490c      	ldr	r1, [pc, #48]	; (800128c <__NVIC_SetPriority+0x4c>)
 800125a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125e:	0112      	lsls	r2, r2, #4
 8001260:	b2d2      	uxtb	r2, r2
 8001262:	440b      	add	r3, r1
 8001264:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001268:	e00a      	b.n	8001280 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	b2da      	uxtb	r2, r3
 800126e:	4908      	ldr	r1, [pc, #32]	; (8001290 <__NVIC_SetPriority+0x50>)
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	f003 030f 	and.w	r3, r3, #15
 8001276:	3b04      	subs	r3, #4
 8001278:	0112      	lsls	r2, r2, #4
 800127a:	b2d2      	uxtb	r2, r2
 800127c:	440b      	add	r3, r1
 800127e:	761a      	strb	r2, [r3, #24]
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	e000e100 	.word	0xe000e100
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001294:	b480      	push	{r7}
 8001296:	b089      	sub	sp, #36	; 0x24
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f003 0307 	and.w	r3, r3, #7
 80012a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	f1c3 0307 	rsb	r3, r3, #7
 80012ae:	2b04      	cmp	r3, #4
 80012b0:	bf28      	it	cs
 80012b2:	2304      	movcs	r3, #4
 80012b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	3304      	adds	r3, #4
 80012ba:	2b06      	cmp	r3, #6
 80012bc:	d902      	bls.n	80012c4 <NVIC_EncodePriority+0x30>
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3b03      	subs	r3, #3
 80012c2:	e000      	b.n	80012c6 <NVIC_EncodePriority+0x32>
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43da      	mvns	r2, r3
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	401a      	ands	r2, r3
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	fa01 f303 	lsl.w	r3, r1, r3
 80012e6:	43d9      	mvns	r1, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ec:	4313      	orrs	r3, r2
         );
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3724      	adds	r7, #36	; 0x24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
	...

080012fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3b01      	subs	r3, #1
 8001308:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800130c:	d301      	bcc.n	8001312 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800130e:	2301      	movs	r3, #1
 8001310:	e00f      	b.n	8001332 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001312:	4a0a      	ldr	r2, [pc, #40]	; (800133c <SysTick_Config+0x40>)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	3b01      	subs	r3, #1
 8001318:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800131a:	210f      	movs	r1, #15
 800131c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001320:	f7ff ff8e 	bl	8001240 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001324:	4b05      	ldr	r3, [pc, #20]	; (800133c <SysTick_Config+0x40>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800132a:	4b04      	ldr	r3, [pc, #16]	; (800133c <SysTick_Config+0x40>)
 800132c:	2207      	movs	r2, #7
 800132e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	e000e010 	.word	0xe000e010

08001340 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f7ff ff29 	bl	80011a0 <__NVIC_SetPriorityGrouping>
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001356:	b580      	push	{r7, lr}
 8001358:	b086      	sub	sp, #24
 800135a:	af00      	add	r7, sp, #0
 800135c:	4603      	mov	r3, r0
 800135e:	60b9      	str	r1, [r7, #8]
 8001360:	607a      	str	r2, [r7, #4]
 8001362:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001368:	f7ff ff3e 	bl	80011e8 <__NVIC_GetPriorityGrouping>
 800136c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	68b9      	ldr	r1, [r7, #8]
 8001372:	6978      	ldr	r0, [r7, #20]
 8001374:	f7ff ff8e 	bl	8001294 <NVIC_EncodePriority>
 8001378:	4602      	mov	r2, r0
 800137a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800137e:	4611      	mov	r1, r2
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff ff5d 	bl	8001240 <__NVIC_SetPriority>
}
 8001386:	bf00      	nop
 8001388:	3718      	adds	r7, #24
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	4603      	mov	r3, r0
 8001396:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff ff31 	bl	8001204 <__NVIC_EnableIRQ>
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b082      	sub	sp, #8
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff ffa2 	bl	80012fc <SysTick_Config>
 80013b8:	4603      	mov	r3, r0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
	...

080013c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80013d0:	f7ff feb6 	bl	8001140 <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d101      	bne.n	80013e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e099      	b.n	8001514 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2202      	movs	r2, #2
 80013e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2200      	movs	r2, #0
 80013ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f022 0201 	bic.w	r2, r2, #1
 80013fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001400:	e00f      	b.n	8001422 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001402:	f7ff fe9d 	bl	8001140 <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b05      	cmp	r3, #5
 800140e:	d908      	bls.n	8001422 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2220      	movs	r2, #32
 8001414:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2203      	movs	r2, #3
 800141a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e078      	b.n	8001514 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	2b00      	cmp	r3, #0
 800142e:	d1e8      	bne.n	8001402 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001438:	697a      	ldr	r2, [r7, #20]
 800143a:	4b38      	ldr	r3, [pc, #224]	; (800151c <HAL_DMA_Init+0x158>)
 800143c:	4013      	ands	r3, r2
 800143e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685a      	ldr	r2, [r3, #4]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800144e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	691b      	ldr	r3, [r3, #16]
 8001454:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800145a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001466:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a1b      	ldr	r3, [r3, #32]
 800146c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800146e:	697a      	ldr	r2, [r7, #20]
 8001470:	4313      	orrs	r3, r2
 8001472:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001478:	2b04      	cmp	r3, #4
 800147a:	d107      	bne.n	800148c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001484:	4313      	orrs	r3, r2
 8001486:	697a      	ldr	r2, [r7, #20]
 8001488:	4313      	orrs	r3, r2
 800148a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	697a      	ldr	r2, [r7, #20]
 8001492:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	695b      	ldr	r3, [r3, #20]
 800149a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	f023 0307 	bic.w	r3, r3, #7
 80014a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a8:	697a      	ldr	r2, [r7, #20]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b2:	2b04      	cmp	r3, #4
 80014b4:	d117      	bne.n	80014e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ba:	697a      	ldr	r2, [r7, #20]
 80014bc:	4313      	orrs	r3, r2
 80014be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d00e      	beq.n	80014e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f000 fa6f 	bl	80019ac <DMA_CheckFifoParam>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d008      	beq.n	80014e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2240      	movs	r2, #64	; 0x40
 80014d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2201      	movs	r2, #1
 80014de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80014e2:	2301      	movs	r3, #1
 80014e4:	e016      	b.n	8001514 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	697a      	ldr	r2, [r7, #20]
 80014ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f000 fa26 	bl	8001940 <DMA_CalcBaseAndBitshift>
 80014f4:	4603      	mov	r3, r0
 80014f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014fc:	223f      	movs	r2, #63	; 0x3f
 80014fe:	409a      	lsls	r2, r3
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2201      	movs	r2, #1
 800150e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001512:	2300      	movs	r3, #0
}
 8001514:	4618      	mov	r0, r3
 8001516:	3718      	adds	r7, #24
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	f010803f 	.word	0xf010803f

08001520 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
 800152c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800152e:	2300      	movs	r3, #0
 8001530:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001536:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800153e:	2b01      	cmp	r3, #1
 8001540:	d101      	bne.n	8001546 <HAL_DMA_Start_IT+0x26>
 8001542:	2302      	movs	r3, #2
 8001544:	e040      	b.n	80015c8 <HAL_DMA_Start_IT+0xa8>
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	2201      	movs	r2, #1
 800154a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b01      	cmp	r3, #1
 8001558:	d12f      	bne.n	80015ba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	2202      	movs	r2, #2
 800155e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	2200      	movs	r2, #0
 8001566:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	68b9      	ldr	r1, [r7, #8]
 800156e:	68f8      	ldr	r0, [r7, #12]
 8001570:	f000 f9b8 	bl	80018e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001578:	223f      	movs	r2, #63	; 0x3f
 800157a:	409a      	lsls	r2, r3
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f042 0216 	orr.w	r2, r2, #22
 800158e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001594:	2b00      	cmp	r3, #0
 8001596:	d007      	beq.n	80015a8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f042 0208 	orr.w	r2, r2, #8
 80015a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f042 0201 	orr.w	r2, r2, #1
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	e005      	b.n	80015c6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80015c2:	2302      	movs	r3, #2
 80015c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80015c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3718      	adds	r7, #24
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80015d8:	2300      	movs	r3, #0
 80015da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80015dc:	4b92      	ldr	r3, [pc, #584]	; (8001828 <HAL_DMA_IRQHandler+0x258>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a92      	ldr	r2, [pc, #584]	; (800182c <HAL_DMA_IRQHandler+0x25c>)
 80015e2:	fba2 2303 	umull	r2, r3, r2, r3
 80015e6:	0a9b      	lsrs	r3, r3, #10
 80015e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015fa:	2208      	movs	r2, #8
 80015fc:	409a      	lsls	r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	4013      	ands	r3, r2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d01a      	beq.n	800163c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	2b00      	cmp	r3, #0
 8001612:	d013      	beq.n	800163c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f022 0204 	bic.w	r2, r2, #4
 8001622:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001628:	2208      	movs	r2, #8
 800162a:	409a      	lsls	r2, r3
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001634:	f043 0201 	orr.w	r2, r3, #1
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001640:	2201      	movs	r2, #1
 8001642:	409a      	lsls	r2, r3
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	4013      	ands	r3, r2
 8001648:	2b00      	cmp	r3, #0
 800164a:	d012      	beq.n	8001672 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001656:	2b00      	cmp	r3, #0
 8001658:	d00b      	beq.n	8001672 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800165e:	2201      	movs	r2, #1
 8001660:	409a      	lsls	r2, r3
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800166a:	f043 0202 	orr.w	r2, r3, #2
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001676:	2204      	movs	r2, #4
 8001678:	409a      	lsls	r2, r3
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	4013      	ands	r3, r2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d012      	beq.n	80016a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0302 	and.w	r3, r3, #2
 800168c:	2b00      	cmp	r3, #0
 800168e:	d00b      	beq.n	80016a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001694:	2204      	movs	r2, #4
 8001696:	409a      	lsls	r2, r3
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016a0:	f043 0204 	orr.w	r2, r3, #4
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ac:	2210      	movs	r2, #16
 80016ae:	409a      	lsls	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	4013      	ands	r3, r2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d043      	beq.n	8001740 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0308 	and.w	r3, r3, #8
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d03c      	beq.n	8001740 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ca:	2210      	movs	r2, #16
 80016cc:	409a      	lsls	r2, r3
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d018      	beq.n	8001712 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d108      	bne.n	8001700 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d024      	beq.n	8001740 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	4798      	blx	r3
 80016fe:	e01f      	b.n	8001740 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001704:	2b00      	cmp	r3, #0
 8001706:	d01b      	beq.n	8001740 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	4798      	blx	r3
 8001710:	e016      	b.n	8001740 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800171c:	2b00      	cmp	r3, #0
 800171e:	d107      	bne.n	8001730 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f022 0208 	bic.w	r2, r2, #8
 800172e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001734:	2b00      	cmp	r3, #0
 8001736:	d003      	beq.n	8001740 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001744:	2220      	movs	r2, #32
 8001746:	409a      	lsls	r2, r3
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	4013      	ands	r3, r2
 800174c:	2b00      	cmp	r3, #0
 800174e:	f000 808e 	beq.w	800186e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0310 	and.w	r3, r3, #16
 800175c:	2b00      	cmp	r3, #0
 800175e:	f000 8086 	beq.w	800186e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001766:	2220      	movs	r2, #32
 8001768:	409a      	lsls	r2, r3
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b05      	cmp	r3, #5
 8001778:	d136      	bne.n	80017e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f022 0216 	bic.w	r2, r2, #22
 8001788:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	695a      	ldr	r2, [r3, #20]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001798:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d103      	bne.n	80017aa <HAL_DMA_IRQHandler+0x1da>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d007      	beq.n	80017ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f022 0208 	bic.w	r2, r2, #8
 80017b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017be:	223f      	movs	r2, #63	; 0x3f
 80017c0:	409a      	lsls	r2, r3
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2201      	movs	r2, #1
 80017ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d07d      	beq.n	80018da <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	4798      	blx	r3
        }
        return;
 80017e6:	e078      	b.n	80018da <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d01c      	beq.n	8001830 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d108      	bne.n	8001816 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001808:	2b00      	cmp	r3, #0
 800180a:	d030      	beq.n	800186e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	4798      	blx	r3
 8001814:	e02b      	b.n	800186e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800181a:	2b00      	cmp	r3, #0
 800181c:	d027      	beq.n	800186e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	4798      	blx	r3
 8001826:	e022      	b.n	800186e <HAL_DMA_IRQHandler+0x29e>
 8001828:	20000000 	.word	0x20000000
 800182c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800183a:	2b00      	cmp	r3, #0
 800183c:	d10f      	bne.n	800185e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f022 0210 	bic.w	r2, r2, #16
 800184c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2201      	movs	r2, #1
 8001852:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001872:	2b00      	cmp	r3, #0
 8001874:	d032      	beq.n	80018dc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	2b00      	cmp	r3, #0
 8001880:	d022      	beq.n	80018c8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2205      	movs	r2, #5
 8001886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f022 0201 	bic.w	r2, r2, #1
 8001898:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	3301      	adds	r3, #1
 800189e:	60bb      	str	r3, [r7, #8]
 80018a0:	697a      	ldr	r2, [r7, #20]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d307      	bcc.n	80018b6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0301 	and.w	r3, r3, #1
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d1f2      	bne.n	800189a <HAL_DMA_IRQHandler+0x2ca>
 80018b4:	e000      	b.n	80018b8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80018b6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2201      	movs	r2, #1
 80018bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d005      	beq.n	80018dc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	4798      	blx	r3
 80018d8:	e000      	b.n	80018dc <HAL_DMA_IRQHandler+0x30c>
        return;
 80018da:	bf00      	nop
    }
  }
}
 80018dc:	3718      	adds	r7, #24
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop

080018e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
 80018f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001900:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	2b40      	cmp	r3, #64	; 0x40
 8001910:	d108      	bne.n	8001924 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	68ba      	ldr	r2, [r7, #8]
 8001920:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001922:	e007      	b.n	8001934 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	68ba      	ldr	r2, [r7, #8]
 800192a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	60da      	str	r2, [r3, #12]
}
 8001934:	bf00      	nop
 8001936:	3714      	adds	r7, #20
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	b2db      	uxtb	r3, r3
 800194e:	3b10      	subs	r3, #16
 8001950:	4a14      	ldr	r2, [pc, #80]	; (80019a4 <DMA_CalcBaseAndBitshift+0x64>)
 8001952:	fba2 2303 	umull	r2, r3, r2, r3
 8001956:	091b      	lsrs	r3, r3, #4
 8001958:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800195a:	4a13      	ldr	r2, [pc, #76]	; (80019a8 <DMA_CalcBaseAndBitshift+0x68>)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	4413      	add	r3, r2
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	461a      	mov	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2b03      	cmp	r3, #3
 800196c:	d909      	bls.n	8001982 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001976:	f023 0303 	bic.w	r3, r3, #3
 800197a:	1d1a      	adds	r2, r3, #4
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	659a      	str	r2, [r3, #88]	; 0x58
 8001980:	e007      	b.n	8001992 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800198a:	f023 0303 	bic.w	r3, r3, #3
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001996:	4618      	mov	r0, r3
 8001998:	3714      	adds	r7, #20
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	aaaaaaab 	.word	0xaaaaaaab
 80019a8:	08004c1c 	.word	0x08004c1c

080019ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019b4:	2300      	movs	r3, #0
 80019b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d11f      	bne.n	8001a06 <DMA_CheckFifoParam+0x5a>
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	2b03      	cmp	r3, #3
 80019ca:	d856      	bhi.n	8001a7a <DMA_CheckFifoParam+0xce>
 80019cc:	a201      	add	r2, pc, #4	; (adr r2, 80019d4 <DMA_CheckFifoParam+0x28>)
 80019ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019d2:	bf00      	nop
 80019d4:	080019e5 	.word	0x080019e5
 80019d8:	080019f7 	.word	0x080019f7
 80019dc:	080019e5 	.word	0x080019e5
 80019e0:	08001a7b 	.word	0x08001a7b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d046      	beq.n	8001a7e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019f4:	e043      	b.n	8001a7e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019fe:	d140      	bne.n	8001a82 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a04:	e03d      	b.n	8001a82 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a0e:	d121      	bne.n	8001a54 <DMA_CheckFifoParam+0xa8>
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	2b03      	cmp	r3, #3
 8001a14:	d837      	bhi.n	8001a86 <DMA_CheckFifoParam+0xda>
 8001a16:	a201      	add	r2, pc, #4	; (adr r2, 8001a1c <DMA_CheckFifoParam+0x70>)
 8001a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a1c:	08001a2d 	.word	0x08001a2d
 8001a20:	08001a33 	.word	0x08001a33
 8001a24:	08001a2d 	.word	0x08001a2d
 8001a28:	08001a45 	.word	0x08001a45
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	73fb      	strb	r3, [r7, #15]
      break;
 8001a30:	e030      	b.n	8001a94 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d025      	beq.n	8001a8a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a42:	e022      	b.n	8001a8a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a48:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a4c:	d11f      	bne.n	8001a8e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a52:	e01c      	b.n	8001a8e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d903      	bls.n	8001a62 <DMA_CheckFifoParam+0xb6>
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	2b03      	cmp	r3, #3
 8001a5e:	d003      	beq.n	8001a68 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a60:	e018      	b.n	8001a94 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	73fb      	strb	r3, [r7, #15]
      break;
 8001a66:	e015      	b.n	8001a94 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d00e      	beq.n	8001a92 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	73fb      	strb	r3, [r7, #15]
      break;
 8001a78:	e00b      	b.n	8001a92 <DMA_CheckFifoParam+0xe6>
      break;
 8001a7a:	bf00      	nop
 8001a7c:	e00a      	b.n	8001a94 <DMA_CheckFifoParam+0xe8>
      break;
 8001a7e:	bf00      	nop
 8001a80:	e008      	b.n	8001a94 <DMA_CheckFifoParam+0xe8>
      break;
 8001a82:	bf00      	nop
 8001a84:	e006      	b.n	8001a94 <DMA_CheckFifoParam+0xe8>
      break;
 8001a86:	bf00      	nop
 8001a88:	e004      	b.n	8001a94 <DMA_CheckFifoParam+0xe8>
      break;
 8001a8a:	bf00      	nop
 8001a8c:	e002      	b.n	8001a94 <DMA_CheckFifoParam+0xe8>
      break;   
 8001a8e:	bf00      	nop
 8001a90:	e000      	b.n	8001a94 <DMA_CheckFifoParam+0xe8>
      break;
 8001a92:	bf00      	nop
    }
  } 
  
  return status; 
 8001a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3714      	adds	r7, #20
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop

08001aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b089      	sub	sp, #36	; 0x24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aba:	2300      	movs	r3, #0
 8001abc:	61fb      	str	r3, [r7, #28]
 8001abe:	e159      	b.n	8001d74 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	697a      	ldr	r2, [r7, #20]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	f040 8148 	bne.w	8001d6e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f003 0303 	and.w	r3, r3, #3
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d005      	beq.n	8001af6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d130      	bne.n	8001b58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	2203      	movs	r2, #3
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	43db      	mvns	r3, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	68da      	ldr	r2, [r3, #12]
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	091b      	lsrs	r3, r3, #4
 8001b42:	f003 0201 	and.w	r2, r3, #1
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f003 0303 	and.w	r3, r3, #3
 8001b60:	2b03      	cmp	r3, #3
 8001b62:	d017      	beq.n	8001b94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	2203      	movs	r2, #3
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43db      	mvns	r3, r3
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	689a      	ldr	r2, [r3, #8]
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 0303 	and.w	r3, r3, #3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d123      	bne.n	8001be8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	08da      	lsrs	r2, r3, #3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3208      	adds	r2, #8
 8001ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	f003 0307 	and.w	r3, r3, #7
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	220f      	movs	r2, #15
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	691a      	ldr	r2, [r3, #16]
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	08da      	lsrs	r2, r3, #3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	3208      	adds	r2, #8
 8001be2:	69b9      	ldr	r1, [r7, #24]
 8001be4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	2203      	movs	r2, #3
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f003 0203 	and.w	r2, r3, #3
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f000 80a2 	beq.w	8001d6e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	4b57      	ldr	r3, [pc, #348]	; (8001d8c <HAL_GPIO_Init+0x2e8>)
 8001c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c32:	4a56      	ldr	r2, [pc, #344]	; (8001d8c <HAL_GPIO_Init+0x2e8>)
 8001c34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c38:	6453      	str	r3, [r2, #68]	; 0x44
 8001c3a:	4b54      	ldr	r3, [pc, #336]	; (8001d8c <HAL_GPIO_Init+0x2e8>)
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c46:	4a52      	ldr	r2, [pc, #328]	; (8001d90 <HAL_GPIO_Init+0x2ec>)
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	089b      	lsrs	r3, r3, #2
 8001c4c:	3302      	adds	r3, #2
 8001c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	f003 0303 	and.w	r3, r3, #3
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	220f      	movs	r2, #15
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43db      	mvns	r3, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4013      	ands	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a49      	ldr	r2, [pc, #292]	; (8001d94 <HAL_GPIO_Init+0x2f0>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d019      	beq.n	8001ca6 <HAL_GPIO_Init+0x202>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a48      	ldr	r2, [pc, #288]	; (8001d98 <HAL_GPIO_Init+0x2f4>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d013      	beq.n	8001ca2 <HAL_GPIO_Init+0x1fe>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a47      	ldr	r2, [pc, #284]	; (8001d9c <HAL_GPIO_Init+0x2f8>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d00d      	beq.n	8001c9e <HAL_GPIO_Init+0x1fa>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a46      	ldr	r2, [pc, #280]	; (8001da0 <HAL_GPIO_Init+0x2fc>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d007      	beq.n	8001c9a <HAL_GPIO_Init+0x1f6>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a45      	ldr	r2, [pc, #276]	; (8001da4 <HAL_GPIO_Init+0x300>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d101      	bne.n	8001c96 <HAL_GPIO_Init+0x1f2>
 8001c92:	2304      	movs	r3, #4
 8001c94:	e008      	b.n	8001ca8 <HAL_GPIO_Init+0x204>
 8001c96:	2307      	movs	r3, #7
 8001c98:	e006      	b.n	8001ca8 <HAL_GPIO_Init+0x204>
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e004      	b.n	8001ca8 <HAL_GPIO_Init+0x204>
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	e002      	b.n	8001ca8 <HAL_GPIO_Init+0x204>
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e000      	b.n	8001ca8 <HAL_GPIO_Init+0x204>
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	69fa      	ldr	r2, [r7, #28]
 8001caa:	f002 0203 	and.w	r2, r2, #3
 8001cae:	0092      	lsls	r2, r2, #2
 8001cb0:	4093      	lsls	r3, r2
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cb8:	4935      	ldr	r1, [pc, #212]	; (8001d90 <HAL_GPIO_Init+0x2ec>)
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	089b      	lsrs	r3, r3, #2
 8001cbe:	3302      	adds	r3, #2
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cc6:	4b38      	ldr	r3, [pc, #224]	; (8001da8 <HAL_GPIO_Init+0x304>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cea:	4a2f      	ldr	r2, [pc, #188]	; (8001da8 <HAL_GPIO_Init+0x304>)
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001cf0:	4b2d      	ldr	r3, [pc, #180]	; (8001da8 <HAL_GPIO_Init+0x304>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d003      	beq.n	8001d14 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d14:	4a24      	ldr	r2, [pc, #144]	; (8001da8 <HAL_GPIO_Init+0x304>)
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d1a:	4b23      	ldr	r3, [pc, #140]	; (8001da8 <HAL_GPIO_Init+0x304>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	43db      	mvns	r3, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4013      	ands	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d3e:	4a1a      	ldr	r2, [pc, #104]	; (8001da8 <HAL_GPIO_Init+0x304>)
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d44:	4b18      	ldr	r3, [pc, #96]	; (8001da8 <HAL_GPIO_Init+0x304>)
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4013      	ands	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d003      	beq.n	8001d68 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d68:	4a0f      	ldr	r2, [pc, #60]	; (8001da8 <HAL_GPIO_Init+0x304>)
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	3301      	adds	r3, #1
 8001d72:	61fb      	str	r3, [r7, #28]
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	2b0f      	cmp	r3, #15
 8001d78:	f67f aea2 	bls.w	8001ac0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d7c:	bf00      	nop
 8001d7e:	bf00      	nop
 8001d80:	3724      	adds	r7, #36	; 0x24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	40013800 	.word	0x40013800
 8001d94:	40020000 	.word	0x40020000
 8001d98:	40020400 	.word	0x40020400
 8001d9c:	40020800 	.word	0x40020800
 8001da0:	40020c00 	.word	0x40020c00
 8001da4:	40021000 	.word	0x40021000
 8001da8:	40013c00 	.word	0x40013c00

08001dac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	460b      	mov	r3, r1
 8001db6:	807b      	strh	r3, [r7, #2]
 8001db8:	4613      	mov	r3, r2
 8001dba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dbc:	787b      	ldrb	r3, [r7, #1]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dc2:	887a      	ldrh	r2, [r7, #2]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001dc8:	e003      	b.n	8001dd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dca:	887b      	ldrh	r3, [r7, #2]
 8001dcc:	041a      	lsls	r2, r3, #16
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	619a      	str	r2, [r3, #24]
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
	...

08001de0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d101      	bne.n	8001df2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e264      	b.n	80022bc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d075      	beq.n	8001eea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dfe:	4ba3      	ldr	r3, [pc, #652]	; (800208c <HAL_RCC_OscConfig+0x2ac>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f003 030c 	and.w	r3, r3, #12
 8001e06:	2b04      	cmp	r3, #4
 8001e08:	d00c      	beq.n	8001e24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e0a:	4ba0      	ldr	r3, [pc, #640]	; (800208c <HAL_RCC_OscConfig+0x2ac>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e12:	2b08      	cmp	r3, #8
 8001e14:	d112      	bne.n	8001e3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e16:	4b9d      	ldr	r3, [pc, #628]	; (800208c <HAL_RCC_OscConfig+0x2ac>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e22:	d10b      	bne.n	8001e3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e24:	4b99      	ldr	r3, [pc, #612]	; (800208c <HAL_RCC_OscConfig+0x2ac>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d05b      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x108>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d157      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e23f      	b.n	80022bc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e44:	d106      	bne.n	8001e54 <HAL_RCC_OscConfig+0x74>
 8001e46:	4b91      	ldr	r3, [pc, #580]	; (800208c <HAL_RCC_OscConfig+0x2ac>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a90      	ldr	r2, [pc, #576]	; (800208c <HAL_RCC_OscConfig+0x2ac>)
 8001e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e50:	6013      	str	r3, [r2, #0]
 8001e52:	e01d      	b.n	8001e90 <HAL_RCC_OscConfig+0xb0>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e5c:	d10c      	bne.n	8001e78 <HAL_RCC_OscConfig+0x98>
 8001e5e:	4b8b      	ldr	r3, [pc, #556]	; (800208c <HAL_RCC_OscConfig+0x2ac>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a8a      	ldr	r2, [pc, #552]	; (800208c <HAL_RCC_OscConfig+0x2ac>)
 8001e64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e68:	6013      	str	r3, [r2, #0]
 8001e6a:	4b88      	ldr	r3, [pc, #544]	; (800208c <HAL_RCC_OscConfig+0x2ac>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a87      	ldr	r2, [pc, #540]	; (800208c <HAL_RCC_OscConfig+0x2ac>)
 8001e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e74:	6013      	str	r3, [r2, #0]
 8001e76:	e00b      	b.n	8001e90 <HAL_RCC_OscConfig+0xb0>
 8001e78:	4b84      	ldr	r3, [pc, #528]	; (800208c <HAL_RCC_OscConfig+0x2ac>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a83      	ldr	r2, [pc, #524]	; (800208c <HAL_RCC_OscConfig+0x2ac>)
 8001e7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e82:	6013      	str	r3, [r2, #0]
 8001e84:	4b81      	ldr	r3, [pc, #516]	; (800208c <HAL_RCC_OscConfig+0x2ac>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a80      	ldr	r2, [pc, #512]	; (800208c <HAL_RCC_OscConfig+0x2ac>)
 8001e8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d013      	beq.n	8001ec0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e98:	f7ff f952 	bl	8001140 <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ea0:	f7ff f94e 	bl	8001140 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b64      	cmp	r3, #100	; 0x64
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e204      	b.n	80022bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb2:	4b76      	ldr	r3, [pc, #472]	; (800208c <HAL_RCC_OscConfig+0x2ac>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d0f0      	beq.n	8001ea0 <HAL_RCC_OscConfig+0xc0>
 8001ebe:	e014      	b.n	8001eea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec0:	f7ff f93e 	bl	8001140 <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ec8:	f7ff f93a 	bl	8001140 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b64      	cmp	r3, #100	; 0x64
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e1f0      	b.n	80022bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eda:	4b6c      	ldr	r3, [pc, #432]	; (800208c <HAL_RCC_OscConfig+0x2ac>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1f0      	bne.n	8001ec8 <HAL_RCC_OscConfig+0xe8>
 8001ee6:	e000      	b.n	8001eea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d063      	beq.n	8001fbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ef6:	4b65      	ldr	r3, [pc, #404]	; (800208c <HAL_RCC_OscConfig+0x2ac>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f003 030c 	and.w	r3, r3, #12
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d00b      	beq.n	8001f1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f02:	4b62      	ldr	r3, [pc, #392]	; (800208c <HAL_RCC_OscConfig+0x2ac>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f0a:	2b08      	cmp	r3, #8
 8001f0c:	d11c      	bne.n	8001f48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f0e:	4b5f      	ldr	r3, [pc, #380]	; (800208c <HAL_RCC_OscConfig+0x2ac>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d116      	bne.n	8001f48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f1a:	4b5c      	ldr	r3, [pc, #368]	; (800208c <HAL_RCC_OscConfig+0x2ac>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d005      	beq.n	8001f32 <HAL_RCC_OscConfig+0x152>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d001      	beq.n	8001f32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e1c4      	b.n	80022bc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f32:	4b56      	ldr	r3, [pc, #344]	; (800208c <HAL_RCC_OscConfig+0x2ac>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	4952      	ldr	r1, [pc, #328]	; (800208c <HAL_RCC_OscConfig+0x2ac>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f46:	e03a      	b.n	8001fbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d020      	beq.n	8001f92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f50:	4b4f      	ldr	r3, [pc, #316]	; (8002090 <HAL_RCC_OscConfig+0x2b0>)
 8001f52:	2201      	movs	r2, #1
 8001f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f56:	f7ff f8f3 	bl	8001140 <HAL_GetTick>
 8001f5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f5c:	e008      	b.n	8001f70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f5e:	f7ff f8ef 	bl	8001140 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e1a5      	b.n	80022bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f70:	4b46      	ldr	r3, [pc, #280]	; (800208c <HAL_RCC_OscConfig+0x2ac>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d0f0      	beq.n	8001f5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f7c:	4b43      	ldr	r3, [pc, #268]	; (800208c <HAL_RCC_OscConfig+0x2ac>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	4940      	ldr	r1, [pc, #256]	; (800208c <HAL_RCC_OscConfig+0x2ac>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	600b      	str	r3, [r1, #0]
 8001f90:	e015      	b.n	8001fbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f92:	4b3f      	ldr	r3, [pc, #252]	; (8002090 <HAL_RCC_OscConfig+0x2b0>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f98:	f7ff f8d2 	bl	8001140 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fa0:	f7ff f8ce 	bl	8001140 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e184      	b.n	80022bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fb2:	4b36      	ldr	r3, [pc, #216]	; (800208c <HAL_RCC_OscConfig+0x2ac>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1f0      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0308 	and.w	r3, r3, #8
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d030      	beq.n	800202c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d016      	beq.n	8002000 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fd2:	4b30      	ldr	r3, [pc, #192]	; (8002094 <HAL_RCC_OscConfig+0x2b4>)
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fd8:	f7ff f8b2 	bl	8001140 <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fe0:	f7ff f8ae 	bl	8001140 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e164      	b.n	80022bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ff2:	4b26      	ldr	r3, [pc, #152]	; (800208c <HAL_RCC_OscConfig+0x2ac>)
 8001ff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d0f0      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x200>
 8001ffe:	e015      	b.n	800202c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002000:	4b24      	ldr	r3, [pc, #144]	; (8002094 <HAL_RCC_OscConfig+0x2b4>)
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002006:	f7ff f89b 	bl	8001140 <HAL_GetTick>
 800200a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800200c:	e008      	b.n	8002020 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800200e:	f7ff f897 	bl	8001140 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e14d      	b.n	80022bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002020:	4b1a      	ldr	r3, [pc, #104]	; (800208c <HAL_RCC_OscConfig+0x2ac>)
 8002022:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d1f0      	bne.n	800200e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0304 	and.w	r3, r3, #4
 8002034:	2b00      	cmp	r3, #0
 8002036:	f000 80a0 	beq.w	800217a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800203a:	2300      	movs	r3, #0
 800203c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800203e:	4b13      	ldr	r3, [pc, #76]	; (800208c <HAL_RCC_OscConfig+0x2ac>)
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d10f      	bne.n	800206a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	60bb      	str	r3, [r7, #8]
 800204e:	4b0f      	ldr	r3, [pc, #60]	; (800208c <HAL_RCC_OscConfig+0x2ac>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	4a0e      	ldr	r2, [pc, #56]	; (800208c <HAL_RCC_OscConfig+0x2ac>)
 8002054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002058:	6413      	str	r3, [r2, #64]	; 0x40
 800205a:	4b0c      	ldr	r3, [pc, #48]	; (800208c <HAL_RCC_OscConfig+0x2ac>)
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002062:	60bb      	str	r3, [r7, #8]
 8002064:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002066:	2301      	movs	r3, #1
 8002068:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800206a:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <HAL_RCC_OscConfig+0x2b8>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002072:	2b00      	cmp	r3, #0
 8002074:	d121      	bne.n	80020ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002076:	4b08      	ldr	r3, [pc, #32]	; (8002098 <HAL_RCC_OscConfig+0x2b8>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a07      	ldr	r2, [pc, #28]	; (8002098 <HAL_RCC_OscConfig+0x2b8>)
 800207c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002080:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002082:	f7ff f85d 	bl	8001140 <HAL_GetTick>
 8002086:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002088:	e011      	b.n	80020ae <HAL_RCC_OscConfig+0x2ce>
 800208a:	bf00      	nop
 800208c:	40023800 	.word	0x40023800
 8002090:	42470000 	.word	0x42470000
 8002094:	42470e80 	.word	0x42470e80
 8002098:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800209c:	f7ff f850 	bl	8001140 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e106      	b.n	80022bc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ae:	4b85      	ldr	r3, [pc, #532]	; (80022c4 <HAL_RCC_OscConfig+0x4e4>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d0f0      	beq.n	800209c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d106      	bne.n	80020d0 <HAL_RCC_OscConfig+0x2f0>
 80020c2:	4b81      	ldr	r3, [pc, #516]	; (80022c8 <HAL_RCC_OscConfig+0x4e8>)
 80020c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c6:	4a80      	ldr	r2, [pc, #512]	; (80022c8 <HAL_RCC_OscConfig+0x4e8>)
 80020c8:	f043 0301 	orr.w	r3, r3, #1
 80020cc:	6713      	str	r3, [r2, #112]	; 0x70
 80020ce:	e01c      	b.n	800210a <HAL_RCC_OscConfig+0x32a>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	2b05      	cmp	r3, #5
 80020d6:	d10c      	bne.n	80020f2 <HAL_RCC_OscConfig+0x312>
 80020d8:	4b7b      	ldr	r3, [pc, #492]	; (80022c8 <HAL_RCC_OscConfig+0x4e8>)
 80020da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020dc:	4a7a      	ldr	r2, [pc, #488]	; (80022c8 <HAL_RCC_OscConfig+0x4e8>)
 80020de:	f043 0304 	orr.w	r3, r3, #4
 80020e2:	6713      	str	r3, [r2, #112]	; 0x70
 80020e4:	4b78      	ldr	r3, [pc, #480]	; (80022c8 <HAL_RCC_OscConfig+0x4e8>)
 80020e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e8:	4a77      	ldr	r2, [pc, #476]	; (80022c8 <HAL_RCC_OscConfig+0x4e8>)
 80020ea:	f043 0301 	orr.w	r3, r3, #1
 80020ee:	6713      	str	r3, [r2, #112]	; 0x70
 80020f0:	e00b      	b.n	800210a <HAL_RCC_OscConfig+0x32a>
 80020f2:	4b75      	ldr	r3, [pc, #468]	; (80022c8 <HAL_RCC_OscConfig+0x4e8>)
 80020f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f6:	4a74      	ldr	r2, [pc, #464]	; (80022c8 <HAL_RCC_OscConfig+0x4e8>)
 80020f8:	f023 0301 	bic.w	r3, r3, #1
 80020fc:	6713      	str	r3, [r2, #112]	; 0x70
 80020fe:	4b72      	ldr	r3, [pc, #456]	; (80022c8 <HAL_RCC_OscConfig+0x4e8>)
 8002100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002102:	4a71      	ldr	r2, [pc, #452]	; (80022c8 <HAL_RCC_OscConfig+0x4e8>)
 8002104:	f023 0304 	bic.w	r3, r3, #4
 8002108:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d015      	beq.n	800213e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002112:	f7ff f815 	bl	8001140 <HAL_GetTick>
 8002116:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002118:	e00a      	b.n	8002130 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800211a:	f7ff f811 	bl	8001140 <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	f241 3288 	movw	r2, #5000	; 0x1388
 8002128:	4293      	cmp	r3, r2
 800212a:	d901      	bls.n	8002130 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e0c5      	b.n	80022bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002130:	4b65      	ldr	r3, [pc, #404]	; (80022c8 <HAL_RCC_OscConfig+0x4e8>)
 8002132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d0ee      	beq.n	800211a <HAL_RCC_OscConfig+0x33a>
 800213c:	e014      	b.n	8002168 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800213e:	f7fe ffff 	bl	8001140 <HAL_GetTick>
 8002142:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002144:	e00a      	b.n	800215c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002146:	f7fe fffb 	bl	8001140 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	f241 3288 	movw	r2, #5000	; 0x1388
 8002154:	4293      	cmp	r3, r2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e0af      	b.n	80022bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800215c:	4b5a      	ldr	r3, [pc, #360]	; (80022c8 <HAL_RCC_OscConfig+0x4e8>)
 800215e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1ee      	bne.n	8002146 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002168:	7dfb      	ldrb	r3, [r7, #23]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d105      	bne.n	800217a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800216e:	4b56      	ldr	r3, [pc, #344]	; (80022c8 <HAL_RCC_OscConfig+0x4e8>)
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	4a55      	ldr	r2, [pc, #340]	; (80022c8 <HAL_RCC_OscConfig+0x4e8>)
 8002174:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002178:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 809b 	beq.w	80022ba <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002184:	4b50      	ldr	r3, [pc, #320]	; (80022c8 <HAL_RCC_OscConfig+0x4e8>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f003 030c 	and.w	r3, r3, #12
 800218c:	2b08      	cmp	r3, #8
 800218e:	d05c      	beq.n	800224a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	2b02      	cmp	r3, #2
 8002196:	d141      	bne.n	800221c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002198:	4b4c      	ldr	r3, [pc, #304]	; (80022cc <HAL_RCC_OscConfig+0x4ec>)
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219e:	f7fe ffcf 	bl	8001140 <HAL_GetTick>
 80021a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021a4:	e008      	b.n	80021b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021a6:	f7fe ffcb 	bl	8001140 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e081      	b.n	80022bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021b8:	4b43      	ldr	r3, [pc, #268]	; (80022c8 <HAL_RCC_OscConfig+0x4e8>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1f0      	bne.n	80021a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	69da      	ldr	r2, [r3, #28]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a1b      	ldr	r3, [r3, #32]
 80021cc:	431a      	orrs	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d2:	019b      	lsls	r3, r3, #6
 80021d4:	431a      	orrs	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021da:	085b      	lsrs	r3, r3, #1
 80021dc:	3b01      	subs	r3, #1
 80021de:	041b      	lsls	r3, r3, #16
 80021e0:	431a      	orrs	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e6:	061b      	lsls	r3, r3, #24
 80021e8:	4937      	ldr	r1, [pc, #220]	; (80022c8 <HAL_RCC_OscConfig+0x4e8>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021ee:	4b37      	ldr	r3, [pc, #220]	; (80022cc <HAL_RCC_OscConfig+0x4ec>)
 80021f0:	2201      	movs	r2, #1
 80021f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f4:	f7fe ffa4 	bl	8001140 <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021fc:	f7fe ffa0 	bl	8001140 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e056      	b.n	80022bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800220e:	4b2e      	ldr	r3, [pc, #184]	; (80022c8 <HAL_RCC_OscConfig+0x4e8>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d0f0      	beq.n	80021fc <HAL_RCC_OscConfig+0x41c>
 800221a:	e04e      	b.n	80022ba <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800221c:	4b2b      	ldr	r3, [pc, #172]	; (80022cc <HAL_RCC_OscConfig+0x4ec>)
 800221e:	2200      	movs	r2, #0
 8002220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002222:	f7fe ff8d 	bl	8001140 <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002228:	e008      	b.n	800223c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800222a:	f7fe ff89 	bl	8001140 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e03f      	b.n	80022bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800223c:	4b22      	ldr	r3, [pc, #136]	; (80022c8 <HAL_RCC_OscConfig+0x4e8>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1f0      	bne.n	800222a <HAL_RCC_OscConfig+0x44a>
 8002248:	e037      	b.n	80022ba <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d101      	bne.n	8002256 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e032      	b.n	80022bc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002256:	4b1c      	ldr	r3, [pc, #112]	; (80022c8 <HAL_RCC_OscConfig+0x4e8>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d028      	beq.n	80022b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800226e:	429a      	cmp	r2, r3
 8002270:	d121      	bne.n	80022b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800227c:	429a      	cmp	r2, r3
 800227e:	d11a      	bne.n	80022b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002286:	4013      	ands	r3, r2
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800228c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800228e:	4293      	cmp	r3, r2
 8002290:	d111      	bne.n	80022b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229c:	085b      	lsrs	r3, r3, #1
 800229e:	3b01      	subs	r3, #1
 80022a0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d107      	bne.n	80022b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d001      	beq.n	80022ba <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e000      	b.n	80022bc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3718      	adds	r7, #24
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	40007000 	.word	0x40007000
 80022c8:	40023800 	.word	0x40023800
 80022cc:	42470060 	.word	0x42470060

080022d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d101      	bne.n	80022e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e0cc      	b.n	800247e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022e4:	4b68      	ldr	r3, [pc, #416]	; (8002488 <HAL_RCC_ClockConfig+0x1b8>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d90c      	bls.n	800230c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f2:	4b65      	ldr	r3, [pc, #404]	; (8002488 <HAL_RCC_ClockConfig+0x1b8>)
 80022f4:	683a      	ldr	r2, [r7, #0]
 80022f6:	b2d2      	uxtb	r2, r2
 80022f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022fa:	4b63      	ldr	r3, [pc, #396]	; (8002488 <HAL_RCC_ClockConfig+0x1b8>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	429a      	cmp	r2, r3
 8002306:	d001      	beq.n	800230c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e0b8      	b.n	800247e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d020      	beq.n	800235a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0304 	and.w	r3, r3, #4
 8002320:	2b00      	cmp	r3, #0
 8002322:	d005      	beq.n	8002330 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002324:	4b59      	ldr	r3, [pc, #356]	; (800248c <HAL_RCC_ClockConfig+0x1bc>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	4a58      	ldr	r2, [pc, #352]	; (800248c <HAL_RCC_ClockConfig+0x1bc>)
 800232a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800232e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0308 	and.w	r3, r3, #8
 8002338:	2b00      	cmp	r3, #0
 800233a:	d005      	beq.n	8002348 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800233c:	4b53      	ldr	r3, [pc, #332]	; (800248c <HAL_RCC_ClockConfig+0x1bc>)
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	4a52      	ldr	r2, [pc, #328]	; (800248c <HAL_RCC_ClockConfig+0x1bc>)
 8002342:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002346:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002348:	4b50      	ldr	r3, [pc, #320]	; (800248c <HAL_RCC_ClockConfig+0x1bc>)
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	494d      	ldr	r1, [pc, #308]	; (800248c <HAL_RCC_ClockConfig+0x1bc>)
 8002356:	4313      	orrs	r3, r2
 8002358:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b00      	cmp	r3, #0
 8002364:	d044      	beq.n	80023f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d107      	bne.n	800237e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800236e:	4b47      	ldr	r3, [pc, #284]	; (800248c <HAL_RCC_ClockConfig+0x1bc>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d119      	bne.n	80023ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e07f      	b.n	800247e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	2b02      	cmp	r3, #2
 8002384:	d003      	beq.n	800238e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800238a:	2b03      	cmp	r3, #3
 800238c:	d107      	bne.n	800239e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800238e:	4b3f      	ldr	r3, [pc, #252]	; (800248c <HAL_RCC_ClockConfig+0x1bc>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d109      	bne.n	80023ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e06f      	b.n	800247e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800239e:	4b3b      	ldr	r3, [pc, #236]	; (800248c <HAL_RCC_ClockConfig+0x1bc>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e067      	b.n	800247e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023ae:	4b37      	ldr	r3, [pc, #220]	; (800248c <HAL_RCC_ClockConfig+0x1bc>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f023 0203 	bic.w	r2, r3, #3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	4934      	ldr	r1, [pc, #208]	; (800248c <HAL_RCC_ClockConfig+0x1bc>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023c0:	f7fe febe 	bl	8001140 <HAL_GetTick>
 80023c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023c6:	e00a      	b.n	80023de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023c8:	f7fe feba 	bl	8001140 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e04f      	b.n	800247e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023de:	4b2b      	ldr	r3, [pc, #172]	; (800248c <HAL_RCC_ClockConfig+0x1bc>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f003 020c 	and.w	r2, r3, #12
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d1eb      	bne.n	80023c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023f0:	4b25      	ldr	r3, [pc, #148]	; (8002488 <HAL_RCC_ClockConfig+0x1b8>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0307 	and.w	r3, r3, #7
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d20c      	bcs.n	8002418 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023fe:	4b22      	ldr	r3, [pc, #136]	; (8002488 <HAL_RCC_ClockConfig+0x1b8>)
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	b2d2      	uxtb	r2, r2
 8002404:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002406:	4b20      	ldr	r3, [pc, #128]	; (8002488 <HAL_RCC_ClockConfig+0x1b8>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0307 	and.w	r3, r3, #7
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	429a      	cmp	r2, r3
 8002412:	d001      	beq.n	8002418 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e032      	b.n	800247e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0304 	and.w	r3, r3, #4
 8002420:	2b00      	cmp	r3, #0
 8002422:	d008      	beq.n	8002436 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002424:	4b19      	ldr	r3, [pc, #100]	; (800248c <HAL_RCC_ClockConfig+0x1bc>)
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	4916      	ldr	r1, [pc, #88]	; (800248c <HAL_RCC_ClockConfig+0x1bc>)
 8002432:	4313      	orrs	r3, r2
 8002434:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0308 	and.w	r3, r3, #8
 800243e:	2b00      	cmp	r3, #0
 8002440:	d009      	beq.n	8002456 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002442:	4b12      	ldr	r3, [pc, #72]	; (800248c <HAL_RCC_ClockConfig+0x1bc>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	490e      	ldr	r1, [pc, #56]	; (800248c <HAL_RCC_ClockConfig+0x1bc>)
 8002452:	4313      	orrs	r3, r2
 8002454:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002456:	f000 f821 	bl	800249c <HAL_RCC_GetSysClockFreq>
 800245a:	4602      	mov	r2, r0
 800245c:	4b0b      	ldr	r3, [pc, #44]	; (800248c <HAL_RCC_ClockConfig+0x1bc>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	091b      	lsrs	r3, r3, #4
 8002462:	f003 030f 	and.w	r3, r3, #15
 8002466:	490a      	ldr	r1, [pc, #40]	; (8002490 <HAL_RCC_ClockConfig+0x1c0>)
 8002468:	5ccb      	ldrb	r3, [r1, r3]
 800246a:	fa22 f303 	lsr.w	r3, r2, r3
 800246e:	4a09      	ldr	r2, [pc, #36]	; (8002494 <HAL_RCC_ClockConfig+0x1c4>)
 8002470:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002472:	4b09      	ldr	r3, [pc, #36]	; (8002498 <HAL_RCC_ClockConfig+0x1c8>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4618      	mov	r0, r3
 8002478:	f7fe fe1e 	bl	80010b8 <HAL_InitTick>

  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	40023c00 	.word	0x40023c00
 800248c:	40023800 	.word	0x40023800
 8002490:	08004c04 	.word	0x08004c04
 8002494:	20000000 	.word	0x20000000
 8002498:	20000004 	.word	0x20000004

0800249c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800249c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80024a0:	b084      	sub	sp, #16
 80024a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80024a4:	2300      	movs	r3, #0
 80024a6:	607b      	str	r3, [r7, #4]
 80024a8:	2300      	movs	r3, #0
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	2300      	movs	r3, #0
 80024ae:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80024b0:	2300      	movs	r3, #0
 80024b2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024b4:	4b67      	ldr	r3, [pc, #412]	; (8002654 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f003 030c 	and.w	r3, r3, #12
 80024bc:	2b08      	cmp	r3, #8
 80024be:	d00d      	beq.n	80024dc <HAL_RCC_GetSysClockFreq+0x40>
 80024c0:	2b08      	cmp	r3, #8
 80024c2:	f200 80bd 	bhi.w	8002640 <HAL_RCC_GetSysClockFreq+0x1a4>
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d002      	beq.n	80024d0 <HAL_RCC_GetSysClockFreq+0x34>
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	d003      	beq.n	80024d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80024ce:	e0b7      	b.n	8002640 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024d0:	4b61      	ldr	r3, [pc, #388]	; (8002658 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80024d2:	60bb      	str	r3, [r7, #8]
       break;
 80024d4:	e0b7      	b.n	8002646 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024d6:	4b61      	ldr	r3, [pc, #388]	; (800265c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80024d8:	60bb      	str	r3, [r7, #8]
      break;
 80024da:	e0b4      	b.n	8002646 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024dc:	4b5d      	ldr	r3, [pc, #372]	; (8002654 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024e4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024e6:	4b5b      	ldr	r3, [pc, #364]	; (8002654 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d04d      	beq.n	800258e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024f2:	4b58      	ldr	r3, [pc, #352]	; (8002654 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	099b      	lsrs	r3, r3, #6
 80024f8:	461a      	mov	r2, r3
 80024fa:	f04f 0300 	mov.w	r3, #0
 80024fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002502:	f04f 0100 	mov.w	r1, #0
 8002506:	ea02 0800 	and.w	r8, r2, r0
 800250a:	ea03 0901 	and.w	r9, r3, r1
 800250e:	4640      	mov	r0, r8
 8002510:	4649      	mov	r1, r9
 8002512:	f04f 0200 	mov.w	r2, #0
 8002516:	f04f 0300 	mov.w	r3, #0
 800251a:	014b      	lsls	r3, r1, #5
 800251c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002520:	0142      	lsls	r2, r0, #5
 8002522:	4610      	mov	r0, r2
 8002524:	4619      	mov	r1, r3
 8002526:	ebb0 0008 	subs.w	r0, r0, r8
 800252a:	eb61 0109 	sbc.w	r1, r1, r9
 800252e:	f04f 0200 	mov.w	r2, #0
 8002532:	f04f 0300 	mov.w	r3, #0
 8002536:	018b      	lsls	r3, r1, #6
 8002538:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800253c:	0182      	lsls	r2, r0, #6
 800253e:	1a12      	subs	r2, r2, r0
 8002540:	eb63 0301 	sbc.w	r3, r3, r1
 8002544:	f04f 0000 	mov.w	r0, #0
 8002548:	f04f 0100 	mov.w	r1, #0
 800254c:	00d9      	lsls	r1, r3, #3
 800254e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002552:	00d0      	lsls	r0, r2, #3
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	eb12 0208 	adds.w	r2, r2, r8
 800255c:	eb43 0309 	adc.w	r3, r3, r9
 8002560:	f04f 0000 	mov.w	r0, #0
 8002564:	f04f 0100 	mov.w	r1, #0
 8002568:	0259      	lsls	r1, r3, #9
 800256a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800256e:	0250      	lsls	r0, r2, #9
 8002570:	4602      	mov	r2, r0
 8002572:	460b      	mov	r3, r1
 8002574:	4610      	mov	r0, r2
 8002576:	4619      	mov	r1, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	461a      	mov	r2, r3
 800257c:	f04f 0300 	mov.w	r3, #0
 8002580:	f7fd fe7e 	bl	8000280 <__aeabi_uldivmod>
 8002584:	4602      	mov	r2, r0
 8002586:	460b      	mov	r3, r1
 8002588:	4613      	mov	r3, r2
 800258a:	60fb      	str	r3, [r7, #12]
 800258c:	e04a      	b.n	8002624 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800258e:	4b31      	ldr	r3, [pc, #196]	; (8002654 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	099b      	lsrs	r3, r3, #6
 8002594:	461a      	mov	r2, r3
 8002596:	f04f 0300 	mov.w	r3, #0
 800259a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800259e:	f04f 0100 	mov.w	r1, #0
 80025a2:	ea02 0400 	and.w	r4, r2, r0
 80025a6:	ea03 0501 	and.w	r5, r3, r1
 80025aa:	4620      	mov	r0, r4
 80025ac:	4629      	mov	r1, r5
 80025ae:	f04f 0200 	mov.w	r2, #0
 80025b2:	f04f 0300 	mov.w	r3, #0
 80025b6:	014b      	lsls	r3, r1, #5
 80025b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80025bc:	0142      	lsls	r2, r0, #5
 80025be:	4610      	mov	r0, r2
 80025c0:	4619      	mov	r1, r3
 80025c2:	1b00      	subs	r0, r0, r4
 80025c4:	eb61 0105 	sbc.w	r1, r1, r5
 80025c8:	f04f 0200 	mov.w	r2, #0
 80025cc:	f04f 0300 	mov.w	r3, #0
 80025d0:	018b      	lsls	r3, r1, #6
 80025d2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80025d6:	0182      	lsls	r2, r0, #6
 80025d8:	1a12      	subs	r2, r2, r0
 80025da:	eb63 0301 	sbc.w	r3, r3, r1
 80025de:	f04f 0000 	mov.w	r0, #0
 80025e2:	f04f 0100 	mov.w	r1, #0
 80025e6:	00d9      	lsls	r1, r3, #3
 80025e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80025ec:	00d0      	lsls	r0, r2, #3
 80025ee:	4602      	mov	r2, r0
 80025f0:	460b      	mov	r3, r1
 80025f2:	1912      	adds	r2, r2, r4
 80025f4:	eb45 0303 	adc.w	r3, r5, r3
 80025f8:	f04f 0000 	mov.w	r0, #0
 80025fc:	f04f 0100 	mov.w	r1, #0
 8002600:	0299      	lsls	r1, r3, #10
 8002602:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002606:	0290      	lsls	r0, r2, #10
 8002608:	4602      	mov	r2, r0
 800260a:	460b      	mov	r3, r1
 800260c:	4610      	mov	r0, r2
 800260e:	4619      	mov	r1, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	461a      	mov	r2, r3
 8002614:	f04f 0300 	mov.w	r3, #0
 8002618:	f7fd fe32 	bl	8000280 <__aeabi_uldivmod>
 800261c:	4602      	mov	r2, r0
 800261e:	460b      	mov	r3, r1
 8002620:	4613      	mov	r3, r2
 8002622:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002624:	4b0b      	ldr	r3, [pc, #44]	; (8002654 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	0c1b      	lsrs	r3, r3, #16
 800262a:	f003 0303 	and.w	r3, r3, #3
 800262e:	3301      	adds	r3, #1
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002634:	68fa      	ldr	r2, [r7, #12]
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	fbb2 f3f3 	udiv	r3, r2, r3
 800263c:	60bb      	str	r3, [r7, #8]
      break;
 800263e:	e002      	b.n	8002646 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002640:	4b05      	ldr	r3, [pc, #20]	; (8002658 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002642:	60bb      	str	r3, [r7, #8]
      break;
 8002644:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002646:	68bb      	ldr	r3, [r7, #8]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002652:	bf00      	nop
 8002654:	40023800 	.word	0x40023800
 8002658:	00f42400 	.word	0x00f42400
 800265c:	007a1200 	.word	0x007a1200

08002660 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002664:	4b03      	ldr	r3, [pc, #12]	; (8002674 <HAL_RCC_GetHCLKFreq+0x14>)
 8002666:	681b      	ldr	r3, [r3, #0]
}
 8002668:	4618      	mov	r0, r3
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	20000000 	.word	0x20000000

08002678 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800267c:	f7ff fff0 	bl	8002660 <HAL_RCC_GetHCLKFreq>
 8002680:	4602      	mov	r2, r0
 8002682:	4b05      	ldr	r3, [pc, #20]	; (8002698 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	0a9b      	lsrs	r3, r3, #10
 8002688:	f003 0307 	and.w	r3, r3, #7
 800268c:	4903      	ldr	r1, [pc, #12]	; (800269c <HAL_RCC_GetPCLK1Freq+0x24>)
 800268e:	5ccb      	ldrb	r3, [r1, r3]
 8002690:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002694:	4618      	mov	r0, r3
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40023800 	.word	0x40023800
 800269c:	08004c14 	.word	0x08004c14

080026a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026a4:	f7ff ffdc 	bl	8002660 <HAL_RCC_GetHCLKFreq>
 80026a8:	4602      	mov	r2, r0
 80026aa:	4b05      	ldr	r3, [pc, #20]	; (80026c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	0b5b      	lsrs	r3, r3, #13
 80026b0:	f003 0307 	and.w	r3, r3, #7
 80026b4:	4903      	ldr	r1, [pc, #12]	; (80026c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026b6:	5ccb      	ldrb	r3, [r1, r3]
 80026b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026bc:	4618      	mov	r0, r3
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	40023800 	.word	0x40023800
 80026c4:	08004c14 	.word	0x08004c14

080026c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e041      	b.n	800275e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d106      	bne.n	80026f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f7fe fab4 	bl	8000c5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2202      	movs	r2, #2
 80026f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3304      	adds	r3, #4
 8002704:	4619      	mov	r1, r3
 8002706:	4610      	mov	r0, r2
 8002708:	f000 fc9a 	bl	8003040 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b082      	sub	sp, #8
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d101      	bne.n	8002778 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e041      	b.n	80027fc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b00      	cmp	r3, #0
 8002782:	d106      	bne.n	8002792 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f000 f839 	bl	8002804 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2202      	movs	r2, #2
 8002796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	3304      	adds	r3, #4
 80027a2:	4619      	mov	r1, r3
 80027a4:	4610      	mov	r0, r2
 80027a6:	f000 fc4b 	bl	8003040 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2201      	movs	r2, #1
 80027ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2201      	movs	r2, #1
 80027b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2201      	movs	r2, #1
 80027be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2201      	movs	r2, #1
 80027ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2201      	movs	r2, #1
 80027de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2201      	movs	r2, #1
 80027e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2201      	movs	r2, #1
 80027ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2201      	movs	r2, #1
 80027f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3708      	adds	r7, #8
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
 8002824:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8002826:	2300      	movs	r3, #0
 8002828:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d109      	bne.n	8002844 <HAL_TIM_PWM_Start_DMA+0x2c>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	bf0c      	ite	eq
 800283c:	2301      	moveq	r3, #1
 800283e:	2300      	movne	r3, #0
 8002840:	b2db      	uxtb	r3, r3
 8002842:	e022      	b.n	800288a <HAL_TIM_PWM_Start_DMA+0x72>
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	2b04      	cmp	r3, #4
 8002848:	d109      	bne.n	800285e <HAL_TIM_PWM_Start_DMA+0x46>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	bf0c      	ite	eq
 8002856:	2301      	moveq	r3, #1
 8002858:	2300      	movne	r3, #0
 800285a:	b2db      	uxtb	r3, r3
 800285c:	e015      	b.n	800288a <HAL_TIM_PWM_Start_DMA+0x72>
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	2b08      	cmp	r3, #8
 8002862:	d109      	bne.n	8002878 <HAL_TIM_PWM_Start_DMA+0x60>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2b02      	cmp	r3, #2
 800286e:	bf0c      	ite	eq
 8002870:	2301      	moveq	r3, #1
 8002872:	2300      	movne	r3, #0
 8002874:	b2db      	uxtb	r3, r3
 8002876:	e008      	b.n	800288a <HAL_TIM_PWM_Start_DMA+0x72>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	bf0c      	ite	eq
 8002884:	2301      	moveq	r3, #1
 8002886:	2300      	movne	r3, #0
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800288e:	2302      	movs	r3, #2
 8002890:	e15d      	b.n	8002b4e <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d109      	bne.n	80028ac <HAL_TIM_PWM_Start_DMA+0x94>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	bf0c      	ite	eq
 80028a4:	2301      	moveq	r3, #1
 80028a6:	2300      	movne	r3, #0
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	e022      	b.n	80028f2 <HAL_TIM_PWM_Start_DMA+0xda>
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	2b04      	cmp	r3, #4
 80028b0:	d109      	bne.n	80028c6 <HAL_TIM_PWM_Start_DMA+0xae>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	bf0c      	ite	eq
 80028be:	2301      	moveq	r3, #1
 80028c0:	2300      	movne	r3, #0
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	e015      	b.n	80028f2 <HAL_TIM_PWM_Start_DMA+0xda>
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	2b08      	cmp	r3, #8
 80028ca:	d109      	bne.n	80028e0 <HAL_TIM_PWM_Start_DMA+0xc8>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	bf0c      	ite	eq
 80028d8:	2301      	moveq	r3, #1
 80028da:	2300      	movne	r3, #0
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	e008      	b.n	80028f2 <HAL_TIM_PWM_Start_DMA+0xda>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	bf0c      	ite	eq
 80028ec:	2301      	moveq	r3, #1
 80028ee:	2300      	movne	r3, #0
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d024      	beq.n	8002940 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d104      	bne.n	8002906 <HAL_TIM_PWM_Start_DMA+0xee>
 80028fc:	887b      	ldrh	r3, [r7, #2]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e123      	b.n	8002b4e <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d104      	bne.n	8002916 <HAL_TIM_PWM_Start_DMA+0xfe>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2202      	movs	r2, #2
 8002910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002914:	e016      	b.n	8002944 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	2b04      	cmp	r3, #4
 800291a:	d104      	bne.n	8002926 <HAL_TIM_PWM_Start_DMA+0x10e>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2202      	movs	r2, #2
 8002920:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002924:	e00e      	b.n	8002944 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	2b08      	cmp	r3, #8
 800292a:	d104      	bne.n	8002936 <HAL_TIM_PWM_Start_DMA+0x11e>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2202      	movs	r2, #2
 8002930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002934:	e006      	b.n	8002944 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2202      	movs	r2, #2
 800293a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800293e:	e001      	b.n	8002944 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e104      	b.n	8002b4e <HAL_TIM_PWM_Start_DMA+0x336>
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	2b0c      	cmp	r3, #12
 8002948:	f200 80ae 	bhi.w	8002aa8 <HAL_TIM_PWM_Start_DMA+0x290>
 800294c:	a201      	add	r2, pc, #4	; (adr r2, 8002954 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800294e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002952:	bf00      	nop
 8002954:	08002989 	.word	0x08002989
 8002958:	08002aa9 	.word	0x08002aa9
 800295c:	08002aa9 	.word	0x08002aa9
 8002960:	08002aa9 	.word	0x08002aa9
 8002964:	080029d1 	.word	0x080029d1
 8002968:	08002aa9 	.word	0x08002aa9
 800296c:	08002aa9 	.word	0x08002aa9
 8002970:	08002aa9 	.word	0x08002aa9
 8002974:	08002a19 	.word	0x08002a19
 8002978:	08002aa9 	.word	0x08002aa9
 800297c:	08002aa9 	.word	0x08002aa9
 8002980:	08002aa9 	.word	0x08002aa9
 8002984:	08002a61 	.word	0x08002a61
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298c:	4a72      	ldr	r2, [pc, #456]	; (8002b58 <HAL_TIM_PWM_Start_DMA+0x340>)
 800298e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002994:	4a71      	ldr	r2, [pc, #452]	; (8002b5c <HAL_TIM_PWM_Start_DMA+0x344>)
 8002996:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299c:	4a70      	ldr	r2, [pc, #448]	; (8002b60 <HAL_TIM_PWM_Start_DMA+0x348>)
 800299e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80029a4:	6879      	ldr	r1, [r7, #4]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	3334      	adds	r3, #52	; 0x34
 80029ac:	461a      	mov	r2, r3
 80029ae:	887b      	ldrh	r3, [r7, #2]
 80029b0:	f7fe fdb6 	bl	8001520 <HAL_DMA_Start_IT>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e0c7      	b.n	8002b4e <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68da      	ldr	r2, [r3, #12]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029cc:	60da      	str	r2, [r3, #12]
      break;
 80029ce:	e06e      	b.n	8002aae <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d4:	4a60      	ldr	r2, [pc, #384]	; (8002b58 <HAL_TIM_PWM_Start_DMA+0x340>)
 80029d6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029dc:	4a5f      	ldr	r2, [pc, #380]	; (8002b5c <HAL_TIM_PWM_Start_DMA+0x344>)
 80029de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e4:	4a5e      	ldr	r2, [pc, #376]	; (8002b60 <HAL_TIM_PWM_Start_DMA+0x348>)
 80029e6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80029ec:	6879      	ldr	r1, [r7, #4]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	3338      	adds	r3, #56	; 0x38
 80029f4:	461a      	mov	r2, r3
 80029f6:	887b      	ldrh	r3, [r7, #2]
 80029f8:	f7fe fd92 	bl	8001520 <HAL_DMA_Start_IT>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e0a3      	b.n	8002b4e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68da      	ldr	r2, [r3, #12]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a14:	60da      	str	r2, [r3, #12]
      break;
 8002a16:	e04a      	b.n	8002aae <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1c:	4a4e      	ldr	r2, [pc, #312]	; (8002b58 <HAL_TIM_PWM_Start_DMA+0x340>)
 8002a1e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a24:	4a4d      	ldr	r2, [pc, #308]	; (8002b5c <HAL_TIM_PWM_Start_DMA+0x344>)
 8002a26:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2c:	4a4c      	ldr	r2, [pc, #304]	; (8002b60 <HAL_TIM_PWM_Start_DMA+0x348>)
 8002a2e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002a34:	6879      	ldr	r1, [r7, #4]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	333c      	adds	r3, #60	; 0x3c
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	887b      	ldrh	r3, [r7, #2]
 8002a40:	f7fe fd6e 	bl	8001520 <HAL_DMA_Start_IT>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e07f      	b.n	8002b4e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68da      	ldr	r2, [r3, #12]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a5c:	60da      	str	r2, [r3, #12]
      break;
 8002a5e:	e026      	b.n	8002aae <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a64:	4a3c      	ldr	r2, [pc, #240]	; (8002b58 <HAL_TIM_PWM_Start_DMA+0x340>)
 8002a66:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6c:	4a3b      	ldr	r2, [pc, #236]	; (8002b5c <HAL_TIM_PWM_Start_DMA+0x344>)
 8002a6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a74:	4a3a      	ldr	r2, [pc, #232]	; (8002b60 <HAL_TIM_PWM_Start_DMA+0x348>)
 8002a76:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	3340      	adds	r3, #64	; 0x40
 8002a84:	461a      	mov	r2, r3
 8002a86:	887b      	ldrh	r3, [r7, #2]
 8002a88:	f7fe fd4a 	bl	8001520 <HAL_DMA_Start_IT>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e05b      	b.n	8002b4e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68da      	ldr	r2, [r3, #12]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002aa4:	60da      	str	r2, [r3, #12]
      break;
 8002aa6:	e002      	b.n	8002aae <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	75fb      	strb	r3, [r7, #23]
      break;
 8002aac:	bf00      	nop
  }

  if (status == HAL_OK)
 8002aae:	7dfb      	ldrb	r3, [r7, #23]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d14b      	bne.n	8002b4c <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	68b9      	ldr	r1, [r7, #8]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f000 fd65 	bl	800358c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a27      	ldr	r2, [pc, #156]	; (8002b64 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d107      	bne.n	8002adc <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ada:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a20      	ldr	r2, [pc, #128]	; (8002b64 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d018      	beq.n	8002b18 <HAL_TIM_PWM_Start_DMA+0x300>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aee:	d013      	beq.n	8002b18 <HAL_TIM_PWM_Start_DMA+0x300>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a1c      	ldr	r2, [pc, #112]	; (8002b68 <HAL_TIM_PWM_Start_DMA+0x350>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d00e      	beq.n	8002b18 <HAL_TIM_PWM_Start_DMA+0x300>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a1b      	ldr	r2, [pc, #108]	; (8002b6c <HAL_TIM_PWM_Start_DMA+0x354>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d009      	beq.n	8002b18 <HAL_TIM_PWM_Start_DMA+0x300>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a19      	ldr	r2, [pc, #100]	; (8002b70 <HAL_TIM_PWM_Start_DMA+0x358>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d004      	beq.n	8002b18 <HAL_TIM_PWM_Start_DMA+0x300>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a18      	ldr	r2, [pc, #96]	; (8002b74 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d111      	bne.n	8002b3c <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 0307 	and.w	r3, r3, #7
 8002b22:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	2b06      	cmp	r3, #6
 8002b28:	d010      	beq.n	8002b4c <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f042 0201 	orr.w	r2, r2, #1
 8002b38:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b3a:	e007      	b.n	8002b4c <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f042 0201 	orr.w	r2, r2, #1
 8002b4a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002b4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3718      	adds	r7, #24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	08002f31 	.word	0x08002f31
 8002b5c:	08002fd9 	.word	0x08002fd9
 8002b60:	08002e9f 	.word	0x08002e9f
 8002b64:	40010000 	.word	0x40010000
 8002b68:	40000400 	.word	0x40000400
 8002b6c:	40000800 	.word	0x40000800
 8002b70:	40000c00 	.word	0x40000c00
 8002b74:	40014000 	.word	0x40014000

08002b78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b84:	2300      	movs	r3, #0
 8002b86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d101      	bne.n	8002b96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002b92:	2302      	movs	r3, #2
 8002b94:	e0ae      	b.n	8002cf4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2b0c      	cmp	r3, #12
 8002ba2:	f200 809f 	bhi.w	8002ce4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002ba6:	a201      	add	r2, pc, #4	; (adr r2, 8002bac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bac:	08002be1 	.word	0x08002be1
 8002bb0:	08002ce5 	.word	0x08002ce5
 8002bb4:	08002ce5 	.word	0x08002ce5
 8002bb8:	08002ce5 	.word	0x08002ce5
 8002bbc:	08002c21 	.word	0x08002c21
 8002bc0:	08002ce5 	.word	0x08002ce5
 8002bc4:	08002ce5 	.word	0x08002ce5
 8002bc8:	08002ce5 	.word	0x08002ce5
 8002bcc:	08002c63 	.word	0x08002c63
 8002bd0:	08002ce5 	.word	0x08002ce5
 8002bd4:	08002ce5 	.word	0x08002ce5
 8002bd8:	08002ce5 	.word	0x08002ce5
 8002bdc:	08002ca3 	.word	0x08002ca3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68b9      	ldr	r1, [r7, #8]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f000 faaa 	bl	8003140 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	699a      	ldr	r2, [r3, #24]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 0208 	orr.w	r2, r2, #8
 8002bfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	699a      	ldr	r2, [r3, #24]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 0204 	bic.w	r2, r2, #4
 8002c0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6999      	ldr	r1, [r3, #24]
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	691a      	ldr	r2, [r3, #16]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	619a      	str	r2, [r3, #24]
      break;
 8002c1e:	e064      	b.n	8002cea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68b9      	ldr	r1, [r7, #8]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f000 faf0 	bl	800320c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	699a      	ldr	r2, [r3, #24]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	699a      	ldr	r2, [r3, #24]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6999      	ldr	r1, [r3, #24]
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	021a      	lsls	r2, r3, #8
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	619a      	str	r2, [r3, #24]
      break;
 8002c60:	e043      	b.n	8002cea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68b9      	ldr	r1, [r7, #8]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f000 fb3b 	bl	80032e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	69da      	ldr	r2, [r3, #28]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f042 0208 	orr.w	r2, r2, #8
 8002c7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	69da      	ldr	r2, [r3, #28]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 0204 	bic.w	r2, r2, #4
 8002c8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	69d9      	ldr	r1, [r3, #28]
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	691a      	ldr	r2, [r3, #16]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	61da      	str	r2, [r3, #28]
      break;
 8002ca0:	e023      	b.n	8002cea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68b9      	ldr	r1, [r7, #8]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f000 fb85 	bl	80033b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	69da      	ldr	r2, [r3, #28]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	69da      	ldr	r2, [r3, #28]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ccc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	69d9      	ldr	r1, [r3, #28]
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	021a      	lsls	r2, r3, #8
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	61da      	str	r2, [r3, #28]
      break;
 8002ce2:	e002      	b.n	8002cea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	75fb      	strb	r3, [r7, #23]
      break;
 8002ce8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002cf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3718      	adds	r7, #24
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d06:	2300      	movs	r3, #0
 8002d08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d101      	bne.n	8002d18 <HAL_TIM_ConfigClockSource+0x1c>
 8002d14:	2302      	movs	r3, #2
 8002d16:	e0b4      	b.n	8002e82 <HAL_TIM_ConfigClockSource+0x186>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2202      	movs	r2, #2
 8002d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68ba      	ldr	r2, [r7, #8]
 8002d46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d50:	d03e      	beq.n	8002dd0 <HAL_TIM_ConfigClockSource+0xd4>
 8002d52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d56:	f200 8087 	bhi.w	8002e68 <HAL_TIM_ConfigClockSource+0x16c>
 8002d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d5e:	f000 8086 	beq.w	8002e6e <HAL_TIM_ConfigClockSource+0x172>
 8002d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d66:	d87f      	bhi.n	8002e68 <HAL_TIM_ConfigClockSource+0x16c>
 8002d68:	2b70      	cmp	r3, #112	; 0x70
 8002d6a:	d01a      	beq.n	8002da2 <HAL_TIM_ConfigClockSource+0xa6>
 8002d6c:	2b70      	cmp	r3, #112	; 0x70
 8002d6e:	d87b      	bhi.n	8002e68 <HAL_TIM_ConfigClockSource+0x16c>
 8002d70:	2b60      	cmp	r3, #96	; 0x60
 8002d72:	d050      	beq.n	8002e16 <HAL_TIM_ConfigClockSource+0x11a>
 8002d74:	2b60      	cmp	r3, #96	; 0x60
 8002d76:	d877      	bhi.n	8002e68 <HAL_TIM_ConfigClockSource+0x16c>
 8002d78:	2b50      	cmp	r3, #80	; 0x50
 8002d7a:	d03c      	beq.n	8002df6 <HAL_TIM_ConfigClockSource+0xfa>
 8002d7c:	2b50      	cmp	r3, #80	; 0x50
 8002d7e:	d873      	bhi.n	8002e68 <HAL_TIM_ConfigClockSource+0x16c>
 8002d80:	2b40      	cmp	r3, #64	; 0x40
 8002d82:	d058      	beq.n	8002e36 <HAL_TIM_ConfigClockSource+0x13a>
 8002d84:	2b40      	cmp	r3, #64	; 0x40
 8002d86:	d86f      	bhi.n	8002e68 <HAL_TIM_ConfigClockSource+0x16c>
 8002d88:	2b30      	cmp	r3, #48	; 0x30
 8002d8a:	d064      	beq.n	8002e56 <HAL_TIM_ConfigClockSource+0x15a>
 8002d8c:	2b30      	cmp	r3, #48	; 0x30
 8002d8e:	d86b      	bhi.n	8002e68 <HAL_TIM_ConfigClockSource+0x16c>
 8002d90:	2b20      	cmp	r3, #32
 8002d92:	d060      	beq.n	8002e56 <HAL_TIM_ConfigClockSource+0x15a>
 8002d94:	2b20      	cmp	r3, #32
 8002d96:	d867      	bhi.n	8002e68 <HAL_TIM_ConfigClockSource+0x16c>
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d05c      	beq.n	8002e56 <HAL_TIM_ConfigClockSource+0x15a>
 8002d9c:	2b10      	cmp	r3, #16
 8002d9e:	d05a      	beq.n	8002e56 <HAL_TIM_ConfigClockSource+0x15a>
 8002da0:	e062      	b.n	8002e68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6818      	ldr	r0, [r3, #0]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	6899      	ldr	r1, [r3, #8]
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685a      	ldr	r2, [r3, #4]
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	f000 fbcb 	bl	800354c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002dc4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68ba      	ldr	r2, [r7, #8]
 8002dcc:	609a      	str	r2, [r3, #8]
      break;
 8002dce:	e04f      	b.n	8002e70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6818      	ldr	r0, [r3, #0]
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	6899      	ldr	r1, [r3, #8]
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685a      	ldr	r2, [r3, #4]
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	f000 fbb4 	bl	800354c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	689a      	ldr	r2, [r3, #8]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002df2:	609a      	str	r2, [r3, #8]
      break;
 8002df4:	e03c      	b.n	8002e70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6818      	ldr	r0, [r3, #0]
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	6859      	ldr	r1, [r3, #4]
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	461a      	mov	r2, r3
 8002e04:	f000 fb28 	bl	8003458 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2150      	movs	r1, #80	; 0x50
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f000 fb81 	bl	8003516 <TIM_ITRx_SetConfig>
      break;
 8002e14:	e02c      	b.n	8002e70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6818      	ldr	r0, [r3, #0]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	6859      	ldr	r1, [r3, #4]
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	461a      	mov	r2, r3
 8002e24:	f000 fb47 	bl	80034b6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2160      	movs	r1, #96	; 0x60
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f000 fb71 	bl	8003516 <TIM_ITRx_SetConfig>
      break;
 8002e34:	e01c      	b.n	8002e70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6818      	ldr	r0, [r3, #0]
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	6859      	ldr	r1, [r3, #4]
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	461a      	mov	r2, r3
 8002e44:	f000 fb08 	bl	8003458 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2140      	movs	r1, #64	; 0x40
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f000 fb61 	bl	8003516 <TIM_ITRx_SetConfig>
      break;
 8002e54:	e00c      	b.n	8002e70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4619      	mov	r1, r3
 8002e60:	4610      	mov	r0, r2
 8002e62:	f000 fb58 	bl	8003516 <TIM_ITRx_SetConfig>
      break;
 8002e66:	e003      	b.n	8002e70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e6c:	e000      	b.n	8002e70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	b083      	sub	sp, #12
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002e92:	bf00      	nop
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr

08002e9e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b084      	sub	sp, #16
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eaa:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d107      	bne.n	8002ec6 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ec4:	e02a      	b.n	8002f1c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d107      	bne.n	8002ee0 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ede:	e01d      	b.n	8002f1c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d107      	bne.n	8002efa <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2204      	movs	r2, #4
 8002eee:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ef8:	e010      	b.n	8002f1c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d107      	bne.n	8002f14 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2208      	movs	r2, #8
 8002f08:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f12:	e003      	b.n	8002f1c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	f7ff ffb4 	bl	8002e8a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	771a      	strb	r2, [r3, #28]
}
 8002f28:	bf00      	nop
 8002f2a:	3710      	adds	r7, #16
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d10b      	bne.n	8002f60 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	69db      	ldr	r3, [r3, #28]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d136      	bne.n	8002fc4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f5e:	e031      	b.n	8002fc4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d10b      	bne.n	8002f82 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2202      	movs	r2, #2
 8002f6e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	69db      	ldr	r3, [r3, #28]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d125      	bne.n	8002fc4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f80:	e020      	b.n	8002fc4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d10b      	bne.n	8002fa4 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2204      	movs	r2, #4
 8002f90:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	69db      	ldr	r3, [r3, #28]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d114      	bne.n	8002fc4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fa2:	e00f      	b.n	8002fc4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d10a      	bne.n	8002fc4 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2208      	movs	r2, #8
 8002fb2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	69db      	ldr	r3, [r3, #28]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d103      	bne.n	8002fc4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fc4:	68f8      	ldr	r0, [r7, #12]
 8002fc6:	f7fd fad7 	bl	8000578 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	771a      	strb	r2, [r3, #28]
}
 8002fd0:	bf00      	nop
 8002fd2:	3710      	adds	r7, #16
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d103      	bne.n	8002ff8 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	771a      	strb	r2, [r3, #28]
 8002ff6:	e019      	b.n	800302c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d103      	bne.n	800300a <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2202      	movs	r2, #2
 8003006:	771a      	strb	r2, [r3, #28]
 8003008:	e010      	b.n	800302c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	429a      	cmp	r2, r3
 8003012:	d103      	bne.n	800301c <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2204      	movs	r2, #4
 8003018:	771a      	strb	r2, [r3, #28]
 800301a:	e007      	b.n	800302c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	429a      	cmp	r2, r3
 8003024:	d102      	bne.n	800302c <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2208      	movs	r2, #8
 800302a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f7fd faad 	bl	800058c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	771a      	strb	r2, [r3, #28]
}
 8003038:	bf00      	nop
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003040:	b480      	push	{r7}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a34      	ldr	r2, [pc, #208]	; (8003124 <TIM_Base_SetConfig+0xe4>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d00f      	beq.n	8003078 <TIM_Base_SetConfig+0x38>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800305e:	d00b      	beq.n	8003078 <TIM_Base_SetConfig+0x38>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a31      	ldr	r2, [pc, #196]	; (8003128 <TIM_Base_SetConfig+0xe8>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d007      	beq.n	8003078 <TIM_Base_SetConfig+0x38>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a30      	ldr	r2, [pc, #192]	; (800312c <TIM_Base_SetConfig+0xec>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d003      	beq.n	8003078 <TIM_Base_SetConfig+0x38>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a2f      	ldr	r2, [pc, #188]	; (8003130 <TIM_Base_SetConfig+0xf0>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d108      	bne.n	800308a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800307e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	4313      	orrs	r3, r2
 8003088:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a25      	ldr	r2, [pc, #148]	; (8003124 <TIM_Base_SetConfig+0xe4>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d01b      	beq.n	80030ca <TIM_Base_SetConfig+0x8a>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003098:	d017      	beq.n	80030ca <TIM_Base_SetConfig+0x8a>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a22      	ldr	r2, [pc, #136]	; (8003128 <TIM_Base_SetConfig+0xe8>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d013      	beq.n	80030ca <TIM_Base_SetConfig+0x8a>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a21      	ldr	r2, [pc, #132]	; (800312c <TIM_Base_SetConfig+0xec>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d00f      	beq.n	80030ca <TIM_Base_SetConfig+0x8a>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a20      	ldr	r2, [pc, #128]	; (8003130 <TIM_Base_SetConfig+0xf0>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d00b      	beq.n	80030ca <TIM_Base_SetConfig+0x8a>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a1f      	ldr	r2, [pc, #124]	; (8003134 <TIM_Base_SetConfig+0xf4>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d007      	beq.n	80030ca <TIM_Base_SetConfig+0x8a>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a1e      	ldr	r2, [pc, #120]	; (8003138 <TIM_Base_SetConfig+0xf8>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d003      	beq.n	80030ca <TIM_Base_SetConfig+0x8a>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a1d      	ldr	r2, [pc, #116]	; (800313c <TIM_Base_SetConfig+0xfc>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d108      	bne.n	80030dc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	4313      	orrs	r3, r2
 80030da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a08      	ldr	r2, [pc, #32]	; (8003124 <TIM_Base_SetConfig+0xe4>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d103      	bne.n	8003110 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	691a      	ldr	r2, [r3, #16]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	615a      	str	r2, [r3, #20]
}
 8003116:	bf00      	nop
 8003118:	3714      	adds	r7, #20
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	40010000 	.word	0x40010000
 8003128:	40000400 	.word	0x40000400
 800312c:	40000800 	.word	0x40000800
 8003130:	40000c00 	.word	0x40000c00
 8003134:	40014000 	.word	0x40014000
 8003138:	40014400 	.word	0x40014400
 800313c:	40014800 	.word	0x40014800

08003140 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003140:	b480      	push	{r7}
 8003142:	b087      	sub	sp, #28
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	f023 0201 	bic.w	r2, r3, #1
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800316e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f023 0303 	bic.w	r3, r3, #3
 8003176:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	4313      	orrs	r3, r2
 8003180:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	f023 0302 	bic.w	r3, r3, #2
 8003188:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	4313      	orrs	r3, r2
 8003192:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a1c      	ldr	r2, [pc, #112]	; (8003208 <TIM_OC1_SetConfig+0xc8>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d10c      	bne.n	80031b6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	f023 0308 	bic.w	r3, r3, #8
 80031a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	f023 0304 	bic.w	r3, r3, #4
 80031b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a13      	ldr	r2, [pc, #76]	; (8003208 <TIM_OC1_SetConfig+0xc8>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d111      	bne.n	80031e2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80031cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	4313      	orrs	r3, r2
 80031e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	697a      	ldr	r2, [r7, #20]
 80031fa:	621a      	str	r2, [r3, #32]
}
 80031fc:	bf00      	nop
 80031fe:	371c      	adds	r7, #28
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr
 8003208:	40010000 	.word	0x40010000

0800320c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800320c:	b480      	push	{r7}
 800320e:	b087      	sub	sp, #28
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	f023 0210 	bic.w	r2, r3, #16
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800323a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003242:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	021b      	lsls	r3, r3, #8
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	4313      	orrs	r3, r2
 800324e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	f023 0320 	bic.w	r3, r3, #32
 8003256:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	011b      	lsls	r3, r3, #4
 800325e:	697a      	ldr	r2, [r7, #20]
 8003260:	4313      	orrs	r3, r2
 8003262:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a1e      	ldr	r2, [pc, #120]	; (80032e0 <TIM_OC2_SetConfig+0xd4>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d10d      	bne.n	8003288 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003272:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	011b      	lsls	r3, r3, #4
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	4313      	orrs	r3, r2
 800327e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003286:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a15      	ldr	r2, [pc, #84]	; (80032e0 <TIM_OC2_SetConfig+0xd4>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d113      	bne.n	80032b8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003296:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800329e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	695b      	ldr	r3, [r3, #20]
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685a      	ldr	r2, [r3, #4]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	621a      	str	r2, [r3, #32]
}
 80032d2:	bf00      	nop
 80032d4:	371c      	adds	r7, #28
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	40010000 	.word	0x40010000

080032e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b087      	sub	sp, #28
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a1b      	ldr	r3, [r3, #32]
 80032f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a1b      	ldr	r3, [r3, #32]
 80032fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	69db      	ldr	r3, [r3, #28]
 800330a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f023 0303 	bic.w	r3, r3, #3
 800331a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	4313      	orrs	r3, r2
 8003324:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800332c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	021b      	lsls	r3, r3, #8
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	4313      	orrs	r3, r2
 8003338:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a1d      	ldr	r2, [pc, #116]	; (80033b4 <TIM_OC3_SetConfig+0xd0>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d10d      	bne.n	800335e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003348:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	021b      	lsls	r3, r3, #8
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	4313      	orrs	r3, r2
 8003354:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800335c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a14      	ldr	r2, [pc, #80]	; (80033b4 <TIM_OC3_SetConfig+0xd0>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d113      	bne.n	800338e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800336c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003374:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	011b      	lsls	r3, r3, #4
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	4313      	orrs	r3, r2
 8003380:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	011b      	lsls	r3, r3, #4
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	4313      	orrs	r3, r2
 800338c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685a      	ldr	r2, [r3, #4]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	697a      	ldr	r2, [r7, #20]
 80033a6:	621a      	str	r2, [r3, #32]
}
 80033a8:	bf00      	nop
 80033aa:	371c      	adds	r7, #28
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr
 80033b4:	40010000 	.word	0x40010000

080033b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b087      	sub	sp, #28
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	69db      	ldr	r3, [r3, #28]
 80033de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	021b      	lsls	r3, r3, #8
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003402:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	031b      	lsls	r3, r3, #12
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	4313      	orrs	r3, r2
 800340e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a10      	ldr	r2, [pc, #64]	; (8003454 <TIM_OC4_SetConfig+0x9c>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d109      	bne.n	800342c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800341e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	695b      	ldr	r3, [r3, #20]
 8003424:	019b      	lsls	r3, r3, #6
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	4313      	orrs	r3, r2
 800342a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	697a      	ldr	r2, [r7, #20]
 8003430:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	685a      	ldr	r2, [r3, #4]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	621a      	str	r2, [r3, #32]
}
 8003446:	bf00      	nop
 8003448:	371c      	adds	r7, #28
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	40010000 	.word	0x40010000

08003458 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003458:	b480      	push	{r7}
 800345a:	b087      	sub	sp, #28
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6a1b      	ldr	r3, [r3, #32]
 8003468:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	f023 0201 	bic.w	r2, r3, #1
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003482:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	011b      	lsls	r3, r3, #4
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	4313      	orrs	r3, r2
 800348c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	f023 030a 	bic.w	r3, r3, #10
 8003494:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	4313      	orrs	r3, r2
 800349c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	693a      	ldr	r2, [r7, #16]
 80034a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	697a      	ldr	r2, [r7, #20]
 80034a8:	621a      	str	r2, [r3, #32]
}
 80034aa:	bf00      	nop
 80034ac:	371c      	adds	r7, #28
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr

080034b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b087      	sub	sp, #28
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	60f8      	str	r0, [r7, #12]
 80034be:	60b9      	str	r1, [r7, #8]
 80034c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6a1b      	ldr	r3, [r3, #32]
 80034c6:	f023 0210 	bic.w	r2, r3, #16
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80034e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	031b      	lsls	r3, r3, #12
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80034f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	011b      	lsls	r3, r3, #4
 80034f8:	693a      	ldr	r2, [r7, #16]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	697a      	ldr	r2, [r7, #20]
 8003502:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	693a      	ldr	r2, [r7, #16]
 8003508:	621a      	str	r2, [r3, #32]
}
 800350a:	bf00      	nop
 800350c:	371c      	adds	r7, #28
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr

08003516 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003516:	b480      	push	{r7}
 8003518:	b085      	sub	sp, #20
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
 800351e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800352c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	4313      	orrs	r3, r2
 8003534:	f043 0307 	orr.w	r3, r3, #7
 8003538:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	609a      	str	r2, [r3, #8]
}
 8003540:	bf00      	nop
 8003542:	3714      	adds	r7, #20
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800354c:	b480      	push	{r7}
 800354e:	b087      	sub	sp, #28
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
 8003558:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003566:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	021a      	lsls	r2, r3, #8
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	431a      	orrs	r2, r3
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	4313      	orrs	r3, r2
 8003574:	697a      	ldr	r2, [r7, #20]
 8003576:	4313      	orrs	r3, r2
 8003578:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	697a      	ldr	r2, [r7, #20]
 800357e:	609a      	str	r2, [r3, #8]
}
 8003580:	bf00      	nop
 8003582:	371c      	adds	r7, #28
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800358c:	b480      	push	{r7}
 800358e:	b087      	sub	sp, #28
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	f003 031f 	and.w	r3, r3, #31
 800359e:	2201      	movs	r2, #1
 80035a0:	fa02 f303 	lsl.w	r3, r2, r3
 80035a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6a1a      	ldr	r2, [r3, #32]
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	43db      	mvns	r3, r3
 80035ae:	401a      	ands	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6a1a      	ldr	r2, [r3, #32]
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	f003 031f 	and.w	r3, r3, #31
 80035be:	6879      	ldr	r1, [r7, #4]
 80035c0:	fa01 f303 	lsl.w	r3, r1, r3
 80035c4:	431a      	orrs	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	621a      	str	r2, [r3, #32]
}
 80035ca:	bf00      	nop
 80035cc:	371c      	adds	r7, #28
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
	...

080035d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d101      	bne.n	80035f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035ec:	2302      	movs	r3, #2
 80035ee:	e050      	b.n	8003692 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2202      	movs	r2, #2
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003616:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	4313      	orrs	r3, r2
 8003620:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a1c      	ldr	r2, [pc, #112]	; (80036a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d018      	beq.n	8003666 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800363c:	d013      	beq.n	8003666 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a18      	ldr	r2, [pc, #96]	; (80036a4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d00e      	beq.n	8003666 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a16      	ldr	r2, [pc, #88]	; (80036a8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d009      	beq.n	8003666 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a15      	ldr	r2, [pc, #84]	; (80036ac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d004      	beq.n	8003666 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a13      	ldr	r2, [pc, #76]	; (80036b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d10c      	bne.n	8003680 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800366c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	68ba      	ldr	r2, [r7, #8]
 8003674:	4313      	orrs	r3, r2
 8003676:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3714      	adds	r7, #20
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	40010000 	.word	0x40010000
 80036a4:	40000400 	.word	0x40000400
 80036a8:	40000800 	.word	0x40000800
 80036ac:	40000c00 	.word	0x40000c00
 80036b0:	40014000 	.word	0x40014000

080036b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80036be:	2300      	movs	r3, #0
 80036c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d101      	bne.n	80036d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80036cc:	2302      	movs	r3, #2
 80036ce:	e03d      	b.n	800374c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	4313      	orrs	r3, r2
 8003700:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4313      	orrs	r3, r2
 800370e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	4313      	orrs	r3, r2
 800371c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	4313      	orrs	r3, r2
 800372a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	4313      	orrs	r3, r2
 8003738:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3714      	adds	r7, #20
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e03f      	b.n	80037ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d106      	bne.n	8003784 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7fd fafa 	bl	8000d78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2224      	movs	r2, #36	; 0x24
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68da      	ldr	r2, [r3, #12]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800379a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 f829 	bl	80037f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	691a      	ldr	r2, [r3, #16]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	695a      	ldr	r2, [r3, #20]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68da      	ldr	r2, [r3, #12]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2220      	movs	r2, #32
 80037dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2220      	movs	r2, #32
 80037e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
	...

080037f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037f8:	b09f      	sub	sp, #124	; 0x7c
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003808:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800380a:	68d9      	ldr	r1, [r3, #12]
 800380c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	ea40 0301 	orr.w	r3, r0, r1
 8003814:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003816:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003818:	689a      	ldr	r2, [r3, #8]
 800381a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	431a      	orrs	r2, r3
 8003820:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003822:	695b      	ldr	r3, [r3, #20]
 8003824:	431a      	orrs	r2, r3
 8003826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003828:	69db      	ldr	r3, [r3, #28]
 800382a:	4313      	orrs	r3, r2
 800382c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800382e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003838:	f021 010c 	bic.w	r1, r1, #12
 800383c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003842:	430b      	orrs	r3, r1
 8003844:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003846:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003850:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003852:	6999      	ldr	r1, [r3, #24]
 8003854:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	ea40 0301 	orr.w	r3, r0, r1
 800385c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800385e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	4bc5      	ldr	r3, [pc, #788]	; (8003b78 <UART_SetConfig+0x384>)
 8003864:	429a      	cmp	r2, r3
 8003866:	d004      	beq.n	8003872 <UART_SetConfig+0x7e>
 8003868:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	4bc3      	ldr	r3, [pc, #780]	; (8003b7c <UART_SetConfig+0x388>)
 800386e:	429a      	cmp	r2, r3
 8003870:	d103      	bne.n	800387a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003872:	f7fe ff15 	bl	80026a0 <HAL_RCC_GetPCLK2Freq>
 8003876:	6778      	str	r0, [r7, #116]	; 0x74
 8003878:	e002      	b.n	8003880 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800387a:	f7fe fefd 	bl	8002678 <HAL_RCC_GetPCLK1Freq>
 800387e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003882:	69db      	ldr	r3, [r3, #28]
 8003884:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003888:	f040 80b6 	bne.w	80039f8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800388c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800388e:	461c      	mov	r4, r3
 8003890:	f04f 0500 	mov.w	r5, #0
 8003894:	4622      	mov	r2, r4
 8003896:	462b      	mov	r3, r5
 8003898:	1891      	adds	r1, r2, r2
 800389a:	6439      	str	r1, [r7, #64]	; 0x40
 800389c:	415b      	adcs	r3, r3
 800389e:	647b      	str	r3, [r7, #68]	; 0x44
 80038a0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80038a4:	1912      	adds	r2, r2, r4
 80038a6:	eb45 0303 	adc.w	r3, r5, r3
 80038aa:	f04f 0000 	mov.w	r0, #0
 80038ae:	f04f 0100 	mov.w	r1, #0
 80038b2:	00d9      	lsls	r1, r3, #3
 80038b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80038b8:	00d0      	lsls	r0, r2, #3
 80038ba:	4602      	mov	r2, r0
 80038bc:	460b      	mov	r3, r1
 80038be:	1911      	adds	r1, r2, r4
 80038c0:	6639      	str	r1, [r7, #96]	; 0x60
 80038c2:	416b      	adcs	r3, r5
 80038c4:	667b      	str	r3, [r7, #100]	; 0x64
 80038c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	461a      	mov	r2, r3
 80038cc:	f04f 0300 	mov.w	r3, #0
 80038d0:	1891      	adds	r1, r2, r2
 80038d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80038d4:	415b      	adcs	r3, r3
 80038d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80038dc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80038e0:	f7fc fcce 	bl	8000280 <__aeabi_uldivmod>
 80038e4:	4602      	mov	r2, r0
 80038e6:	460b      	mov	r3, r1
 80038e8:	4ba5      	ldr	r3, [pc, #660]	; (8003b80 <UART_SetConfig+0x38c>)
 80038ea:	fba3 2302 	umull	r2, r3, r3, r2
 80038ee:	095b      	lsrs	r3, r3, #5
 80038f0:	011e      	lsls	r6, r3, #4
 80038f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038f4:	461c      	mov	r4, r3
 80038f6:	f04f 0500 	mov.w	r5, #0
 80038fa:	4622      	mov	r2, r4
 80038fc:	462b      	mov	r3, r5
 80038fe:	1891      	adds	r1, r2, r2
 8003900:	6339      	str	r1, [r7, #48]	; 0x30
 8003902:	415b      	adcs	r3, r3
 8003904:	637b      	str	r3, [r7, #52]	; 0x34
 8003906:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800390a:	1912      	adds	r2, r2, r4
 800390c:	eb45 0303 	adc.w	r3, r5, r3
 8003910:	f04f 0000 	mov.w	r0, #0
 8003914:	f04f 0100 	mov.w	r1, #0
 8003918:	00d9      	lsls	r1, r3, #3
 800391a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800391e:	00d0      	lsls	r0, r2, #3
 8003920:	4602      	mov	r2, r0
 8003922:	460b      	mov	r3, r1
 8003924:	1911      	adds	r1, r2, r4
 8003926:	65b9      	str	r1, [r7, #88]	; 0x58
 8003928:	416b      	adcs	r3, r5
 800392a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800392c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	461a      	mov	r2, r3
 8003932:	f04f 0300 	mov.w	r3, #0
 8003936:	1891      	adds	r1, r2, r2
 8003938:	62b9      	str	r1, [r7, #40]	; 0x28
 800393a:	415b      	adcs	r3, r3
 800393c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800393e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003942:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003946:	f7fc fc9b 	bl	8000280 <__aeabi_uldivmod>
 800394a:	4602      	mov	r2, r0
 800394c:	460b      	mov	r3, r1
 800394e:	4b8c      	ldr	r3, [pc, #560]	; (8003b80 <UART_SetConfig+0x38c>)
 8003950:	fba3 1302 	umull	r1, r3, r3, r2
 8003954:	095b      	lsrs	r3, r3, #5
 8003956:	2164      	movs	r1, #100	; 0x64
 8003958:	fb01 f303 	mul.w	r3, r1, r3
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	00db      	lsls	r3, r3, #3
 8003960:	3332      	adds	r3, #50	; 0x32
 8003962:	4a87      	ldr	r2, [pc, #540]	; (8003b80 <UART_SetConfig+0x38c>)
 8003964:	fba2 2303 	umull	r2, r3, r2, r3
 8003968:	095b      	lsrs	r3, r3, #5
 800396a:	005b      	lsls	r3, r3, #1
 800396c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003970:	441e      	add	r6, r3
 8003972:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003974:	4618      	mov	r0, r3
 8003976:	f04f 0100 	mov.w	r1, #0
 800397a:	4602      	mov	r2, r0
 800397c:	460b      	mov	r3, r1
 800397e:	1894      	adds	r4, r2, r2
 8003980:	623c      	str	r4, [r7, #32]
 8003982:	415b      	adcs	r3, r3
 8003984:	627b      	str	r3, [r7, #36]	; 0x24
 8003986:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800398a:	1812      	adds	r2, r2, r0
 800398c:	eb41 0303 	adc.w	r3, r1, r3
 8003990:	f04f 0400 	mov.w	r4, #0
 8003994:	f04f 0500 	mov.w	r5, #0
 8003998:	00dd      	lsls	r5, r3, #3
 800399a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800399e:	00d4      	lsls	r4, r2, #3
 80039a0:	4622      	mov	r2, r4
 80039a2:	462b      	mov	r3, r5
 80039a4:	1814      	adds	r4, r2, r0
 80039a6:	653c      	str	r4, [r7, #80]	; 0x50
 80039a8:	414b      	adcs	r3, r1
 80039aa:	657b      	str	r3, [r7, #84]	; 0x54
 80039ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	461a      	mov	r2, r3
 80039b2:	f04f 0300 	mov.w	r3, #0
 80039b6:	1891      	adds	r1, r2, r2
 80039b8:	61b9      	str	r1, [r7, #24]
 80039ba:	415b      	adcs	r3, r3
 80039bc:	61fb      	str	r3, [r7, #28]
 80039be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039c2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80039c6:	f7fc fc5b 	bl	8000280 <__aeabi_uldivmod>
 80039ca:	4602      	mov	r2, r0
 80039cc:	460b      	mov	r3, r1
 80039ce:	4b6c      	ldr	r3, [pc, #432]	; (8003b80 <UART_SetConfig+0x38c>)
 80039d0:	fba3 1302 	umull	r1, r3, r3, r2
 80039d4:	095b      	lsrs	r3, r3, #5
 80039d6:	2164      	movs	r1, #100	; 0x64
 80039d8:	fb01 f303 	mul.w	r3, r1, r3
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	3332      	adds	r3, #50	; 0x32
 80039e2:	4a67      	ldr	r2, [pc, #412]	; (8003b80 <UART_SetConfig+0x38c>)
 80039e4:	fba2 2303 	umull	r2, r3, r2, r3
 80039e8:	095b      	lsrs	r3, r3, #5
 80039ea:	f003 0207 	and.w	r2, r3, #7
 80039ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4432      	add	r2, r6
 80039f4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80039f6:	e0b9      	b.n	8003b6c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039fa:	461c      	mov	r4, r3
 80039fc:	f04f 0500 	mov.w	r5, #0
 8003a00:	4622      	mov	r2, r4
 8003a02:	462b      	mov	r3, r5
 8003a04:	1891      	adds	r1, r2, r2
 8003a06:	6139      	str	r1, [r7, #16]
 8003a08:	415b      	adcs	r3, r3
 8003a0a:	617b      	str	r3, [r7, #20]
 8003a0c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003a10:	1912      	adds	r2, r2, r4
 8003a12:	eb45 0303 	adc.w	r3, r5, r3
 8003a16:	f04f 0000 	mov.w	r0, #0
 8003a1a:	f04f 0100 	mov.w	r1, #0
 8003a1e:	00d9      	lsls	r1, r3, #3
 8003a20:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a24:	00d0      	lsls	r0, r2, #3
 8003a26:	4602      	mov	r2, r0
 8003a28:	460b      	mov	r3, r1
 8003a2a:	eb12 0804 	adds.w	r8, r2, r4
 8003a2e:	eb43 0905 	adc.w	r9, r3, r5
 8003a32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f04f 0100 	mov.w	r1, #0
 8003a3c:	f04f 0200 	mov.w	r2, #0
 8003a40:	f04f 0300 	mov.w	r3, #0
 8003a44:	008b      	lsls	r3, r1, #2
 8003a46:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003a4a:	0082      	lsls	r2, r0, #2
 8003a4c:	4640      	mov	r0, r8
 8003a4e:	4649      	mov	r1, r9
 8003a50:	f7fc fc16 	bl	8000280 <__aeabi_uldivmod>
 8003a54:	4602      	mov	r2, r0
 8003a56:	460b      	mov	r3, r1
 8003a58:	4b49      	ldr	r3, [pc, #292]	; (8003b80 <UART_SetConfig+0x38c>)
 8003a5a:	fba3 2302 	umull	r2, r3, r3, r2
 8003a5e:	095b      	lsrs	r3, r3, #5
 8003a60:	011e      	lsls	r6, r3, #4
 8003a62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a64:	4618      	mov	r0, r3
 8003a66:	f04f 0100 	mov.w	r1, #0
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	1894      	adds	r4, r2, r2
 8003a70:	60bc      	str	r4, [r7, #8]
 8003a72:	415b      	adcs	r3, r3
 8003a74:	60fb      	str	r3, [r7, #12]
 8003a76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a7a:	1812      	adds	r2, r2, r0
 8003a7c:	eb41 0303 	adc.w	r3, r1, r3
 8003a80:	f04f 0400 	mov.w	r4, #0
 8003a84:	f04f 0500 	mov.w	r5, #0
 8003a88:	00dd      	lsls	r5, r3, #3
 8003a8a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003a8e:	00d4      	lsls	r4, r2, #3
 8003a90:	4622      	mov	r2, r4
 8003a92:	462b      	mov	r3, r5
 8003a94:	1814      	adds	r4, r2, r0
 8003a96:	64bc      	str	r4, [r7, #72]	; 0x48
 8003a98:	414b      	adcs	r3, r1
 8003a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f04f 0100 	mov.w	r1, #0
 8003aa6:	f04f 0200 	mov.w	r2, #0
 8003aaa:	f04f 0300 	mov.w	r3, #0
 8003aae:	008b      	lsls	r3, r1, #2
 8003ab0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003ab4:	0082      	lsls	r2, r0, #2
 8003ab6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003aba:	f7fc fbe1 	bl	8000280 <__aeabi_uldivmod>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	4b2f      	ldr	r3, [pc, #188]	; (8003b80 <UART_SetConfig+0x38c>)
 8003ac4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ac8:	095b      	lsrs	r3, r3, #5
 8003aca:	2164      	movs	r1, #100	; 0x64
 8003acc:	fb01 f303 	mul.w	r3, r1, r3
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	011b      	lsls	r3, r3, #4
 8003ad4:	3332      	adds	r3, #50	; 0x32
 8003ad6:	4a2a      	ldr	r2, [pc, #168]	; (8003b80 <UART_SetConfig+0x38c>)
 8003ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8003adc:	095b      	lsrs	r3, r3, #5
 8003ade:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ae2:	441e      	add	r6, r3
 8003ae4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f04f 0100 	mov.w	r1, #0
 8003aec:	4602      	mov	r2, r0
 8003aee:	460b      	mov	r3, r1
 8003af0:	1894      	adds	r4, r2, r2
 8003af2:	603c      	str	r4, [r7, #0]
 8003af4:	415b      	adcs	r3, r3
 8003af6:	607b      	str	r3, [r7, #4]
 8003af8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003afc:	1812      	adds	r2, r2, r0
 8003afe:	eb41 0303 	adc.w	r3, r1, r3
 8003b02:	f04f 0400 	mov.w	r4, #0
 8003b06:	f04f 0500 	mov.w	r5, #0
 8003b0a:	00dd      	lsls	r5, r3, #3
 8003b0c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003b10:	00d4      	lsls	r4, r2, #3
 8003b12:	4622      	mov	r2, r4
 8003b14:	462b      	mov	r3, r5
 8003b16:	eb12 0a00 	adds.w	sl, r2, r0
 8003b1a:	eb43 0b01 	adc.w	fp, r3, r1
 8003b1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f04f 0100 	mov.w	r1, #0
 8003b28:	f04f 0200 	mov.w	r2, #0
 8003b2c:	f04f 0300 	mov.w	r3, #0
 8003b30:	008b      	lsls	r3, r1, #2
 8003b32:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003b36:	0082      	lsls	r2, r0, #2
 8003b38:	4650      	mov	r0, sl
 8003b3a:	4659      	mov	r1, fp
 8003b3c:	f7fc fba0 	bl	8000280 <__aeabi_uldivmod>
 8003b40:	4602      	mov	r2, r0
 8003b42:	460b      	mov	r3, r1
 8003b44:	4b0e      	ldr	r3, [pc, #56]	; (8003b80 <UART_SetConfig+0x38c>)
 8003b46:	fba3 1302 	umull	r1, r3, r3, r2
 8003b4a:	095b      	lsrs	r3, r3, #5
 8003b4c:	2164      	movs	r1, #100	; 0x64
 8003b4e:	fb01 f303 	mul.w	r3, r1, r3
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	011b      	lsls	r3, r3, #4
 8003b56:	3332      	adds	r3, #50	; 0x32
 8003b58:	4a09      	ldr	r2, [pc, #36]	; (8003b80 <UART_SetConfig+0x38c>)
 8003b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5e:	095b      	lsrs	r3, r3, #5
 8003b60:	f003 020f 	and.w	r2, r3, #15
 8003b64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4432      	add	r2, r6
 8003b6a:	609a      	str	r2, [r3, #8]
}
 8003b6c:	bf00      	nop
 8003b6e:	377c      	adds	r7, #124	; 0x7c
 8003b70:	46bd      	mov	sp, r7
 8003b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b76:	bf00      	nop
 8003b78:	40011000 	.word	0x40011000
 8003b7c:	40011400 	.word	0x40011400
 8003b80:	51eb851f 	.word	0x51eb851f

08003b84 <__errno>:
 8003b84:	4b01      	ldr	r3, [pc, #4]	; (8003b8c <__errno+0x8>)
 8003b86:	6818      	ldr	r0, [r3, #0]
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	2000000c 	.word	0x2000000c

08003b90 <__libc_init_array>:
 8003b90:	b570      	push	{r4, r5, r6, lr}
 8003b92:	4d0d      	ldr	r5, [pc, #52]	; (8003bc8 <__libc_init_array+0x38>)
 8003b94:	4c0d      	ldr	r4, [pc, #52]	; (8003bcc <__libc_init_array+0x3c>)
 8003b96:	1b64      	subs	r4, r4, r5
 8003b98:	10a4      	asrs	r4, r4, #2
 8003b9a:	2600      	movs	r6, #0
 8003b9c:	42a6      	cmp	r6, r4
 8003b9e:	d109      	bne.n	8003bb4 <__libc_init_array+0x24>
 8003ba0:	4d0b      	ldr	r5, [pc, #44]	; (8003bd0 <__libc_init_array+0x40>)
 8003ba2:	4c0c      	ldr	r4, [pc, #48]	; (8003bd4 <__libc_init_array+0x44>)
 8003ba4:	f001 f822 	bl	8004bec <_init>
 8003ba8:	1b64      	subs	r4, r4, r5
 8003baa:	10a4      	asrs	r4, r4, #2
 8003bac:	2600      	movs	r6, #0
 8003bae:	42a6      	cmp	r6, r4
 8003bb0:	d105      	bne.n	8003bbe <__libc_init_array+0x2e>
 8003bb2:	bd70      	pop	{r4, r5, r6, pc}
 8003bb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bb8:	4798      	blx	r3
 8003bba:	3601      	adds	r6, #1
 8003bbc:	e7ee      	b.n	8003b9c <__libc_init_array+0xc>
 8003bbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bc2:	4798      	blx	r3
 8003bc4:	3601      	adds	r6, #1
 8003bc6:	e7f2      	b.n	8003bae <__libc_init_array+0x1e>
 8003bc8:	08004d78 	.word	0x08004d78
 8003bcc:	08004d78 	.word	0x08004d78
 8003bd0:	08004d78 	.word	0x08004d78
 8003bd4:	08004d7c 	.word	0x08004d7c

08003bd8 <memset>:
 8003bd8:	4402      	add	r2, r0
 8003bda:	4603      	mov	r3, r0
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d100      	bne.n	8003be2 <memset+0xa>
 8003be0:	4770      	bx	lr
 8003be2:	f803 1b01 	strb.w	r1, [r3], #1
 8003be6:	e7f9      	b.n	8003bdc <memset+0x4>

08003be8 <rand>:
 8003be8:	4b17      	ldr	r3, [pc, #92]	; (8003c48 <rand+0x60>)
 8003bea:	b510      	push	{r4, lr}
 8003bec:	681c      	ldr	r4, [r3, #0]
 8003bee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003bf0:	b9b3      	cbnz	r3, 8003c20 <rand+0x38>
 8003bf2:	2018      	movs	r0, #24
 8003bf4:	f000 f868 	bl	8003cc8 <malloc>
 8003bf8:	63a0      	str	r0, [r4, #56]	; 0x38
 8003bfa:	b928      	cbnz	r0, 8003c08 <rand+0x20>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	4b13      	ldr	r3, [pc, #76]	; (8003c4c <rand+0x64>)
 8003c00:	4813      	ldr	r0, [pc, #76]	; (8003c50 <rand+0x68>)
 8003c02:	214e      	movs	r1, #78	; 0x4e
 8003c04:	f000 f830 	bl	8003c68 <__assert_func>
 8003c08:	4a12      	ldr	r2, [pc, #72]	; (8003c54 <rand+0x6c>)
 8003c0a:	4b13      	ldr	r3, [pc, #76]	; (8003c58 <rand+0x70>)
 8003c0c:	e9c0 2300 	strd	r2, r3, [r0]
 8003c10:	4b12      	ldr	r3, [pc, #72]	; (8003c5c <rand+0x74>)
 8003c12:	6083      	str	r3, [r0, #8]
 8003c14:	230b      	movs	r3, #11
 8003c16:	8183      	strh	r3, [r0, #12]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8003c20:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003c22:	480f      	ldr	r0, [pc, #60]	; (8003c60 <rand+0x78>)
 8003c24:	690a      	ldr	r2, [r1, #16]
 8003c26:	694b      	ldr	r3, [r1, #20]
 8003c28:	4c0e      	ldr	r4, [pc, #56]	; (8003c64 <rand+0x7c>)
 8003c2a:	4350      	muls	r0, r2
 8003c2c:	fb04 0003 	mla	r0, r4, r3, r0
 8003c30:	fba2 3404 	umull	r3, r4, r2, r4
 8003c34:	1c5a      	adds	r2, r3, #1
 8003c36:	4404      	add	r4, r0
 8003c38:	f144 0000 	adc.w	r0, r4, #0
 8003c3c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8003c40:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003c44:	bd10      	pop	{r4, pc}
 8003c46:	bf00      	nop
 8003c48:	2000000c 	.word	0x2000000c
 8003c4c:	08004c28 	.word	0x08004c28
 8003c50:	08004c3f 	.word	0x08004c3f
 8003c54:	abcd330e 	.word	0xabcd330e
 8003c58:	e66d1234 	.word	0xe66d1234
 8003c5c:	0005deec 	.word	0x0005deec
 8003c60:	5851f42d 	.word	0x5851f42d
 8003c64:	4c957f2d 	.word	0x4c957f2d

08003c68 <__assert_func>:
 8003c68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003c6a:	4614      	mov	r4, r2
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	4b09      	ldr	r3, [pc, #36]	; (8003c94 <__assert_func+0x2c>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4605      	mov	r5, r0
 8003c74:	68d8      	ldr	r0, [r3, #12]
 8003c76:	b14c      	cbz	r4, 8003c8c <__assert_func+0x24>
 8003c78:	4b07      	ldr	r3, [pc, #28]	; (8003c98 <__assert_func+0x30>)
 8003c7a:	9100      	str	r1, [sp, #0]
 8003c7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003c80:	4906      	ldr	r1, [pc, #24]	; (8003c9c <__assert_func+0x34>)
 8003c82:	462b      	mov	r3, r5
 8003c84:	f000 f80e 	bl	8003ca4 <fiprintf>
 8003c88:	f000 fc8e 	bl	80045a8 <abort>
 8003c8c:	4b04      	ldr	r3, [pc, #16]	; (8003ca0 <__assert_func+0x38>)
 8003c8e:	461c      	mov	r4, r3
 8003c90:	e7f3      	b.n	8003c7a <__assert_func+0x12>
 8003c92:	bf00      	nop
 8003c94:	2000000c 	.word	0x2000000c
 8003c98:	08004c9e 	.word	0x08004c9e
 8003c9c:	08004cab 	.word	0x08004cab
 8003ca0:	08004cd9 	.word	0x08004cd9

08003ca4 <fiprintf>:
 8003ca4:	b40e      	push	{r1, r2, r3}
 8003ca6:	b503      	push	{r0, r1, lr}
 8003ca8:	4601      	mov	r1, r0
 8003caa:	ab03      	add	r3, sp, #12
 8003cac:	4805      	ldr	r0, [pc, #20]	; (8003cc4 <fiprintf+0x20>)
 8003cae:	f853 2b04 	ldr.w	r2, [r3], #4
 8003cb2:	6800      	ldr	r0, [r0, #0]
 8003cb4:	9301      	str	r3, [sp, #4]
 8003cb6:	f000 f8e3 	bl	8003e80 <_vfiprintf_r>
 8003cba:	b002      	add	sp, #8
 8003cbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003cc0:	b003      	add	sp, #12
 8003cc2:	4770      	bx	lr
 8003cc4:	2000000c 	.word	0x2000000c

08003cc8 <malloc>:
 8003cc8:	4b02      	ldr	r3, [pc, #8]	; (8003cd4 <malloc+0xc>)
 8003cca:	4601      	mov	r1, r0
 8003ccc:	6818      	ldr	r0, [r3, #0]
 8003cce:	f000 b853 	b.w	8003d78 <_malloc_r>
 8003cd2:	bf00      	nop
 8003cd4:	2000000c 	.word	0x2000000c

08003cd8 <_free_r>:
 8003cd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003cda:	2900      	cmp	r1, #0
 8003cdc:	d048      	beq.n	8003d70 <_free_r+0x98>
 8003cde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ce2:	9001      	str	r0, [sp, #4]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f1a1 0404 	sub.w	r4, r1, #4
 8003cea:	bfb8      	it	lt
 8003cec:	18e4      	addlt	r4, r4, r3
 8003cee:	f000 fe81 	bl	80049f4 <__malloc_lock>
 8003cf2:	4a20      	ldr	r2, [pc, #128]	; (8003d74 <_free_r+0x9c>)
 8003cf4:	9801      	ldr	r0, [sp, #4]
 8003cf6:	6813      	ldr	r3, [r2, #0]
 8003cf8:	4615      	mov	r5, r2
 8003cfa:	b933      	cbnz	r3, 8003d0a <_free_r+0x32>
 8003cfc:	6063      	str	r3, [r4, #4]
 8003cfe:	6014      	str	r4, [r2, #0]
 8003d00:	b003      	add	sp, #12
 8003d02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003d06:	f000 be7b 	b.w	8004a00 <__malloc_unlock>
 8003d0a:	42a3      	cmp	r3, r4
 8003d0c:	d90b      	bls.n	8003d26 <_free_r+0x4e>
 8003d0e:	6821      	ldr	r1, [r4, #0]
 8003d10:	1862      	adds	r2, r4, r1
 8003d12:	4293      	cmp	r3, r2
 8003d14:	bf04      	itt	eq
 8003d16:	681a      	ldreq	r2, [r3, #0]
 8003d18:	685b      	ldreq	r3, [r3, #4]
 8003d1a:	6063      	str	r3, [r4, #4]
 8003d1c:	bf04      	itt	eq
 8003d1e:	1852      	addeq	r2, r2, r1
 8003d20:	6022      	streq	r2, [r4, #0]
 8003d22:	602c      	str	r4, [r5, #0]
 8003d24:	e7ec      	b.n	8003d00 <_free_r+0x28>
 8003d26:	461a      	mov	r2, r3
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	b10b      	cbz	r3, 8003d30 <_free_r+0x58>
 8003d2c:	42a3      	cmp	r3, r4
 8003d2e:	d9fa      	bls.n	8003d26 <_free_r+0x4e>
 8003d30:	6811      	ldr	r1, [r2, #0]
 8003d32:	1855      	adds	r5, r2, r1
 8003d34:	42a5      	cmp	r5, r4
 8003d36:	d10b      	bne.n	8003d50 <_free_r+0x78>
 8003d38:	6824      	ldr	r4, [r4, #0]
 8003d3a:	4421      	add	r1, r4
 8003d3c:	1854      	adds	r4, r2, r1
 8003d3e:	42a3      	cmp	r3, r4
 8003d40:	6011      	str	r1, [r2, #0]
 8003d42:	d1dd      	bne.n	8003d00 <_free_r+0x28>
 8003d44:	681c      	ldr	r4, [r3, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	6053      	str	r3, [r2, #4]
 8003d4a:	4421      	add	r1, r4
 8003d4c:	6011      	str	r1, [r2, #0]
 8003d4e:	e7d7      	b.n	8003d00 <_free_r+0x28>
 8003d50:	d902      	bls.n	8003d58 <_free_r+0x80>
 8003d52:	230c      	movs	r3, #12
 8003d54:	6003      	str	r3, [r0, #0]
 8003d56:	e7d3      	b.n	8003d00 <_free_r+0x28>
 8003d58:	6825      	ldr	r5, [r4, #0]
 8003d5a:	1961      	adds	r1, r4, r5
 8003d5c:	428b      	cmp	r3, r1
 8003d5e:	bf04      	itt	eq
 8003d60:	6819      	ldreq	r1, [r3, #0]
 8003d62:	685b      	ldreq	r3, [r3, #4]
 8003d64:	6063      	str	r3, [r4, #4]
 8003d66:	bf04      	itt	eq
 8003d68:	1949      	addeq	r1, r1, r5
 8003d6a:	6021      	streq	r1, [r4, #0]
 8003d6c:	6054      	str	r4, [r2, #4]
 8003d6e:	e7c7      	b.n	8003d00 <_free_r+0x28>
 8003d70:	b003      	add	sp, #12
 8003d72:	bd30      	pop	{r4, r5, pc}
 8003d74:	20000090 	.word	0x20000090

08003d78 <_malloc_r>:
 8003d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d7a:	1ccd      	adds	r5, r1, #3
 8003d7c:	f025 0503 	bic.w	r5, r5, #3
 8003d80:	3508      	adds	r5, #8
 8003d82:	2d0c      	cmp	r5, #12
 8003d84:	bf38      	it	cc
 8003d86:	250c      	movcc	r5, #12
 8003d88:	2d00      	cmp	r5, #0
 8003d8a:	4606      	mov	r6, r0
 8003d8c:	db01      	blt.n	8003d92 <_malloc_r+0x1a>
 8003d8e:	42a9      	cmp	r1, r5
 8003d90:	d903      	bls.n	8003d9a <_malloc_r+0x22>
 8003d92:	230c      	movs	r3, #12
 8003d94:	6033      	str	r3, [r6, #0]
 8003d96:	2000      	movs	r0, #0
 8003d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d9a:	f000 fe2b 	bl	80049f4 <__malloc_lock>
 8003d9e:	4921      	ldr	r1, [pc, #132]	; (8003e24 <_malloc_r+0xac>)
 8003da0:	680a      	ldr	r2, [r1, #0]
 8003da2:	4614      	mov	r4, r2
 8003da4:	b99c      	cbnz	r4, 8003dce <_malloc_r+0x56>
 8003da6:	4f20      	ldr	r7, [pc, #128]	; (8003e28 <_malloc_r+0xb0>)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	b923      	cbnz	r3, 8003db6 <_malloc_r+0x3e>
 8003dac:	4621      	mov	r1, r4
 8003dae:	4630      	mov	r0, r6
 8003db0:	f000 fb2a 	bl	8004408 <_sbrk_r>
 8003db4:	6038      	str	r0, [r7, #0]
 8003db6:	4629      	mov	r1, r5
 8003db8:	4630      	mov	r0, r6
 8003dba:	f000 fb25 	bl	8004408 <_sbrk_r>
 8003dbe:	1c43      	adds	r3, r0, #1
 8003dc0:	d123      	bne.n	8003e0a <_malloc_r+0x92>
 8003dc2:	230c      	movs	r3, #12
 8003dc4:	6033      	str	r3, [r6, #0]
 8003dc6:	4630      	mov	r0, r6
 8003dc8:	f000 fe1a 	bl	8004a00 <__malloc_unlock>
 8003dcc:	e7e3      	b.n	8003d96 <_malloc_r+0x1e>
 8003dce:	6823      	ldr	r3, [r4, #0]
 8003dd0:	1b5b      	subs	r3, r3, r5
 8003dd2:	d417      	bmi.n	8003e04 <_malloc_r+0x8c>
 8003dd4:	2b0b      	cmp	r3, #11
 8003dd6:	d903      	bls.n	8003de0 <_malloc_r+0x68>
 8003dd8:	6023      	str	r3, [r4, #0]
 8003dda:	441c      	add	r4, r3
 8003ddc:	6025      	str	r5, [r4, #0]
 8003dde:	e004      	b.n	8003dea <_malloc_r+0x72>
 8003de0:	6863      	ldr	r3, [r4, #4]
 8003de2:	42a2      	cmp	r2, r4
 8003de4:	bf0c      	ite	eq
 8003de6:	600b      	streq	r3, [r1, #0]
 8003de8:	6053      	strne	r3, [r2, #4]
 8003dea:	4630      	mov	r0, r6
 8003dec:	f000 fe08 	bl	8004a00 <__malloc_unlock>
 8003df0:	f104 000b 	add.w	r0, r4, #11
 8003df4:	1d23      	adds	r3, r4, #4
 8003df6:	f020 0007 	bic.w	r0, r0, #7
 8003dfa:	1ac2      	subs	r2, r0, r3
 8003dfc:	d0cc      	beq.n	8003d98 <_malloc_r+0x20>
 8003dfe:	1a1b      	subs	r3, r3, r0
 8003e00:	50a3      	str	r3, [r4, r2]
 8003e02:	e7c9      	b.n	8003d98 <_malloc_r+0x20>
 8003e04:	4622      	mov	r2, r4
 8003e06:	6864      	ldr	r4, [r4, #4]
 8003e08:	e7cc      	b.n	8003da4 <_malloc_r+0x2c>
 8003e0a:	1cc4      	adds	r4, r0, #3
 8003e0c:	f024 0403 	bic.w	r4, r4, #3
 8003e10:	42a0      	cmp	r0, r4
 8003e12:	d0e3      	beq.n	8003ddc <_malloc_r+0x64>
 8003e14:	1a21      	subs	r1, r4, r0
 8003e16:	4630      	mov	r0, r6
 8003e18:	f000 faf6 	bl	8004408 <_sbrk_r>
 8003e1c:	3001      	adds	r0, #1
 8003e1e:	d1dd      	bne.n	8003ddc <_malloc_r+0x64>
 8003e20:	e7cf      	b.n	8003dc2 <_malloc_r+0x4a>
 8003e22:	bf00      	nop
 8003e24:	20000090 	.word	0x20000090
 8003e28:	20000094 	.word	0x20000094

08003e2c <__sfputc_r>:
 8003e2c:	6893      	ldr	r3, [r2, #8]
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	b410      	push	{r4}
 8003e34:	6093      	str	r3, [r2, #8]
 8003e36:	da08      	bge.n	8003e4a <__sfputc_r+0x1e>
 8003e38:	6994      	ldr	r4, [r2, #24]
 8003e3a:	42a3      	cmp	r3, r4
 8003e3c:	db01      	blt.n	8003e42 <__sfputc_r+0x16>
 8003e3e:	290a      	cmp	r1, #10
 8003e40:	d103      	bne.n	8003e4a <__sfputc_r+0x1e>
 8003e42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e46:	f000 baef 	b.w	8004428 <__swbuf_r>
 8003e4a:	6813      	ldr	r3, [r2, #0]
 8003e4c:	1c58      	adds	r0, r3, #1
 8003e4e:	6010      	str	r0, [r2, #0]
 8003e50:	7019      	strb	r1, [r3, #0]
 8003e52:	4608      	mov	r0, r1
 8003e54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e58:	4770      	bx	lr

08003e5a <__sfputs_r>:
 8003e5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e5c:	4606      	mov	r6, r0
 8003e5e:	460f      	mov	r7, r1
 8003e60:	4614      	mov	r4, r2
 8003e62:	18d5      	adds	r5, r2, r3
 8003e64:	42ac      	cmp	r4, r5
 8003e66:	d101      	bne.n	8003e6c <__sfputs_r+0x12>
 8003e68:	2000      	movs	r0, #0
 8003e6a:	e007      	b.n	8003e7c <__sfputs_r+0x22>
 8003e6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e70:	463a      	mov	r2, r7
 8003e72:	4630      	mov	r0, r6
 8003e74:	f7ff ffda 	bl	8003e2c <__sfputc_r>
 8003e78:	1c43      	adds	r3, r0, #1
 8003e7a:	d1f3      	bne.n	8003e64 <__sfputs_r+0xa>
 8003e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003e80 <_vfiprintf_r>:
 8003e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e84:	460d      	mov	r5, r1
 8003e86:	b09d      	sub	sp, #116	; 0x74
 8003e88:	4614      	mov	r4, r2
 8003e8a:	4698      	mov	r8, r3
 8003e8c:	4606      	mov	r6, r0
 8003e8e:	b118      	cbz	r0, 8003e98 <_vfiprintf_r+0x18>
 8003e90:	6983      	ldr	r3, [r0, #24]
 8003e92:	b90b      	cbnz	r3, 8003e98 <_vfiprintf_r+0x18>
 8003e94:	f000 fcaa 	bl	80047ec <__sinit>
 8003e98:	4b89      	ldr	r3, [pc, #548]	; (80040c0 <_vfiprintf_r+0x240>)
 8003e9a:	429d      	cmp	r5, r3
 8003e9c:	d11b      	bne.n	8003ed6 <_vfiprintf_r+0x56>
 8003e9e:	6875      	ldr	r5, [r6, #4]
 8003ea0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ea2:	07d9      	lsls	r1, r3, #31
 8003ea4:	d405      	bmi.n	8003eb2 <_vfiprintf_r+0x32>
 8003ea6:	89ab      	ldrh	r3, [r5, #12]
 8003ea8:	059a      	lsls	r2, r3, #22
 8003eaa:	d402      	bmi.n	8003eb2 <_vfiprintf_r+0x32>
 8003eac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003eae:	f000 fd3b 	bl	8004928 <__retarget_lock_acquire_recursive>
 8003eb2:	89ab      	ldrh	r3, [r5, #12]
 8003eb4:	071b      	lsls	r3, r3, #28
 8003eb6:	d501      	bpl.n	8003ebc <_vfiprintf_r+0x3c>
 8003eb8:	692b      	ldr	r3, [r5, #16]
 8003eba:	b9eb      	cbnz	r3, 8003ef8 <_vfiprintf_r+0x78>
 8003ebc:	4629      	mov	r1, r5
 8003ebe:	4630      	mov	r0, r6
 8003ec0:	f000 fb04 	bl	80044cc <__swsetup_r>
 8003ec4:	b1c0      	cbz	r0, 8003ef8 <_vfiprintf_r+0x78>
 8003ec6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ec8:	07dc      	lsls	r4, r3, #31
 8003eca:	d50e      	bpl.n	8003eea <_vfiprintf_r+0x6a>
 8003ecc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ed0:	b01d      	add	sp, #116	; 0x74
 8003ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ed6:	4b7b      	ldr	r3, [pc, #492]	; (80040c4 <_vfiprintf_r+0x244>)
 8003ed8:	429d      	cmp	r5, r3
 8003eda:	d101      	bne.n	8003ee0 <_vfiprintf_r+0x60>
 8003edc:	68b5      	ldr	r5, [r6, #8]
 8003ede:	e7df      	b.n	8003ea0 <_vfiprintf_r+0x20>
 8003ee0:	4b79      	ldr	r3, [pc, #484]	; (80040c8 <_vfiprintf_r+0x248>)
 8003ee2:	429d      	cmp	r5, r3
 8003ee4:	bf08      	it	eq
 8003ee6:	68f5      	ldreq	r5, [r6, #12]
 8003ee8:	e7da      	b.n	8003ea0 <_vfiprintf_r+0x20>
 8003eea:	89ab      	ldrh	r3, [r5, #12]
 8003eec:	0598      	lsls	r0, r3, #22
 8003eee:	d4ed      	bmi.n	8003ecc <_vfiprintf_r+0x4c>
 8003ef0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ef2:	f000 fd1a 	bl	800492a <__retarget_lock_release_recursive>
 8003ef6:	e7e9      	b.n	8003ecc <_vfiprintf_r+0x4c>
 8003ef8:	2300      	movs	r3, #0
 8003efa:	9309      	str	r3, [sp, #36]	; 0x24
 8003efc:	2320      	movs	r3, #32
 8003efe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f02:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f06:	2330      	movs	r3, #48	; 0x30
 8003f08:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80040cc <_vfiprintf_r+0x24c>
 8003f0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f10:	f04f 0901 	mov.w	r9, #1
 8003f14:	4623      	mov	r3, r4
 8003f16:	469a      	mov	sl, r3
 8003f18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f1c:	b10a      	cbz	r2, 8003f22 <_vfiprintf_r+0xa2>
 8003f1e:	2a25      	cmp	r2, #37	; 0x25
 8003f20:	d1f9      	bne.n	8003f16 <_vfiprintf_r+0x96>
 8003f22:	ebba 0b04 	subs.w	fp, sl, r4
 8003f26:	d00b      	beq.n	8003f40 <_vfiprintf_r+0xc0>
 8003f28:	465b      	mov	r3, fp
 8003f2a:	4622      	mov	r2, r4
 8003f2c:	4629      	mov	r1, r5
 8003f2e:	4630      	mov	r0, r6
 8003f30:	f7ff ff93 	bl	8003e5a <__sfputs_r>
 8003f34:	3001      	adds	r0, #1
 8003f36:	f000 80aa 	beq.w	800408e <_vfiprintf_r+0x20e>
 8003f3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f3c:	445a      	add	r2, fp
 8003f3e:	9209      	str	r2, [sp, #36]	; 0x24
 8003f40:	f89a 3000 	ldrb.w	r3, [sl]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f000 80a2 	beq.w	800408e <_vfiprintf_r+0x20e>
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f54:	f10a 0a01 	add.w	sl, sl, #1
 8003f58:	9304      	str	r3, [sp, #16]
 8003f5a:	9307      	str	r3, [sp, #28]
 8003f5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f60:	931a      	str	r3, [sp, #104]	; 0x68
 8003f62:	4654      	mov	r4, sl
 8003f64:	2205      	movs	r2, #5
 8003f66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f6a:	4858      	ldr	r0, [pc, #352]	; (80040cc <_vfiprintf_r+0x24c>)
 8003f6c:	f7fc f938 	bl	80001e0 <memchr>
 8003f70:	9a04      	ldr	r2, [sp, #16]
 8003f72:	b9d8      	cbnz	r0, 8003fac <_vfiprintf_r+0x12c>
 8003f74:	06d1      	lsls	r1, r2, #27
 8003f76:	bf44      	itt	mi
 8003f78:	2320      	movmi	r3, #32
 8003f7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f7e:	0713      	lsls	r3, r2, #28
 8003f80:	bf44      	itt	mi
 8003f82:	232b      	movmi	r3, #43	; 0x2b
 8003f84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f88:	f89a 3000 	ldrb.w	r3, [sl]
 8003f8c:	2b2a      	cmp	r3, #42	; 0x2a
 8003f8e:	d015      	beq.n	8003fbc <_vfiprintf_r+0x13c>
 8003f90:	9a07      	ldr	r2, [sp, #28]
 8003f92:	4654      	mov	r4, sl
 8003f94:	2000      	movs	r0, #0
 8003f96:	f04f 0c0a 	mov.w	ip, #10
 8003f9a:	4621      	mov	r1, r4
 8003f9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fa0:	3b30      	subs	r3, #48	; 0x30
 8003fa2:	2b09      	cmp	r3, #9
 8003fa4:	d94e      	bls.n	8004044 <_vfiprintf_r+0x1c4>
 8003fa6:	b1b0      	cbz	r0, 8003fd6 <_vfiprintf_r+0x156>
 8003fa8:	9207      	str	r2, [sp, #28]
 8003faa:	e014      	b.n	8003fd6 <_vfiprintf_r+0x156>
 8003fac:	eba0 0308 	sub.w	r3, r0, r8
 8003fb0:	fa09 f303 	lsl.w	r3, r9, r3
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	9304      	str	r3, [sp, #16]
 8003fb8:	46a2      	mov	sl, r4
 8003fba:	e7d2      	b.n	8003f62 <_vfiprintf_r+0xe2>
 8003fbc:	9b03      	ldr	r3, [sp, #12]
 8003fbe:	1d19      	adds	r1, r3, #4
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	9103      	str	r1, [sp, #12]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	bfbb      	ittet	lt
 8003fc8:	425b      	neglt	r3, r3
 8003fca:	f042 0202 	orrlt.w	r2, r2, #2
 8003fce:	9307      	strge	r3, [sp, #28]
 8003fd0:	9307      	strlt	r3, [sp, #28]
 8003fd2:	bfb8      	it	lt
 8003fd4:	9204      	strlt	r2, [sp, #16]
 8003fd6:	7823      	ldrb	r3, [r4, #0]
 8003fd8:	2b2e      	cmp	r3, #46	; 0x2e
 8003fda:	d10c      	bne.n	8003ff6 <_vfiprintf_r+0x176>
 8003fdc:	7863      	ldrb	r3, [r4, #1]
 8003fde:	2b2a      	cmp	r3, #42	; 0x2a
 8003fe0:	d135      	bne.n	800404e <_vfiprintf_r+0x1ce>
 8003fe2:	9b03      	ldr	r3, [sp, #12]
 8003fe4:	1d1a      	adds	r2, r3, #4
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	9203      	str	r2, [sp, #12]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	bfb8      	it	lt
 8003fee:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003ff2:	3402      	adds	r4, #2
 8003ff4:	9305      	str	r3, [sp, #20]
 8003ff6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80040dc <_vfiprintf_r+0x25c>
 8003ffa:	7821      	ldrb	r1, [r4, #0]
 8003ffc:	2203      	movs	r2, #3
 8003ffe:	4650      	mov	r0, sl
 8004000:	f7fc f8ee 	bl	80001e0 <memchr>
 8004004:	b140      	cbz	r0, 8004018 <_vfiprintf_r+0x198>
 8004006:	2340      	movs	r3, #64	; 0x40
 8004008:	eba0 000a 	sub.w	r0, r0, sl
 800400c:	fa03 f000 	lsl.w	r0, r3, r0
 8004010:	9b04      	ldr	r3, [sp, #16]
 8004012:	4303      	orrs	r3, r0
 8004014:	3401      	adds	r4, #1
 8004016:	9304      	str	r3, [sp, #16]
 8004018:	f814 1b01 	ldrb.w	r1, [r4], #1
 800401c:	482c      	ldr	r0, [pc, #176]	; (80040d0 <_vfiprintf_r+0x250>)
 800401e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004022:	2206      	movs	r2, #6
 8004024:	f7fc f8dc 	bl	80001e0 <memchr>
 8004028:	2800      	cmp	r0, #0
 800402a:	d03f      	beq.n	80040ac <_vfiprintf_r+0x22c>
 800402c:	4b29      	ldr	r3, [pc, #164]	; (80040d4 <_vfiprintf_r+0x254>)
 800402e:	bb1b      	cbnz	r3, 8004078 <_vfiprintf_r+0x1f8>
 8004030:	9b03      	ldr	r3, [sp, #12]
 8004032:	3307      	adds	r3, #7
 8004034:	f023 0307 	bic.w	r3, r3, #7
 8004038:	3308      	adds	r3, #8
 800403a:	9303      	str	r3, [sp, #12]
 800403c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800403e:	443b      	add	r3, r7
 8004040:	9309      	str	r3, [sp, #36]	; 0x24
 8004042:	e767      	b.n	8003f14 <_vfiprintf_r+0x94>
 8004044:	fb0c 3202 	mla	r2, ip, r2, r3
 8004048:	460c      	mov	r4, r1
 800404a:	2001      	movs	r0, #1
 800404c:	e7a5      	b.n	8003f9a <_vfiprintf_r+0x11a>
 800404e:	2300      	movs	r3, #0
 8004050:	3401      	adds	r4, #1
 8004052:	9305      	str	r3, [sp, #20]
 8004054:	4619      	mov	r1, r3
 8004056:	f04f 0c0a 	mov.w	ip, #10
 800405a:	4620      	mov	r0, r4
 800405c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004060:	3a30      	subs	r2, #48	; 0x30
 8004062:	2a09      	cmp	r2, #9
 8004064:	d903      	bls.n	800406e <_vfiprintf_r+0x1ee>
 8004066:	2b00      	cmp	r3, #0
 8004068:	d0c5      	beq.n	8003ff6 <_vfiprintf_r+0x176>
 800406a:	9105      	str	r1, [sp, #20]
 800406c:	e7c3      	b.n	8003ff6 <_vfiprintf_r+0x176>
 800406e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004072:	4604      	mov	r4, r0
 8004074:	2301      	movs	r3, #1
 8004076:	e7f0      	b.n	800405a <_vfiprintf_r+0x1da>
 8004078:	ab03      	add	r3, sp, #12
 800407a:	9300      	str	r3, [sp, #0]
 800407c:	462a      	mov	r2, r5
 800407e:	4b16      	ldr	r3, [pc, #88]	; (80040d8 <_vfiprintf_r+0x258>)
 8004080:	a904      	add	r1, sp, #16
 8004082:	4630      	mov	r0, r6
 8004084:	f3af 8000 	nop.w
 8004088:	4607      	mov	r7, r0
 800408a:	1c78      	adds	r0, r7, #1
 800408c:	d1d6      	bne.n	800403c <_vfiprintf_r+0x1bc>
 800408e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004090:	07d9      	lsls	r1, r3, #31
 8004092:	d405      	bmi.n	80040a0 <_vfiprintf_r+0x220>
 8004094:	89ab      	ldrh	r3, [r5, #12]
 8004096:	059a      	lsls	r2, r3, #22
 8004098:	d402      	bmi.n	80040a0 <_vfiprintf_r+0x220>
 800409a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800409c:	f000 fc45 	bl	800492a <__retarget_lock_release_recursive>
 80040a0:	89ab      	ldrh	r3, [r5, #12]
 80040a2:	065b      	lsls	r3, r3, #25
 80040a4:	f53f af12 	bmi.w	8003ecc <_vfiprintf_r+0x4c>
 80040a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80040aa:	e711      	b.n	8003ed0 <_vfiprintf_r+0x50>
 80040ac:	ab03      	add	r3, sp, #12
 80040ae:	9300      	str	r3, [sp, #0]
 80040b0:	462a      	mov	r2, r5
 80040b2:	4b09      	ldr	r3, [pc, #36]	; (80040d8 <_vfiprintf_r+0x258>)
 80040b4:	a904      	add	r1, sp, #16
 80040b6:	4630      	mov	r0, r6
 80040b8:	f000 f880 	bl	80041bc <_printf_i>
 80040bc:	e7e4      	b.n	8004088 <_vfiprintf_r+0x208>
 80040be:	bf00      	nop
 80040c0:	08004d30 	.word	0x08004d30
 80040c4:	08004d50 	.word	0x08004d50
 80040c8:	08004d10 	.word	0x08004d10
 80040cc:	08004cda 	.word	0x08004cda
 80040d0:	08004ce4 	.word	0x08004ce4
 80040d4:	00000000 	.word	0x00000000
 80040d8:	08003e5b 	.word	0x08003e5b
 80040dc:	08004ce0 	.word	0x08004ce0

080040e0 <_printf_common>:
 80040e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040e4:	4616      	mov	r6, r2
 80040e6:	4699      	mov	r9, r3
 80040e8:	688a      	ldr	r2, [r1, #8]
 80040ea:	690b      	ldr	r3, [r1, #16]
 80040ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80040f0:	4293      	cmp	r3, r2
 80040f2:	bfb8      	it	lt
 80040f4:	4613      	movlt	r3, r2
 80040f6:	6033      	str	r3, [r6, #0]
 80040f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80040fc:	4607      	mov	r7, r0
 80040fe:	460c      	mov	r4, r1
 8004100:	b10a      	cbz	r2, 8004106 <_printf_common+0x26>
 8004102:	3301      	adds	r3, #1
 8004104:	6033      	str	r3, [r6, #0]
 8004106:	6823      	ldr	r3, [r4, #0]
 8004108:	0699      	lsls	r1, r3, #26
 800410a:	bf42      	ittt	mi
 800410c:	6833      	ldrmi	r3, [r6, #0]
 800410e:	3302      	addmi	r3, #2
 8004110:	6033      	strmi	r3, [r6, #0]
 8004112:	6825      	ldr	r5, [r4, #0]
 8004114:	f015 0506 	ands.w	r5, r5, #6
 8004118:	d106      	bne.n	8004128 <_printf_common+0x48>
 800411a:	f104 0a19 	add.w	sl, r4, #25
 800411e:	68e3      	ldr	r3, [r4, #12]
 8004120:	6832      	ldr	r2, [r6, #0]
 8004122:	1a9b      	subs	r3, r3, r2
 8004124:	42ab      	cmp	r3, r5
 8004126:	dc26      	bgt.n	8004176 <_printf_common+0x96>
 8004128:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800412c:	1e13      	subs	r3, r2, #0
 800412e:	6822      	ldr	r2, [r4, #0]
 8004130:	bf18      	it	ne
 8004132:	2301      	movne	r3, #1
 8004134:	0692      	lsls	r2, r2, #26
 8004136:	d42b      	bmi.n	8004190 <_printf_common+0xb0>
 8004138:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800413c:	4649      	mov	r1, r9
 800413e:	4638      	mov	r0, r7
 8004140:	47c0      	blx	r8
 8004142:	3001      	adds	r0, #1
 8004144:	d01e      	beq.n	8004184 <_printf_common+0xa4>
 8004146:	6823      	ldr	r3, [r4, #0]
 8004148:	68e5      	ldr	r5, [r4, #12]
 800414a:	6832      	ldr	r2, [r6, #0]
 800414c:	f003 0306 	and.w	r3, r3, #6
 8004150:	2b04      	cmp	r3, #4
 8004152:	bf08      	it	eq
 8004154:	1aad      	subeq	r5, r5, r2
 8004156:	68a3      	ldr	r3, [r4, #8]
 8004158:	6922      	ldr	r2, [r4, #16]
 800415a:	bf0c      	ite	eq
 800415c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004160:	2500      	movne	r5, #0
 8004162:	4293      	cmp	r3, r2
 8004164:	bfc4      	itt	gt
 8004166:	1a9b      	subgt	r3, r3, r2
 8004168:	18ed      	addgt	r5, r5, r3
 800416a:	2600      	movs	r6, #0
 800416c:	341a      	adds	r4, #26
 800416e:	42b5      	cmp	r5, r6
 8004170:	d11a      	bne.n	80041a8 <_printf_common+0xc8>
 8004172:	2000      	movs	r0, #0
 8004174:	e008      	b.n	8004188 <_printf_common+0xa8>
 8004176:	2301      	movs	r3, #1
 8004178:	4652      	mov	r2, sl
 800417a:	4649      	mov	r1, r9
 800417c:	4638      	mov	r0, r7
 800417e:	47c0      	blx	r8
 8004180:	3001      	adds	r0, #1
 8004182:	d103      	bne.n	800418c <_printf_common+0xac>
 8004184:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800418c:	3501      	adds	r5, #1
 800418e:	e7c6      	b.n	800411e <_printf_common+0x3e>
 8004190:	18e1      	adds	r1, r4, r3
 8004192:	1c5a      	adds	r2, r3, #1
 8004194:	2030      	movs	r0, #48	; 0x30
 8004196:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800419a:	4422      	add	r2, r4
 800419c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80041a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80041a4:	3302      	adds	r3, #2
 80041a6:	e7c7      	b.n	8004138 <_printf_common+0x58>
 80041a8:	2301      	movs	r3, #1
 80041aa:	4622      	mov	r2, r4
 80041ac:	4649      	mov	r1, r9
 80041ae:	4638      	mov	r0, r7
 80041b0:	47c0      	blx	r8
 80041b2:	3001      	adds	r0, #1
 80041b4:	d0e6      	beq.n	8004184 <_printf_common+0xa4>
 80041b6:	3601      	adds	r6, #1
 80041b8:	e7d9      	b.n	800416e <_printf_common+0x8e>
	...

080041bc <_printf_i>:
 80041bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041c0:	460c      	mov	r4, r1
 80041c2:	4691      	mov	r9, r2
 80041c4:	7e27      	ldrb	r7, [r4, #24]
 80041c6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80041c8:	2f78      	cmp	r7, #120	; 0x78
 80041ca:	4680      	mov	r8, r0
 80041cc:	469a      	mov	sl, r3
 80041ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041d2:	d807      	bhi.n	80041e4 <_printf_i+0x28>
 80041d4:	2f62      	cmp	r7, #98	; 0x62
 80041d6:	d80a      	bhi.n	80041ee <_printf_i+0x32>
 80041d8:	2f00      	cmp	r7, #0
 80041da:	f000 80d8 	beq.w	800438e <_printf_i+0x1d2>
 80041de:	2f58      	cmp	r7, #88	; 0x58
 80041e0:	f000 80a3 	beq.w	800432a <_printf_i+0x16e>
 80041e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80041e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80041ec:	e03a      	b.n	8004264 <_printf_i+0xa8>
 80041ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80041f2:	2b15      	cmp	r3, #21
 80041f4:	d8f6      	bhi.n	80041e4 <_printf_i+0x28>
 80041f6:	a001      	add	r0, pc, #4	; (adr r0, 80041fc <_printf_i+0x40>)
 80041f8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80041fc:	08004255 	.word	0x08004255
 8004200:	08004269 	.word	0x08004269
 8004204:	080041e5 	.word	0x080041e5
 8004208:	080041e5 	.word	0x080041e5
 800420c:	080041e5 	.word	0x080041e5
 8004210:	080041e5 	.word	0x080041e5
 8004214:	08004269 	.word	0x08004269
 8004218:	080041e5 	.word	0x080041e5
 800421c:	080041e5 	.word	0x080041e5
 8004220:	080041e5 	.word	0x080041e5
 8004224:	080041e5 	.word	0x080041e5
 8004228:	08004375 	.word	0x08004375
 800422c:	08004299 	.word	0x08004299
 8004230:	08004357 	.word	0x08004357
 8004234:	080041e5 	.word	0x080041e5
 8004238:	080041e5 	.word	0x080041e5
 800423c:	08004397 	.word	0x08004397
 8004240:	080041e5 	.word	0x080041e5
 8004244:	08004299 	.word	0x08004299
 8004248:	080041e5 	.word	0x080041e5
 800424c:	080041e5 	.word	0x080041e5
 8004250:	0800435f 	.word	0x0800435f
 8004254:	680b      	ldr	r3, [r1, #0]
 8004256:	1d1a      	adds	r2, r3, #4
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	600a      	str	r2, [r1, #0]
 800425c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004260:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004264:	2301      	movs	r3, #1
 8004266:	e0a3      	b.n	80043b0 <_printf_i+0x1f4>
 8004268:	6825      	ldr	r5, [r4, #0]
 800426a:	6808      	ldr	r0, [r1, #0]
 800426c:	062e      	lsls	r6, r5, #24
 800426e:	f100 0304 	add.w	r3, r0, #4
 8004272:	d50a      	bpl.n	800428a <_printf_i+0xce>
 8004274:	6805      	ldr	r5, [r0, #0]
 8004276:	600b      	str	r3, [r1, #0]
 8004278:	2d00      	cmp	r5, #0
 800427a:	da03      	bge.n	8004284 <_printf_i+0xc8>
 800427c:	232d      	movs	r3, #45	; 0x2d
 800427e:	426d      	negs	r5, r5
 8004280:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004284:	485e      	ldr	r0, [pc, #376]	; (8004400 <_printf_i+0x244>)
 8004286:	230a      	movs	r3, #10
 8004288:	e019      	b.n	80042be <_printf_i+0x102>
 800428a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800428e:	6805      	ldr	r5, [r0, #0]
 8004290:	600b      	str	r3, [r1, #0]
 8004292:	bf18      	it	ne
 8004294:	b22d      	sxthne	r5, r5
 8004296:	e7ef      	b.n	8004278 <_printf_i+0xbc>
 8004298:	680b      	ldr	r3, [r1, #0]
 800429a:	6825      	ldr	r5, [r4, #0]
 800429c:	1d18      	adds	r0, r3, #4
 800429e:	6008      	str	r0, [r1, #0]
 80042a0:	0628      	lsls	r0, r5, #24
 80042a2:	d501      	bpl.n	80042a8 <_printf_i+0xec>
 80042a4:	681d      	ldr	r5, [r3, #0]
 80042a6:	e002      	b.n	80042ae <_printf_i+0xf2>
 80042a8:	0669      	lsls	r1, r5, #25
 80042aa:	d5fb      	bpl.n	80042a4 <_printf_i+0xe8>
 80042ac:	881d      	ldrh	r5, [r3, #0]
 80042ae:	4854      	ldr	r0, [pc, #336]	; (8004400 <_printf_i+0x244>)
 80042b0:	2f6f      	cmp	r7, #111	; 0x6f
 80042b2:	bf0c      	ite	eq
 80042b4:	2308      	moveq	r3, #8
 80042b6:	230a      	movne	r3, #10
 80042b8:	2100      	movs	r1, #0
 80042ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80042be:	6866      	ldr	r6, [r4, #4]
 80042c0:	60a6      	str	r6, [r4, #8]
 80042c2:	2e00      	cmp	r6, #0
 80042c4:	bfa2      	ittt	ge
 80042c6:	6821      	ldrge	r1, [r4, #0]
 80042c8:	f021 0104 	bicge.w	r1, r1, #4
 80042cc:	6021      	strge	r1, [r4, #0]
 80042ce:	b90d      	cbnz	r5, 80042d4 <_printf_i+0x118>
 80042d0:	2e00      	cmp	r6, #0
 80042d2:	d04d      	beq.n	8004370 <_printf_i+0x1b4>
 80042d4:	4616      	mov	r6, r2
 80042d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80042da:	fb03 5711 	mls	r7, r3, r1, r5
 80042de:	5dc7      	ldrb	r7, [r0, r7]
 80042e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80042e4:	462f      	mov	r7, r5
 80042e6:	42bb      	cmp	r3, r7
 80042e8:	460d      	mov	r5, r1
 80042ea:	d9f4      	bls.n	80042d6 <_printf_i+0x11a>
 80042ec:	2b08      	cmp	r3, #8
 80042ee:	d10b      	bne.n	8004308 <_printf_i+0x14c>
 80042f0:	6823      	ldr	r3, [r4, #0]
 80042f2:	07df      	lsls	r7, r3, #31
 80042f4:	d508      	bpl.n	8004308 <_printf_i+0x14c>
 80042f6:	6923      	ldr	r3, [r4, #16]
 80042f8:	6861      	ldr	r1, [r4, #4]
 80042fa:	4299      	cmp	r1, r3
 80042fc:	bfde      	ittt	le
 80042fe:	2330      	movle	r3, #48	; 0x30
 8004300:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004304:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8004308:	1b92      	subs	r2, r2, r6
 800430a:	6122      	str	r2, [r4, #16]
 800430c:	f8cd a000 	str.w	sl, [sp]
 8004310:	464b      	mov	r3, r9
 8004312:	aa03      	add	r2, sp, #12
 8004314:	4621      	mov	r1, r4
 8004316:	4640      	mov	r0, r8
 8004318:	f7ff fee2 	bl	80040e0 <_printf_common>
 800431c:	3001      	adds	r0, #1
 800431e:	d14c      	bne.n	80043ba <_printf_i+0x1fe>
 8004320:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004324:	b004      	add	sp, #16
 8004326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800432a:	4835      	ldr	r0, [pc, #212]	; (8004400 <_printf_i+0x244>)
 800432c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004330:	6823      	ldr	r3, [r4, #0]
 8004332:	680e      	ldr	r6, [r1, #0]
 8004334:	061f      	lsls	r7, r3, #24
 8004336:	f856 5b04 	ldr.w	r5, [r6], #4
 800433a:	600e      	str	r6, [r1, #0]
 800433c:	d514      	bpl.n	8004368 <_printf_i+0x1ac>
 800433e:	07d9      	lsls	r1, r3, #31
 8004340:	bf44      	itt	mi
 8004342:	f043 0320 	orrmi.w	r3, r3, #32
 8004346:	6023      	strmi	r3, [r4, #0]
 8004348:	b91d      	cbnz	r5, 8004352 <_printf_i+0x196>
 800434a:	6823      	ldr	r3, [r4, #0]
 800434c:	f023 0320 	bic.w	r3, r3, #32
 8004350:	6023      	str	r3, [r4, #0]
 8004352:	2310      	movs	r3, #16
 8004354:	e7b0      	b.n	80042b8 <_printf_i+0xfc>
 8004356:	6823      	ldr	r3, [r4, #0]
 8004358:	f043 0320 	orr.w	r3, r3, #32
 800435c:	6023      	str	r3, [r4, #0]
 800435e:	2378      	movs	r3, #120	; 0x78
 8004360:	4828      	ldr	r0, [pc, #160]	; (8004404 <_printf_i+0x248>)
 8004362:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004366:	e7e3      	b.n	8004330 <_printf_i+0x174>
 8004368:	065e      	lsls	r6, r3, #25
 800436a:	bf48      	it	mi
 800436c:	b2ad      	uxthmi	r5, r5
 800436e:	e7e6      	b.n	800433e <_printf_i+0x182>
 8004370:	4616      	mov	r6, r2
 8004372:	e7bb      	b.n	80042ec <_printf_i+0x130>
 8004374:	680b      	ldr	r3, [r1, #0]
 8004376:	6826      	ldr	r6, [r4, #0]
 8004378:	6960      	ldr	r0, [r4, #20]
 800437a:	1d1d      	adds	r5, r3, #4
 800437c:	600d      	str	r5, [r1, #0]
 800437e:	0635      	lsls	r5, r6, #24
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	d501      	bpl.n	8004388 <_printf_i+0x1cc>
 8004384:	6018      	str	r0, [r3, #0]
 8004386:	e002      	b.n	800438e <_printf_i+0x1d2>
 8004388:	0671      	lsls	r1, r6, #25
 800438a:	d5fb      	bpl.n	8004384 <_printf_i+0x1c8>
 800438c:	8018      	strh	r0, [r3, #0]
 800438e:	2300      	movs	r3, #0
 8004390:	6123      	str	r3, [r4, #16]
 8004392:	4616      	mov	r6, r2
 8004394:	e7ba      	b.n	800430c <_printf_i+0x150>
 8004396:	680b      	ldr	r3, [r1, #0]
 8004398:	1d1a      	adds	r2, r3, #4
 800439a:	600a      	str	r2, [r1, #0]
 800439c:	681e      	ldr	r6, [r3, #0]
 800439e:	6862      	ldr	r2, [r4, #4]
 80043a0:	2100      	movs	r1, #0
 80043a2:	4630      	mov	r0, r6
 80043a4:	f7fb ff1c 	bl	80001e0 <memchr>
 80043a8:	b108      	cbz	r0, 80043ae <_printf_i+0x1f2>
 80043aa:	1b80      	subs	r0, r0, r6
 80043ac:	6060      	str	r0, [r4, #4]
 80043ae:	6863      	ldr	r3, [r4, #4]
 80043b0:	6123      	str	r3, [r4, #16]
 80043b2:	2300      	movs	r3, #0
 80043b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043b8:	e7a8      	b.n	800430c <_printf_i+0x150>
 80043ba:	6923      	ldr	r3, [r4, #16]
 80043bc:	4632      	mov	r2, r6
 80043be:	4649      	mov	r1, r9
 80043c0:	4640      	mov	r0, r8
 80043c2:	47d0      	blx	sl
 80043c4:	3001      	adds	r0, #1
 80043c6:	d0ab      	beq.n	8004320 <_printf_i+0x164>
 80043c8:	6823      	ldr	r3, [r4, #0]
 80043ca:	079b      	lsls	r3, r3, #30
 80043cc:	d413      	bmi.n	80043f6 <_printf_i+0x23a>
 80043ce:	68e0      	ldr	r0, [r4, #12]
 80043d0:	9b03      	ldr	r3, [sp, #12]
 80043d2:	4298      	cmp	r0, r3
 80043d4:	bfb8      	it	lt
 80043d6:	4618      	movlt	r0, r3
 80043d8:	e7a4      	b.n	8004324 <_printf_i+0x168>
 80043da:	2301      	movs	r3, #1
 80043dc:	4632      	mov	r2, r6
 80043de:	4649      	mov	r1, r9
 80043e0:	4640      	mov	r0, r8
 80043e2:	47d0      	blx	sl
 80043e4:	3001      	adds	r0, #1
 80043e6:	d09b      	beq.n	8004320 <_printf_i+0x164>
 80043e8:	3501      	adds	r5, #1
 80043ea:	68e3      	ldr	r3, [r4, #12]
 80043ec:	9903      	ldr	r1, [sp, #12]
 80043ee:	1a5b      	subs	r3, r3, r1
 80043f0:	42ab      	cmp	r3, r5
 80043f2:	dcf2      	bgt.n	80043da <_printf_i+0x21e>
 80043f4:	e7eb      	b.n	80043ce <_printf_i+0x212>
 80043f6:	2500      	movs	r5, #0
 80043f8:	f104 0619 	add.w	r6, r4, #25
 80043fc:	e7f5      	b.n	80043ea <_printf_i+0x22e>
 80043fe:	bf00      	nop
 8004400:	08004ceb 	.word	0x08004ceb
 8004404:	08004cfc 	.word	0x08004cfc

08004408 <_sbrk_r>:
 8004408:	b538      	push	{r3, r4, r5, lr}
 800440a:	4d06      	ldr	r5, [pc, #24]	; (8004424 <_sbrk_r+0x1c>)
 800440c:	2300      	movs	r3, #0
 800440e:	4604      	mov	r4, r0
 8004410:	4608      	mov	r0, r1
 8004412:	602b      	str	r3, [r5, #0]
 8004414:	f7fc fdbc 	bl	8000f90 <_sbrk>
 8004418:	1c43      	adds	r3, r0, #1
 800441a:	d102      	bne.n	8004422 <_sbrk_r+0x1a>
 800441c:	682b      	ldr	r3, [r5, #0]
 800441e:	b103      	cbz	r3, 8004422 <_sbrk_r+0x1a>
 8004420:	6023      	str	r3, [r4, #0]
 8004422:	bd38      	pop	{r3, r4, r5, pc}
 8004424:	20000194 	.word	0x20000194

08004428 <__swbuf_r>:
 8004428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800442a:	460e      	mov	r6, r1
 800442c:	4614      	mov	r4, r2
 800442e:	4605      	mov	r5, r0
 8004430:	b118      	cbz	r0, 800443a <__swbuf_r+0x12>
 8004432:	6983      	ldr	r3, [r0, #24]
 8004434:	b90b      	cbnz	r3, 800443a <__swbuf_r+0x12>
 8004436:	f000 f9d9 	bl	80047ec <__sinit>
 800443a:	4b21      	ldr	r3, [pc, #132]	; (80044c0 <__swbuf_r+0x98>)
 800443c:	429c      	cmp	r4, r3
 800443e:	d12b      	bne.n	8004498 <__swbuf_r+0x70>
 8004440:	686c      	ldr	r4, [r5, #4]
 8004442:	69a3      	ldr	r3, [r4, #24]
 8004444:	60a3      	str	r3, [r4, #8]
 8004446:	89a3      	ldrh	r3, [r4, #12]
 8004448:	071a      	lsls	r2, r3, #28
 800444a:	d52f      	bpl.n	80044ac <__swbuf_r+0x84>
 800444c:	6923      	ldr	r3, [r4, #16]
 800444e:	b36b      	cbz	r3, 80044ac <__swbuf_r+0x84>
 8004450:	6923      	ldr	r3, [r4, #16]
 8004452:	6820      	ldr	r0, [r4, #0]
 8004454:	1ac0      	subs	r0, r0, r3
 8004456:	6963      	ldr	r3, [r4, #20]
 8004458:	b2f6      	uxtb	r6, r6
 800445a:	4283      	cmp	r3, r0
 800445c:	4637      	mov	r7, r6
 800445e:	dc04      	bgt.n	800446a <__swbuf_r+0x42>
 8004460:	4621      	mov	r1, r4
 8004462:	4628      	mov	r0, r5
 8004464:	f000 f92e 	bl	80046c4 <_fflush_r>
 8004468:	bb30      	cbnz	r0, 80044b8 <__swbuf_r+0x90>
 800446a:	68a3      	ldr	r3, [r4, #8]
 800446c:	3b01      	subs	r3, #1
 800446e:	60a3      	str	r3, [r4, #8]
 8004470:	6823      	ldr	r3, [r4, #0]
 8004472:	1c5a      	adds	r2, r3, #1
 8004474:	6022      	str	r2, [r4, #0]
 8004476:	701e      	strb	r6, [r3, #0]
 8004478:	6963      	ldr	r3, [r4, #20]
 800447a:	3001      	adds	r0, #1
 800447c:	4283      	cmp	r3, r0
 800447e:	d004      	beq.n	800448a <__swbuf_r+0x62>
 8004480:	89a3      	ldrh	r3, [r4, #12]
 8004482:	07db      	lsls	r3, r3, #31
 8004484:	d506      	bpl.n	8004494 <__swbuf_r+0x6c>
 8004486:	2e0a      	cmp	r6, #10
 8004488:	d104      	bne.n	8004494 <__swbuf_r+0x6c>
 800448a:	4621      	mov	r1, r4
 800448c:	4628      	mov	r0, r5
 800448e:	f000 f919 	bl	80046c4 <_fflush_r>
 8004492:	b988      	cbnz	r0, 80044b8 <__swbuf_r+0x90>
 8004494:	4638      	mov	r0, r7
 8004496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004498:	4b0a      	ldr	r3, [pc, #40]	; (80044c4 <__swbuf_r+0x9c>)
 800449a:	429c      	cmp	r4, r3
 800449c:	d101      	bne.n	80044a2 <__swbuf_r+0x7a>
 800449e:	68ac      	ldr	r4, [r5, #8]
 80044a0:	e7cf      	b.n	8004442 <__swbuf_r+0x1a>
 80044a2:	4b09      	ldr	r3, [pc, #36]	; (80044c8 <__swbuf_r+0xa0>)
 80044a4:	429c      	cmp	r4, r3
 80044a6:	bf08      	it	eq
 80044a8:	68ec      	ldreq	r4, [r5, #12]
 80044aa:	e7ca      	b.n	8004442 <__swbuf_r+0x1a>
 80044ac:	4621      	mov	r1, r4
 80044ae:	4628      	mov	r0, r5
 80044b0:	f000 f80c 	bl	80044cc <__swsetup_r>
 80044b4:	2800      	cmp	r0, #0
 80044b6:	d0cb      	beq.n	8004450 <__swbuf_r+0x28>
 80044b8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80044bc:	e7ea      	b.n	8004494 <__swbuf_r+0x6c>
 80044be:	bf00      	nop
 80044c0:	08004d30 	.word	0x08004d30
 80044c4:	08004d50 	.word	0x08004d50
 80044c8:	08004d10 	.word	0x08004d10

080044cc <__swsetup_r>:
 80044cc:	4b32      	ldr	r3, [pc, #200]	; (8004598 <__swsetup_r+0xcc>)
 80044ce:	b570      	push	{r4, r5, r6, lr}
 80044d0:	681d      	ldr	r5, [r3, #0]
 80044d2:	4606      	mov	r6, r0
 80044d4:	460c      	mov	r4, r1
 80044d6:	b125      	cbz	r5, 80044e2 <__swsetup_r+0x16>
 80044d8:	69ab      	ldr	r3, [r5, #24]
 80044da:	b913      	cbnz	r3, 80044e2 <__swsetup_r+0x16>
 80044dc:	4628      	mov	r0, r5
 80044de:	f000 f985 	bl	80047ec <__sinit>
 80044e2:	4b2e      	ldr	r3, [pc, #184]	; (800459c <__swsetup_r+0xd0>)
 80044e4:	429c      	cmp	r4, r3
 80044e6:	d10f      	bne.n	8004508 <__swsetup_r+0x3c>
 80044e8:	686c      	ldr	r4, [r5, #4]
 80044ea:	89a3      	ldrh	r3, [r4, #12]
 80044ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80044f0:	0719      	lsls	r1, r3, #28
 80044f2:	d42c      	bmi.n	800454e <__swsetup_r+0x82>
 80044f4:	06dd      	lsls	r5, r3, #27
 80044f6:	d411      	bmi.n	800451c <__swsetup_r+0x50>
 80044f8:	2309      	movs	r3, #9
 80044fa:	6033      	str	r3, [r6, #0]
 80044fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004500:	81a3      	strh	r3, [r4, #12]
 8004502:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004506:	e03e      	b.n	8004586 <__swsetup_r+0xba>
 8004508:	4b25      	ldr	r3, [pc, #148]	; (80045a0 <__swsetup_r+0xd4>)
 800450a:	429c      	cmp	r4, r3
 800450c:	d101      	bne.n	8004512 <__swsetup_r+0x46>
 800450e:	68ac      	ldr	r4, [r5, #8]
 8004510:	e7eb      	b.n	80044ea <__swsetup_r+0x1e>
 8004512:	4b24      	ldr	r3, [pc, #144]	; (80045a4 <__swsetup_r+0xd8>)
 8004514:	429c      	cmp	r4, r3
 8004516:	bf08      	it	eq
 8004518:	68ec      	ldreq	r4, [r5, #12]
 800451a:	e7e6      	b.n	80044ea <__swsetup_r+0x1e>
 800451c:	0758      	lsls	r0, r3, #29
 800451e:	d512      	bpl.n	8004546 <__swsetup_r+0x7a>
 8004520:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004522:	b141      	cbz	r1, 8004536 <__swsetup_r+0x6a>
 8004524:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004528:	4299      	cmp	r1, r3
 800452a:	d002      	beq.n	8004532 <__swsetup_r+0x66>
 800452c:	4630      	mov	r0, r6
 800452e:	f7ff fbd3 	bl	8003cd8 <_free_r>
 8004532:	2300      	movs	r3, #0
 8004534:	6363      	str	r3, [r4, #52]	; 0x34
 8004536:	89a3      	ldrh	r3, [r4, #12]
 8004538:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800453c:	81a3      	strh	r3, [r4, #12]
 800453e:	2300      	movs	r3, #0
 8004540:	6063      	str	r3, [r4, #4]
 8004542:	6923      	ldr	r3, [r4, #16]
 8004544:	6023      	str	r3, [r4, #0]
 8004546:	89a3      	ldrh	r3, [r4, #12]
 8004548:	f043 0308 	orr.w	r3, r3, #8
 800454c:	81a3      	strh	r3, [r4, #12]
 800454e:	6923      	ldr	r3, [r4, #16]
 8004550:	b94b      	cbnz	r3, 8004566 <__swsetup_r+0x9a>
 8004552:	89a3      	ldrh	r3, [r4, #12]
 8004554:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004558:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800455c:	d003      	beq.n	8004566 <__swsetup_r+0x9a>
 800455e:	4621      	mov	r1, r4
 8004560:	4630      	mov	r0, r6
 8004562:	f000 fa07 	bl	8004974 <__smakebuf_r>
 8004566:	89a0      	ldrh	r0, [r4, #12]
 8004568:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800456c:	f010 0301 	ands.w	r3, r0, #1
 8004570:	d00a      	beq.n	8004588 <__swsetup_r+0xbc>
 8004572:	2300      	movs	r3, #0
 8004574:	60a3      	str	r3, [r4, #8]
 8004576:	6963      	ldr	r3, [r4, #20]
 8004578:	425b      	negs	r3, r3
 800457a:	61a3      	str	r3, [r4, #24]
 800457c:	6923      	ldr	r3, [r4, #16]
 800457e:	b943      	cbnz	r3, 8004592 <__swsetup_r+0xc6>
 8004580:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004584:	d1ba      	bne.n	80044fc <__swsetup_r+0x30>
 8004586:	bd70      	pop	{r4, r5, r6, pc}
 8004588:	0781      	lsls	r1, r0, #30
 800458a:	bf58      	it	pl
 800458c:	6963      	ldrpl	r3, [r4, #20]
 800458e:	60a3      	str	r3, [r4, #8]
 8004590:	e7f4      	b.n	800457c <__swsetup_r+0xb0>
 8004592:	2000      	movs	r0, #0
 8004594:	e7f7      	b.n	8004586 <__swsetup_r+0xba>
 8004596:	bf00      	nop
 8004598:	2000000c 	.word	0x2000000c
 800459c:	08004d30 	.word	0x08004d30
 80045a0:	08004d50 	.word	0x08004d50
 80045a4:	08004d10 	.word	0x08004d10

080045a8 <abort>:
 80045a8:	b508      	push	{r3, lr}
 80045aa:	2006      	movs	r0, #6
 80045ac:	f000 fa56 	bl	8004a5c <raise>
 80045b0:	2001      	movs	r0, #1
 80045b2:	f7fc fc75 	bl	8000ea0 <_exit>
	...

080045b8 <__sflush_r>:
 80045b8:	898a      	ldrh	r2, [r1, #12]
 80045ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045be:	4605      	mov	r5, r0
 80045c0:	0710      	lsls	r0, r2, #28
 80045c2:	460c      	mov	r4, r1
 80045c4:	d458      	bmi.n	8004678 <__sflush_r+0xc0>
 80045c6:	684b      	ldr	r3, [r1, #4]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	dc05      	bgt.n	80045d8 <__sflush_r+0x20>
 80045cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	dc02      	bgt.n	80045d8 <__sflush_r+0x20>
 80045d2:	2000      	movs	r0, #0
 80045d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80045da:	2e00      	cmp	r6, #0
 80045dc:	d0f9      	beq.n	80045d2 <__sflush_r+0x1a>
 80045de:	2300      	movs	r3, #0
 80045e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80045e4:	682f      	ldr	r7, [r5, #0]
 80045e6:	602b      	str	r3, [r5, #0]
 80045e8:	d032      	beq.n	8004650 <__sflush_r+0x98>
 80045ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80045ec:	89a3      	ldrh	r3, [r4, #12]
 80045ee:	075a      	lsls	r2, r3, #29
 80045f0:	d505      	bpl.n	80045fe <__sflush_r+0x46>
 80045f2:	6863      	ldr	r3, [r4, #4]
 80045f4:	1ac0      	subs	r0, r0, r3
 80045f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80045f8:	b10b      	cbz	r3, 80045fe <__sflush_r+0x46>
 80045fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80045fc:	1ac0      	subs	r0, r0, r3
 80045fe:	2300      	movs	r3, #0
 8004600:	4602      	mov	r2, r0
 8004602:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004604:	6a21      	ldr	r1, [r4, #32]
 8004606:	4628      	mov	r0, r5
 8004608:	47b0      	blx	r6
 800460a:	1c43      	adds	r3, r0, #1
 800460c:	89a3      	ldrh	r3, [r4, #12]
 800460e:	d106      	bne.n	800461e <__sflush_r+0x66>
 8004610:	6829      	ldr	r1, [r5, #0]
 8004612:	291d      	cmp	r1, #29
 8004614:	d82c      	bhi.n	8004670 <__sflush_r+0xb8>
 8004616:	4a2a      	ldr	r2, [pc, #168]	; (80046c0 <__sflush_r+0x108>)
 8004618:	40ca      	lsrs	r2, r1
 800461a:	07d6      	lsls	r6, r2, #31
 800461c:	d528      	bpl.n	8004670 <__sflush_r+0xb8>
 800461e:	2200      	movs	r2, #0
 8004620:	6062      	str	r2, [r4, #4]
 8004622:	04d9      	lsls	r1, r3, #19
 8004624:	6922      	ldr	r2, [r4, #16]
 8004626:	6022      	str	r2, [r4, #0]
 8004628:	d504      	bpl.n	8004634 <__sflush_r+0x7c>
 800462a:	1c42      	adds	r2, r0, #1
 800462c:	d101      	bne.n	8004632 <__sflush_r+0x7a>
 800462e:	682b      	ldr	r3, [r5, #0]
 8004630:	b903      	cbnz	r3, 8004634 <__sflush_r+0x7c>
 8004632:	6560      	str	r0, [r4, #84]	; 0x54
 8004634:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004636:	602f      	str	r7, [r5, #0]
 8004638:	2900      	cmp	r1, #0
 800463a:	d0ca      	beq.n	80045d2 <__sflush_r+0x1a>
 800463c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004640:	4299      	cmp	r1, r3
 8004642:	d002      	beq.n	800464a <__sflush_r+0x92>
 8004644:	4628      	mov	r0, r5
 8004646:	f7ff fb47 	bl	8003cd8 <_free_r>
 800464a:	2000      	movs	r0, #0
 800464c:	6360      	str	r0, [r4, #52]	; 0x34
 800464e:	e7c1      	b.n	80045d4 <__sflush_r+0x1c>
 8004650:	6a21      	ldr	r1, [r4, #32]
 8004652:	2301      	movs	r3, #1
 8004654:	4628      	mov	r0, r5
 8004656:	47b0      	blx	r6
 8004658:	1c41      	adds	r1, r0, #1
 800465a:	d1c7      	bne.n	80045ec <__sflush_r+0x34>
 800465c:	682b      	ldr	r3, [r5, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d0c4      	beq.n	80045ec <__sflush_r+0x34>
 8004662:	2b1d      	cmp	r3, #29
 8004664:	d001      	beq.n	800466a <__sflush_r+0xb2>
 8004666:	2b16      	cmp	r3, #22
 8004668:	d101      	bne.n	800466e <__sflush_r+0xb6>
 800466a:	602f      	str	r7, [r5, #0]
 800466c:	e7b1      	b.n	80045d2 <__sflush_r+0x1a>
 800466e:	89a3      	ldrh	r3, [r4, #12]
 8004670:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004674:	81a3      	strh	r3, [r4, #12]
 8004676:	e7ad      	b.n	80045d4 <__sflush_r+0x1c>
 8004678:	690f      	ldr	r7, [r1, #16]
 800467a:	2f00      	cmp	r7, #0
 800467c:	d0a9      	beq.n	80045d2 <__sflush_r+0x1a>
 800467e:	0793      	lsls	r3, r2, #30
 8004680:	680e      	ldr	r6, [r1, #0]
 8004682:	bf08      	it	eq
 8004684:	694b      	ldreq	r3, [r1, #20]
 8004686:	600f      	str	r7, [r1, #0]
 8004688:	bf18      	it	ne
 800468a:	2300      	movne	r3, #0
 800468c:	eba6 0807 	sub.w	r8, r6, r7
 8004690:	608b      	str	r3, [r1, #8]
 8004692:	f1b8 0f00 	cmp.w	r8, #0
 8004696:	dd9c      	ble.n	80045d2 <__sflush_r+0x1a>
 8004698:	6a21      	ldr	r1, [r4, #32]
 800469a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800469c:	4643      	mov	r3, r8
 800469e:	463a      	mov	r2, r7
 80046a0:	4628      	mov	r0, r5
 80046a2:	47b0      	blx	r6
 80046a4:	2800      	cmp	r0, #0
 80046a6:	dc06      	bgt.n	80046b6 <__sflush_r+0xfe>
 80046a8:	89a3      	ldrh	r3, [r4, #12]
 80046aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046ae:	81a3      	strh	r3, [r4, #12]
 80046b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046b4:	e78e      	b.n	80045d4 <__sflush_r+0x1c>
 80046b6:	4407      	add	r7, r0
 80046b8:	eba8 0800 	sub.w	r8, r8, r0
 80046bc:	e7e9      	b.n	8004692 <__sflush_r+0xda>
 80046be:	bf00      	nop
 80046c0:	20400001 	.word	0x20400001

080046c4 <_fflush_r>:
 80046c4:	b538      	push	{r3, r4, r5, lr}
 80046c6:	690b      	ldr	r3, [r1, #16]
 80046c8:	4605      	mov	r5, r0
 80046ca:	460c      	mov	r4, r1
 80046cc:	b913      	cbnz	r3, 80046d4 <_fflush_r+0x10>
 80046ce:	2500      	movs	r5, #0
 80046d0:	4628      	mov	r0, r5
 80046d2:	bd38      	pop	{r3, r4, r5, pc}
 80046d4:	b118      	cbz	r0, 80046de <_fflush_r+0x1a>
 80046d6:	6983      	ldr	r3, [r0, #24]
 80046d8:	b90b      	cbnz	r3, 80046de <_fflush_r+0x1a>
 80046da:	f000 f887 	bl	80047ec <__sinit>
 80046de:	4b14      	ldr	r3, [pc, #80]	; (8004730 <_fflush_r+0x6c>)
 80046e0:	429c      	cmp	r4, r3
 80046e2:	d11b      	bne.n	800471c <_fflush_r+0x58>
 80046e4:	686c      	ldr	r4, [r5, #4]
 80046e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d0ef      	beq.n	80046ce <_fflush_r+0xa>
 80046ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80046f0:	07d0      	lsls	r0, r2, #31
 80046f2:	d404      	bmi.n	80046fe <_fflush_r+0x3a>
 80046f4:	0599      	lsls	r1, r3, #22
 80046f6:	d402      	bmi.n	80046fe <_fflush_r+0x3a>
 80046f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046fa:	f000 f915 	bl	8004928 <__retarget_lock_acquire_recursive>
 80046fe:	4628      	mov	r0, r5
 8004700:	4621      	mov	r1, r4
 8004702:	f7ff ff59 	bl	80045b8 <__sflush_r>
 8004706:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004708:	07da      	lsls	r2, r3, #31
 800470a:	4605      	mov	r5, r0
 800470c:	d4e0      	bmi.n	80046d0 <_fflush_r+0xc>
 800470e:	89a3      	ldrh	r3, [r4, #12]
 8004710:	059b      	lsls	r3, r3, #22
 8004712:	d4dd      	bmi.n	80046d0 <_fflush_r+0xc>
 8004714:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004716:	f000 f908 	bl	800492a <__retarget_lock_release_recursive>
 800471a:	e7d9      	b.n	80046d0 <_fflush_r+0xc>
 800471c:	4b05      	ldr	r3, [pc, #20]	; (8004734 <_fflush_r+0x70>)
 800471e:	429c      	cmp	r4, r3
 8004720:	d101      	bne.n	8004726 <_fflush_r+0x62>
 8004722:	68ac      	ldr	r4, [r5, #8]
 8004724:	e7df      	b.n	80046e6 <_fflush_r+0x22>
 8004726:	4b04      	ldr	r3, [pc, #16]	; (8004738 <_fflush_r+0x74>)
 8004728:	429c      	cmp	r4, r3
 800472a:	bf08      	it	eq
 800472c:	68ec      	ldreq	r4, [r5, #12]
 800472e:	e7da      	b.n	80046e6 <_fflush_r+0x22>
 8004730:	08004d30 	.word	0x08004d30
 8004734:	08004d50 	.word	0x08004d50
 8004738:	08004d10 	.word	0x08004d10

0800473c <std>:
 800473c:	2300      	movs	r3, #0
 800473e:	b510      	push	{r4, lr}
 8004740:	4604      	mov	r4, r0
 8004742:	e9c0 3300 	strd	r3, r3, [r0]
 8004746:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800474a:	6083      	str	r3, [r0, #8]
 800474c:	8181      	strh	r1, [r0, #12]
 800474e:	6643      	str	r3, [r0, #100]	; 0x64
 8004750:	81c2      	strh	r2, [r0, #14]
 8004752:	6183      	str	r3, [r0, #24]
 8004754:	4619      	mov	r1, r3
 8004756:	2208      	movs	r2, #8
 8004758:	305c      	adds	r0, #92	; 0x5c
 800475a:	f7ff fa3d 	bl	8003bd8 <memset>
 800475e:	4b05      	ldr	r3, [pc, #20]	; (8004774 <std+0x38>)
 8004760:	6263      	str	r3, [r4, #36]	; 0x24
 8004762:	4b05      	ldr	r3, [pc, #20]	; (8004778 <std+0x3c>)
 8004764:	62a3      	str	r3, [r4, #40]	; 0x28
 8004766:	4b05      	ldr	r3, [pc, #20]	; (800477c <std+0x40>)
 8004768:	62e3      	str	r3, [r4, #44]	; 0x2c
 800476a:	4b05      	ldr	r3, [pc, #20]	; (8004780 <std+0x44>)
 800476c:	6224      	str	r4, [r4, #32]
 800476e:	6323      	str	r3, [r4, #48]	; 0x30
 8004770:	bd10      	pop	{r4, pc}
 8004772:	bf00      	nop
 8004774:	08004a95 	.word	0x08004a95
 8004778:	08004ab7 	.word	0x08004ab7
 800477c:	08004aef 	.word	0x08004aef
 8004780:	08004b13 	.word	0x08004b13

08004784 <_cleanup_r>:
 8004784:	4901      	ldr	r1, [pc, #4]	; (800478c <_cleanup_r+0x8>)
 8004786:	f000 b8af 	b.w	80048e8 <_fwalk_reent>
 800478a:	bf00      	nop
 800478c:	080046c5 	.word	0x080046c5

08004790 <__sfmoreglue>:
 8004790:	b570      	push	{r4, r5, r6, lr}
 8004792:	1e4a      	subs	r2, r1, #1
 8004794:	2568      	movs	r5, #104	; 0x68
 8004796:	4355      	muls	r5, r2
 8004798:	460e      	mov	r6, r1
 800479a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800479e:	f7ff faeb 	bl	8003d78 <_malloc_r>
 80047a2:	4604      	mov	r4, r0
 80047a4:	b140      	cbz	r0, 80047b8 <__sfmoreglue+0x28>
 80047a6:	2100      	movs	r1, #0
 80047a8:	e9c0 1600 	strd	r1, r6, [r0]
 80047ac:	300c      	adds	r0, #12
 80047ae:	60a0      	str	r0, [r4, #8]
 80047b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80047b4:	f7ff fa10 	bl	8003bd8 <memset>
 80047b8:	4620      	mov	r0, r4
 80047ba:	bd70      	pop	{r4, r5, r6, pc}

080047bc <__sfp_lock_acquire>:
 80047bc:	4801      	ldr	r0, [pc, #4]	; (80047c4 <__sfp_lock_acquire+0x8>)
 80047be:	f000 b8b3 	b.w	8004928 <__retarget_lock_acquire_recursive>
 80047c2:	bf00      	nop
 80047c4:	20000190 	.word	0x20000190

080047c8 <__sfp_lock_release>:
 80047c8:	4801      	ldr	r0, [pc, #4]	; (80047d0 <__sfp_lock_release+0x8>)
 80047ca:	f000 b8ae 	b.w	800492a <__retarget_lock_release_recursive>
 80047ce:	bf00      	nop
 80047d0:	20000190 	.word	0x20000190

080047d4 <__sinit_lock_acquire>:
 80047d4:	4801      	ldr	r0, [pc, #4]	; (80047dc <__sinit_lock_acquire+0x8>)
 80047d6:	f000 b8a7 	b.w	8004928 <__retarget_lock_acquire_recursive>
 80047da:	bf00      	nop
 80047dc:	2000018b 	.word	0x2000018b

080047e0 <__sinit_lock_release>:
 80047e0:	4801      	ldr	r0, [pc, #4]	; (80047e8 <__sinit_lock_release+0x8>)
 80047e2:	f000 b8a2 	b.w	800492a <__retarget_lock_release_recursive>
 80047e6:	bf00      	nop
 80047e8:	2000018b 	.word	0x2000018b

080047ec <__sinit>:
 80047ec:	b510      	push	{r4, lr}
 80047ee:	4604      	mov	r4, r0
 80047f0:	f7ff fff0 	bl	80047d4 <__sinit_lock_acquire>
 80047f4:	69a3      	ldr	r3, [r4, #24]
 80047f6:	b11b      	cbz	r3, 8004800 <__sinit+0x14>
 80047f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047fc:	f7ff bff0 	b.w	80047e0 <__sinit_lock_release>
 8004800:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004804:	6523      	str	r3, [r4, #80]	; 0x50
 8004806:	4b13      	ldr	r3, [pc, #76]	; (8004854 <__sinit+0x68>)
 8004808:	4a13      	ldr	r2, [pc, #76]	; (8004858 <__sinit+0x6c>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	62a2      	str	r2, [r4, #40]	; 0x28
 800480e:	42a3      	cmp	r3, r4
 8004810:	bf04      	itt	eq
 8004812:	2301      	moveq	r3, #1
 8004814:	61a3      	streq	r3, [r4, #24]
 8004816:	4620      	mov	r0, r4
 8004818:	f000 f820 	bl	800485c <__sfp>
 800481c:	6060      	str	r0, [r4, #4]
 800481e:	4620      	mov	r0, r4
 8004820:	f000 f81c 	bl	800485c <__sfp>
 8004824:	60a0      	str	r0, [r4, #8]
 8004826:	4620      	mov	r0, r4
 8004828:	f000 f818 	bl	800485c <__sfp>
 800482c:	2200      	movs	r2, #0
 800482e:	60e0      	str	r0, [r4, #12]
 8004830:	2104      	movs	r1, #4
 8004832:	6860      	ldr	r0, [r4, #4]
 8004834:	f7ff ff82 	bl	800473c <std>
 8004838:	68a0      	ldr	r0, [r4, #8]
 800483a:	2201      	movs	r2, #1
 800483c:	2109      	movs	r1, #9
 800483e:	f7ff ff7d 	bl	800473c <std>
 8004842:	68e0      	ldr	r0, [r4, #12]
 8004844:	2202      	movs	r2, #2
 8004846:	2112      	movs	r1, #18
 8004848:	f7ff ff78 	bl	800473c <std>
 800484c:	2301      	movs	r3, #1
 800484e:	61a3      	str	r3, [r4, #24]
 8004850:	e7d2      	b.n	80047f8 <__sinit+0xc>
 8004852:	bf00      	nop
 8004854:	08004c24 	.word	0x08004c24
 8004858:	08004785 	.word	0x08004785

0800485c <__sfp>:
 800485c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800485e:	4607      	mov	r7, r0
 8004860:	f7ff ffac 	bl	80047bc <__sfp_lock_acquire>
 8004864:	4b1e      	ldr	r3, [pc, #120]	; (80048e0 <__sfp+0x84>)
 8004866:	681e      	ldr	r6, [r3, #0]
 8004868:	69b3      	ldr	r3, [r6, #24]
 800486a:	b913      	cbnz	r3, 8004872 <__sfp+0x16>
 800486c:	4630      	mov	r0, r6
 800486e:	f7ff ffbd 	bl	80047ec <__sinit>
 8004872:	3648      	adds	r6, #72	; 0x48
 8004874:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004878:	3b01      	subs	r3, #1
 800487a:	d503      	bpl.n	8004884 <__sfp+0x28>
 800487c:	6833      	ldr	r3, [r6, #0]
 800487e:	b30b      	cbz	r3, 80048c4 <__sfp+0x68>
 8004880:	6836      	ldr	r6, [r6, #0]
 8004882:	e7f7      	b.n	8004874 <__sfp+0x18>
 8004884:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004888:	b9d5      	cbnz	r5, 80048c0 <__sfp+0x64>
 800488a:	4b16      	ldr	r3, [pc, #88]	; (80048e4 <__sfp+0x88>)
 800488c:	60e3      	str	r3, [r4, #12]
 800488e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004892:	6665      	str	r5, [r4, #100]	; 0x64
 8004894:	f000 f847 	bl	8004926 <__retarget_lock_init_recursive>
 8004898:	f7ff ff96 	bl	80047c8 <__sfp_lock_release>
 800489c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80048a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80048a4:	6025      	str	r5, [r4, #0]
 80048a6:	61a5      	str	r5, [r4, #24]
 80048a8:	2208      	movs	r2, #8
 80048aa:	4629      	mov	r1, r5
 80048ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80048b0:	f7ff f992 	bl	8003bd8 <memset>
 80048b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80048b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80048bc:	4620      	mov	r0, r4
 80048be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048c0:	3468      	adds	r4, #104	; 0x68
 80048c2:	e7d9      	b.n	8004878 <__sfp+0x1c>
 80048c4:	2104      	movs	r1, #4
 80048c6:	4638      	mov	r0, r7
 80048c8:	f7ff ff62 	bl	8004790 <__sfmoreglue>
 80048cc:	4604      	mov	r4, r0
 80048ce:	6030      	str	r0, [r6, #0]
 80048d0:	2800      	cmp	r0, #0
 80048d2:	d1d5      	bne.n	8004880 <__sfp+0x24>
 80048d4:	f7ff ff78 	bl	80047c8 <__sfp_lock_release>
 80048d8:	230c      	movs	r3, #12
 80048da:	603b      	str	r3, [r7, #0]
 80048dc:	e7ee      	b.n	80048bc <__sfp+0x60>
 80048de:	bf00      	nop
 80048e0:	08004c24 	.word	0x08004c24
 80048e4:	ffff0001 	.word	0xffff0001

080048e8 <_fwalk_reent>:
 80048e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048ec:	4606      	mov	r6, r0
 80048ee:	4688      	mov	r8, r1
 80048f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80048f4:	2700      	movs	r7, #0
 80048f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80048fa:	f1b9 0901 	subs.w	r9, r9, #1
 80048fe:	d505      	bpl.n	800490c <_fwalk_reent+0x24>
 8004900:	6824      	ldr	r4, [r4, #0]
 8004902:	2c00      	cmp	r4, #0
 8004904:	d1f7      	bne.n	80048f6 <_fwalk_reent+0xe>
 8004906:	4638      	mov	r0, r7
 8004908:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800490c:	89ab      	ldrh	r3, [r5, #12]
 800490e:	2b01      	cmp	r3, #1
 8004910:	d907      	bls.n	8004922 <_fwalk_reent+0x3a>
 8004912:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004916:	3301      	adds	r3, #1
 8004918:	d003      	beq.n	8004922 <_fwalk_reent+0x3a>
 800491a:	4629      	mov	r1, r5
 800491c:	4630      	mov	r0, r6
 800491e:	47c0      	blx	r8
 8004920:	4307      	orrs	r7, r0
 8004922:	3568      	adds	r5, #104	; 0x68
 8004924:	e7e9      	b.n	80048fa <_fwalk_reent+0x12>

08004926 <__retarget_lock_init_recursive>:
 8004926:	4770      	bx	lr

08004928 <__retarget_lock_acquire_recursive>:
 8004928:	4770      	bx	lr

0800492a <__retarget_lock_release_recursive>:
 800492a:	4770      	bx	lr

0800492c <__swhatbuf_r>:
 800492c:	b570      	push	{r4, r5, r6, lr}
 800492e:	460e      	mov	r6, r1
 8004930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004934:	2900      	cmp	r1, #0
 8004936:	b096      	sub	sp, #88	; 0x58
 8004938:	4614      	mov	r4, r2
 800493a:	461d      	mov	r5, r3
 800493c:	da07      	bge.n	800494e <__swhatbuf_r+0x22>
 800493e:	2300      	movs	r3, #0
 8004940:	602b      	str	r3, [r5, #0]
 8004942:	89b3      	ldrh	r3, [r6, #12]
 8004944:	061a      	lsls	r2, r3, #24
 8004946:	d410      	bmi.n	800496a <__swhatbuf_r+0x3e>
 8004948:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800494c:	e00e      	b.n	800496c <__swhatbuf_r+0x40>
 800494e:	466a      	mov	r2, sp
 8004950:	f000 f906 	bl	8004b60 <_fstat_r>
 8004954:	2800      	cmp	r0, #0
 8004956:	dbf2      	blt.n	800493e <__swhatbuf_r+0x12>
 8004958:	9a01      	ldr	r2, [sp, #4]
 800495a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800495e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004962:	425a      	negs	r2, r3
 8004964:	415a      	adcs	r2, r3
 8004966:	602a      	str	r2, [r5, #0]
 8004968:	e7ee      	b.n	8004948 <__swhatbuf_r+0x1c>
 800496a:	2340      	movs	r3, #64	; 0x40
 800496c:	2000      	movs	r0, #0
 800496e:	6023      	str	r3, [r4, #0]
 8004970:	b016      	add	sp, #88	; 0x58
 8004972:	bd70      	pop	{r4, r5, r6, pc}

08004974 <__smakebuf_r>:
 8004974:	898b      	ldrh	r3, [r1, #12]
 8004976:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004978:	079d      	lsls	r5, r3, #30
 800497a:	4606      	mov	r6, r0
 800497c:	460c      	mov	r4, r1
 800497e:	d507      	bpl.n	8004990 <__smakebuf_r+0x1c>
 8004980:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004984:	6023      	str	r3, [r4, #0]
 8004986:	6123      	str	r3, [r4, #16]
 8004988:	2301      	movs	r3, #1
 800498a:	6163      	str	r3, [r4, #20]
 800498c:	b002      	add	sp, #8
 800498e:	bd70      	pop	{r4, r5, r6, pc}
 8004990:	ab01      	add	r3, sp, #4
 8004992:	466a      	mov	r2, sp
 8004994:	f7ff ffca 	bl	800492c <__swhatbuf_r>
 8004998:	9900      	ldr	r1, [sp, #0]
 800499a:	4605      	mov	r5, r0
 800499c:	4630      	mov	r0, r6
 800499e:	f7ff f9eb 	bl	8003d78 <_malloc_r>
 80049a2:	b948      	cbnz	r0, 80049b8 <__smakebuf_r+0x44>
 80049a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049a8:	059a      	lsls	r2, r3, #22
 80049aa:	d4ef      	bmi.n	800498c <__smakebuf_r+0x18>
 80049ac:	f023 0303 	bic.w	r3, r3, #3
 80049b0:	f043 0302 	orr.w	r3, r3, #2
 80049b4:	81a3      	strh	r3, [r4, #12]
 80049b6:	e7e3      	b.n	8004980 <__smakebuf_r+0xc>
 80049b8:	4b0d      	ldr	r3, [pc, #52]	; (80049f0 <__smakebuf_r+0x7c>)
 80049ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80049bc:	89a3      	ldrh	r3, [r4, #12]
 80049be:	6020      	str	r0, [r4, #0]
 80049c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049c4:	81a3      	strh	r3, [r4, #12]
 80049c6:	9b00      	ldr	r3, [sp, #0]
 80049c8:	6163      	str	r3, [r4, #20]
 80049ca:	9b01      	ldr	r3, [sp, #4]
 80049cc:	6120      	str	r0, [r4, #16]
 80049ce:	b15b      	cbz	r3, 80049e8 <__smakebuf_r+0x74>
 80049d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049d4:	4630      	mov	r0, r6
 80049d6:	f000 f8d5 	bl	8004b84 <_isatty_r>
 80049da:	b128      	cbz	r0, 80049e8 <__smakebuf_r+0x74>
 80049dc:	89a3      	ldrh	r3, [r4, #12]
 80049de:	f023 0303 	bic.w	r3, r3, #3
 80049e2:	f043 0301 	orr.w	r3, r3, #1
 80049e6:	81a3      	strh	r3, [r4, #12]
 80049e8:	89a0      	ldrh	r0, [r4, #12]
 80049ea:	4305      	orrs	r5, r0
 80049ec:	81a5      	strh	r5, [r4, #12]
 80049ee:	e7cd      	b.n	800498c <__smakebuf_r+0x18>
 80049f0:	08004785 	.word	0x08004785

080049f4 <__malloc_lock>:
 80049f4:	4801      	ldr	r0, [pc, #4]	; (80049fc <__malloc_lock+0x8>)
 80049f6:	f7ff bf97 	b.w	8004928 <__retarget_lock_acquire_recursive>
 80049fa:	bf00      	nop
 80049fc:	2000018c 	.word	0x2000018c

08004a00 <__malloc_unlock>:
 8004a00:	4801      	ldr	r0, [pc, #4]	; (8004a08 <__malloc_unlock+0x8>)
 8004a02:	f7ff bf92 	b.w	800492a <__retarget_lock_release_recursive>
 8004a06:	bf00      	nop
 8004a08:	2000018c 	.word	0x2000018c

08004a0c <_raise_r>:
 8004a0c:	291f      	cmp	r1, #31
 8004a0e:	b538      	push	{r3, r4, r5, lr}
 8004a10:	4604      	mov	r4, r0
 8004a12:	460d      	mov	r5, r1
 8004a14:	d904      	bls.n	8004a20 <_raise_r+0x14>
 8004a16:	2316      	movs	r3, #22
 8004a18:	6003      	str	r3, [r0, #0]
 8004a1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a1e:	bd38      	pop	{r3, r4, r5, pc}
 8004a20:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004a22:	b112      	cbz	r2, 8004a2a <_raise_r+0x1e>
 8004a24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004a28:	b94b      	cbnz	r3, 8004a3e <_raise_r+0x32>
 8004a2a:	4620      	mov	r0, r4
 8004a2c:	f000 f830 	bl	8004a90 <_getpid_r>
 8004a30:	462a      	mov	r2, r5
 8004a32:	4601      	mov	r1, r0
 8004a34:	4620      	mov	r0, r4
 8004a36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a3a:	f000 b817 	b.w	8004a6c <_kill_r>
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d00a      	beq.n	8004a58 <_raise_r+0x4c>
 8004a42:	1c59      	adds	r1, r3, #1
 8004a44:	d103      	bne.n	8004a4e <_raise_r+0x42>
 8004a46:	2316      	movs	r3, #22
 8004a48:	6003      	str	r3, [r0, #0]
 8004a4a:	2001      	movs	r0, #1
 8004a4c:	e7e7      	b.n	8004a1e <_raise_r+0x12>
 8004a4e:	2400      	movs	r4, #0
 8004a50:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004a54:	4628      	mov	r0, r5
 8004a56:	4798      	blx	r3
 8004a58:	2000      	movs	r0, #0
 8004a5a:	e7e0      	b.n	8004a1e <_raise_r+0x12>

08004a5c <raise>:
 8004a5c:	4b02      	ldr	r3, [pc, #8]	; (8004a68 <raise+0xc>)
 8004a5e:	4601      	mov	r1, r0
 8004a60:	6818      	ldr	r0, [r3, #0]
 8004a62:	f7ff bfd3 	b.w	8004a0c <_raise_r>
 8004a66:	bf00      	nop
 8004a68:	2000000c 	.word	0x2000000c

08004a6c <_kill_r>:
 8004a6c:	b538      	push	{r3, r4, r5, lr}
 8004a6e:	4d07      	ldr	r5, [pc, #28]	; (8004a8c <_kill_r+0x20>)
 8004a70:	2300      	movs	r3, #0
 8004a72:	4604      	mov	r4, r0
 8004a74:	4608      	mov	r0, r1
 8004a76:	4611      	mov	r1, r2
 8004a78:	602b      	str	r3, [r5, #0]
 8004a7a:	f7fc fa01 	bl	8000e80 <_kill>
 8004a7e:	1c43      	adds	r3, r0, #1
 8004a80:	d102      	bne.n	8004a88 <_kill_r+0x1c>
 8004a82:	682b      	ldr	r3, [r5, #0]
 8004a84:	b103      	cbz	r3, 8004a88 <_kill_r+0x1c>
 8004a86:	6023      	str	r3, [r4, #0]
 8004a88:	bd38      	pop	{r3, r4, r5, pc}
 8004a8a:	bf00      	nop
 8004a8c:	20000194 	.word	0x20000194

08004a90 <_getpid_r>:
 8004a90:	f7fc b9ee 	b.w	8000e70 <_getpid>

08004a94 <__sread>:
 8004a94:	b510      	push	{r4, lr}
 8004a96:	460c      	mov	r4, r1
 8004a98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a9c:	f000 f894 	bl	8004bc8 <_read_r>
 8004aa0:	2800      	cmp	r0, #0
 8004aa2:	bfab      	itete	ge
 8004aa4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004aa6:	89a3      	ldrhlt	r3, [r4, #12]
 8004aa8:	181b      	addge	r3, r3, r0
 8004aaa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004aae:	bfac      	ite	ge
 8004ab0:	6563      	strge	r3, [r4, #84]	; 0x54
 8004ab2:	81a3      	strhlt	r3, [r4, #12]
 8004ab4:	bd10      	pop	{r4, pc}

08004ab6 <__swrite>:
 8004ab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004aba:	461f      	mov	r7, r3
 8004abc:	898b      	ldrh	r3, [r1, #12]
 8004abe:	05db      	lsls	r3, r3, #23
 8004ac0:	4605      	mov	r5, r0
 8004ac2:	460c      	mov	r4, r1
 8004ac4:	4616      	mov	r6, r2
 8004ac6:	d505      	bpl.n	8004ad4 <__swrite+0x1e>
 8004ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004acc:	2302      	movs	r3, #2
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f000 f868 	bl	8004ba4 <_lseek_r>
 8004ad4:	89a3      	ldrh	r3, [r4, #12]
 8004ad6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ada:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ade:	81a3      	strh	r3, [r4, #12]
 8004ae0:	4632      	mov	r2, r6
 8004ae2:	463b      	mov	r3, r7
 8004ae4:	4628      	mov	r0, r5
 8004ae6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004aea:	f000 b817 	b.w	8004b1c <_write_r>

08004aee <__sseek>:
 8004aee:	b510      	push	{r4, lr}
 8004af0:	460c      	mov	r4, r1
 8004af2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004af6:	f000 f855 	bl	8004ba4 <_lseek_r>
 8004afa:	1c43      	adds	r3, r0, #1
 8004afc:	89a3      	ldrh	r3, [r4, #12]
 8004afe:	bf15      	itete	ne
 8004b00:	6560      	strne	r0, [r4, #84]	; 0x54
 8004b02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004b06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004b0a:	81a3      	strheq	r3, [r4, #12]
 8004b0c:	bf18      	it	ne
 8004b0e:	81a3      	strhne	r3, [r4, #12]
 8004b10:	bd10      	pop	{r4, pc}

08004b12 <__sclose>:
 8004b12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b16:	f000 b813 	b.w	8004b40 <_close_r>
	...

08004b1c <_write_r>:
 8004b1c:	b538      	push	{r3, r4, r5, lr}
 8004b1e:	4d07      	ldr	r5, [pc, #28]	; (8004b3c <_write_r+0x20>)
 8004b20:	4604      	mov	r4, r0
 8004b22:	4608      	mov	r0, r1
 8004b24:	4611      	mov	r1, r2
 8004b26:	2200      	movs	r2, #0
 8004b28:	602a      	str	r2, [r5, #0]
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	f7fc f9df 	bl	8000eee <_write>
 8004b30:	1c43      	adds	r3, r0, #1
 8004b32:	d102      	bne.n	8004b3a <_write_r+0x1e>
 8004b34:	682b      	ldr	r3, [r5, #0]
 8004b36:	b103      	cbz	r3, 8004b3a <_write_r+0x1e>
 8004b38:	6023      	str	r3, [r4, #0]
 8004b3a:	bd38      	pop	{r3, r4, r5, pc}
 8004b3c:	20000194 	.word	0x20000194

08004b40 <_close_r>:
 8004b40:	b538      	push	{r3, r4, r5, lr}
 8004b42:	4d06      	ldr	r5, [pc, #24]	; (8004b5c <_close_r+0x1c>)
 8004b44:	2300      	movs	r3, #0
 8004b46:	4604      	mov	r4, r0
 8004b48:	4608      	mov	r0, r1
 8004b4a:	602b      	str	r3, [r5, #0]
 8004b4c:	f7fc f9eb 	bl	8000f26 <_close>
 8004b50:	1c43      	adds	r3, r0, #1
 8004b52:	d102      	bne.n	8004b5a <_close_r+0x1a>
 8004b54:	682b      	ldr	r3, [r5, #0]
 8004b56:	b103      	cbz	r3, 8004b5a <_close_r+0x1a>
 8004b58:	6023      	str	r3, [r4, #0]
 8004b5a:	bd38      	pop	{r3, r4, r5, pc}
 8004b5c:	20000194 	.word	0x20000194

08004b60 <_fstat_r>:
 8004b60:	b538      	push	{r3, r4, r5, lr}
 8004b62:	4d07      	ldr	r5, [pc, #28]	; (8004b80 <_fstat_r+0x20>)
 8004b64:	2300      	movs	r3, #0
 8004b66:	4604      	mov	r4, r0
 8004b68:	4608      	mov	r0, r1
 8004b6a:	4611      	mov	r1, r2
 8004b6c:	602b      	str	r3, [r5, #0]
 8004b6e:	f7fc f9e6 	bl	8000f3e <_fstat>
 8004b72:	1c43      	adds	r3, r0, #1
 8004b74:	d102      	bne.n	8004b7c <_fstat_r+0x1c>
 8004b76:	682b      	ldr	r3, [r5, #0]
 8004b78:	b103      	cbz	r3, 8004b7c <_fstat_r+0x1c>
 8004b7a:	6023      	str	r3, [r4, #0]
 8004b7c:	bd38      	pop	{r3, r4, r5, pc}
 8004b7e:	bf00      	nop
 8004b80:	20000194 	.word	0x20000194

08004b84 <_isatty_r>:
 8004b84:	b538      	push	{r3, r4, r5, lr}
 8004b86:	4d06      	ldr	r5, [pc, #24]	; (8004ba0 <_isatty_r+0x1c>)
 8004b88:	2300      	movs	r3, #0
 8004b8a:	4604      	mov	r4, r0
 8004b8c:	4608      	mov	r0, r1
 8004b8e:	602b      	str	r3, [r5, #0]
 8004b90:	f7fc f9e5 	bl	8000f5e <_isatty>
 8004b94:	1c43      	adds	r3, r0, #1
 8004b96:	d102      	bne.n	8004b9e <_isatty_r+0x1a>
 8004b98:	682b      	ldr	r3, [r5, #0]
 8004b9a:	b103      	cbz	r3, 8004b9e <_isatty_r+0x1a>
 8004b9c:	6023      	str	r3, [r4, #0]
 8004b9e:	bd38      	pop	{r3, r4, r5, pc}
 8004ba0:	20000194 	.word	0x20000194

08004ba4 <_lseek_r>:
 8004ba4:	b538      	push	{r3, r4, r5, lr}
 8004ba6:	4d07      	ldr	r5, [pc, #28]	; (8004bc4 <_lseek_r+0x20>)
 8004ba8:	4604      	mov	r4, r0
 8004baa:	4608      	mov	r0, r1
 8004bac:	4611      	mov	r1, r2
 8004bae:	2200      	movs	r2, #0
 8004bb0:	602a      	str	r2, [r5, #0]
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	f7fc f9de 	bl	8000f74 <_lseek>
 8004bb8:	1c43      	adds	r3, r0, #1
 8004bba:	d102      	bne.n	8004bc2 <_lseek_r+0x1e>
 8004bbc:	682b      	ldr	r3, [r5, #0]
 8004bbe:	b103      	cbz	r3, 8004bc2 <_lseek_r+0x1e>
 8004bc0:	6023      	str	r3, [r4, #0]
 8004bc2:	bd38      	pop	{r3, r4, r5, pc}
 8004bc4:	20000194 	.word	0x20000194

08004bc8 <_read_r>:
 8004bc8:	b538      	push	{r3, r4, r5, lr}
 8004bca:	4d07      	ldr	r5, [pc, #28]	; (8004be8 <_read_r+0x20>)
 8004bcc:	4604      	mov	r4, r0
 8004bce:	4608      	mov	r0, r1
 8004bd0:	4611      	mov	r1, r2
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	602a      	str	r2, [r5, #0]
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	f7fc f96c 	bl	8000eb4 <_read>
 8004bdc:	1c43      	adds	r3, r0, #1
 8004bde:	d102      	bne.n	8004be6 <_read_r+0x1e>
 8004be0:	682b      	ldr	r3, [r5, #0]
 8004be2:	b103      	cbz	r3, 8004be6 <_read_r+0x1e>
 8004be4:	6023      	str	r3, [r4, #0]
 8004be6:	bd38      	pop	{r3, r4, r5, pc}
 8004be8:	20000194 	.word	0x20000194

08004bec <_init>:
 8004bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bee:	bf00      	nop
 8004bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bf2:	bc08      	pop	{r3}
 8004bf4:	469e      	mov	lr, r3
 8004bf6:	4770      	bx	lr

08004bf8 <_fini>:
 8004bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bfa:	bf00      	nop
 8004bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bfe:	bc08      	pop	{r3}
 8004c00:	469e      	mov	lr, r3
 8004c02:	4770      	bx	lr
