
DMA_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007504  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000260  080076a0  080076a0  000176a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007900  08007900  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007900  08007900  00017900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007908  08007908  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007908  08007908  00017908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800790c  0800790c  0001790c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007910  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  20000074  08007984  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000304  08007984  00020304  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001199e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028fb  00000000  00000000  00031a42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f08  00000000  00000000  00034340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e00  00000000  00000000  00035248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000193fb  00000000  00000000  00036048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010c0d  00000000  00000000  0004f443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bfbb  00000000  00000000  00060050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fc00b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048dc  00000000  00000000  000fc060  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000074 	.word	0x20000074
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007684 	.word	0x08007684

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000078 	.word	0x20000078
 80001d4:	08007684 	.word	0x08007684

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2uiz>:
 8000ad4:	004a      	lsls	r2, r1, #1
 8000ad6:	d211      	bcs.n	8000afc <__aeabi_d2uiz+0x28>
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000adc:	d211      	bcs.n	8000b02 <__aeabi_d2uiz+0x2e>
 8000ade:	d50d      	bpl.n	8000afc <__aeabi_d2uiz+0x28>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d40e      	bmi.n	8000b08 <__aeabi_d2uiz+0x34>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	fa23 f002 	lsr.w	r0, r3, r2
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d102      	bne.n	8000b0e <__aeabi_d2uiz+0x3a>
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	4770      	bx	lr
 8000b0e:	f04f 0000 	mov.w	r0, #0
 8000b12:	4770      	bx	lr

08000b14 <__aeabi_d2f>:
 8000b14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b1c:	bf24      	itt	cs
 8000b1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b26:	d90d      	bls.n	8000b44 <__aeabi_d2f+0x30>
 8000b28:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b34:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b3c:	bf08      	it	eq
 8000b3e:	f020 0001 	biceq.w	r0, r0, #1
 8000b42:	4770      	bx	lr
 8000b44:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b48:	d121      	bne.n	8000b8e <__aeabi_d2f+0x7a>
 8000b4a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b4e:	bfbc      	itt	lt
 8000b50:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b54:	4770      	bxlt	lr
 8000b56:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5e:	f1c2 0218 	rsb	r2, r2, #24
 8000b62:	f1c2 0c20 	rsb	ip, r2, #32
 8000b66:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6e:	bf18      	it	ne
 8000b70:	f040 0001 	orrne.w	r0, r0, #1
 8000b74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b7c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b80:	ea40 000c 	orr.w	r0, r0, ip
 8000b84:	fa23 f302 	lsr.w	r3, r3, r2
 8000b88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b8c:	e7cc      	b.n	8000b28 <__aeabi_d2f+0x14>
 8000b8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b92:	d107      	bne.n	8000ba4 <__aeabi_d2f+0x90>
 8000b94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b98:	bf1e      	ittt	ne
 8000b9a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b9e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ba2:	4770      	bxne	lr
 8000ba4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_uldivmod>:
 8000bb4:	b953      	cbnz	r3, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb6:	b94a      	cbnz	r2, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb8:	2900      	cmp	r1, #0
 8000bba:	bf08      	it	eq
 8000bbc:	2800      	cmpeq	r0, #0
 8000bbe:	bf1c      	itt	ne
 8000bc0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc8:	f000 b96e 	b.w	8000ea8 <__aeabi_idiv0>
 8000bcc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd4:	f000 f806 	bl	8000be4 <__udivmoddi4>
 8000bd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be0:	b004      	add	sp, #16
 8000be2:	4770      	bx	lr

08000be4 <__udivmoddi4>:
 8000be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be8:	9d08      	ldr	r5, [sp, #32]
 8000bea:	4604      	mov	r4, r0
 8000bec:	468c      	mov	ip, r1
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	f040 8083 	bne.w	8000cfa <__udivmoddi4+0x116>
 8000bf4:	428a      	cmp	r2, r1
 8000bf6:	4617      	mov	r7, r2
 8000bf8:	d947      	bls.n	8000c8a <__udivmoddi4+0xa6>
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	b142      	cbz	r2, 8000c12 <__udivmoddi4+0x2e>
 8000c00:	f1c2 0020 	rsb	r0, r2, #32
 8000c04:	fa24 f000 	lsr.w	r0, r4, r0
 8000c08:	4091      	lsls	r1, r2
 8000c0a:	4097      	lsls	r7, r2
 8000c0c:	ea40 0c01 	orr.w	ip, r0, r1
 8000c10:	4094      	lsls	r4, r2
 8000c12:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c16:	0c23      	lsrs	r3, r4, #16
 8000c18:	fbbc f6f8 	udiv	r6, ip, r8
 8000c1c:	fa1f fe87 	uxth.w	lr, r7
 8000c20:	fb08 c116 	mls	r1, r8, r6, ip
 8000c24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c28:	fb06 f10e 	mul.w	r1, r6, lr
 8000c2c:	4299      	cmp	r1, r3
 8000c2e:	d909      	bls.n	8000c44 <__udivmoddi4+0x60>
 8000c30:	18fb      	adds	r3, r7, r3
 8000c32:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c36:	f080 8119 	bcs.w	8000e6c <__udivmoddi4+0x288>
 8000c3a:	4299      	cmp	r1, r3
 8000c3c:	f240 8116 	bls.w	8000e6c <__udivmoddi4+0x288>
 8000c40:	3e02      	subs	r6, #2
 8000c42:	443b      	add	r3, r7
 8000c44:	1a5b      	subs	r3, r3, r1
 8000c46:	b2a4      	uxth	r4, r4
 8000c48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c4c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c58:	45a6      	cmp	lr, r4
 8000c5a:	d909      	bls.n	8000c70 <__udivmoddi4+0x8c>
 8000c5c:	193c      	adds	r4, r7, r4
 8000c5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c62:	f080 8105 	bcs.w	8000e70 <__udivmoddi4+0x28c>
 8000c66:	45a6      	cmp	lr, r4
 8000c68:	f240 8102 	bls.w	8000e70 <__udivmoddi4+0x28c>
 8000c6c:	3802      	subs	r0, #2
 8000c6e:	443c      	add	r4, r7
 8000c70:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c74:	eba4 040e 	sub.w	r4, r4, lr
 8000c78:	2600      	movs	r6, #0
 8000c7a:	b11d      	cbz	r5, 8000c84 <__udivmoddi4+0xa0>
 8000c7c:	40d4      	lsrs	r4, r2
 8000c7e:	2300      	movs	r3, #0
 8000c80:	e9c5 4300 	strd	r4, r3, [r5]
 8000c84:	4631      	mov	r1, r6
 8000c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8a:	b902      	cbnz	r2, 8000c8e <__udivmoddi4+0xaa>
 8000c8c:	deff      	udf	#255	; 0xff
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	2a00      	cmp	r2, #0
 8000c94:	d150      	bne.n	8000d38 <__udivmoddi4+0x154>
 8000c96:	1bcb      	subs	r3, r1, r7
 8000c98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c9c:	fa1f f887 	uxth.w	r8, r7
 8000ca0:	2601      	movs	r6, #1
 8000ca2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ca6:	0c21      	lsrs	r1, r4, #16
 8000ca8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb0:	fb08 f30c 	mul.w	r3, r8, ip
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	d907      	bls.n	8000cc8 <__udivmoddi4+0xe4>
 8000cb8:	1879      	adds	r1, r7, r1
 8000cba:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cbe:	d202      	bcs.n	8000cc6 <__udivmoddi4+0xe2>
 8000cc0:	428b      	cmp	r3, r1
 8000cc2:	f200 80e9 	bhi.w	8000e98 <__udivmoddi4+0x2b4>
 8000cc6:	4684      	mov	ip, r0
 8000cc8:	1ac9      	subs	r1, r1, r3
 8000cca:	b2a3      	uxth	r3, r4
 8000ccc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cd4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cd8:	fb08 f800 	mul.w	r8, r8, r0
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	d907      	bls.n	8000cf0 <__udivmoddi4+0x10c>
 8000ce0:	193c      	adds	r4, r7, r4
 8000ce2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce6:	d202      	bcs.n	8000cee <__udivmoddi4+0x10a>
 8000ce8:	45a0      	cmp	r8, r4
 8000cea:	f200 80d9 	bhi.w	8000ea0 <__udivmoddi4+0x2bc>
 8000cee:	4618      	mov	r0, r3
 8000cf0:	eba4 0408 	sub.w	r4, r4, r8
 8000cf4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cf8:	e7bf      	b.n	8000c7a <__udivmoddi4+0x96>
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	d909      	bls.n	8000d12 <__udivmoddi4+0x12e>
 8000cfe:	2d00      	cmp	r5, #0
 8000d00:	f000 80b1 	beq.w	8000e66 <__udivmoddi4+0x282>
 8000d04:	2600      	movs	r6, #0
 8000d06:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0a:	4630      	mov	r0, r6
 8000d0c:	4631      	mov	r1, r6
 8000d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d12:	fab3 f683 	clz	r6, r3
 8000d16:	2e00      	cmp	r6, #0
 8000d18:	d14a      	bne.n	8000db0 <__udivmoddi4+0x1cc>
 8000d1a:	428b      	cmp	r3, r1
 8000d1c:	d302      	bcc.n	8000d24 <__udivmoddi4+0x140>
 8000d1e:	4282      	cmp	r2, r0
 8000d20:	f200 80b8 	bhi.w	8000e94 <__udivmoddi4+0x2b0>
 8000d24:	1a84      	subs	r4, r0, r2
 8000d26:	eb61 0103 	sbc.w	r1, r1, r3
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2d00      	cmp	r5, #0
 8000d30:	d0a8      	beq.n	8000c84 <__udivmoddi4+0xa0>
 8000d32:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0xa0>
 8000d38:	f1c2 0320 	rsb	r3, r2, #32
 8000d3c:	fa20 f603 	lsr.w	r6, r0, r3
 8000d40:	4097      	lsls	r7, r2
 8000d42:	fa01 f002 	lsl.w	r0, r1, r2
 8000d46:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4a:	40d9      	lsrs	r1, r3
 8000d4c:	4330      	orrs	r0, r6
 8000d4e:	0c03      	lsrs	r3, r0, #16
 8000d50:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d54:	fa1f f887 	uxth.w	r8, r7
 8000d58:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d60:	fb06 f108 	mul.w	r1, r6, r8
 8000d64:	4299      	cmp	r1, r3
 8000d66:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6a:	d909      	bls.n	8000d80 <__udivmoddi4+0x19c>
 8000d6c:	18fb      	adds	r3, r7, r3
 8000d6e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d72:	f080 808d 	bcs.w	8000e90 <__udivmoddi4+0x2ac>
 8000d76:	4299      	cmp	r1, r3
 8000d78:	f240 808a 	bls.w	8000e90 <__udivmoddi4+0x2ac>
 8000d7c:	3e02      	subs	r6, #2
 8000d7e:	443b      	add	r3, r7
 8000d80:	1a5b      	subs	r3, r3, r1
 8000d82:	b281      	uxth	r1, r0
 8000d84:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d88:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d8c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d90:	fb00 f308 	mul.w	r3, r0, r8
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d907      	bls.n	8000da8 <__udivmoddi4+0x1c4>
 8000d98:	1879      	adds	r1, r7, r1
 8000d9a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d9e:	d273      	bcs.n	8000e88 <__udivmoddi4+0x2a4>
 8000da0:	428b      	cmp	r3, r1
 8000da2:	d971      	bls.n	8000e88 <__udivmoddi4+0x2a4>
 8000da4:	3802      	subs	r0, #2
 8000da6:	4439      	add	r1, r7
 8000da8:	1acb      	subs	r3, r1, r3
 8000daa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dae:	e778      	b.n	8000ca2 <__udivmoddi4+0xbe>
 8000db0:	f1c6 0c20 	rsb	ip, r6, #32
 8000db4:	fa03 f406 	lsl.w	r4, r3, r6
 8000db8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dbc:	431c      	orrs	r4, r3
 8000dbe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dc2:	fa01 f306 	lsl.w	r3, r1, r6
 8000dc6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dca:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dce:	431f      	orrs	r7, r3
 8000dd0:	0c3b      	lsrs	r3, r7, #16
 8000dd2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dd6:	fa1f f884 	uxth.w	r8, r4
 8000dda:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dde:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de2:	fb09 fa08 	mul.w	sl, r9, r8
 8000de6:	458a      	cmp	sl, r1
 8000de8:	fa02 f206 	lsl.w	r2, r2, r6
 8000dec:	fa00 f306 	lsl.w	r3, r0, r6
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x220>
 8000df2:	1861      	adds	r1, r4, r1
 8000df4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000df8:	d248      	bcs.n	8000e8c <__udivmoddi4+0x2a8>
 8000dfa:	458a      	cmp	sl, r1
 8000dfc:	d946      	bls.n	8000e8c <__udivmoddi4+0x2a8>
 8000dfe:	f1a9 0902 	sub.w	r9, r9, #2
 8000e02:	4421      	add	r1, r4
 8000e04:	eba1 010a 	sub.w	r1, r1, sl
 8000e08:	b2bf      	uxth	r7, r7
 8000e0a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e0e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e12:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e16:	fb00 f808 	mul.w	r8, r0, r8
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x24a>
 8000e1e:	19e7      	adds	r7, r4, r7
 8000e20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e24:	d22e      	bcs.n	8000e84 <__udivmoddi4+0x2a0>
 8000e26:	45b8      	cmp	r8, r7
 8000e28:	d92c      	bls.n	8000e84 <__udivmoddi4+0x2a0>
 8000e2a:	3802      	subs	r0, #2
 8000e2c:	4427      	add	r7, r4
 8000e2e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e32:	eba7 0708 	sub.w	r7, r7, r8
 8000e36:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3a:	454f      	cmp	r7, r9
 8000e3c:	46c6      	mov	lr, r8
 8000e3e:	4649      	mov	r1, r9
 8000e40:	d31a      	bcc.n	8000e78 <__udivmoddi4+0x294>
 8000e42:	d017      	beq.n	8000e74 <__udivmoddi4+0x290>
 8000e44:	b15d      	cbz	r5, 8000e5e <__udivmoddi4+0x27a>
 8000e46:	ebb3 020e 	subs.w	r2, r3, lr
 8000e4a:	eb67 0701 	sbc.w	r7, r7, r1
 8000e4e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e52:	40f2      	lsrs	r2, r6
 8000e54:	ea4c 0202 	orr.w	r2, ip, r2
 8000e58:	40f7      	lsrs	r7, r6
 8000e5a:	e9c5 2700 	strd	r2, r7, [r5]
 8000e5e:	2600      	movs	r6, #0
 8000e60:	4631      	mov	r1, r6
 8000e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e66:	462e      	mov	r6, r5
 8000e68:	4628      	mov	r0, r5
 8000e6a:	e70b      	b.n	8000c84 <__udivmoddi4+0xa0>
 8000e6c:	4606      	mov	r6, r0
 8000e6e:	e6e9      	b.n	8000c44 <__udivmoddi4+0x60>
 8000e70:	4618      	mov	r0, r3
 8000e72:	e6fd      	b.n	8000c70 <__udivmoddi4+0x8c>
 8000e74:	4543      	cmp	r3, r8
 8000e76:	d2e5      	bcs.n	8000e44 <__udivmoddi4+0x260>
 8000e78:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e7c:	eb69 0104 	sbc.w	r1, r9, r4
 8000e80:	3801      	subs	r0, #1
 8000e82:	e7df      	b.n	8000e44 <__udivmoddi4+0x260>
 8000e84:	4608      	mov	r0, r1
 8000e86:	e7d2      	b.n	8000e2e <__udivmoddi4+0x24a>
 8000e88:	4660      	mov	r0, ip
 8000e8a:	e78d      	b.n	8000da8 <__udivmoddi4+0x1c4>
 8000e8c:	4681      	mov	r9, r0
 8000e8e:	e7b9      	b.n	8000e04 <__udivmoddi4+0x220>
 8000e90:	4666      	mov	r6, ip
 8000e92:	e775      	b.n	8000d80 <__udivmoddi4+0x19c>
 8000e94:	4630      	mov	r0, r6
 8000e96:	e74a      	b.n	8000d2e <__udivmoddi4+0x14a>
 8000e98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e9c:	4439      	add	r1, r7
 8000e9e:	e713      	b.n	8000cc8 <__udivmoddi4+0xe4>
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	443c      	add	r4, r7
 8000ea4:	e724      	b.n	8000cf0 <__udivmoddi4+0x10c>
 8000ea6:	bf00      	nop

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <_WAsys_default_stdout_logging_cb_func>:
 * @param arg_buff the message need to be printed
 * @param arg_len size of message(arg_buff) length
 * @see WAsys_logging_init_default
 */
static void _WAsys_default_stdout_logging_cb_func(char *arg_buff,
		size_t arg_len) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
	size_t _a;
	for (_a = 0; _a < arg_len; _a++) {
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	e00f      	b.n	8000edc <_WAsys_default_stdout_logging_cb_func+0x30>
		putchar(arg_buff[_a]);
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f005 f92f 	bl	8006128 <putchar>
		fflush(stdout);
 8000eca:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <_WAsys_default_stdout_logging_cb_func+0x44>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f004 ff47 	bl	8005d64 <fflush>
	for (_a = 0; _a < arg_len; _a++) {
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fa      	ldr	r2, [r7, #12]
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d3eb      	bcc.n	8000ebc <_WAsys_default_stdout_logging_cb_func+0x10>
	}
}
 8000ee4:	bf00      	nop
 8000ee6:	bf00      	nop
 8000ee8:	3710      	adds	r7, #16
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000010 	.word	0x20000010

08000ef4 <_WAsys_default_system_timestamp_func>:

/**
 * @brief Default system timestamp func. Calls time() funcs(if lib thinks it might be available) or zero
 * @see WAsys_logging_init_default
 */
static time_t _WAsys_default_system_timestamp_func(void) {
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0

	/*when time() func is possibly available*/
#ifdef _WAsys_TIME_FUNC_MAYBE_DEFINED
	time(&_ts);
#else
	_ts = 0;
 8000efa:	f04f 0200 	mov.w	r2, #0
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	e9c7 2300 	strd	r2, r3, [r7]
#endif
	return (time_t) _ts;
 8000f06:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8000f0a:	4610      	mov	r0, r2
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <WAsys_logging_init>:
/* - - - - - - - static func - - end - - - - - - - */
/***************************************************/

/*************************************************/
/* - - - - - - - Functions - begin - - - - - - - */
void WAsys_logging_init(WAsys_LOGGING_CONF_T arg_logging_conf) {
 8000f18:	b490      	push	{r4, r7}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	/*copy the given arg into local conf var*/
	_logging = arg_logging_conf;
 8000f24:	4b10      	ldr	r3, [pc, #64]	; (8000f68 <WAsys_logging_init+0x50>)
 8000f26:	461c      	mov	r4, r3
 8000f28:	1d3b      	adds	r3, r7, #4
 8000f2a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000f2e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	/*setting default out cb when associated func is NULL*/
	if (_logging.callback_func == NULL) {
 8000f32:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <WAsys_logging_init+0x50>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d102      	bne.n	8000f40 <WAsys_logging_init+0x28>
		_logging.callback_func = _WAsys_default_stdout_logging_cb_func;
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <WAsys_logging_init+0x50>)
 8000f3c:	4a0b      	ldr	r2, [pc, #44]	; (8000f6c <WAsys_logging_init+0x54>)
 8000f3e:	601a      	str	r2, [r3, #0]
	}

	/*Using default timestamp func, when timestamp is needed using the default date/time func*/
	if (_logging.including_timestamp) {
 8000f40:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <WAsys_logging_init+0x50>)
 8000f42:	7a1b      	ldrb	r3, [r3, #8]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d006      	beq.n	8000f56 <WAsys_logging_init+0x3e>
		if (_logging.system_ts_func == NULL) {
 8000f48:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <WAsys_logging_init+0x50>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d102      	bne.n	8000f56 <WAsys_logging_init+0x3e>
			_logging.system_ts_func = _WAsys_default_system_timestamp_func;
 8000f50:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <WAsys_logging_init+0x50>)
 8000f52:	4a07      	ldr	r2, [pc, #28]	; (8000f70 <WAsys_logging_init+0x58>)
 8000f54:	605a      	str	r2, [r3, #4]
		}
	}

	/*marking the lib initialized*/
	_WAsys_logging_lib_initialized = 1;
 8000f56:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <WAsys_logging_init+0x5c>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	701a      	strb	r2, [r3, #0]
}
 8000f5c:	bf00      	nop
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bc90      	pop	{r4, r7}
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	20000128 	.word	0x20000128
 8000f6c:	08000ead 	.word	0x08000ead
 8000f70:	08000ef5 	.word	0x08000ef5
 8000f74:	20000090 	.word	0x20000090

08000f78 <hsl_to_rgb>:
#include "color_utils.h"

uint32_t hsl_to_rgb(uint8_t h, uint8_t s, uint8_t l) {
 8000f78:	b480      	push	{r7}
 8000f7a:	b087      	sub	sp, #28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]
 8000f82:	460b      	mov	r3, r1
 8000f84:	71bb      	strb	r3, [r7, #6]
 8000f86:	4613      	mov	r3, r2
 8000f88:	717b      	strb	r3, [r7, #5]
	if(l == 0) return 0;
 8000f8a:	797b      	ldrb	r3, [r7, #5]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d101      	bne.n	8000f94 <hsl_to_rgb+0x1c>
 8000f90:	2300      	movs	r3, #0
 8000f92:	e0b1      	b.n	80010f8 <hsl_to_rgb+0x180>

	volatile uint8_t  r, g, b, lo, c, x, m;
	volatile uint16_t h1, l1, H;
	l1 = l + 1;
 8000f94:	797b      	ldrb	r3, [r7, #5]
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	3301      	adds	r3, #1
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	81bb      	strh	r3, [r7, #12]
	if (l < 128)    c = ((l1 << 1) * s) >> 8;
 8000f9e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	db09      	blt.n	8000fba <hsl_to_rgb+0x42>
 8000fa6:	89bb      	ldrh	r3, [r7, #12]
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	79ba      	ldrb	r2, [r7, #6]
 8000fae:	fb02 f303 	mul.w	r3, r2, r3
 8000fb2:	121b      	asrs	r3, r3, #8
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	74fb      	strb	r3, [r7, #19]
 8000fb8:	e00a      	b.n	8000fd0 <hsl_to_rgb+0x58>
	else            c = (512 - (l1 << 1)) * s >> 8;
 8000fba:	89bb      	ldrh	r3, [r7, #12]
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8000fc4:	79ba      	ldrb	r2, [r7, #6]
 8000fc6:	fb02 f303 	mul.w	r3, r2, r3
 8000fca:	121b      	asrs	r3, r3, #8
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	74fb      	strb	r3, [r7, #19]

	H = h * 6;              // 0 to 1535 (actually 1530)
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	0052      	lsls	r2, r2, #1
 8000fd8:	4413      	add	r3, r2
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	817b      	strh	r3, [r7, #10]
	lo = H & 255;           // Low byte  = primary/secondary color mix
 8000fe0:	897b      	ldrh	r3, [r7, #10]
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	753b      	strb	r3, [r7, #20]
	h1 = lo + 1;
 8000fe8:	7d3b      	ldrb	r3, [r7, #20]
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	3301      	adds	r3, #1
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	81fb      	strh	r3, [r7, #14]

	if ((H & 256) == 0)   x = h1 * c >> 8;          // even sextant, like red to yellow
 8000ff4:	897b      	ldrh	r3, [r7, #10]
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d109      	bne.n	8001014 <hsl_to_rgb+0x9c>
 8001000:	89fb      	ldrh	r3, [r7, #14]
 8001002:	b29b      	uxth	r3, r3
 8001004:	7cfa      	ldrb	r2, [r7, #19]
 8001006:	b2d2      	uxtb	r2, r2
 8001008:	fb02 f303 	mul.w	r3, r2, r3
 800100c:	121b      	asrs	r3, r3, #8
 800100e:	b2db      	uxtb	r3, r3
 8001010:	74bb      	strb	r3, [r7, #18]
 8001012:	e00a      	b.n	800102a <hsl_to_rgb+0xb2>
	else                  x = (256 - h1) * c >> 8;  // odd sextant, like yellow to green
 8001014:	89fb      	ldrh	r3, [r7, #14]
 8001016:	b29b      	uxth	r3, r3
 8001018:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800101c:	7cfa      	ldrb	r2, [r7, #19]
 800101e:	b2d2      	uxtb	r2, r2
 8001020:	fb02 f303 	mul.w	r3, r2, r3
 8001024:	121b      	asrs	r3, r3, #8
 8001026:	b2db      	uxtb	r3, r3
 8001028:	74bb      	strb	r3, [r7, #18]

	m = l - (c >> 1);
 800102a:	7cfb      	ldrb	r3, [r7, #19]
 800102c:	b2db      	uxtb	r3, r3
 800102e:	085b      	lsrs	r3, r3, #1
 8001030:	b2db      	uxtb	r3, r3
 8001032:	797a      	ldrb	r2, [r7, #5]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	b2db      	uxtb	r3, r3
 8001038:	747b      	strb	r3, [r7, #17]
	switch(H >> 8) {       // High byte = sextant of colorwheel
 800103a:	897b      	ldrh	r3, [r7, #10]
 800103c:	b29b      	uxth	r3, r3
 800103e:	0a1b      	lsrs	r3, r3, #8
 8001040:	b29b      	uxth	r3, r3
 8001042:	2b04      	cmp	r3, #4
 8001044:	d839      	bhi.n	80010ba <hsl_to_rgb+0x142>
 8001046:	a201      	add	r2, pc, #4	; (adr r2, 800104c <hsl_to_rgb+0xd4>)
 8001048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800104c:	08001061 	.word	0x08001061
 8001050:	08001073 	.word	0x08001073
 8001054:	08001085 	.word	0x08001085
 8001058:	08001097 	.word	0x08001097
 800105c:	080010a9 	.word	0x080010a9
	 case 0 : r = c; g = x; b = 0; break; // R to Y
 8001060:	7cfb      	ldrb	r3, [r7, #19]
 8001062:	b2db      	uxtb	r3, r3
 8001064:	75fb      	strb	r3, [r7, #23]
 8001066:	7cbb      	ldrb	r3, [r7, #18]
 8001068:	b2db      	uxtb	r3, r3
 800106a:	75bb      	strb	r3, [r7, #22]
 800106c:	2300      	movs	r3, #0
 800106e:	757b      	strb	r3, [r7, #21]
 8001070:	e02c      	b.n	80010cc <hsl_to_rgb+0x154>
	 case 1 : r = x; g = c; b = 0; break; // Y to G
 8001072:	7cbb      	ldrb	r3, [r7, #18]
 8001074:	b2db      	uxtb	r3, r3
 8001076:	75fb      	strb	r3, [r7, #23]
 8001078:	7cfb      	ldrb	r3, [r7, #19]
 800107a:	b2db      	uxtb	r3, r3
 800107c:	75bb      	strb	r3, [r7, #22]
 800107e:	2300      	movs	r3, #0
 8001080:	757b      	strb	r3, [r7, #21]
 8001082:	e023      	b.n	80010cc <hsl_to_rgb+0x154>
	 case 2 : r = 0; g = c; b = x; break; // G to C
 8001084:	2300      	movs	r3, #0
 8001086:	75fb      	strb	r3, [r7, #23]
 8001088:	7cfb      	ldrb	r3, [r7, #19]
 800108a:	b2db      	uxtb	r3, r3
 800108c:	75bb      	strb	r3, [r7, #22]
 800108e:	7cbb      	ldrb	r3, [r7, #18]
 8001090:	b2db      	uxtb	r3, r3
 8001092:	757b      	strb	r3, [r7, #21]
 8001094:	e01a      	b.n	80010cc <hsl_to_rgb+0x154>
	 case 3 : r = 0; g = x; b = c; break; // C to B
 8001096:	2300      	movs	r3, #0
 8001098:	75fb      	strb	r3, [r7, #23]
 800109a:	7cbb      	ldrb	r3, [r7, #18]
 800109c:	b2db      	uxtb	r3, r3
 800109e:	75bb      	strb	r3, [r7, #22]
 80010a0:	7cfb      	ldrb	r3, [r7, #19]
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	757b      	strb	r3, [r7, #21]
 80010a6:	e011      	b.n	80010cc <hsl_to_rgb+0x154>
	 case 4 : r = x; g = 0; b = c; break; // B to M
 80010a8:	7cbb      	ldrb	r3, [r7, #18]
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	75fb      	strb	r3, [r7, #23]
 80010ae:	2300      	movs	r3, #0
 80010b0:	75bb      	strb	r3, [r7, #22]
 80010b2:	7cfb      	ldrb	r3, [r7, #19]
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	757b      	strb	r3, [r7, #21]
 80010b8:	e008      	b.n	80010cc <hsl_to_rgb+0x154>
	 default: r = c; g = 0; b = x; break; // M to R
 80010ba:	7cfb      	ldrb	r3, [r7, #19]
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	75fb      	strb	r3, [r7, #23]
 80010c0:	2300      	movs	r3, #0
 80010c2:	75bb      	strb	r3, [r7, #22]
 80010c4:	7cbb      	ldrb	r3, [r7, #18]
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	757b      	strb	r3, [r7, #21]
 80010ca:	bf00      	nop
	}

	return (((uint32_t)r + m) << 16) | (((uint32_t)g + m) << 8) | ((uint32_t)b + m);
 80010cc:	7dfb      	ldrb	r3, [r7, #23]
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	461a      	mov	r2, r3
 80010d2:	7c7b      	ldrb	r3, [r7, #17]
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	4413      	add	r3, r2
 80010d8:	041a      	lsls	r2, r3, #16
 80010da:	7dbb      	ldrb	r3, [r7, #22]
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	4619      	mov	r1, r3
 80010e0:	7c7b      	ldrb	r3, [r7, #17]
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	440b      	add	r3, r1
 80010e6:	021b      	lsls	r3, r3, #8
 80010e8:	431a      	orrs	r2, r3
 80010ea:	7d7b      	ldrb	r3, [r7, #21]
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	4619      	mov	r1, r3
 80010f0:	7c7b      	ldrb	r3, [r7, #17]
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	440b      	add	r3, r1
 80010f6:	4313      	orrs	r3, r2
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	371c      	adds	r7, #28
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <set_brightness>:

static inline uint8_t scale8(uint8_t x, uint8_t scale) {
  return ((uint16_t)x * scale) >> 8;
}

void set_brightness(int bright) {
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
	if (bright == brightness) {
 800110c:	4b07      	ldr	r3, [pc, #28]	; (800112c <set_brightness+0x28>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	429a      	cmp	r2, r3
 8001114:	d003      	beq.n	800111e <set_brightness+0x1a>
		return;
	}

	newBrightness = bright;
 8001116:	4a06      	ldr	r2, [pc, #24]	; (8001130 <set_brightness+0x2c>)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6013      	str	r3, [r2, #0]
 800111c:	e000      	b.n	8001120 <set_brightness+0x1c>
		return;
 800111e:	bf00      	nop
}
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	20000110 	.word	0x20000110
 8001130:	20000114 	.word	0x20000114

08001134 <get_brightness>:

int get_brightness() {
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
	return brightness;
 8001138:	4b03      	ldr	r3, [pc, #12]	; (8001148 <get_brightness+0x14>)
 800113a:	681b      	ldr	r3, [r3, #0]
}
 800113c:	4618      	mov	r0, r3
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	20000110 	.word	0x20000110
 800114c:	00000000 	.word	0x00000000

08001150 <led_set_RGB>:

void led_set_RGB(uint8_t index, uint8_t r, uint8_t g, uint8_t b) {
 8001150:	b5b0      	push	{r4, r5, r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	4604      	mov	r4, r0
 8001158:	4608      	mov	r0, r1
 800115a:	4611      	mov	r1, r2
 800115c:	461a      	mov	r2, r3
 800115e:	4623      	mov	r3, r4
 8001160:	71fb      	strb	r3, [r7, #7]
 8001162:	4603      	mov	r3, r0
 8001164:	71bb      	strb	r3, [r7, #6]
 8001166:	460b      	mov	r3, r1
 8001168:	717b      	strb	r3, [r7, #5]
 800116a:	4613      	mov	r3, r2
 800116c:	713b      	strb	r3, [r7, #4]
  float angle = 90-brightness;  // in degrees
 800116e:	4b4c      	ldr	r3, [pc, #304]	; (80012a0 <led_set_RGB+0x150>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8001176:	ee07 3a90 	vmov	s15, r3
 800117a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800117e:	edc7 7a03 	vstr	s15, [r7, #12]
  angle = angle*PI / 180;  // in rad
 8001182:	68f8      	ldr	r0, [r7, #12]
 8001184:	f7ff f98c 	bl	80004a0 <__aeabi_f2d>
 8001188:	a343      	add	r3, pc, #268	; (adr r3, 8001298 <led_set_RGB+0x148>)
 800118a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800118e:	f7ff f9df 	bl	8000550 <__aeabi_dmul>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	4610      	mov	r0, r2
 8001198:	4619      	mov	r1, r3
 800119a:	f04f 0200 	mov.w	r2, #0
 800119e:	4b41      	ldr	r3, [pc, #260]	; (80012a4 <led_set_RGB+0x154>)
 80011a0:	f7ff fb00 	bl	80007a4 <__aeabi_ddiv>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4610      	mov	r0, r2
 80011aa:	4619      	mov	r1, r3
 80011ac:	f7ff fcb2 	bl	8000b14 <__aeabi_d2f>
 80011b0:	4603      	mov	r3, r0
 80011b2:	60fb      	str	r3, [r7, #12]
  rgb_arr[3 * index]= (g)/(tan(angle)); // g;
 80011b4:	797b      	ldrb	r3, [r7, #5]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff f960 	bl	800047c <__aeabi_i2d>
 80011bc:	4604      	mov	r4, r0
 80011be:	460d      	mov	r5, r1
 80011c0:	68f8      	ldr	r0, [r7, #12]
 80011c2:	f7ff f96d 	bl	80004a0 <__aeabi_f2d>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	ec43 2b10 	vmov	d0, r2, r3
 80011ce:	f005 f9f7 	bl	80065c0 <tan>
 80011d2:	ec53 2b10 	vmov	r2, r3, d0
 80011d6:	4620      	mov	r0, r4
 80011d8:	4629      	mov	r1, r5
 80011da:	f7ff fae3 	bl	80007a4 <__aeabi_ddiv>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	4610      	mov	r0, r2
 80011e4:	4619      	mov	r1, r3
 80011e6:	79fa      	ldrb	r2, [r7, #7]
 80011e8:	4613      	mov	r3, r2
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	189c      	adds	r4, r3, r2
 80011ee:	f7ff fc71 	bl	8000ad4 <__aeabi_d2uiz>
 80011f2:	4603      	mov	r3, r0
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	4b2c      	ldr	r3, [pc, #176]	; (80012a8 <led_set_RGB+0x158>)
 80011f8:	551a      	strb	r2, [r3, r4]
  rgb_arr[3 * index + 1] = (r)/(tan(angle));
 80011fa:	79bb      	ldrb	r3, [r7, #6]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff f93d 	bl	800047c <__aeabi_i2d>
 8001202:	4604      	mov	r4, r0
 8001204:	460d      	mov	r5, r1
 8001206:	68f8      	ldr	r0, [r7, #12]
 8001208:	f7ff f94a 	bl	80004a0 <__aeabi_f2d>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	ec43 2b10 	vmov	d0, r2, r3
 8001214:	f005 f9d4 	bl	80065c0 <tan>
 8001218:	ec53 2b10 	vmov	r2, r3, d0
 800121c:	4620      	mov	r0, r4
 800121e:	4629      	mov	r1, r5
 8001220:	f7ff fac0 	bl	80007a4 <__aeabi_ddiv>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4610      	mov	r0, r2
 800122a:	4619      	mov	r1, r3
 800122c:	79fa      	ldrb	r2, [r7, #7]
 800122e:	4613      	mov	r3, r2
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	4413      	add	r3, r2
 8001234:	1c5c      	adds	r4, r3, #1
 8001236:	f7ff fc4d 	bl	8000ad4 <__aeabi_d2uiz>
 800123a:	4603      	mov	r3, r0
 800123c:	b2da      	uxtb	r2, r3
 800123e:	4b1a      	ldr	r3, [pc, #104]	; (80012a8 <led_set_RGB+0x158>)
 8001240:	551a      	strb	r2, [r3, r4]
  rgb_arr[3 * index + 2] = (b)/(tan(angle));
 8001242:	793b      	ldrb	r3, [r7, #4]
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff f919 	bl	800047c <__aeabi_i2d>
 800124a:	4604      	mov	r4, r0
 800124c:	460d      	mov	r5, r1
 800124e:	68f8      	ldr	r0, [r7, #12]
 8001250:	f7ff f926 	bl	80004a0 <__aeabi_f2d>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	ec43 2b10 	vmov	d0, r2, r3
 800125c:	f005 f9b0 	bl	80065c0 <tan>
 8001260:	ec53 2b10 	vmov	r2, r3, d0
 8001264:	4620      	mov	r0, r4
 8001266:	4629      	mov	r1, r5
 8001268:	f7ff fa9c 	bl	80007a4 <__aeabi_ddiv>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4610      	mov	r0, r2
 8001272:	4619      	mov	r1, r3
 8001274:	79fa      	ldrb	r2, [r7, #7]
 8001276:	4613      	mov	r3, r2
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	4413      	add	r3, r2
 800127c:	1c9c      	adds	r4, r3, #2
 800127e:	f7ff fc29 	bl	8000ad4 <__aeabi_d2uiz>
 8001282:	4603      	mov	r3, r0
 8001284:	b2da      	uxtb	r2, r3
 8001286:	4b08      	ldr	r3, [pc, #32]	; (80012a8 <led_set_RGB+0x158>)
 8001288:	551a      	strb	r2, [r3, r4]

}
 800128a:	bf00      	nop
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bdb0      	pop	{r4, r5, r7, pc}
 8001292:	bf00      	nop
 8001294:	f3af 8000 	nop.w
 8001298:	53c8d4f1 	.word	0x53c8d4f1
 800129c:	400921fb 	.word	0x400921fb
 80012a0:	20000110 	.word	0x20000110
 80012a4:	40668000 	.word	0x40668000
 80012a8:	20000094 	.word	0x20000094

080012ac <led_render>:

void led_render() {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
  //for(uint8_t i = 0; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
  if (brightness != newBrightness) {
 80012b2:	4b55      	ldr	r3, [pc, #340]	; (8001408 <led_render+0x15c>)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	4b55      	ldr	r3, [pc, #340]	; (800140c <led_render+0x160>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d003      	beq.n	80012c6 <led_render+0x1a>
	  brightness = newBrightness;
 80012be:	4b53      	ldr	r3, [pc, #332]	; (800140c <led_render+0x160>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a51      	ldr	r2, [pc, #324]	; (8001408 <led_render+0x15c>)
 80012c4:	6013      	str	r3, [r2, #0]
  }
  if(wr_buf_p != 0 || hdma_tim1_ch1.State != HAL_DMA_STATE_READY) {
 80012c6:	4b52      	ldr	r3, [pc, #328]	; (8001410 <led_render+0x164>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d105      	bne.n	80012da <led_render+0x2e>
 80012ce:	4b51      	ldr	r3, [pc, #324]	; (8001414 <led_render+0x168>)
 80012d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d015      	beq.n	8001306 <led_render+0x5a>
	// Ongoing transfer, cancel!
	for(uint8_t i = 0; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	71fb      	strb	r3, [r7, #7]
 80012de:	e007      	b.n	80012f0 <led_render+0x44>
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	4a4d      	ldr	r2, [pc, #308]	; (8001418 <led_render+0x16c>)
 80012e4:	2100      	movs	r1, #0
 80012e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	3301      	adds	r3, #1
 80012ee:	71fb      	strb	r3, [r7, #7]
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	2b2f      	cmp	r3, #47	; 0x2f
 80012f4:	d9f4      	bls.n	80012e0 <led_render+0x34>
	wr_buf_p = 0;
 80012f6:	4b46      	ldr	r3, [pc, #280]	; (8001410 <led_render+0x164>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 80012fc:	2100      	movs	r1, #0
 80012fe:	4847      	ldr	r0, [pc, #284]	; (800141c <led_render+0x170>)
 8001300:	f003 f98a 	bl	8004618 <HAL_TIM_PWM_Stop_DMA>
	return;
 8001304:	e07c      	b.n	8001400 <led_render+0x154>
  }

  for(uint_fast8_t i = 0; i < 8; ++i) {
 8001306:	2300      	movs	r3, #0
 8001308:	603b      	str	r3, [r7, #0]
 800130a:	e06d      	b.n	80013e8 <led_render+0x13c>
    wr_buf[i     ] = PWM_LO << (((rgb_arr[0] << i) & 0x80) > 0);
 800130c:	4b44      	ldr	r3, [pc, #272]	; (8001420 <led_render+0x174>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	461a      	mov	r2, r3
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800131c:	2b00      	cmp	r3, #0
 800131e:	dd01      	ble.n	8001324 <led_render+0x78>
 8001320:	2152      	movs	r1, #82	; 0x52
 8001322:	e000      	b.n	8001326 <led_render+0x7a>
 8001324:	2129      	movs	r1, #41	; 0x29
 8001326:	4a3c      	ldr	r2, [pc, #240]	; (8001418 <led_render+0x16c>)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i +  8] = PWM_LO << (((rgb_arr[1] << i) & 0x80) > 0);
 800132e:	4b3c      	ldr	r3, [pc, #240]	; (8001420 <led_render+0x174>)
 8001330:	785b      	ldrb	r3, [r3, #1]
 8001332:	461a      	mov	r2, r3
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800133e:	2b00      	cmp	r3, #0
 8001340:	dd01      	ble.n	8001346 <led_render+0x9a>
 8001342:	2152      	movs	r1, #82	; 0x52
 8001344:	e000      	b.n	8001348 <led_render+0x9c>
 8001346:	2129      	movs	r1, #41	; 0x29
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	3308      	adds	r3, #8
 800134c:	4a32      	ldr	r2, [pc, #200]	; (8001418 <led_render+0x16c>)
 800134e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 16] = PWM_LO << (((rgb_arr[2] << i) & 0x80) > 0);
 8001352:	4b33      	ldr	r3, [pc, #204]	; (8001420 <led_render+0x174>)
 8001354:	789b      	ldrb	r3, [r3, #2]
 8001356:	461a      	mov	r2, r3
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001362:	2b00      	cmp	r3, #0
 8001364:	dd01      	ble.n	800136a <led_render+0xbe>
 8001366:	2152      	movs	r1, #82	; 0x52
 8001368:	e000      	b.n	800136c <led_render+0xc0>
 800136a:	2129      	movs	r1, #41	; 0x29
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	3310      	adds	r3, #16
 8001370:	4a29      	ldr	r2, [pc, #164]	; (8001418 <led_render+0x16c>)
 8001372:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 24] = PWM_LO << (((rgb_arr[3] << i) & 0x80) > 0);
 8001376:	4b2a      	ldr	r3, [pc, #168]	; (8001420 <led_render+0x174>)
 8001378:	78db      	ldrb	r3, [r3, #3]
 800137a:	461a      	mov	r2, r3
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001386:	2b00      	cmp	r3, #0
 8001388:	dd01      	ble.n	800138e <led_render+0xe2>
 800138a:	2152      	movs	r1, #82	; 0x52
 800138c:	e000      	b.n	8001390 <led_render+0xe4>
 800138e:	2129      	movs	r1, #41	; 0x29
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	3318      	adds	r3, #24
 8001394:	4a20      	ldr	r2, [pc, #128]	; (8001418 <led_render+0x16c>)
 8001396:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 32] = PWM_LO << (((rgb_arr[4] << i) & 0x80) > 0);
 800139a:	4b21      	ldr	r3, [pc, #132]	; (8001420 <led_render+0x174>)
 800139c:	791b      	ldrb	r3, [r3, #4]
 800139e:	461a      	mov	r2, r3
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	dd01      	ble.n	80013b2 <led_render+0x106>
 80013ae:	2152      	movs	r1, #82	; 0x52
 80013b0:	e000      	b.n	80013b4 <led_render+0x108>
 80013b2:	2129      	movs	r1, #41	; 0x29
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	3320      	adds	r3, #32
 80013b8:	4a17      	ldr	r2, [pc, #92]	; (8001418 <led_render+0x16c>)
 80013ba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 40] = PWM_LO << (((rgb_arr[5] << i) & 0x80) > 0);
 80013be:	4b18      	ldr	r3, [pc, #96]	; (8001420 <led_render+0x174>)
 80013c0:	795b      	ldrb	r3, [r3, #5]
 80013c2:	461a      	mov	r2, r3
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	dd01      	ble.n	80013d6 <led_render+0x12a>
 80013d2:	2152      	movs	r1, #82	; 0x52
 80013d4:	e000      	b.n	80013d8 <led_render+0x12c>
 80013d6:	2129      	movs	r1, #41	; 0x29
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	3328      	adds	r3, #40	; 0x28
 80013dc:	4a0e      	ldr	r2, [pc, #56]	; (8001418 <led_render+0x16c>)
 80013de:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(uint_fast8_t i = 0; i < 8; ++i) {
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	3301      	adds	r3, #1
 80013e6:	603b      	str	r3, [r7, #0]
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	2b07      	cmp	r3, #7
 80013ec:	d98e      	bls.n	800130c <led_render+0x60>
  }

  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)wr_buf, WR_BUF_LEN);
 80013ee:	2330      	movs	r3, #48	; 0x30
 80013f0:	4a09      	ldr	r2, [pc, #36]	; (8001418 <led_render+0x16c>)
 80013f2:	2100      	movs	r1, #0
 80013f4:	4809      	ldr	r0, [pc, #36]	; (800141c <led_render+0x170>)
 80013f6:	f002 ff67 	bl	80042c8 <HAL_TIM_PWM_Start_DMA>
  wr_buf_p = 2;
 80013fa:	4b05      	ldr	r3, [pc, #20]	; (8001410 <led_render+0x164>)
 80013fc:	2202      	movs	r2, #2
 80013fe:	601a      	str	r2, [r3, #0]
}
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000110 	.word	0x20000110
 800140c:	20000114 	.word	0x20000114
 8001410:	2000010c 	.word	0x2000010c
 8001414:	20000174 	.word	0x20000174
 8001418:	200000ac 	.word	0x200000ac
 800141c:	20000264 	.word	0x20000264
 8001420:	20000094 	.word	0x20000094

08001424 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim) {
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 800142c:	4b3a      	ldr	r3, [pc, #232]	; (8001518 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2b07      	cmp	r3, #7
 8001432:	d854      	bhi.n	80014de <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xba>
    // We're in. Fill the even buffer
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8001434:	2300      	movs	r3, #0
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	e048      	b.n	80014cc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xa8>
      wr_buf[i     ] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 800143a:	4b37      	ldr	r3, [pc, #220]	; (8001518 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	4613      	mov	r3, r2
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	4413      	add	r3, r2
 8001444:	4a35      	ldr	r2, [pc, #212]	; (800151c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 8001446:	5cd3      	ldrb	r3, [r2, r3]
 8001448:	461a      	mov	r2, r3
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001454:	2b00      	cmp	r3, #0
 8001456:	dd01      	ble.n	800145c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x38>
 8001458:	2152      	movs	r1, #82	; 0x52
 800145a:	e000      	b.n	800145e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x3a>
 800145c:	2129      	movs	r1, #41	; 0x29
 800145e:	4a30      	ldr	r2, [pc, #192]	; (8001520 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      wr_buf[i +  8] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 8001466:	4b2c      	ldr	r3, [pc, #176]	; (8001518 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	4613      	mov	r3, r2
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	4413      	add	r3, r2
 8001470:	3301      	adds	r3, #1
 8001472:	4a2a      	ldr	r2, [pc, #168]	; (800151c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 8001474:	5cd3      	ldrb	r3, [r2, r3]
 8001476:	461a      	mov	r2, r3
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001482:	2b00      	cmp	r3, #0
 8001484:	dd01      	ble.n	800148a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x66>
 8001486:	2152      	movs	r1, #82	; 0x52
 8001488:	e000      	b.n	800148c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x68>
 800148a:	2129      	movs	r1, #41	; 0x29
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	3308      	adds	r3, #8
 8001490:	4a23      	ldr	r2, [pc, #140]	; (8001520 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8001492:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      wr_buf[i + 16] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 8001496:	4b20      	ldr	r3, [pc, #128]	; (8001518 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	4613      	mov	r3, r2
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	4413      	add	r3, r2
 80014a0:	3302      	adds	r3, #2
 80014a2:	4a1e      	ldr	r2, [pc, #120]	; (800151c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 80014a4:	5cd3      	ldrb	r3, [r2, r3]
 80014a6:	461a      	mov	r2, r3
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	dd01      	ble.n	80014ba <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x96>
 80014b6:	2152      	movs	r1, #82	; 0x52
 80014b8:	e000      	b.n	80014bc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x98>
 80014ba:	2129      	movs	r1, #41	; 0x29
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	3310      	adds	r3, #16
 80014c0:	4a17      	ldr	r2, [pc, #92]	; (8001520 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 80014c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	3301      	adds	r3, #1
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2b07      	cmp	r3, #7
 80014d0:	d9b3      	bls.n	800143a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x16>
    }
    wr_buf_p++;
 80014d2:	4b11      	ldr	r3, [pc, #68]	; (8001518 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	3301      	adds	r3, #1
 80014d8:	4a0f      	ldr	r2, [pc, #60]	; (8001518 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 80014da:	6013      	str	r3, [r2, #0]
  	//                               WS2812B: 48 * 1.25 us = 60 us == good enough reset
    // First half reset zero fill
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
    wr_buf_p++;
  }
}
 80014dc:	e016      	b.n	800150c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe8>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 80014de:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2b09      	cmp	r3, #9
 80014e4:	d812      	bhi.n	800150c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe8>
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	72fb      	strb	r3, [r7, #11]
 80014ea:	e007      	b.n	80014fc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xd8>
 80014ec:	7afb      	ldrb	r3, [r7, #11]
 80014ee:	4a0c      	ldr	r2, [pc, #48]	; (8001520 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 80014f0:	2100      	movs	r1, #0
 80014f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80014f6:	7afb      	ldrb	r3, [r7, #11]
 80014f8:	3301      	adds	r3, #1
 80014fa:	72fb      	strb	r3, [r7, #11]
 80014fc:	7afb      	ldrb	r3, [r7, #11]
 80014fe:	2b17      	cmp	r3, #23
 8001500:	d9f4      	bls.n	80014ec <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xc8>
    wr_buf_p++;
 8001502:	4b05      	ldr	r3, [pc, #20]	; (8001518 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	3301      	adds	r3, #1
 8001508:	4a03      	ldr	r2, [pc, #12]	; (8001518 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 800150a:	6013      	str	r3, [r2, #0]
}
 800150c:	bf00      	nop
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	2000010c 	.word	0x2000010c
 800151c:	20000094 	.word	0x20000094
 8001520:	200000ac 	.word	0x200000ac

08001524 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
	  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
	  if(wr_buf_p < NUM_PIXELS) {
 800152c:	4b3e      	ldr	r3, [pc, #248]	; (8001628 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2b07      	cmp	r3, #7
 8001532:	d855      	bhi.n	80015e0 <HAL_TIM_PWM_PulseFinishedCallback+0xbc>
	    // We're in. Fill the odd buffer
	    for(uint_fast8_t i = 0; i < 8; ++i) {
 8001534:	2300      	movs	r3, #0
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	e049      	b.n	80015ce <HAL_TIM_PWM_PulseFinishedCallback+0xaa>
	      wr_buf[i + 24] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 800153a:	4b3b      	ldr	r3, [pc, #236]	; (8001628 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	4613      	mov	r3, r2
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	4413      	add	r3, r2
 8001544:	4a39      	ldr	r2, [pc, #228]	; (800162c <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 8001546:	5cd3      	ldrb	r3, [r2, r3]
 8001548:	461a      	mov	r2, r3
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001554:	2b00      	cmp	r3, #0
 8001556:	dd01      	ble.n	800155c <HAL_TIM_PWM_PulseFinishedCallback+0x38>
 8001558:	2152      	movs	r1, #82	; 0x52
 800155a:	e000      	b.n	800155e <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
 800155c:	2129      	movs	r1, #41	; 0x29
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	3318      	adds	r3, #24
 8001562:	4a33      	ldr	r2, [pc, #204]	; (8001630 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8001564:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	      wr_buf[i + 32] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 8001568:	4b2f      	ldr	r3, [pc, #188]	; (8001628 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	4613      	mov	r3, r2
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	4413      	add	r3, r2
 8001572:	3301      	adds	r3, #1
 8001574:	4a2d      	ldr	r2, [pc, #180]	; (800162c <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 8001576:	5cd3      	ldrb	r3, [r2, r3]
 8001578:	461a      	mov	r2, r3
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001584:	2b00      	cmp	r3, #0
 8001586:	dd01      	ble.n	800158c <HAL_TIM_PWM_PulseFinishedCallback+0x68>
 8001588:	2152      	movs	r1, #82	; 0x52
 800158a:	e000      	b.n	800158e <HAL_TIM_PWM_PulseFinishedCallback+0x6a>
 800158c:	2129      	movs	r1, #41	; 0x29
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	3320      	adds	r3, #32
 8001592:	4a27      	ldr	r2, [pc, #156]	; (8001630 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8001594:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	      wr_buf[i + 40] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 8001598:	4b23      	ldr	r3, [pc, #140]	; (8001628 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	4613      	mov	r3, r2
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	4413      	add	r3, r2
 80015a2:	3302      	adds	r3, #2
 80015a4:	4a21      	ldr	r2, [pc, #132]	; (800162c <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 80015a6:	5cd3      	ldrb	r3, [r2, r3]
 80015a8:	461a      	mov	r2, r3
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	dd01      	ble.n	80015bc <HAL_TIM_PWM_PulseFinishedCallback+0x98>
 80015b8:	2152      	movs	r1, #82	; 0x52
 80015ba:	e000      	b.n	80015be <HAL_TIM_PWM_PulseFinishedCallback+0x9a>
 80015bc:	2129      	movs	r1, #41	; 0x29
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	3328      	adds	r3, #40	; 0x28
 80015c2:	4a1b      	ldr	r2, [pc, #108]	; (8001630 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 80015c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	    for(uint_fast8_t i = 0; i < 8; ++i) {
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	3301      	adds	r3, #1
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	2b07      	cmp	r3, #7
 80015d2:	d9b2      	bls.n	800153a <HAL_TIM_PWM_PulseFinishedCallback+0x16>
	    }
	    wr_buf_p++;
 80015d4:	4b14      	ldr	r3, [pc, #80]	; (8001628 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	3301      	adds	r3, #1
 80015da:	4a13      	ldr	r2, [pc, #76]	; (8001628 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80015dc:	6013      	str	r3, [r2, #0]
	  } else {
	    // We're done. Lean back and until next time!
	    wr_buf_p = 0;
	    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
	  }
}
 80015de:	e01e      	b.n	800161e <HAL_TIM_PWM_PulseFinishedCallback+0xfa>
	  } else if (wr_buf_p < NUM_PIXELS + 2) {
 80015e0:	4b11      	ldr	r3, [pc, #68]	; (8001628 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2b09      	cmp	r3, #9
 80015e6:	d813      	bhi.n	8001610 <HAL_TIM_PWM_PulseFinishedCallback+0xec>
	    for(uint8_t i = WR_BUF_LEN / 2; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 80015e8:	2318      	movs	r3, #24
 80015ea:	72fb      	strb	r3, [r7, #11]
 80015ec:	e007      	b.n	80015fe <HAL_TIM_PWM_PulseFinishedCallback+0xda>
 80015ee:	7afb      	ldrb	r3, [r7, #11]
 80015f0:	4a0f      	ldr	r2, [pc, #60]	; (8001630 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 80015f2:	2100      	movs	r1, #0
 80015f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80015f8:	7afb      	ldrb	r3, [r7, #11]
 80015fa:	3301      	adds	r3, #1
 80015fc:	72fb      	strb	r3, [r7, #11]
 80015fe:	7afb      	ldrb	r3, [r7, #11]
 8001600:	2b2f      	cmp	r3, #47	; 0x2f
 8001602:	d9f4      	bls.n	80015ee <HAL_TIM_PWM_PulseFinishedCallback+0xca>
	    ++wr_buf_p;
 8001604:	4b08      	ldr	r3, [pc, #32]	; (8001628 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	3301      	adds	r3, #1
 800160a:	4a07      	ldr	r2, [pc, #28]	; (8001628 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 800160c:	6013      	str	r3, [r2, #0]
}
 800160e:	e006      	b.n	800161e <HAL_TIM_PWM_PulseFinishedCallback+0xfa>
	    wr_buf_p = 0;
 8001610:	4b05      	ldr	r3, [pc, #20]	; (8001628 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
	    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8001616:	2100      	movs	r1, #0
 8001618:	4806      	ldr	r0, [pc, #24]	; (8001634 <HAL_TIM_PWM_PulseFinishedCallback+0x110>)
 800161a:	f002 fffd 	bl	8004618 <HAL_TIM_PWM_Stop_DMA>
}
 800161e:	bf00      	nop
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	2000010c 	.word	0x2000010c
 800162c:	20000094 	.word	0x20000094
 8001630:	200000ac 	.word	0x200000ac
 8001634:	20000264 	.word	0x20000264

08001638 <serial_log>:
static void MX_ADC1_Init(void);
/* USER CODE BEGIN PFP */

#define _WAsys_DEF_UART_TIMEOUT_MS 512
/*function must follow WAsys_LOGGING_NATIVE_IO_CALLBACK_FUNC_T type*/
static void serial_log(char *arg_buff, size_t arg_len){
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
 /*Sending the given log value to UART3 interface*/
 HAL_UART_Transmit(&huart2,(uint8_t*)arg_buff,arg_len,_WAsys_DEF_UART_TIMEOUT_MS);
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	b29a      	uxth	r2, r3
 8001646:	f44f 7300 	mov.w	r3, #512	; 0x200
 800164a:	6879      	ldr	r1, [r7, #4]
 800164c:	4803      	ldr	r0, [pc, #12]	; (800165c <serial_log+0x24>)
 800164e:	f004 f81c 	bl	800568a <HAL_UART_Transmit>
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	200002ac 	.word	0x200002ac

08001660 <resyncBrightness>:

void resyncBrightness() {
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af02      	add	r7, sp, #8
  if (needsResync == 0) {
 8001666:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <resyncBrightness+0x50>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d01c      	beq.n	80016a8 <resyncBrightness+0x48>
	  return;
  }

  HAL_ADC_Start(&hadc1);
 800166e:	4811      	ldr	r0, [pc, #68]	; (80016b4 <resyncBrightness+0x54>)
 8001670:	f000 fea8 	bl	80023c4 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 300);
 8001674:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001678:	480e      	ldr	r0, [pc, #56]	; (80016b4 <resyncBrightness+0x54>)
 800167a:	f000 ff57 	bl	800252c <HAL_ADC_PollForConversion>
  uint32_t raw =  HAL_ADC_GetValue(&hadc1);
 800167e:	480d      	ldr	r0, [pc, #52]	; (80016b4 <resyncBrightness+0x54>)
 8001680:	f000 ffdf 	bl	8002642 <HAL_ADC_GetValue>
 8001684:	6078      	str	r0, [r7, #4]
  int outB = MAP(raw, 4095, 1, 5, 25);
 8001686:	2319      	movs	r3, #25
 8001688:	9300      	str	r3, [sp, #0]
 800168a:	2305      	movs	r3, #5
 800168c:	2201      	movs	r2, #1
 800168e:	f640 71ff 	movw	r1, #4095	; 0xfff
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f000 fc42 	bl	8001f1c <MAP>
 8001698:	6038      	str	r0, [r7, #0]
  set_brightness(outB);
 800169a:	6838      	ldr	r0, [r7, #0]
 800169c:	f7ff fd32 	bl	8001104 <set_brightness>

  needsResync = 0;
 80016a0:	4b03      	ldr	r3, [pc, #12]	; (80016b0 <resyncBrightness+0x50>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	e000      	b.n	80016aa <resyncBrightness+0x4a>
	  return;
 80016a8:	bf00      	nop
}
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20000000 	.word	0x20000000
 80016b4:	2000021c 	.word	0x2000021c

080016b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016be:	f000 fda7 	bl	8002210 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016c2:	f000 f827 	bl	8001714 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016c6:	f000 fa17 	bl	8001af8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80016ca:	f000 f9cb 	bl	8001a64 <MX_USART2_UART_Init>
  MX_DMA_Init();
 80016ce:	f000 f9f3 	bl	8001ab8 <MX_DMA_Init>
  MX_TIM1_Init();
 80016d2:	f000 f8d9 	bl	8001888 <MX_TIM1_Init>
  MX_TIM3_Init();
 80016d6:	f000 f977 	bl	80019c8 <MX_TIM3_Init>
  MX_ADC1_Init();
 80016da:	f000 f883 	bl	80017e4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  WAsys_LOGGING_CONF_T _WAsys_log_conf_ins;
  _WAsys_log_conf_ins.callback_func=serial_log;
 80016de:	4b0b      	ldr	r3, [pc, #44]	; (800170c <main+0x54>)
 80016e0:	607b      	str	r3, [r7, #4]
  _WAsys_log_conf_ins.including_timestamp = 0;
 80016e2:	2300      	movs	r3, #0
 80016e4:	733b      	strb	r3, [r7, #12]
  WAsys_logging_init(_WAsys_log_conf_ins);
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80016ec:	f7ff fc14 	bl	8000f18 <WAsys_logging_init>

  HAL_TIM_Base_Start_IT(&htim3);
 80016f0:	4807      	ldr	r0, [pc, #28]	; (8001710 <main+0x58>)
 80016f2:	f002 fcff 	bl	80040f4 <HAL_TIM_Base_Start_IT>

  set_brightness(5);
 80016f6:	2005      	movs	r0, #5
 80016f8:	f7ff fd04 	bl	8001104 <set_brightness>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  rainbow_effect_fade();
 80016fc:	f000 fd2a 	bl	8002154 <rainbow_effect_fade>
	  HAL_Delay(10);
 8001700:	200a      	movs	r0, #10
 8001702:	f000 fdf7 	bl	80022f4 <HAL_Delay>
	  resyncBrightness();
 8001706:	f7ff ffab 	bl	8001660 <resyncBrightness>
	  rainbow_effect_fade();
 800170a:	e7f7      	b.n	80016fc <main+0x44>
 800170c:	08001639 	.word	0x08001639
 8001710:	200001d4 	.word	0x200001d4

08001714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b094      	sub	sp, #80	; 0x50
 8001718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800171a:	f107 0320 	add.w	r3, r7, #32
 800171e:	2230      	movs	r2, #48	; 0x30
 8001720:	2100      	movs	r1, #0
 8001722:	4618      	mov	r0, r3
 8001724:	f004 fc4d 	bl	8005fc2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001728:	f107 030c 	add.w	r3, r7, #12
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
 8001736:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001738:	2300      	movs	r3, #0
 800173a:	60bb      	str	r3, [r7, #8]
 800173c:	4b27      	ldr	r3, [pc, #156]	; (80017dc <SystemClock_Config+0xc8>)
 800173e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001740:	4a26      	ldr	r2, [pc, #152]	; (80017dc <SystemClock_Config+0xc8>)
 8001742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001746:	6413      	str	r3, [r2, #64]	; 0x40
 8001748:	4b24      	ldr	r3, [pc, #144]	; (80017dc <SystemClock_Config+0xc8>)
 800174a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001750:	60bb      	str	r3, [r7, #8]
 8001752:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001754:	2300      	movs	r3, #0
 8001756:	607b      	str	r3, [r7, #4]
 8001758:	4b21      	ldr	r3, [pc, #132]	; (80017e0 <SystemClock_Config+0xcc>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a20      	ldr	r2, [pc, #128]	; (80017e0 <SystemClock_Config+0xcc>)
 800175e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001762:	6013      	str	r3, [r2, #0]
 8001764:	4b1e      	ldr	r3, [pc, #120]	; (80017e0 <SystemClock_Config+0xcc>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800176c:	607b      	str	r3, [r7, #4]
 800176e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001770:	2301      	movs	r3, #1
 8001772:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001774:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001778:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800177a:	2302      	movs	r3, #2
 800177c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800177e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001782:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001784:	2304      	movs	r3, #4
 8001786:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001788:	2364      	movs	r3, #100	; 0x64
 800178a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800178c:	2302      	movs	r3, #2
 800178e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001790:	2304      	movs	r3, #4
 8001792:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001794:	f107 0320 	add.w	r3, r7, #32
 8001798:	4618      	mov	r0, r3
 800179a:	f001 ffe7 	bl	800376c <HAL_RCC_OscConfig>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80017a4:	f000 fa52 	bl	8001c4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017a8:	230f      	movs	r3, #15
 80017aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017ac:	2302      	movs	r3, #2
 80017ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017b0:	2300      	movs	r3, #0
 80017b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80017be:	f107 030c 	add.w	r3, r7, #12
 80017c2:	2103      	movs	r1, #3
 80017c4:	4618      	mov	r0, r3
 80017c6:	f002 fa49 	bl	8003c5c <HAL_RCC_ClockConfig>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80017d0:	f000 fa3c 	bl	8001c4c <Error_Handler>
  }
}
 80017d4:	bf00      	nop
 80017d6:	3750      	adds	r7, #80	; 0x50
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40023800 	.word	0x40023800
 80017e0:	40007000 	.word	0x40007000

080017e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017ea:	463b      	mov	r3, r7
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80017f6:	4b21      	ldr	r3, [pc, #132]	; (800187c <MX_ADC1_Init+0x98>)
 80017f8:	4a21      	ldr	r2, [pc, #132]	; (8001880 <MX_ADC1_Init+0x9c>)
 80017fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80017fc:	4b1f      	ldr	r3, [pc, #124]	; (800187c <MX_ADC1_Init+0x98>)
 80017fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001802:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001804:	4b1d      	ldr	r3, [pc, #116]	; (800187c <MX_ADC1_Init+0x98>)
 8001806:	2200      	movs	r2, #0
 8001808:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800180a:	4b1c      	ldr	r3, [pc, #112]	; (800187c <MX_ADC1_Init+0x98>)
 800180c:	2200      	movs	r2, #0
 800180e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001810:	4b1a      	ldr	r3, [pc, #104]	; (800187c <MX_ADC1_Init+0x98>)
 8001812:	2200      	movs	r2, #0
 8001814:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001816:	4b19      	ldr	r3, [pc, #100]	; (800187c <MX_ADC1_Init+0x98>)
 8001818:	2200      	movs	r2, #0
 800181a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800181e:	4b17      	ldr	r3, [pc, #92]	; (800187c <MX_ADC1_Init+0x98>)
 8001820:	2200      	movs	r2, #0
 8001822:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001824:	4b15      	ldr	r3, [pc, #84]	; (800187c <MX_ADC1_Init+0x98>)
 8001826:	4a17      	ldr	r2, [pc, #92]	; (8001884 <MX_ADC1_Init+0xa0>)
 8001828:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800182a:	4b14      	ldr	r3, [pc, #80]	; (800187c <MX_ADC1_Init+0x98>)
 800182c:	2200      	movs	r2, #0
 800182e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001830:	4b12      	ldr	r3, [pc, #72]	; (800187c <MX_ADC1_Init+0x98>)
 8001832:	2201      	movs	r2, #1
 8001834:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001836:	4b11      	ldr	r3, [pc, #68]	; (800187c <MX_ADC1_Init+0x98>)
 8001838:	2200      	movs	r2, #0
 800183a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800183e:	4b0f      	ldr	r3, [pc, #60]	; (800187c <MX_ADC1_Init+0x98>)
 8001840:	2201      	movs	r2, #1
 8001842:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001844:	480d      	ldr	r0, [pc, #52]	; (800187c <MX_ADC1_Init+0x98>)
 8001846:	f000 fd79 	bl	800233c <HAL_ADC_Init>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001850:	f000 f9fc 	bl	8001c4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001854:	2300      	movs	r3, #0
 8001856:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001858:	2301      	movs	r3, #1
 800185a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800185c:	2300      	movs	r3, #0
 800185e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001860:	463b      	mov	r3, r7
 8001862:	4619      	mov	r1, r3
 8001864:	4805      	ldr	r0, [pc, #20]	; (800187c <MX_ADC1_Init+0x98>)
 8001866:	f000 fef9 	bl	800265c <HAL_ADC_ConfigChannel>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001870:	f000 f9ec 	bl	8001c4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001874:	bf00      	nop
 8001876:	3710      	adds	r7, #16
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	2000021c 	.word	0x2000021c
 8001880:	40012000 	.word	0x40012000
 8001884:	0f000001 	.word	0x0f000001

08001888 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b096      	sub	sp, #88	; 0x58
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800188e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	605a      	str	r2, [r3, #4]
 8001898:	609a      	str	r2, [r3, #8]
 800189a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800189c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	605a      	str	r2, [r3, #4]
 80018b0:	609a      	str	r2, [r3, #8]
 80018b2:	60da      	str	r2, [r3, #12]
 80018b4:	611a      	str	r2, [r3, #16]
 80018b6:	615a      	str	r2, [r3, #20]
 80018b8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018ba:	1d3b      	adds	r3, r7, #4
 80018bc:	2220      	movs	r2, #32
 80018be:	2100      	movs	r1, #0
 80018c0:	4618      	mov	r0, r3
 80018c2:	f004 fb7e 	bl	8005fc2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018c6:	4b3e      	ldr	r3, [pc, #248]	; (80019c0 <MX_TIM1_Init+0x138>)
 80018c8:	4a3e      	ldr	r2, [pc, #248]	; (80019c4 <MX_TIM1_Init+0x13c>)
 80018ca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80018cc:	4b3c      	ldr	r3, [pc, #240]	; (80019c0 <MX_TIM1_Init+0x138>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d2:	4b3b      	ldr	r3, [pc, #236]	; (80019c0 <MX_TIM1_Init+0x138>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 80018d8:	4b39      	ldr	r3, [pc, #228]	; (80019c0 <MX_TIM1_Init+0x138>)
 80018da:	2259      	movs	r2, #89	; 0x59
 80018dc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018de:	4b38      	ldr	r3, [pc, #224]	; (80019c0 <MX_TIM1_Init+0x138>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018e4:	4b36      	ldr	r3, [pc, #216]	; (80019c0 <MX_TIM1_Init+0x138>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ea:	4b35      	ldr	r3, [pc, #212]	; (80019c0 <MX_TIM1_Init+0x138>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018f0:	4833      	ldr	r0, [pc, #204]	; (80019c0 <MX_TIM1_Init+0x138>)
 80018f2:	f002 fbaf 	bl	8004054 <HAL_TIM_Base_Init>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80018fc:	f000 f9a6 	bl	8001c4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001900:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001904:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001906:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800190a:	4619      	mov	r1, r3
 800190c:	482c      	ldr	r0, [pc, #176]	; (80019c0 <MX_TIM1_Init+0x138>)
 800190e:	f003 f907 	bl	8004b20 <HAL_TIM_ConfigClockSource>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001918:	f000 f998 	bl	8001c4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800191c:	4828      	ldr	r0, [pc, #160]	; (80019c0 <MX_TIM1_Init+0x138>)
 800191e:	f002 fc7a 	bl	8004216 <HAL_TIM_PWM_Init>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001928:	f000 f990 	bl	8001c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800192c:	2300      	movs	r3, #0
 800192e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001930:	2300      	movs	r3, #0
 8001932:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001934:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001938:	4619      	mov	r1, r3
 800193a:	4821      	ldr	r0, [pc, #132]	; (80019c0 <MX_TIM1_Init+0x138>)
 800193c:	f003 fd84 	bl	8005448 <HAL_TIMEx_MasterConfigSynchronization>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001946:	f000 f981 	bl	8001c4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800194a:	2360      	movs	r3, #96	; 0x60
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 40;
 800194e:	2328      	movs	r3, #40	; 0x28
 8001950:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001952:	2300      	movs	r3, #0
 8001954:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001956:	2300      	movs	r3, #0
 8001958:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800195a:	2300      	movs	r3, #0
 800195c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800195e:	2300      	movs	r3, #0
 8001960:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001962:	2300      	movs	r3, #0
 8001964:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800196a:	2200      	movs	r2, #0
 800196c:	4619      	mov	r1, r3
 800196e:	4814      	ldr	r0, [pc, #80]	; (80019c0 <MX_TIM1_Init+0x138>)
 8001970:	f003 f818 	bl	80049a4 <HAL_TIM_PWM_ConfigChannel>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800197a:	f000 f967 	bl	8001c4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800197e:	2300      	movs	r3, #0
 8001980:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001982:	2300      	movs	r3, #0
 8001984:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001986:	2300      	movs	r3, #0
 8001988:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800198a:	2300      	movs	r3, #0
 800198c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800198e:	2300      	movs	r3, #0
 8001990:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001992:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001996:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001998:	2300      	movs	r3, #0
 800199a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800199c:	1d3b      	adds	r3, r7, #4
 800199e:	4619      	mov	r1, r3
 80019a0:	4807      	ldr	r0, [pc, #28]	; (80019c0 <MX_TIM1_Init+0x138>)
 80019a2:	f003 fdbf 	bl	8005524 <HAL_TIMEx_ConfigBreakDeadTime>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80019ac:	f000 f94e 	bl	8001c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80019b0:	4803      	ldr	r0, [pc, #12]	; (80019c0 <MX_TIM1_Init+0x138>)
 80019b2:	f000 fa31 	bl	8001e18 <HAL_TIM_MspPostInit>

}
 80019b6:	bf00      	nop
 80019b8:	3758      	adds	r7, #88	; 0x58
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20000264 	.word	0x20000264
 80019c4:	40010000 	.word	0x40010000

080019c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019ce:	f107 0308 	add.w	r3, r7, #8
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	605a      	str	r2, [r3, #4]
 80019d8:	609a      	str	r2, [r3, #8]
 80019da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019dc:	463b      	mov	r3, r7
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019e4:	4b1d      	ldr	r3, [pc, #116]	; (8001a5c <MX_TIM3_Init+0x94>)
 80019e6:	4a1e      	ldr	r2, [pc, #120]	; (8001a60 <MX_TIM3_Init+0x98>)
 80019e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 120-1;
 80019ea:	4b1c      	ldr	r3, [pc, #112]	; (8001a5c <MX_TIM3_Init+0x94>)
 80019ec:	2277      	movs	r2, #119	; 0x77
 80019ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f0:	4b1a      	ldr	r3, [pc, #104]	; (8001a5c <MX_TIM3_Init+0x94>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 80019f6:	4b19      	ldr	r3, [pc, #100]	; (8001a5c <MX_TIM3_Init+0x94>)
 80019f8:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80019fc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019fe:	4b17      	ldr	r3, [pc, #92]	; (8001a5c <MX_TIM3_Init+0x94>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a04:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <MX_TIM3_Init+0x94>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a0a:	4814      	ldr	r0, [pc, #80]	; (8001a5c <MX_TIM3_Init+0x94>)
 8001a0c:	f002 fb22 	bl	8004054 <HAL_TIM_Base_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001a16:	f000 f919 	bl	8001c4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a1e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a20:	f107 0308 	add.w	r3, r7, #8
 8001a24:	4619      	mov	r1, r3
 8001a26:	480d      	ldr	r0, [pc, #52]	; (8001a5c <MX_TIM3_Init+0x94>)
 8001a28:	f003 f87a 	bl	8004b20 <HAL_TIM_ConfigClockSource>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001a32:	f000 f90b 	bl	8001c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a36:	2300      	movs	r3, #0
 8001a38:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a3e:	463b      	mov	r3, r7
 8001a40:	4619      	mov	r1, r3
 8001a42:	4806      	ldr	r0, [pc, #24]	; (8001a5c <MX_TIM3_Init+0x94>)
 8001a44:	f003 fd00 	bl	8005448 <HAL_TIMEx_MasterConfigSynchronization>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001a4e:	f000 f8fd 	bl	8001c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a52:	bf00      	nop
 8001a54:	3718      	adds	r7, #24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	200001d4 	.word	0x200001d4
 8001a60:	40000400 	.word	0x40000400

08001a64 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a68:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <MX_USART2_UART_Init+0x4c>)
 8001a6a:	4a12      	ldr	r2, [pc, #72]	; (8001ab4 <MX_USART2_UART_Init+0x50>)
 8001a6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a6e:	4b10      	ldr	r3, [pc, #64]	; (8001ab0 <MX_USART2_UART_Init+0x4c>)
 8001a70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a76:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <MX_USART2_UART_Init+0x4c>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <MX_USART2_UART_Init+0x4c>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a82:	4b0b      	ldr	r3, [pc, #44]	; (8001ab0 <MX_USART2_UART_Init+0x4c>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a88:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <MX_USART2_UART_Init+0x4c>)
 8001a8a:	220c      	movs	r2, #12
 8001a8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a8e:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <MX_USART2_UART_Init+0x4c>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <MX_USART2_UART_Init+0x4c>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a9a:	4805      	ldr	r0, [pc, #20]	; (8001ab0 <MX_USART2_UART_Init+0x4c>)
 8001a9c:	f003 fda8 	bl	80055f0 <HAL_UART_Init>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001aa6:	f000 f8d1 	bl	8001c4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	200002ac 	.word	0x200002ac
 8001ab4:	40004400 	.word	0x40004400

08001ab8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	607b      	str	r3, [r7, #4]
 8001ac2:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <MX_DMA_Init+0x3c>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	4a0b      	ldr	r2, [pc, #44]	; (8001af4 <MX_DMA_Init+0x3c>)
 8001ac8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001acc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ace:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <MX_DMA_Init+0x3c>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ad6:	607b      	str	r3, [r7, #4]
 8001ad8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001ada:	2200      	movs	r2, #0
 8001adc:	2100      	movs	r1, #0
 8001ade:	2039      	movs	r0, #57	; 0x39
 8001ae0:	f001 f8c5 	bl	8002c6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001ae4:	2039      	movs	r0, #57	; 0x39
 8001ae6:	f001 f8de 	bl	8002ca6 <HAL_NVIC_EnableIRQ>

}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40023800 	.word	0x40023800

08001af8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08a      	sub	sp, #40	; 0x28
 8001afc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001afe:	f107 0314 	add.w	r3, r7, #20
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	605a      	str	r2, [r3, #4]
 8001b08:	609a      	str	r2, [r3, #8]
 8001b0a:	60da      	str	r2, [r3, #12]
 8001b0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	613b      	str	r3, [r7, #16]
 8001b12:	4b3a      	ldr	r3, [pc, #232]	; (8001bfc <MX_GPIO_Init+0x104>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	4a39      	ldr	r2, [pc, #228]	; (8001bfc <MX_GPIO_Init+0x104>)
 8001b18:	f043 0304 	orr.w	r3, r3, #4
 8001b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1e:	4b37      	ldr	r3, [pc, #220]	; (8001bfc <MX_GPIO_Init+0x104>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	f003 0304 	and.w	r3, r3, #4
 8001b26:	613b      	str	r3, [r7, #16]
 8001b28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	4b33      	ldr	r3, [pc, #204]	; (8001bfc <MX_GPIO_Init+0x104>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	4a32      	ldr	r2, [pc, #200]	; (8001bfc <MX_GPIO_Init+0x104>)
 8001b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b38:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3a:	4b30      	ldr	r3, [pc, #192]	; (8001bfc <MX_GPIO_Init+0x104>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	60bb      	str	r3, [r7, #8]
 8001b4a:	4b2c      	ldr	r3, [pc, #176]	; (8001bfc <MX_GPIO_Init+0x104>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	4a2b      	ldr	r2, [pc, #172]	; (8001bfc <MX_GPIO_Init+0x104>)
 8001b50:	f043 0301 	orr.w	r3, r3, #1
 8001b54:	6313      	str	r3, [r2, #48]	; 0x30
 8001b56:	4b29      	ldr	r3, [pc, #164]	; (8001bfc <MX_GPIO_Init+0x104>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	60bb      	str	r3, [r7, #8]
 8001b60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	607b      	str	r3, [r7, #4]
 8001b66:	4b25      	ldr	r3, [pc, #148]	; (8001bfc <MX_GPIO_Init+0x104>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	4a24      	ldr	r2, [pc, #144]	; (8001bfc <MX_GPIO_Init+0x104>)
 8001b6c:	f043 0302 	orr.w	r3, r3, #2
 8001b70:	6313      	str	r3, [r2, #48]	; 0x30
 8001b72:	4b22      	ldr	r3, [pc, #136]	; (8001bfc <MX_GPIO_Init+0x104>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	607b      	str	r3, [r7, #4]
 8001b7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001b7e:	2200      	movs	r2, #0
 8001b80:	2120      	movs	r1, #32
 8001b82:	481f      	ldr	r0, [pc, #124]	; (8001c00 <MX_GPIO_Init+0x108>)
 8001b84:	f001 fdc0 	bl	8003708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001b88:	2200      	movs	r2, #0
 8001b8a:	2120      	movs	r1, #32
 8001b8c:	481d      	ldr	r0, [pc, #116]	; (8001c04 <MX_GPIO_Init+0x10c>)
 8001b8e:	f001 fdbb 	bl	8003708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b98:	4b1b      	ldr	r3, [pc, #108]	; (8001c08 <MX_GPIO_Init+0x110>)
 8001b9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ba0:	f107 0314 	add.w	r3, r7, #20
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4819      	ldr	r0, [pc, #100]	; (8001c0c <MX_GPIO_Init+0x114>)
 8001ba8:	f001 fc2a 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001bac:	2320      	movs	r3, #32
 8001bae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001bbc:	f107 0314 	add.w	r3, r7, #20
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	480f      	ldr	r0, [pc, #60]	; (8001c00 <MX_GPIO_Init+0x108>)
 8001bc4:	f001 fc1c 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001bc8:	2320      	movs	r3, #32
 8001bca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4809      	ldr	r0, [pc, #36]	; (8001c04 <MX_GPIO_Init+0x10c>)
 8001be0:	f001 fc0e 	bl	8003400 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001be4:	2200      	movs	r2, #0
 8001be6:	2100      	movs	r1, #0
 8001be8:	2028      	movs	r0, #40	; 0x28
 8001bea:	f001 f840 	bl	8002c6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001bee:	2028      	movs	r0, #40	; 0x28
 8001bf0:	f001 f859 	bl	8002ca6 <HAL_NVIC_EnableIRQ>

}
 8001bf4:	bf00      	nop
 8001bf6:	3728      	adds	r7, #40	; 0x28
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40020000 	.word	0x40020000
 8001c04:	40020400 	.word	0x40020400
 8001c08:	10210000 	.word	0x10210000
 8001c0c:	40020800 	.word	0x40020800

08001c10 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Stop_IT(&htim3);
 8001c1a:	480b      	ldr	r0, [pc, #44]	; (8001c48 <HAL_GPIO_EXTI_Callback+0x38>)
 8001c1c:	f002 facc 	bl	80041b8 <HAL_TIM_Base_Stop_IT>
	int newBri = get_brightness() + 5;
 8001c20:	f7ff fa88 	bl	8001134 <get_brightness>
 8001c24:	4603      	mov	r3, r0
 8001c26:	3305      	adds	r3, #5
 8001c28:	60fb      	str	r3, [r7, #12]
	if (newBri > 45) {
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2b2d      	cmp	r3, #45	; 0x2d
 8001c2e:	dd04      	ble.n	8001c3a <HAL_GPIO_EXTI_Callback+0x2a>
		newBri = 0;
 8001c30:	2300      	movs	r3, #0
 8001c32:	60fb      	str	r3, [r7, #12]
		HAL_TIM_Base_Start_IT(&htim3);
 8001c34:	4804      	ldr	r0, [pc, #16]	; (8001c48 <HAL_GPIO_EXTI_Callback+0x38>)
 8001c36:	f002 fa5d 	bl	80040f4 <HAL_TIM_Base_Start_IT>
	}

	set_brightness(newBri);
 8001c3a:	68f8      	ldr	r0, [r7, #12]
 8001c3c:	f7ff fa62 	bl	8001104 <set_brightness>
}
 8001c40:	bf00      	nop
 8001c42:	3710      	adds	r7, #16
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	200001d4 	.word	0x200001d4

08001c4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c50:	b672      	cpsid	i
}
 8001c52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c54:	e7fe      	b.n	8001c54 <Error_Handler+0x8>
	...

08001c58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	607b      	str	r3, [r7, #4]
 8001c62:	4b10      	ldr	r3, [pc, #64]	; (8001ca4 <HAL_MspInit+0x4c>)
 8001c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c66:	4a0f      	ldr	r2, [pc, #60]	; (8001ca4 <HAL_MspInit+0x4c>)
 8001c68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ca4 <HAL_MspInit+0x4c>)
 8001c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c76:	607b      	str	r3, [r7, #4]
 8001c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	603b      	str	r3, [r7, #0]
 8001c7e:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <HAL_MspInit+0x4c>)
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	4a08      	ldr	r2, [pc, #32]	; (8001ca4 <HAL_MspInit+0x4c>)
 8001c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c88:	6413      	str	r3, [r2, #64]	; 0x40
 8001c8a:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <HAL_MspInit+0x4c>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c92:	603b      	str	r3, [r7, #0]
 8001c94:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001c96:	2007      	movs	r0, #7
 8001c98:	f000 ffde 	bl	8002c58 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c9c:	bf00      	nop
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40023800 	.word	0x40023800

08001ca8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b08a      	sub	sp, #40	; 0x28
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb0:	f107 0314 	add.w	r3, r7, #20
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	60da      	str	r2, [r3, #12]
 8001cbe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a17      	ldr	r2, [pc, #92]	; (8001d24 <HAL_ADC_MspInit+0x7c>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d127      	bne.n	8001d1a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	613b      	str	r3, [r7, #16]
 8001cce:	4b16      	ldr	r3, [pc, #88]	; (8001d28 <HAL_ADC_MspInit+0x80>)
 8001cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd2:	4a15      	ldr	r2, [pc, #84]	; (8001d28 <HAL_ADC_MspInit+0x80>)
 8001cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cda:	4b13      	ldr	r3, [pc, #76]	; (8001d28 <HAL_ADC_MspInit+0x80>)
 8001cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce2:	613b      	str	r3, [r7, #16]
 8001ce4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	4b0f      	ldr	r3, [pc, #60]	; (8001d28 <HAL_ADC_MspInit+0x80>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	4a0e      	ldr	r2, [pc, #56]	; (8001d28 <HAL_ADC_MspInit+0x80>)
 8001cf0:	f043 0301 	orr.w	r3, r3, #1
 8001cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf6:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <HAL_ADC_MspInit+0x80>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d02:	2301      	movs	r3, #1
 8001d04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d06:	2303      	movs	r3, #3
 8001d08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0e:	f107 0314 	add.w	r3, r7, #20
 8001d12:	4619      	mov	r1, r3
 8001d14:	4805      	ldr	r0, [pc, #20]	; (8001d2c <HAL_ADC_MspInit+0x84>)
 8001d16:	f001 fb73 	bl	8003400 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d1a:	bf00      	nop
 8001d1c:	3728      	adds	r7, #40	; 0x28
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40012000 	.word	0x40012000
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	40020000 	.word	0x40020000

08001d30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a31      	ldr	r2, [pc, #196]	; (8001e04 <HAL_TIM_Base_MspInit+0xd4>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d140      	bne.n	8001dc4 <HAL_TIM_Base_MspInit+0x94>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	4b30      	ldr	r3, [pc, #192]	; (8001e08 <HAL_TIM_Base_MspInit+0xd8>)
 8001d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4a:	4a2f      	ldr	r2, [pc, #188]	; (8001e08 <HAL_TIM_Base_MspInit+0xd8>)
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	6453      	str	r3, [r2, #68]	; 0x44
 8001d52:	4b2d      	ldr	r3, [pc, #180]	; (8001e08 <HAL_TIM_Base_MspInit+0xd8>)
 8001d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8001d5e:	4b2b      	ldr	r3, [pc, #172]	; (8001e0c <HAL_TIM_Base_MspInit+0xdc>)
 8001d60:	4a2b      	ldr	r2, [pc, #172]	; (8001e10 <HAL_TIM_Base_MspInit+0xe0>)
 8001d62:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8001d64:	4b29      	ldr	r3, [pc, #164]	; (8001e0c <HAL_TIM_Base_MspInit+0xdc>)
 8001d66:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001d6a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d6c:	4b27      	ldr	r3, [pc, #156]	; (8001e0c <HAL_TIM_Base_MspInit+0xdc>)
 8001d6e:	2240      	movs	r2, #64	; 0x40
 8001d70:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d72:	4b26      	ldr	r3, [pc, #152]	; (8001e0c <HAL_TIM_Base_MspInit+0xdc>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001d78:	4b24      	ldr	r3, [pc, #144]	; (8001e0c <HAL_TIM_Base_MspInit+0xdc>)
 8001d7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d7e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d80:	4b22      	ldr	r3, [pc, #136]	; (8001e0c <HAL_TIM_Base_MspInit+0xdc>)
 8001d82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d86:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d88:	4b20      	ldr	r3, [pc, #128]	; (8001e0c <HAL_TIM_Base_MspInit+0xdc>)
 8001d8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d8e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8001d90:	4b1e      	ldr	r3, [pc, #120]	; (8001e0c <HAL_TIM_Base_MspInit+0xdc>)
 8001d92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d96:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001d98:	4b1c      	ldr	r3, [pc, #112]	; (8001e0c <HAL_TIM_Base_MspInit+0xdc>)
 8001d9a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d9e:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001da0:	4b1a      	ldr	r3, [pc, #104]	; (8001e0c <HAL_TIM_Base_MspInit+0xdc>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001da6:	4819      	ldr	r0, [pc, #100]	; (8001e0c <HAL_TIM_Base_MspInit+0xdc>)
 8001da8:	f000 ff98 	bl	8002cdc <HAL_DMA_Init>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <HAL_TIM_Base_MspInit+0x86>
    {
      Error_Handler();
 8001db2:	f7ff ff4b 	bl	8001c4c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a14      	ldr	r2, [pc, #80]	; (8001e0c <HAL_TIM_Base_MspInit+0xdc>)
 8001dba:	625a      	str	r2, [r3, #36]	; 0x24
 8001dbc:	4a13      	ldr	r2, [pc, #76]	; (8001e0c <HAL_TIM_Base_MspInit+0xdc>)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001dc2:	e01a      	b.n	8001dfa <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM3)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a12      	ldr	r2, [pc, #72]	; (8001e14 <HAL_TIM_Base_MspInit+0xe4>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d115      	bne.n	8001dfa <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60bb      	str	r3, [r7, #8]
 8001dd2:	4b0d      	ldr	r3, [pc, #52]	; (8001e08 <HAL_TIM_Base_MspInit+0xd8>)
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	4a0c      	ldr	r2, [pc, #48]	; (8001e08 <HAL_TIM_Base_MspInit+0xd8>)
 8001dd8:	f043 0302 	orr.w	r3, r3, #2
 8001ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dde:	4b0a      	ldr	r3, [pc, #40]	; (8001e08 <HAL_TIM_Base_MspInit+0xd8>)
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	60bb      	str	r3, [r7, #8]
 8001de8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001dea:	2200      	movs	r2, #0
 8001dec:	2100      	movs	r1, #0
 8001dee:	201d      	movs	r0, #29
 8001df0:	f000 ff3d 	bl	8002c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001df4:	201d      	movs	r0, #29
 8001df6:	f000 ff56 	bl	8002ca6 <HAL_NVIC_EnableIRQ>
}
 8001dfa:	bf00      	nop
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40010000 	.word	0x40010000
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	20000174 	.word	0x20000174
 8001e10:	40026428 	.word	0x40026428
 8001e14:	40000400 	.word	0x40000400

08001e18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b088      	sub	sp, #32
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e20:	f107 030c 	add.w	r3, r7, #12
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	605a      	str	r2, [r3, #4]
 8001e2a:	609a      	str	r2, [r3, #8]
 8001e2c:	60da      	str	r2, [r3, #12]
 8001e2e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a12      	ldr	r2, [pc, #72]	; (8001e80 <HAL_TIM_MspPostInit+0x68>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d11e      	bne.n	8001e78 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60bb      	str	r3, [r7, #8]
 8001e3e:	4b11      	ldr	r3, [pc, #68]	; (8001e84 <HAL_TIM_MspPostInit+0x6c>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	4a10      	ldr	r2, [pc, #64]	; (8001e84 <HAL_TIM_MspPostInit+0x6c>)
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4a:	4b0e      	ldr	r3, [pc, #56]	; (8001e84 <HAL_TIM_MspPostInit+0x6c>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	60bb      	str	r3, [r7, #8]
 8001e54:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e5a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e64:	2300      	movs	r3, #0
 8001e66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6c:	f107 030c 	add.w	r3, r7, #12
 8001e70:	4619      	mov	r1, r3
 8001e72:	4805      	ldr	r0, [pc, #20]	; (8001e88 <HAL_TIM_MspPostInit+0x70>)
 8001e74:	f001 fac4 	bl	8003400 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001e78:	bf00      	nop
 8001e7a:	3720      	adds	r7, #32
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40010000 	.word	0x40010000
 8001e84:	40023800 	.word	0x40023800
 8001e88:	40020000 	.word	0x40020000

08001e8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b08a      	sub	sp, #40	; 0x28
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e94:	f107 0314 	add.w	r3, r7, #20
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	609a      	str	r2, [r3, #8]
 8001ea0:	60da      	str	r2, [r3, #12]
 8001ea2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a19      	ldr	r2, [pc, #100]	; (8001f10 <HAL_UART_MspInit+0x84>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d12b      	bne.n	8001f06 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	613b      	str	r3, [r7, #16]
 8001eb2:	4b18      	ldr	r3, [pc, #96]	; (8001f14 <HAL_UART_MspInit+0x88>)
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	4a17      	ldr	r2, [pc, #92]	; (8001f14 <HAL_UART_MspInit+0x88>)
 8001eb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ebc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ebe:	4b15      	ldr	r3, [pc, #84]	; (8001f14 <HAL_UART_MspInit+0x88>)
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec6:	613b      	str	r3, [r7, #16]
 8001ec8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <HAL_UART_MspInit+0x88>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	4a10      	ldr	r2, [pc, #64]	; (8001f14 <HAL_UART_MspInit+0x88>)
 8001ed4:	f043 0301 	orr.w	r3, r3, #1
 8001ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eda:	4b0e      	ldr	r3, [pc, #56]	; (8001f14 <HAL_UART_MspInit+0x88>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ee6:	230c      	movs	r3, #12
 8001ee8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eea:	2302      	movs	r3, #2
 8001eec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ef6:	2307      	movs	r3, #7
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efa:	f107 0314 	add.w	r3, r7, #20
 8001efe:	4619      	mov	r1, r3
 8001f00:	4805      	ldr	r0, [pc, #20]	; (8001f18 <HAL_UART_MspInit+0x8c>)
 8001f02:	f001 fa7d 	bl	8003400 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f06:	bf00      	nop
 8001f08:	3728      	adds	r7, #40	; 0x28
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40004400 	.word	0x40004400
 8001f14:	40023800 	.word	0x40023800
 8001f18:	40020000 	.word	0x40020000

08001f1c <MAP>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t MAP(int x, int in_min, int in_max, int out_min, int out_max)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
 8001f28:	603b      	str	r3, [r7, #0]
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	69b9      	ldr	r1, [r7, #24]
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	1a8a      	subs	r2, r1, r2
 8001f36:	fb02 f203 	mul.w	r2, r2, r3
 8001f3a:	6879      	ldr	r1, [r7, #4]
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	1acb      	subs	r3, r1, r3
 8001f40:	fb92 f2f3 	sdiv	r2, r2, r3
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	4413      	add	r3, r2
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3714      	adds	r7, #20
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f58:	e7fe      	b.n	8001f58 <NMI_Handler+0x4>

08001f5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f5e:	e7fe      	b.n	8001f5e <HardFault_Handler+0x4>

08001f60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f64:	e7fe      	b.n	8001f64 <MemManage_Handler+0x4>

08001f66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f66:	b480      	push	{r7}
 8001f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f6a:	e7fe      	b.n	8001f6a <BusFault_Handler+0x4>

08001f6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f70:	e7fe      	b.n	8001f70 <UsageFault_Handler+0x4>

08001f72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f72:	b480      	push	{r7}
 8001f74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f76:	bf00      	nop
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fa0:	f000 f988 	bl	80022b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fa4:	bf00      	nop
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  needsResync = 1;
 8001fac:	4b03      	ldr	r3, [pc, #12]	; (8001fbc <TIM3_IRQHandler+0x14>)
 8001fae:	2201      	movs	r2, #1
 8001fb0:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001fb2:	4803      	ldr	r0, [pc, #12]	; (8001fc0 <TIM3_IRQHandler+0x18>)
 8001fb4:	f002 fbee 	bl	8004794 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  /* USER CODE END TIM3_IRQn 1 */
}
 8001fb8:	bf00      	nop
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	20000000 	.word	0x20000000
 8001fc0:	200001d4 	.word	0x200001d4

08001fc4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001fc8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001fcc:	f001 fbb6 	bl	800373c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001fd0:	bf00      	nop
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001fd8:	4802      	ldr	r0, [pc, #8]	; (8001fe4 <DMA2_Stream1_IRQHandler+0x10>)
 8001fda:	f000 ffa7 	bl	8002f2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20000174 	.word	0x20000174

08001fe8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	617b      	str	r3, [r7, #20]
 8001ff8:	e00a      	b.n	8002010 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ffa:	f3af 8000 	nop.w
 8001ffe:	4601      	mov	r1, r0
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	1c5a      	adds	r2, r3, #1
 8002004:	60ba      	str	r2, [r7, #8]
 8002006:	b2ca      	uxtb	r2, r1
 8002008:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	3301      	adds	r3, #1
 800200e:	617b      	str	r3, [r7, #20]
 8002010:	697a      	ldr	r2, [r7, #20]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	429a      	cmp	r2, r3
 8002016:	dbf0      	blt.n	8001ffa <_read+0x12>
	}

return len;
 8002018:	687b      	ldr	r3, [r7, #4]
}
 800201a:	4618      	mov	r0, r3
 800201c:	3718      	adds	r7, #24
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b086      	sub	sp, #24
 8002026:	af00      	add	r7, sp, #0
 8002028:	60f8      	str	r0, [r7, #12]
 800202a:	60b9      	str	r1, [r7, #8]
 800202c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800202e:	2300      	movs	r3, #0
 8002030:	617b      	str	r3, [r7, #20]
 8002032:	e009      	b.n	8002048 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	1c5a      	adds	r2, r3, #1
 8002038:	60ba      	str	r2, [r7, #8]
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	4618      	mov	r0, r3
 800203e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	3301      	adds	r3, #1
 8002046:	617b      	str	r3, [r7, #20]
 8002048:	697a      	ldr	r2, [r7, #20]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	429a      	cmp	r2, r3
 800204e:	dbf1      	blt.n	8002034 <_write+0x12>
	}
	return len;
 8002050:	687b      	ldr	r3, [r7, #4]
}
 8002052:	4618      	mov	r0, r3
 8002054:	3718      	adds	r7, #24
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <_close>:

int _close(int file)
{
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
	return -1;
 8002062:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002066:	4618      	mov	r0, r3
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr

08002072 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002072:	b480      	push	{r7}
 8002074:	b083      	sub	sp, #12
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
 800207a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002082:	605a      	str	r2, [r3, #4]
	return 0;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <_isatty>:

int _isatty(int file)
{
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
	return 1;
 800209a:	2301      	movs	r3, #1
}
 800209c:	4618      	mov	r0, r3
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
	return 0;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3714      	adds	r7, #20
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
	...

080020c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020cc:	4a14      	ldr	r2, [pc, #80]	; (8002120 <_sbrk+0x5c>)
 80020ce:	4b15      	ldr	r3, [pc, #84]	; (8002124 <_sbrk+0x60>)
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020d8:	4b13      	ldr	r3, [pc, #76]	; (8002128 <_sbrk+0x64>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d102      	bne.n	80020e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020e0:	4b11      	ldr	r3, [pc, #68]	; (8002128 <_sbrk+0x64>)
 80020e2:	4a12      	ldr	r2, [pc, #72]	; (800212c <_sbrk+0x68>)
 80020e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020e6:	4b10      	ldr	r3, [pc, #64]	; (8002128 <_sbrk+0x64>)
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4413      	add	r3, r2
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d207      	bcs.n	8002104 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020f4:	f003 fd6e 	bl	8005bd4 <__errno>
 80020f8:	4603      	mov	r3, r0
 80020fa:	220c      	movs	r2, #12
 80020fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002102:	e009      	b.n	8002118 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002104:	4b08      	ldr	r3, [pc, #32]	; (8002128 <_sbrk+0x64>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800210a:	4b07      	ldr	r3, [pc, #28]	; (8002128 <_sbrk+0x64>)
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4413      	add	r3, r2
 8002112:	4a05      	ldr	r2, [pc, #20]	; (8002128 <_sbrk+0x64>)
 8002114:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002116:	68fb      	ldr	r3, [r7, #12]
}
 8002118:	4618      	mov	r0, r3
 800211a:	3718      	adds	r7, #24
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	20020000 	.word	0x20020000
 8002124:	00000400 	.word	0x00000400
 8002128:	20000118 	.word	0x20000118
 800212c:	20000308 	.word	0x20000308

08002130 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002134:	4b06      	ldr	r3, [pc, #24]	; (8002150 <SystemInit+0x20>)
 8002136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800213a:	4a05      	ldr	r2, [pc, #20]	; (8002150 <SystemInit+0x20>)
 800213c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002140:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002144:	bf00      	nop
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	e000ed00 	.word	0xe000ed00

08002154 <rainbow_effect_fade>:
#include "color_utils.h"

uint8_t ang = 0;
const uint8_t angle_difference = 11;

void rainbow_effect_fade() {
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < NUM_PIXELS; i++) {
 800215a:	2300      	movs	r3, #0
 800215c:	71fb      	strb	r3, [r7, #7]
 800215e:	e01c      	b.n	800219a <rainbow_effect_fade+0x46>
		uint32_t rgb_color = hsl_to_rgb(ang + (i * angle_difference), 255, 127);
 8002160:	220b      	movs	r2, #11
 8002162:	79fb      	ldrb	r3, [r7, #7]
 8002164:	fb13 f302 	smulbb	r3, r3, r2
 8002168:	b2da      	uxtb	r2, r3
 800216a:	4b13      	ldr	r3, [pc, #76]	; (80021b8 <rainbow_effect_fade+0x64>)
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	4413      	add	r3, r2
 8002170:	b2db      	uxtb	r3, r3
 8002172:	227f      	movs	r2, #127	; 0x7f
 8002174:	21ff      	movs	r1, #255	; 0xff
 8002176:	4618      	mov	r0, r3
 8002178:	f7fe fefe 	bl	8000f78 <hsl_to_rgb>
 800217c:	6038      	str	r0, [r7, #0]
		led_set_RGB(i, (rgb_color >> 16) & 0xFF, (rgb_color >> 8) & 0xFF, rgb_color & 0xFF);
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	0c1b      	lsrs	r3, r3, #16
 8002182:	b2d9      	uxtb	r1, r3
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	0a1b      	lsrs	r3, r3, #8
 8002188:	b2da      	uxtb	r2, r3
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	b2db      	uxtb	r3, r3
 800218e:	79f8      	ldrb	r0, [r7, #7]
 8002190:	f7fe ffde 	bl	8001150 <led_set_RGB>
	for(uint8_t i = 0; i < NUM_PIXELS; i++) {
 8002194:	79fb      	ldrb	r3, [r7, #7]
 8002196:	3301      	adds	r3, #1
 8002198:	71fb      	strb	r3, [r7, #7]
 800219a:	79fb      	ldrb	r3, [r7, #7]
 800219c:	2b07      	cmp	r3, #7
 800219e:	d9df      	bls.n	8002160 <rainbow_effect_fade+0xc>
	}
  	++ang;
 80021a0:	4b05      	ldr	r3, [pc, #20]	; (80021b8 <rainbow_effect_fade+0x64>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	3301      	adds	r3, #1
 80021a6:	b2da      	uxtb	r2, r3
 80021a8:	4b03      	ldr	r3, [pc, #12]	; (80021b8 <rainbow_effect_fade+0x64>)
 80021aa:	701a      	strb	r2, [r3, #0]
  	led_render();
 80021ac:	f7ff f87e 	bl	80012ac <led_render>
}
 80021b0:	bf00      	nop
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	2000011c 	.word	0x2000011c

080021bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80021bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021c0:	480d      	ldr	r0, [pc, #52]	; (80021f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80021c2:	490e      	ldr	r1, [pc, #56]	; (80021fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80021c4:	4a0e      	ldr	r2, [pc, #56]	; (8002200 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021c8:	e002      	b.n	80021d0 <LoopCopyDataInit>

080021ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021ce:	3304      	adds	r3, #4

080021d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021d4:	d3f9      	bcc.n	80021ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021d6:	4a0b      	ldr	r2, [pc, #44]	; (8002204 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021d8:	4c0b      	ldr	r4, [pc, #44]	; (8002208 <LoopFillZerobss+0x26>)
  movs r3, #0
 80021da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021dc:	e001      	b.n	80021e2 <LoopFillZerobss>

080021de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021e0:	3204      	adds	r2, #4

080021e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021e4:	d3fb      	bcc.n	80021de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80021e6:	f7ff ffa3 	bl	8002130 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021ea:	f003 fec3 	bl	8005f74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021ee:	f7ff fa63 	bl	80016b8 <main>
  bx  lr    
 80021f2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80021f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021fc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002200:	08007910 	.word	0x08007910
  ldr r2, =_sbss
 8002204:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002208:	20000304 	.word	0x20000304

0800220c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800220c:	e7fe      	b.n	800220c <ADC_IRQHandler>
	...

08002210 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002214:	4b0e      	ldr	r3, [pc, #56]	; (8002250 <HAL_Init+0x40>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a0d      	ldr	r2, [pc, #52]	; (8002250 <HAL_Init+0x40>)
 800221a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800221e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002220:	4b0b      	ldr	r3, [pc, #44]	; (8002250 <HAL_Init+0x40>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a0a      	ldr	r2, [pc, #40]	; (8002250 <HAL_Init+0x40>)
 8002226:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800222a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800222c:	4b08      	ldr	r3, [pc, #32]	; (8002250 <HAL_Init+0x40>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a07      	ldr	r2, [pc, #28]	; (8002250 <HAL_Init+0x40>)
 8002232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002236:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002238:	2003      	movs	r0, #3
 800223a:	f000 fd0d 	bl	8002c58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800223e:	2000      	movs	r0, #0
 8002240:	f000 f808 	bl	8002254 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002244:	f7ff fd08 	bl	8001c58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40023c00 	.word	0x40023c00

08002254 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800225c:	4b12      	ldr	r3, [pc, #72]	; (80022a8 <HAL_InitTick+0x54>)
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	4b12      	ldr	r3, [pc, #72]	; (80022ac <HAL_InitTick+0x58>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	4619      	mov	r1, r3
 8002266:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800226a:	fbb3 f3f1 	udiv	r3, r3, r1
 800226e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002272:	4618      	mov	r0, r3
 8002274:	f000 fd25 	bl	8002cc2 <HAL_SYSTICK_Config>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e00e      	b.n	80022a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2b0f      	cmp	r3, #15
 8002286:	d80a      	bhi.n	800229e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002288:	2200      	movs	r2, #0
 800228a:	6879      	ldr	r1, [r7, #4]
 800228c:	f04f 30ff 	mov.w	r0, #4294967295
 8002290:	f000 fced 	bl	8002c6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002294:	4a06      	ldr	r2, [pc, #24]	; (80022b0 <HAL_InitTick+0x5c>)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800229a:	2300      	movs	r3, #0
 800229c:	e000      	b.n	80022a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3708      	adds	r7, #8
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	20000004 	.word	0x20000004
 80022ac:	2000000c 	.word	0x2000000c
 80022b0:	20000008 	.word	0x20000008

080022b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022b8:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <HAL_IncTick+0x20>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	461a      	mov	r2, r3
 80022be:	4b06      	ldr	r3, [pc, #24]	; (80022d8 <HAL_IncTick+0x24>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4413      	add	r3, r2
 80022c4:	4a04      	ldr	r2, [pc, #16]	; (80022d8 <HAL_IncTick+0x24>)
 80022c6:	6013      	str	r3, [r2, #0]
}
 80022c8:	bf00      	nop
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	2000000c 	.word	0x2000000c
 80022d8:	200002f0 	.word	0x200002f0

080022dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  return uwTick;
 80022e0:	4b03      	ldr	r3, [pc, #12]	; (80022f0 <HAL_GetTick+0x14>)
 80022e2:	681b      	ldr	r3, [r3, #0]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	200002f0 	.word	0x200002f0

080022f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022fc:	f7ff ffee 	bl	80022dc <HAL_GetTick>
 8002300:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800230c:	d005      	beq.n	800231a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800230e:	4b0a      	ldr	r3, [pc, #40]	; (8002338 <HAL_Delay+0x44>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	461a      	mov	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	4413      	add	r3, r2
 8002318:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800231a:	bf00      	nop
 800231c:	f7ff ffde 	bl	80022dc <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	429a      	cmp	r2, r3
 800232a:	d8f7      	bhi.n	800231c <HAL_Delay+0x28>
  {
  }
}
 800232c:	bf00      	nop
 800232e:	bf00      	nop
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	2000000c 	.word	0x2000000c

0800233c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002344:	2300      	movs	r3, #0
 8002346:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e033      	b.n	80023ba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	2b00      	cmp	r3, #0
 8002358:	d109      	bne.n	800236e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7ff fca4 	bl	8001ca8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	f003 0310 	and.w	r3, r3, #16
 8002376:	2b00      	cmp	r3, #0
 8002378:	d118      	bne.n	80023ac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002382:	f023 0302 	bic.w	r3, r3, #2
 8002386:	f043 0202 	orr.w	r2, r3, #2
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 fa96 	bl	80028c0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	f023 0303 	bic.w	r3, r3, #3
 80023a2:	f043 0201 	orr.w	r2, r3, #1
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	641a      	str	r2, [r3, #64]	; 0x40
 80023aa:	e001      	b.n	80023b0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80023b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
	...

080023c4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d101      	bne.n	80023de <HAL_ADC_Start+0x1a>
 80023da:	2302      	movs	r3, #2
 80023dc:	e097      	b.n	800250e <HAL_ADC_Start+0x14a>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d018      	beq.n	8002426 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689a      	ldr	r2, [r3, #8]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f042 0201 	orr.w	r2, r2, #1
 8002402:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002404:	4b45      	ldr	r3, [pc, #276]	; (800251c <HAL_ADC_Start+0x158>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a45      	ldr	r2, [pc, #276]	; (8002520 <HAL_ADC_Start+0x15c>)
 800240a:	fba2 2303 	umull	r2, r3, r2, r3
 800240e:	0c9a      	lsrs	r2, r3, #18
 8002410:	4613      	mov	r3, r2
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	4413      	add	r3, r2
 8002416:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002418:	e002      	b.n	8002420 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	3b01      	subs	r3, #1
 800241e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1f9      	bne.n	800241a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	2b01      	cmp	r3, #1
 8002432:	d15f      	bne.n	80024f4 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002438:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800243c:	f023 0301 	bic.w	r3, r3, #1
 8002440:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002452:	2b00      	cmp	r3, #0
 8002454:	d007      	beq.n	8002466 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800245e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800246e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002472:	d106      	bne.n	8002482 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002478:	f023 0206 	bic.w	r2, r3, #6
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	645a      	str	r2, [r3, #68]	; 0x44
 8002480:	e002      	b.n	8002488 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002490:	4b24      	ldr	r3, [pc, #144]	; (8002524 <HAL_ADC_Start+0x160>)
 8002492:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800249c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f003 031f 	and.w	r3, r3, #31
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10f      	bne.n	80024ca <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d129      	bne.n	800250c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689a      	ldr	r2, [r3, #8]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80024c6:	609a      	str	r2, [r3, #8]
 80024c8:	e020      	b.n	800250c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a16      	ldr	r2, [pc, #88]	; (8002528 <HAL_ADC_Start+0x164>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d11b      	bne.n	800250c <HAL_ADC_Start+0x148>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d114      	bne.n	800250c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80024f0:	609a      	str	r2, [r3, #8]
 80024f2:	e00b      	b.n	800250c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f8:	f043 0210 	orr.w	r2, r3, #16
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002504:	f043 0201 	orr.w	r2, r3, #1
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3714      	adds	r7, #20
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	20000004 	.word	0x20000004
 8002520:	431bde83 	.word	0x431bde83
 8002524:	40012300 	.word	0x40012300
 8002528:	40012000 	.word	0x40012000

0800252c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002536:	2300      	movs	r3, #0
 8002538:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002544:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002548:	d113      	bne.n	8002572 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002554:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002558:	d10b      	bne.n	8002572 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	f043 0220 	orr.w	r2, r3, #32
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e063      	b.n	800263a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002572:	f7ff feb3 	bl	80022dc <HAL_GetTick>
 8002576:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002578:	e021      	b.n	80025be <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002580:	d01d      	beq.n	80025be <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d007      	beq.n	8002598 <HAL_ADC_PollForConversion+0x6c>
 8002588:	f7ff fea8 	bl	80022dc <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	429a      	cmp	r2, r3
 8002596:	d212      	bcs.n	80025be <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d00b      	beq.n	80025be <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	f043 0204 	orr.w	r2, r3, #4
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e03d      	b.n	800263a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d1d6      	bne.n	800257a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f06f 0212 	mvn.w	r2, #18
 80025d4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d123      	bne.n	8002638 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d11f      	bne.n	8002638 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002602:	2b00      	cmp	r3, #0
 8002604:	d006      	beq.n	8002614 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002610:	2b00      	cmp	r3, #0
 8002612:	d111      	bne.n	8002638 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002618:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002624:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d105      	bne.n	8002638 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002630:	f043 0201 	orr.w	r2, r3, #1
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002642:	b480      	push	{r7}
 8002644:	b083      	sub	sp, #12
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002650:	4618      	mov	r0, r3
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002666:	2300      	movs	r3, #0
 8002668:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002670:	2b01      	cmp	r3, #1
 8002672:	d101      	bne.n	8002678 <HAL_ADC_ConfigChannel+0x1c>
 8002674:	2302      	movs	r3, #2
 8002676:	e113      	b.n	80028a0 <HAL_ADC_ConfigChannel+0x244>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2b09      	cmp	r3, #9
 8002686:	d925      	bls.n	80026d4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68d9      	ldr	r1, [r3, #12]
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	b29b      	uxth	r3, r3
 8002694:	461a      	mov	r2, r3
 8002696:	4613      	mov	r3, r2
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	4413      	add	r3, r2
 800269c:	3b1e      	subs	r3, #30
 800269e:	2207      	movs	r2, #7
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	43da      	mvns	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	400a      	ands	r2, r1
 80026ac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68d9      	ldr	r1, [r3, #12]
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	689a      	ldr	r2, [r3, #8]
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	b29b      	uxth	r3, r3
 80026be:	4618      	mov	r0, r3
 80026c0:	4603      	mov	r3, r0
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	4403      	add	r3, r0
 80026c6:	3b1e      	subs	r3, #30
 80026c8:	409a      	lsls	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	430a      	orrs	r2, r1
 80026d0:	60da      	str	r2, [r3, #12]
 80026d2:	e022      	b.n	800271a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6919      	ldr	r1, [r3, #16]
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	b29b      	uxth	r3, r3
 80026e0:	461a      	mov	r2, r3
 80026e2:	4613      	mov	r3, r2
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	4413      	add	r3, r2
 80026e8:	2207      	movs	r2, #7
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	43da      	mvns	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	400a      	ands	r2, r1
 80026f6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6919      	ldr	r1, [r3, #16]
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	b29b      	uxth	r3, r3
 8002708:	4618      	mov	r0, r3
 800270a:	4603      	mov	r3, r0
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	4403      	add	r3, r0
 8002710:	409a      	lsls	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	430a      	orrs	r2, r1
 8002718:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b06      	cmp	r3, #6
 8002720:	d824      	bhi.n	800276c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685a      	ldr	r2, [r3, #4]
 800272c:	4613      	mov	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4413      	add	r3, r2
 8002732:	3b05      	subs	r3, #5
 8002734:	221f      	movs	r2, #31
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	43da      	mvns	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	400a      	ands	r2, r1
 8002742:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	b29b      	uxth	r3, r3
 8002750:	4618      	mov	r0, r3
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685a      	ldr	r2, [r3, #4]
 8002756:	4613      	mov	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	4413      	add	r3, r2
 800275c:	3b05      	subs	r3, #5
 800275e:	fa00 f203 	lsl.w	r2, r0, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	430a      	orrs	r2, r1
 8002768:	635a      	str	r2, [r3, #52]	; 0x34
 800276a:	e04c      	b.n	8002806 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	2b0c      	cmp	r3, #12
 8002772:	d824      	bhi.n	80027be <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	4613      	mov	r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	4413      	add	r3, r2
 8002784:	3b23      	subs	r3, #35	; 0x23
 8002786:	221f      	movs	r2, #31
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	43da      	mvns	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	400a      	ands	r2, r1
 8002794:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	4618      	mov	r0, r3
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685a      	ldr	r2, [r3, #4]
 80027a8:	4613      	mov	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	3b23      	subs	r3, #35	; 0x23
 80027b0:	fa00 f203 	lsl.w	r2, r0, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	430a      	orrs	r2, r1
 80027ba:	631a      	str	r2, [r3, #48]	; 0x30
 80027bc:	e023      	b.n	8002806 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	4613      	mov	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4413      	add	r3, r2
 80027ce:	3b41      	subs	r3, #65	; 0x41
 80027d0:	221f      	movs	r2, #31
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	43da      	mvns	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	400a      	ands	r2, r1
 80027de:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	4618      	mov	r0, r3
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685a      	ldr	r2, [r3, #4]
 80027f2:	4613      	mov	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4413      	add	r3, r2
 80027f8:	3b41      	subs	r3, #65	; 0x41
 80027fa:	fa00 f203 	lsl.w	r2, r0, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	430a      	orrs	r2, r1
 8002804:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002806:	4b29      	ldr	r3, [pc, #164]	; (80028ac <HAL_ADC_ConfigChannel+0x250>)
 8002808:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a28      	ldr	r2, [pc, #160]	; (80028b0 <HAL_ADC_ConfigChannel+0x254>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d10f      	bne.n	8002834 <HAL_ADC_ConfigChannel+0x1d8>
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2b12      	cmp	r3, #18
 800281a:	d10b      	bne.n	8002834 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a1d      	ldr	r2, [pc, #116]	; (80028b0 <HAL_ADC_ConfigChannel+0x254>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d12b      	bne.n	8002896 <HAL_ADC_ConfigChannel+0x23a>
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a1c      	ldr	r2, [pc, #112]	; (80028b4 <HAL_ADC_ConfigChannel+0x258>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d003      	beq.n	8002850 <HAL_ADC_ConfigChannel+0x1f4>
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2b11      	cmp	r3, #17
 800284e:	d122      	bne.n	8002896 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a11      	ldr	r2, [pc, #68]	; (80028b4 <HAL_ADC_ConfigChannel+0x258>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d111      	bne.n	8002896 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002872:	4b11      	ldr	r3, [pc, #68]	; (80028b8 <HAL_ADC_ConfigChannel+0x25c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a11      	ldr	r2, [pc, #68]	; (80028bc <HAL_ADC_ConfigChannel+0x260>)
 8002878:	fba2 2303 	umull	r2, r3, r2, r3
 800287c:	0c9a      	lsrs	r2, r3, #18
 800287e:	4613      	mov	r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	4413      	add	r3, r2
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002888:	e002      	b.n	8002890 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	3b01      	subs	r3, #1
 800288e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1f9      	bne.n	800288a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3714      	adds	r7, #20
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	40012300 	.word	0x40012300
 80028b0:	40012000 	.word	0x40012000
 80028b4:	10000012 	.word	0x10000012
 80028b8:	20000004 	.word	0x20000004
 80028bc:	431bde83 	.word	0x431bde83

080028c0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028c8:	4b79      	ldr	r3, [pc, #484]	; (8002ab0 <ADC_Init+0x1f0>)
 80028ca:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	431a      	orrs	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	6859      	ldr	r1, [r3, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	021a      	lsls	r2, r3, #8
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	430a      	orrs	r2, r1
 8002908:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002918:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6859      	ldr	r1, [r3, #4]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	430a      	orrs	r2, r1
 800292a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689a      	ldr	r2, [r3, #8]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800293a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6899      	ldr	r1, [r3, #8]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68da      	ldr	r2, [r3, #12]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	430a      	orrs	r2, r1
 800294c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002952:	4a58      	ldr	r2, [pc, #352]	; (8002ab4 <ADC_Init+0x1f4>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d022      	beq.n	800299e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689a      	ldr	r2, [r3, #8]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002966:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6899      	ldr	r1, [r3, #8]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	430a      	orrs	r2, r1
 8002978:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002988:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6899      	ldr	r1, [r3, #8]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	430a      	orrs	r2, r1
 800299a:	609a      	str	r2, [r3, #8]
 800299c:	e00f      	b.n	80029be <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029bc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f022 0202 	bic.w	r2, r2, #2
 80029cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	6899      	ldr	r1, [r3, #8]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	7e1b      	ldrb	r3, [r3, #24]
 80029d8:	005a      	lsls	r2, r3, #1
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	430a      	orrs	r2, r1
 80029e0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d01b      	beq.n	8002a24 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	685a      	ldr	r2, [r3, #4]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029fa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	685a      	ldr	r2, [r3, #4]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002a0a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6859      	ldr	r1, [r3, #4]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a16:	3b01      	subs	r3, #1
 8002a18:	035a      	lsls	r2, r3, #13
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	605a      	str	r2, [r3, #4]
 8002a22:	e007      	b.n	8002a34 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	685a      	ldr	r2, [r3, #4]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a32:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	051a      	lsls	r2, r3, #20
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	430a      	orrs	r2, r1
 8002a58:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6899      	ldr	r1, [r3, #8]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a76:	025a      	lsls	r2, r3, #9
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689a      	ldr	r2, [r3, #8]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6899      	ldr	r1, [r3, #8]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	029a      	lsls	r2, r3, #10
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	609a      	str	r2, [r3, #8]
}
 8002aa4:	bf00      	nop
 8002aa6:	3714      	adds	r7, #20
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr
 8002ab0:	40012300 	.word	0x40012300
 8002ab4:	0f000001 	.word	0x0f000001

08002ab8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f003 0307 	and.w	r3, r3, #7
 8002ac6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ac8:	4b0c      	ldr	r3, [pc, #48]	; (8002afc <__NVIC_SetPriorityGrouping+0x44>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ace:	68ba      	ldr	r2, [r7, #8]
 8002ad0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ae0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aea:	4a04      	ldr	r2, [pc, #16]	; (8002afc <__NVIC_SetPriorityGrouping+0x44>)
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	60d3      	str	r3, [r2, #12]
}
 8002af0:	bf00      	nop
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	e000ed00 	.word	0xe000ed00

08002b00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b04:	4b04      	ldr	r3, [pc, #16]	; (8002b18 <__NVIC_GetPriorityGrouping+0x18>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	0a1b      	lsrs	r3, r3, #8
 8002b0a:	f003 0307 	and.w	r3, r3, #7
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	e000ed00 	.word	0xe000ed00

08002b1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	db0b      	blt.n	8002b46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b2e:	79fb      	ldrb	r3, [r7, #7]
 8002b30:	f003 021f 	and.w	r2, r3, #31
 8002b34:	4907      	ldr	r1, [pc, #28]	; (8002b54 <__NVIC_EnableIRQ+0x38>)
 8002b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3a:	095b      	lsrs	r3, r3, #5
 8002b3c:	2001      	movs	r0, #1
 8002b3e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	e000e100 	.word	0xe000e100

08002b58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4603      	mov	r3, r0
 8002b60:	6039      	str	r1, [r7, #0]
 8002b62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	db0a      	blt.n	8002b82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	490c      	ldr	r1, [pc, #48]	; (8002ba4 <__NVIC_SetPriority+0x4c>)
 8002b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b76:	0112      	lsls	r2, r2, #4
 8002b78:	b2d2      	uxtb	r2, r2
 8002b7a:	440b      	add	r3, r1
 8002b7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b80:	e00a      	b.n	8002b98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	4908      	ldr	r1, [pc, #32]	; (8002ba8 <__NVIC_SetPriority+0x50>)
 8002b88:	79fb      	ldrb	r3, [r7, #7]
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	3b04      	subs	r3, #4
 8002b90:	0112      	lsls	r2, r2, #4
 8002b92:	b2d2      	uxtb	r2, r2
 8002b94:	440b      	add	r3, r1
 8002b96:	761a      	strb	r2, [r3, #24]
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	e000e100 	.word	0xe000e100
 8002ba8:	e000ed00 	.word	0xe000ed00

08002bac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b089      	sub	sp, #36	; 0x24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	f1c3 0307 	rsb	r3, r3, #7
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	bf28      	it	cs
 8002bca:	2304      	movcs	r3, #4
 8002bcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	2b06      	cmp	r3, #6
 8002bd4:	d902      	bls.n	8002bdc <NVIC_EncodePriority+0x30>
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	3b03      	subs	r3, #3
 8002bda:	e000      	b.n	8002bde <NVIC_EncodePriority+0x32>
 8002bdc:	2300      	movs	r3, #0
 8002bde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002be0:	f04f 32ff 	mov.w	r2, #4294967295
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bea:	43da      	mvns	r2, r3
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	401a      	ands	r2, r3
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bf4:	f04f 31ff 	mov.w	r1, #4294967295
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfe:	43d9      	mvns	r1, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c04:	4313      	orrs	r3, r2
         );
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3724      	adds	r7, #36	; 0x24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
	...

08002c14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c24:	d301      	bcc.n	8002c2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c26:	2301      	movs	r3, #1
 8002c28:	e00f      	b.n	8002c4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c2a:	4a0a      	ldr	r2, [pc, #40]	; (8002c54 <SysTick_Config+0x40>)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c32:	210f      	movs	r1, #15
 8002c34:	f04f 30ff 	mov.w	r0, #4294967295
 8002c38:	f7ff ff8e 	bl	8002b58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c3c:	4b05      	ldr	r3, [pc, #20]	; (8002c54 <SysTick_Config+0x40>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c42:	4b04      	ldr	r3, [pc, #16]	; (8002c54 <SysTick_Config+0x40>)
 8002c44:	2207      	movs	r2, #7
 8002c46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	e000e010 	.word	0xe000e010

08002c58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f7ff ff29 	bl	8002ab8 <__NVIC_SetPriorityGrouping>
}
 8002c66:	bf00      	nop
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b086      	sub	sp, #24
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	4603      	mov	r3, r0
 8002c76:	60b9      	str	r1, [r7, #8]
 8002c78:	607a      	str	r2, [r7, #4]
 8002c7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c80:	f7ff ff3e 	bl	8002b00 <__NVIC_GetPriorityGrouping>
 8002c84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	68b9      	ldr	r1, [r7, #8]
 8002c8a:	6978      	ldr	r0, [r7, #20]
 8002c8c:	f7ff ff8e 	bl	8002bac <NVIC_EncodePriority>
 8002c90:	4602      	mov	r2, r0
 8002c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c96:	4611      	mov	r1, r2
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7ff ff5d 	bl	8002b58 <__NVIC_SetPriority>
}
 8002c9e:	bf00      	nop
 8002ca0:	3718      	adds	r7, #24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b082      	sub	sp, #8
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	4603      	mov	r3, r0
 8002cae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff ff31 	bl	8002b1c <__NVIC_EnableIRQ>
}
 8002cba:	bf00      	nop
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b082      	sub	sp, #8
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f7ff ffa2 	bl	8002c14 <SysTick_Config>
 8002cd0:	4603      	mov	r3, r0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
	...

08002cdc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ce8:	f7ff faf8 	bl	80022dc <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e099      	b.n	8002e2c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2202      	movs	r2, #2
 8002d04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 0201 	bic.w	r2, r2, #1
 8002d16:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d18:	e00f      	b.n	8002d3a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d1a:	f7ff fadf 	bl	80022dc <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b05      	cmp	r3, #5
 8002d26:	d908      	bls.n	8002d3a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2220      	movs	r2, #32
 8002d2c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2203      	movs	r2, #3
 8002d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e078      	b.n	8002e2c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1e8      	bne.n	8002d1a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	4b38      	ldr	r3, [pc, #224]	; (8002e34 <HAL_DMA_Init+0x158>)
 8002d54:	4013      	ands	r3, r2
 8002d56:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d66:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d90:	2b04      	cmp	r3, #4
 8002d92:	d107      	bne.n	8002da4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	f023 0307 	bic.w	r3, r3, #7
 8002dba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	d117      	bne.n	8002dfe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00e      	beq.n	8002dfe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f000 fa91 	bl	8003308 <DMA_CheckFifoParam>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d008      	beq.n	8002dfe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2240      	movs	r2, #64	; 0x40
 8002df0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e016      	b.n	8002e2c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 fa48 	bl	800329c <DMA_CalcBaseAndBitshift>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e14:	223f      	movs	r2, #63	; 0x3f
 8002e16:	409a      	lsls	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3718      	adds	r7, #24
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	f010803f 	.word	0xf010803f

08002e38 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
 8002e44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e46:	2300      	movs	r3, #0
 8002e48:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e4e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d101      	bne.n	8002e5e <HAL_DMA_Start_IT+0x26>
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	e040      	b.n	8002ee0 <HAL_DMA_Start_IT+0xa8>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d12f      	bne.n	8002ed2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2202      	movs	r2, #2
 8002e76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	68b9      	ldr	r1, [r7, #8]
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 f9da 	bl	8003240 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e90:	223f      	movs	r2, #63	; 0x3f
 8002e92:	409a      	lsls	r2, r3
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f042 0216 	orr.w	r2, r2, #22
 8002ea6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d007      	beq.n	8002ec0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f042 0208 	orr.w	r2, r2, #8
 8002ebe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f042 0201 	orr.w	r2, r2, #1
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	e005      	b.n	8002ede <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002eda:	2302      	movs	r3, #2
 8002edc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002ede:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3718      	adds	r7, #24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d004      	beq.n	8002f06 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2280      	movs	r2, #128	; 0x80
 8002f00:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e00c      	b.n	8002f20 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2205      	movs	r2, #5
 8002f0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f022 0201 	bic.w	r2, r2, #1
 8002f1c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002f34:	2300      	movs	r3, #0
 8002f36:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f38:	4b92      	ldr	r3, [pc, #584]	; (8003184 <HAL_DMA_IRQHandler+0x258>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a92      	ldr	r2, [pc, #584]	; (8003188 <HAL_DMA_IRQHandler+0x25c>)
 8002f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f42:	0a9b      	lsrs	r3, r3, #10
 8002f44:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f4a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f56:	2208      	movs	r2, #8
 8002f58:	409a      	lsls	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d01a      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0304 	and.w	r3, r3, #4
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d013      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 0204 	bic.w	r2, r2, #4
 8002f7e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f84:	2208      	movs	r2, #8
 8002f86:	409a      	lsls	r2, r3
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f90:	f043 0201 	orr.w	r2, r3, #1
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	409a      	lsls	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d012      	beq.n	8002fce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00b      	beq.n	8002fce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fba:	2201      	movs	r2, #1
 8002fbc:	409a      	lsls	r2, r3
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc6:	f043 0202 	orr.w	r2, r3, #2
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd2:	2204      	movs	r2, #4
 8002fd4:	409a      	lsls	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d012      	beq.n	8003004 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00b      	beq.n	8003004 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff0:	2204      	movs	r2, #4
 8002ff2:	409a      	lsls	r2, r3
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ffc:	f043 0204 	orr.w	r2, r3, #4
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003008:	2210      	movs	r2, #16
 800300a:	409a      	lsls	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4013      	ands	r3, r2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d043      	beq.n	800309c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0308 	and.w	r3, r3, #8
 800301e:	2b00      	cmp	r3, #0
 8003020:	d03c      	beq.n	800309c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003026:	2210      	movs	r2, #16
 8003028:	409a      	lsls	r2, r3
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d018      	beq.n	800306e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d108      	bne.n	800305c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	2b00      	cmp	r3, #0
 8003050:	d024      	beq.n	800309c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	4798      	blx	r3
 800305a:	e01f      	b.n	800309c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003060:	2b00      	cmp	r3, #0
 8003062:	d01b      	beq.n	800309c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	4798      	blx	r3
 800306c:	e016      	b.n	800309c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003078:	2b00      	cmp	r3, #0
 800307a:	d107      	bne.n	800308c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f022 0208 	bic.w	r2, r2, #8
 800308a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003090:	2b00      	cmp	r3, #0
 8003092:	d003      	beq.n	800309c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a0:	2220      	movs	r2, #32
 80030a2:	409a      	lsls	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	4013      	ands	r3, r2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f000 808e 	beq.w	80031ca <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0310 	and.w	r3, r3, #16
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	f000 8086 	beq.w	80031ca <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c2:	2220      	movs	r2, #32
 80030c4:	409a      	lsls	r2, r3
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b05      	cmp	r3, #5
 80030d4:	d136      	bne.n	8003144 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f022 0216 	bic.w	r2, r2, #22
 80030e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	695a      	ldr	r2, [r3, #20]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d103      	bne.n	8003106 <HAL_DMA_IRQHandler+0x1da>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003102:	2b00      	cmp	r3, #0
 8003104:	d007      	beq.n	8003116 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f022 0208 	bic.w	r2, r2, #8
 8003114:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800311a:	223f      	movs	r2, #63	; 0x3f
 800311c:	409a      	lsls	r2, r3
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003136:	2b00      	cmp	r3, #0
 8003138:	d07d      	beq.n	8003236 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	4798      	blx	r3
        }
        return;
 8003142:	e078      	b.n	8003236 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d01c      	beq.n	800318c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d108      	bne.n	8003172 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003164:	2b00      	cmp	r3, #0
 8003166:	d030      	beq.n	80031ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	4798      	blx	r3
 8003170:	e02b      	b.n	80031ca <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003176:	2b00      	cmp	r3, #0
 8003178:	d027      	beq.n	80031ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	4798      	blx	r3
 8003182:	e022      	b.n	80031ca <HAL_DMA_IRQHandler+0x29e>
 8003184:	20000004 	.word	0x20000004
 8003188:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003196:	2b00      	cmp	r3, #0
 8003198:	d10f      	bne.n	80031ba <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 0210 	bic.w	r2, r2, #16
 80031a8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d003      	beq.n	80031ca <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d032      	beq.n	8003238 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d022      	beq.n	8003224 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2205      	movs	r2, #5
 80031e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 0201 	bic.w	r2, r2, #1
 80031f4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	3301      	adds	r3, #1
 80031fa:	60bb      	str	r3, [r7, #8]
 80031fc:	697a      	ldr	r2, [r7, #20]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d307      	bcc.n	8003212 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b00      	cmp	r3, #0
 800320e:	d1f2      	bne.n	80031f6 <HAL_DMA_IRQHandler+0x2ca>
 8003210:	e000      	b.n	8003214 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003212:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003228:	2b00      	cmp	r3, #0
 800322a:	d005      	beq.n	8003238 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	4798      	blx	r3
 8003234:	e000      	b.n	8003238 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003236:	bf00      	nop
    }
  }
}
 8003238:	3718      	adds	r7, #24
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop

08003240 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
 800324c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800325c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	2b40      	cmp	r3, #64	; 0x40
 800326c:	d108      	bne.n	8003280 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68ba      	ldr	r2, [r7, #8]
 800327c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800327e:	e007      	b.n	8003290 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68ba      	ldr	r2, [r7, #8]
 8003286:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	60da      	str	r2, [r3, #12]
}
 8003290:	bf00      	nop
 8003292:	3714      	adds	r7, #20
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	3b10      	subs	r3, #16
 80032ac:	4a14      	ldr	r2, [pc, #80]	; (8003300 <DMA_CalcBaseAndBitshift+0x64>)
 80032ae:	fba2 2303 	umull	r2, r3, r2, r3
 80032b2:	091b      	lsrs	r3, r3, #4
 80032b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80032b6:	4a13      	ldr	r2, [pc, #76]	; (8003304 <DMA_CalcBaseAndBitshift+0x68>)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	4413      	add	r3, r2
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	461a      	mov	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2b03      	cmp	r3, #3
 80032c8:	d909      	bls.n	80032de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032d2:	f023 0303 	bic.w	r3, r3, #3
 80032d6:	1d1a      	adds	r2, r3, #4
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	659a      	str	r2, [r3, #88]	; 0x58
 80032dc:	e007      	b.n	80032ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032e6:	f023 0303 	bic.w	r3, r3, #3
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3714      	adds	r7, #20
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	aaaaaaab 	.word	0xaaaaaaab
 8003304:	080076b8 	.word	0x080076b8

08003308 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003310:	2300      	movs	r3, #0
 8003312:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003318:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d11f      	bne.n	8003362 <DMA_CheckFifoParam+0x5a>
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	2b03      	cmp	r3, #3
 8003326:	d856      	bhi.n	80033d6 <DMA_CheckFifoParam+0xce>
 8003328:	a201      	add	r2, pc, #4	; (adr r2, 8003330 <DMA_CheckFifoParam+0x28>)
 800332a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332e:	bf00      	nop
 8003330:	08003341 	.word	0x08003341
 8003334:	08003353 	.word	0x08003353
 8003338:	08003341 	.word	0x08003341
 800333c:	080033d7 	.word	0x080033d7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003344:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d046      	beq.n	80033da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003350:	e043      	b.n	80033da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003356:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800335a:	d140      	bne.n	80033de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003360:	e03d      	b.n	80033de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800336a:	d121      	bne.n	80033b0 <DMA_CheckFifoParam+0xa8>
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	2b03      	cmp	r3, #3
 8003370:	d837      	bhi.n	80033e2 <DMA_CheckFifoParam+0xda>
 8003372:	a201      	add	r2, pc, #4	; (adr r2, 8003378 <DMA_CheckFifoParam+0x70>)
 8003374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003378:	08003389 	.word	0x08003389
 800337c:	0800338f 	.word	0x0800338f
 8003380:	08003389 	.word	0x08003389
 8003384:	080033a1 	.word	0x080033a1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	73fb      	strb	r3, [r7, #15]
      break;
 800338c:	e030      	b.n	80033f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003392:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d025      	beq.n	80033e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800339e:	e022      	b.n	80033e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80033a8:	d11f      	bne.n	80033ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80033ae:	e01c      	b.n	80033ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d903      	bls.n	80033be <DMA_CheckFifoParam+0xb6>
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	2b03      	cmp	r3, #3
 80033ba:	d003      	beq.n	80033c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80033bc:	e018      	b.n	80033f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	73fb      	strb	r3, [r7, #15]
      break;
 80033c2:	e015      	b.n	80033f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00e      	beq.n	80033ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	73fb      	strb	r3, [r7, #15]
      break;
 80033d4:	e00b      	b.n	80033ee <DMA_CheckFifoParam+0xe6>
      break;
 80033d6:	bf00      	nop
 80033d8:	e00a      	b.n	80033f0 <DMA_CheckFifoParam+0xe8>
      break;
 80033da:	bf00      	nop
 80033dc:	e008      	b.n	80033f0 <DMA_CheckFifoParam+0xe8>
      break;
 80033de:	bf00      	nop
 80033e0:	e006      	b.n	80033f0 <DMA_CheckFifoParam+0xe8>
      break;
 80033e2:	bf00      	nop
 80033e4:	e004      	b.n	80033f0 <DMA_CheckFifoParam+0xe8>
      break;
 80033e6:	bf00      	nop
 80033e8:	e002      	b.n	80033f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80033ea:	bf00      	nop
 80033ec:	e000      	b.n	80033f0 <DMA_CheckFifoParam+0xe8>
      break;
 80033ee:	bf00      	nop
    }
  } 
  
  return status; 
 80033f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3714      	adds	r7, #20
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop

08003400 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003400:	b480      	push	{r7}
 8003402:	b089      	sub	sp, #36	; 0x24
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800340a:	2300      	movs	r3, #0
 800340c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800340e:	2300      	movs	r3, #0
 8003410:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003412:	2300      	movs	r3, #0
 8003414:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003416:	2300      	movs	r3, #0
 8003418:	61fb      	str	r3, [r7, #28]
 800341a:	e159      	b.n	80036d0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800341c:	2201      	movs	r2, #1
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	697a      	ldr	r2, [r7, #20]
 800342c:	4013      	ands	r3, r2
 800342e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	429a      	cmp	r2, r3
 8003436:	f040 8148 	bne.w	80036ca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f003 0303 	and.w	r3, r3, #3
 8003442:	2b01      	cmp	r3, #1
 8003444:	d005      	beq.n	8003452 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800344e:	2b02      	cmp	r3, #2
 8003450:	d130      	bne.n	80034b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	2203      	movs	r2, #3
 800345e:	fa02 f303 	lsl.w	r3, r2, r3
 8003462:	43db      	mvns	r3, r3
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	4013      	ands	r3, r2
 8003468:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	68da      	ldr	r2, [r3, #12]
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	fa02 f303 	lsl.w	r3, r2, r3
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	4313      	orrs	r3, r2
 800347a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003488:	2201      	movs	r2, #1
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	43db      	mvns	r3, r3
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	4013      	ands	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	091b      	lsrs	r3, r3, #4
 800349e:	f003 0201 	and.w	r2, r3, #1
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	fa02 f303 	lsl.w	r3, r2, r3
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f003 0303 	and.w	r3, r3, #3
 80034bc:	2b03      	cmp	r3, #3
 80034be:	d017      	beq.n	80034f0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	2203      	movs	r2, #3
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	43db      	mvns	r3, r3
 80034d2:	69ba      	ldr	r2, [r7, #24]
 80034d4:	4013      	ands	r3, r2
 80034d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	689a      	ldr	r2, [r3, #8]
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f003 0303 	and.w	r3, r3, #3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d123      	bne.n	8003544 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	08da      	lsrs	r2, r3, #3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3208      	adds	r2, #8
 8003504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003508:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	f003 0307 	and.w	r3, r3, #7
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	220f      	movs	r2, #15
 8003514:	fa02 f303 	lsl.w	r3, r2, r3
 8003518:	43db      	mvns	r3, r3
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	4013      	ands	r3, r2
 800351e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	691a      	ldr	r2, [r3, #16]
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	f003 0307 	and.w	r3, r3, #7
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	fa02 f303 	lsl.w	r3, r2, r3
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	4313      	orrs	r3, r2
 8003534:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	08da      	lsrs	r2, r3, #3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	3208      	adds	r2, #8
 800353e:	69b9      	ldr	r1, [r7, #24]
 8003540:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	2203      	movs	r2, #3
 8003550:	fa02 f303 	lsl.w	r3, r2, r3
 8003554:	43db      	mvns	r3, r3
 8003556:	69ba      	ldr	r2, [r7, #24]
 8003558:	4013      	ands	r3, r2
 800355a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f003 0203 	and.w	r2, r3, #3
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	fa02 f303 	lsl.w	r3, r2, r3
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	4313      	orrs	r3, r2
 8003570:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003580:	2b00      	cmp	r3, #0
 8003582:	f000 80a2 	beq.w	80036ca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003586:	2300      	movs	r3, #0
 8003588:	60fb      	str	r3, [r7, #12]
 800358a:	4b57      	ldr	r3, [pc, #348]	; (80036e8 <HAL_GPIO_Init+0x2e8>)
 800358c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358e:	4a56      	ldr	r2, [pc, #344]	; (80036e8 <HAL_GPIO_Init+0x2e8>)
 8003590:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003594:	6453      	str	r3, [r2, #68]	; 0x44
 8003596:	4b54      	ldr	r3, [pc, #336]	; (80036e8 <HAL_GPIO_Init+0x2e8>)
 8003598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800359e:	60fb      	str	r3, [r7, #12]
 80035a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035a2:	4a52      	ldr	r2, [pc, #328]	; (80036ec <HAL_GPIO_Init+0x2ec>)
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	089b      	lsrs	r3, r3, #2
 80035a8:	3302      	adds	r3, #2
 80035aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	f003 0303 	and.w	r3, r3, #3
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	220f      	movs	r2, #15
 80035ba:	fa02 f303 	lsl.w	r3, r2, r3
 80035be:	43db      	mvns	r3, r3
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	4013      	ands	r3, r2
 80035c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a49      	ldr	r2, [pc, #292]	; (80036f0 <HAL_GPIO_Init+0x2f0>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d019      	beq.n	8003602 <HAL_GPIO_Init+0x202>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a48      	ldr	r2, [pc, #288]	; (80036f4 <HAL_GPIO_Init+0x2f4>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d013      	beq.n	80035fe <HAL_GPIO_Init+0x1fe>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a47      	ldr	r2, [pc, #284]	; (80036f8 <HAL_GPIO_Init+0x2f8>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d00d      	beq.n	80035fa <HAL_GPIO_Init+0x1fa>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a46      	ldr	r2, [pc, #280]	; (80036fc <HAL_GPIO_Init+0x2fc>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d007      	beq.n	80035f6 <HAL_GPIO_Init+0x1f6>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a45      	ldr	r2, [pc, #276]	; (8003700 <HAL_GPIO_Init+0x300>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d101      	bne.n	80035f2 <HAL_GPIO_Init+0x1f2>
 80035ee:	2304      	movs	r3, #4
 80035f0:	e008      	b.n	8003604 <HAL_GPIO_Init+0x204>
 80035f2:	2307      	movs	r3, #7
 80035f4:	e006      	b.n	8003604 <HAL_GPIO_Init+0x204>
 80035f6:	2303      	movs	r3, #3
 80035f8:	e004      	b.n	8003604 <HAL_GPIO_Init+0x204>
 80035fa:	2302      	movs	r3, #2
 80035fc:	e002      	b.n	8003604 <HAL_GPIO_Init+0x204>
 80035fe:	2301      	movs	r3, #1
 8003600:	e000      	b.n	8003604 <HAL_GPIO_Init+0x204>
 8003602:	2300      	movs	r3, #0
 8003604:	69fa      	ldr	r2, [r7, #28]
 8003606:	f002 0203 	and.w	r2, r2, #3
 800360a:	0092      	lsls	r2, r2, #2
 800360c:	4093      	lsls	r3, r2
 800360e:	69ba      	ldr	r2, [r7, #24]
 8003610:	4313      	orrs	r3, r2
 8003612:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003614:	4935      	ldr	r1, [pc, #212]	; (80036ec <HAL_GPIO_Init+0x2ec>)
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	089b      	lsrs	r3, r3, #2
 800361a:	3302      	adds	r3, #2
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003622:	4b38      	ldr	r3, [pc, #224]	; (8003704 <HAL_GPIO_Init+0x304>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	43db      	mvns	r3, r3
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	4013      	ands	r3, r2
 8003630:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d003      	beq.n	8003646 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800363e:	69ba      	ldr	r2, [r7, #24]
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	4313      	orrs	r3, r2
 8003644:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003646:	4a2f      	ldr	r2, [pc, #188]	; (8003704 <HAL_GPIO_Init+0x304>)
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800364c:	4b2d      	ldr	r3, [pc, #180]	; (8003704 <HAL_GPIO_Init+0x304>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	43db      	mvns	r3, r3
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	4013      	ands	r3, r2
 800365a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d003      	beq.n	8003670 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	4313      	orrs	r3, r2
 800366e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003670:	4a24      	ldr	r2, [pc, #144]	; (8003704 <HAL_GPIO_Init+0x304>)
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003676:	4b23      	ldr	r3, [pc, #140]	; (8003704 <HAL_GPIO_Init+0x304>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	43db      	mvns	r3, r3
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	4013      	ands	r3, r2
 8003684:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d003      	beq.n	800369a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003692:	69ba      	ldr	r2, [r7, #24]
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	4313      	orrs	r3, r2
 8003698:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800369a:	4a1a      	ldr	r2, [pc, #104]	; (8003704 <HAL_GPIO_Init+0x304>)
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036a0:	4b18      	ldr	r3, [pc, #96]	; (8003704 <HAL_GPIO_Init+0x304>)
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	43db      	mvns	r3, r3
 80036aa:	69ba      	ldr	r2, [r7, #24]
 80036ac:	4013      	ands	r3, r2
 80036ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d003      	beq.n	80036c4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036c4:	4a0f      	ldr	r2, [pc, #60]	; (8003704 <HAL_GPIO_Init+0x304>)
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	3301      	adds	r3, #1
 80036ce:	61fb      	str	r3, [r7, #28]
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	2b0f      	cmp	r3, #15
 80036d4:	f67f aea2 	bls.w	800341c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036d8:	bf00      	nop
 80036da:	bf00      	nop
 80036dc:	3724      	adds	r7, #36	; 0x24
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	40023800 	.word	0x40023800
 80036ec:	40013800 	.word	0x40013800
 80036f0:	40020000 	.word	0x40020000
 80036f4:	40020400 	.word	0x40020400
 80036f8:	40020800 	.word	0x40020800
 80036fc:	40020c00 	.word	0x40020c00
 8003700:	40021000 	.word	0x40021000
 8003704:	40013c00 	.word	0x40013c00

08003708 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	460b      	mov	r3, r1
 8003712:	807b      	strh	r3, [r7, #2]
 8003714:	4613      	mov	r3, r2
 8003716:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003718:	787b      	ldrb	r3, [r7, #1]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d003      	beq.n	8003726 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800371e:	887a      	ldrh	r2, [r7, #2]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003724:	e003      	b.n	800372e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003726:	887b      	ldrh	r3, [r7, #2]
 8003728:	041a      	lsls	r2, r3, #16
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	619a      	str	r2, [r3, #24]
}
 800372e:	bf00      	nop
 8003730:	370c      	adds	r7, #12
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
	...

0800373c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	4603      	mov	r3, r0
 8003744:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003746:	4b08      	ldr	r3, [pc, #32]	; (8003768 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003748:	695a      	ldr	r2, [r3, #20]
 800374a:	88fb      	ldrh	r3, [r7, #6]
 800374c:	4013      	ands	r3, r2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d006      	beq.n	8003760 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003752:	4a05      	ldr	r2, [pc, #20]	; (8003768 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003754:	88fb      	ldrh	r3, [r7, #6]
 8003756:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003758:	88fb      	ldrh	r3, [r7, #6]
 800375a:	4618      	mov	r0, r3
 800375c:	f7fe fa58 	bl	8001c10 <HAL_GPIO_EXTI_Callback>
  }
}
 8003760:	bf00      	nop
 8003762:	3708      	adds	r7, #8
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	40013c00 	.word	0x40013c00

0800376c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b086      	sub	sp, #24
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e264      	b.n	8003c48 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0301 	and.w	r3, r3, #1
 8003786:	2b00      	cmp	r3, #0
 8003788:	d075      	beq.n	8003876 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800378a:	4ba3      	ldr	r3, [pc, #652]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f003 030c 	and.w	r3, r3, #12
 8003792:	2b04      	cmp	r3, #4
 8003794:	d00c      	beq.n	80037b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003796:	4ba0      	ldr	r3, [pc, #640]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800379e:	2b08      	cmp	r3, #8
 80037a0:	d112      	bne.n	80037c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037a2:	4b9d      	ldr	r3, [pc, #628]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037ae:	d10b      	bne.n	80037c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037b0:	4b99      	ldr	r3, [pc, #612]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d05b      	beq.n	8003874 <HAL_RCC_OscConfig+0x108>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d157      	bne.n	8003874 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e23f      	b.n	8003c48 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037d0:	d106      	bne.n	80037e0 <HAL_RCC_OscConfig+0x74>
 80037d2:	4b91      	ldr	r3, [pc, #580]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a90      	ldr	r2, [pc, #576]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 80037d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037dc:	6013      	str	r3, [r2, #0]
 80037de:	e01d      	b.n	800381c <HAL_RCC_OscConfig+0xb0>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037e8:	d10c      	bne.n	8003804 <HAL_RCC_OscConfig+0x98>
 80037ea:	4b8b      	ldr	r3, [pc, #556]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a8a      	ldr	r2, [pc, #552]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 80037f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037f4:	6013      	str	r3, [r2, #0]
 80037f6:	4b88      	ldr	r3, [pc, #544]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a87      	ldr	r2, [pc, #540]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 80037fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003800:	6013      	str	r3, [r2, #0]
 8003802:	e00b      	b.n	800381c <HAL_RCC_OscConfig+0xb0>
 8003804:	4b84      	ldr	r3, [pc, #528]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a83      	ldr	r2, [pc, #524]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 800380a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800380e:	6013      	str	r3, [r2, #0]
 8003810:	4b81      	ldr	r3, [pc, #516]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a80      	ldr	r2, [pc, #512]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 8003816:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800381a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d013      	beq.n	800384c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003824:	f7fe fd5a 	bl	80022dc <HAL_GetTick>
 8003828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800382a:	e008      	b.n	800383e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800382c:	f7fe fd56 	bl	80022dc <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b64      	cmp	r3, #100	; 0x64
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e204      	b.n	8003c48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800383e:	4b76      	ldr	r3, [pc, #472]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d0f0      	beq.n	800382c <HAL_RCC_OscConfig+0xc0>
 800384a:	e014      	b.n	8003876 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800384c:	f7fe fd46 	bl	80022dc <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003852:	e008      	b.n	8003866 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003854:	f7fe fd42 	bl	80022dc <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b64      	cmp	r3, #100	; 0x64
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e1f0      	b.n	8003c48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003866:	4b6c      	ldr	r3, [pc, #432]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1f0      	bne.n	8003854 <HAL_RCC_OscConfig+0xe8>
 8003872:	e000      	b.n	8003876 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003874:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d063      	beq.n	800394a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003882:	4b65      	ldr	r3, [pc, #404]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f003 030c 	and.w	r3, r3, #12
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00b      	beq.n	80038a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800388e:	4b62      	ldr	r3, [pc, #392]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003896:	2b08      	cmp	r3, #8
 8003898:	d11c      	bne.n	80038d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800389a:	4b5f      	ldr	r3, [pc, #380]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d116      	bne.n	80038d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038a6:	4b5c      	ldr	r3, [pc, #368]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d005      	beq.n	80038be <HAL_RCC_OscConfig+0x152>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d001      	beq.n	80038be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e1c4      	b.n	8003c48 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038be:	4b56      	ldr	r3, [pc, #344]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	00db      	lsls	r3, r3, #3
 80038cc:	4952      	ldr	r1, [pc, #328]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038d2:	e03a      	b.n	800394a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d020      	beq.n	800391e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038dc:	4b4f      	ldr	r3, [pc, #316]	; (8003a1c <HAL_RCC_OscConfig+0x2b0>)
 80038de:	2201      	movs	r2, #1
 80038e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e2:	f7fe fcfb 	bl	80022dc <HAL_GetTick>
 80038e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038e8:	e008      	b.n	80038fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038ea:	f7fe fcf7 	bl	80022dc <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d901      	bls.n	80038fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e1a5      	b.n	8003c48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038fc:	4b46      	ldr	r3, [pc, #280]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d0f0      	beq.n	80038ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003908:	4b43      	ldr	r3, [pc, #268]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	00db      	lsls	r3, r3, #3
 8003916:	4940      	ldr	r1, [pc, #256]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 8003918:	4313      	orrs	r3, r2
 800391a:	600b      	str	r3, [r1, #0]
 800391c:	e015      	b.n	800394a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800391e:	4b3f      	ldr	r3, [pc, #252]	; (8003a1c <HAL_RCC_OscConfig+0x2b0>)
 8003920:	2200      	movs	r2, #0
 8003922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003924:	f7fe fcda 	bl	80022dc <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800392a:	e008      	b.n	800393e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800392c:	f7fe fcd6 	bl	80022dc <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e184      	b.n	8003c48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800393e:	4b36      	ldr	r3, [pc, #216]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1f0      	bne.n	800392c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0308 	and.w	r3, r3, #8
 8003952:	2b00      	cmp	r3, #0
 8003954:	d030      	beq.n	80039b8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d016      	beq.n	800398c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800395e:	4b30      	ldr	r3, [pc, #192]	; (8003a20 <HAL_RCC_OscConfig+0x2b4>)
 8003960:	2201      	movs	r2, #1
 8003962:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003964:	f7fe fcba 	bl	80022dc <HAL_GetTick>
 8003968:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800396a:	e008      	b.n	800397e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800396c:	f7fe fcb6 	bl	80022dc <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b02      	cmp	r3, #2
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e164      	b.n	8003c48 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800397e:	4b26      	ldr	r3, [pc, #152]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 8003980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d0f0      	beq.n	800396c <HAL_RCC_OscConfig+0x200>
 800398a:	e015      	b.n	80039b8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800398c:	4b24      	ldr	r3, [pc, #144]	; (8003a20 <HAL_RCC_OscConfig+0x2b4>)
 800398e:	2200      	movs	r2, #0
 8003990:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003992:	f7fe fca3 	bl	80022dc <HAL_GetTick>
 8003996:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003998:	e008      	b.n	80039ac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800399a:	f7fe fc9f 	bl	80022dc <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d901      	bls.n	80039ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e14d      	b.n	8003c48 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039ac:	4b1a      	ldr	r3, [pc, #104]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 80039ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1f0      	bne.n	800399a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0304 	and.w	r3, r3, #4
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f000 80a0 	beq.w	8003b06 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039c6:	2300      	movs	r3, #0
 80039c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039ca:	4b13      	ldr	r3, [pc, #76]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 80039cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10f      	bne.n	80039f6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039d6:	2300      	movs	r3, #0
 80039d8:	60bb      	str	r3, [r7, #8]
 80039da:	4b0f      	ldr	r3, [pc, #60]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 80039dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039de:	4a0e      	ldr	r2, [pc, #56]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 80039e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039e4:	6413      	str	r3, [r2, #64]	; 0x40
 80039e6:	4b0c      	ldr	r3, [pc, #48]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 80039e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ee:	60bb      	str	r3, [r7, #8]
 80039f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039f2:	2301      	movs	r3, #1
 80039f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f6:	4b0b      	ldr	r3, [pc, #44]	; (8003a24 <HAL_RCC_OscConfig+0x2b8>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d121      	bne.n	8003a46 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a02:	4b08      	ldr	r3, [pc, #32]	; (8003a24 <HAL_RCC_OscConfig+0x2b8>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a07      	ldr	r2, [pc, #28]	; (8003a24 <HAL_RCC_OscConfig+0x2b8>)
 8003a08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a0e:	f7fe fc65 	bl	80022dc <HAL_GetTick>
 8003a12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a14:	e011      	b.n	8003a3a <HAL_RCC_OscConfig+0x2ce>
 8003a16:	bf00      	nop
 8003a18:	40023800 	.word	0x40023800
 8003a1c:	42470000 	.word	0x42470000
 8003a20:	42470e80 	.word	0x42470e80
 8003a24:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a28:	f7fe fc58 	bl	80022dc <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e106      	b.n	8003c48 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a3a:	4b85      	ldr	r3, [pc, #532]	; (8003c50 <HAL_RCC_OscConfig+0x4e4>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d0f0      	beq.n	8003a28 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d106      	bne.n	8003a5c <HAL_RCC_OscConfig+0x2f0>
 8003a4e:	4b81      	ldr	r3, [pc, #516]	; (8003c54 <HAL_RCC_OscConfig+0x4e8>)
 8003a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a52:	4a80      	ldr	r2, [pc, #512]	; (8003c54 <HAL_RCC_OscConfig+0x4e8>)
 8003a54:	f043 0301 	orr.w	r3, r3, #1
 8003a58:	6713      	str	r3, [r2, #112]	; 0x70
 8003a5a:	e01c      	b.n	8003a96 <HAL_RCC_OscConfig+0x32a>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	2b05      	cmp	r3, #5
 8003a62:	d10c      	bne.n	8003a7e <HAL_RCC_OscConfig+0x312>
 8003a64:	4b7b      	ldr	r3, [pc, #492]	; (8003c54 <HAL_RCC_OscConfig+0x4e8>)
 8003a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a68:	4a7a      	ldr	r2, [pc, #488]	; (8003c54 <HAL_RCC_OscConfig+0x4e8>)
 8003a6a:	f043 0304 	orr.w	r3, r3, #4
 8003a6e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a70:	4b78      	ldr	r3, [pc, #480]	; (8003c54 <HAL_RCC_OscConfig+0x4e8>)
 8003a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a74:	4a77      	ldr	r2, [pc, #476]	; (8003c54 <HAL_RCC_OscConfig+0x4e8>)
 8003a76:	f043 0301 	orr.w	r3, r3, #1
 8003a7a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a7c:	e00b      	b.n	8003a96 <HAL_RCC_OscConfig+0x32a>
 8003a7e:	4b75      	ldr	r3, [pc, #468]	; (8003c54 <HAL_RCC_OscConfig+0x4e8>)
 8003a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a82:	4a74      	ldr	r2, [pc, #464]	; (8003c54 <HAL_RCC_OscConfig+0x4e8>)
 8003a84:	f023 0301 	bic.w	r3, r3, #1
 8003a88:	6713      	str	r3, [r2, #112]	; 0x70
 8003a8a:	4b72      	ldr	r3, [pc, #456]	; (8003c54 <HAL_RCC_OscConfig+0x4e8>)
 8003a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8e:	4a71      	ldr	r2, [pc, #452]	; (8003c54 <HAL_RCC_OscConfig+0x4e8>)
 8003a90:	f023 0304 	bic.w	r3, r3, #4
 8003a94:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d015      	beq.n	8003aca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a9e:	f7fe fc1d 	bl	80022dc <HAL_GetTick>
 8003aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aa4:	e00a      	b.n	8003abc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aa6:	f7fe fc19 	bl	80022dc <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d901      	bls.n	8003abc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e0c5      	b.n	8003c48 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003abc:	4b65      	ldr	r3, [pc, #404]	; (8003c54 <HAL_RCC_OscConfig+0x4e8>)
 8003abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac0:	f003 0302 	and.w	r3, r3, #2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d0ee      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x33a>
 8003ac8:	e014      	b.n	8003af4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aca:	f7fe fc07 	bl	80022dc <HAL_GetTick>
 8003ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ad0:	e00a      	b.n	8003ae8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ad2:	f7fe fc03 	bl	80022dc <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d901      	bls.n	8003ae8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e0af      	b.n	8003c48 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ae8:	4b5a      	ldr	r3, [pc, #360]	; (8003c54 <HAL_RCC_OscConfig+0x4e8>)
 8003aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aec:	f003 0302 	and.w	r3, r3, #2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1ee      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003af4:	7dfb      	ldrb	r3, [r7, #23]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d105      	bne.n	8003b06 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003afa:	4b56      	ldr	r3, [pc, #344]	; (8003c54 <HAL_RCC_OscConfig+0x4e8>)
 8003afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afe:	4a55      	ldr	r2, [pc, #340]	; (8003c54 <HAL_RCC_OscConfig+0x4e8>)
 8003b00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b04:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	f000 809b 	beq.w	8003c46 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b10:	4b50      	ldr	r3, [pc, #320]	; (8003c54 <HAL_RCC_OscConfig+0x4e8>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f003 030c 	and.w	r3, r3, #12
 8003b18:	2b08      	cmp	r3, #8
 8003b1a:	d05c      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d141      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b24:	4b4c      	ldr	r3, [pc, #304]	; (8003c58 <HAL_RCC_OscConfig+0x4ec>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b2a:	f7fe fbd7 	bl	80022dc <HAL_GetTick>
 8003b2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b30:	e008      	b.n	8003b44 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b32:	f7fe fbd3 	bl	80022dc <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d901      	bls.n	8003b44 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e081      	b.n	8003c48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b44:	4b43      	ldr	r3, [pc, #268]	; (8003c54 <HAL_RCC_OscConfig+0x4e8>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1f0      	bne.n	8003b32 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	69da      	ldr	r2, [r3, #28]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a1b      	ldr	r3, [r3, #32]
 8003b58:	431a      	orrs	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5e:	019b      	lsls	r3, r3, #6
 8003b60:	431a      	orrs	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b66:	085b      	lsrs	r3, r3, #1
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	041b      	lsls	r3, r3, #16
 8003b6c:	431a      	orrs	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b72:	061b      	lsls	r3, r3, #24
 8003b74:	4937      	ldr	r1, [pc, #220]	; (8003c54 <HAL_RCC_OscConfig+0x4e8>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b7a:	4b37      	ldr	r3, [pc, #220]	; (8003c58 <HAL_RCC_OscConfig+0x4ec>)
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b80:	f7fe fbac 	bl	80022dc <HAL_GetTick>
 8003b84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b86:	e008      	b.n	8003b9a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b88:	f7fe fba8 	bl	80022dc <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e056      	b.n	8003c48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b9a:	4b2e      	ldr	r3, [pc, #184]	; (8003c54 <HAL_RCC_OscConfig+0x4e8>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d0f0      	beq.n	8003b88 <HAL_RCC_OscConfig+0x41c>
 8003ba6:	e04e      	b.n	8003c46 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ba8:	4b2b      	ldr	r3, [pc, #172]	; (8003c58 <HAL_RCC_OscConfig+0x4ec>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bae:	f7fe fb95 	bl	80022dc <HAL_GetTick>
 8003bb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bb4:	e008      	b.n	8003bc8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bb6:	f7fe fb91 	bl	80022dc <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d901      	bls.n	8003bc8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e03f      	b.n	8003c48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bc8:	4b22      	ldr	r3, [pc, #136]	; (8003c54 <HAL_RCC_OscConfig+0x4e8>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1f0      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x44a>
 8003bd4:	e037      	b.n	8003c46 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d101      	bne.n	8003be2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e032      	b.n	8003c48 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003be2:	4b1c      	ldr	r3, [pc, #112]	; (8003c54 <HAL_RCC_OscConfig+0x4e8>)
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	699b      	ldr	r3, [r3, #24]
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d028      	beq.n	8003c42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d121      	bne.n	8003c42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d11a      	bne.n	8003c42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c12:	4013      	ands	r3, r2
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c18:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d111      	bne.n	8003c42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c28:	085b      	lsrs	r3, r3, #1
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d107      	bne.n	8003c42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d001      	beq.n	8003c46 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e000      	b.n	8003c48 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3718      	adds	r7, #24
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	40007000 	.word	0x40007000
 8003c54:	40023800 	.word	0x40023800
 8003c58:	42470060 	.word	0x42470060

08003c5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d101      	bne.n	8003c70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e0cc      	b.n	8003e0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c70:	4b68      	ldr	r3, [pc, #416]	; (8003e14 <HAL_RCC_ClockConfig+0x1b8>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0307 	and.w	r3, r3, #7
 8003c78:	683a      	ldr	r2, [r7, #0]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d90c      	bls.n	8003c98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c7e:	4b65      	ldr	r3, [pc, #404]	; (8003e14 <HAL_RCC_ClockConfig+0x1b8>)
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	b2d2      	uxtb	r2, r2
 8003c84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c86:	4b63      	ldr	r3, [pc, #396]	; (8003e14 <HAL_RCC_ClockConfig+0x1b8>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0307 	and.w	r3, r3, #7
 8003c8e:	683a      	ldr	r2, [r7, #0]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d001      	beq.n	8003c98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e0b8      	b.n	8003e0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0302 	and.w	r3, r3, #2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d020      	beq.n	8003ce6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d005      	beq.n	8003cbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cb0:	4b59      	ldr	r3, [pc, #356]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	4a58      	ldr	r2, [pc, #352]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0308 	and.w	r3, r3, #8
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d005      	beq.n	8003cd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cc8:	4b53      	ldr	r3, [pc, #332]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	4a52      	ldr	r2, [pc, #328]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003cce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003cd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cd4:	4b50      	ldr	r3, [pc, #320]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	494d      	ldr	r1, [pc, #308]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d044      	beq.n	8003d7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d107      	bne.n	8003d0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cfa:	4b47      	ldr	r3, [pc, #284]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d119      	bne.n	8003d3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e07f      	b.n	8003e0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d003      	beq.n	8003d1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d16:	2b03      	cmp	r3, #3
 8003d18:	d107      	bne.n	8003d2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d1a:	4b3f      	ldr	r3, [pc, #252]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d109      	bne.n	8003d3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e06f      	b.n	8003e0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d2a:	4b3b      	ldr	r3, [pc, #236]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e067      	b.n	8003e0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d3a:	4b37      	ldr	r3, [pc, #220]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f023 0203 	bic.w	r2, r3, #3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	4934      	ldr	r1, [pc, #208]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d4c:	f7fe fac6 	bl	80022dc <HAL_GetTick>
 8003d50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d52:	e00a      	b.n	8003d6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d54:	f7fe fac2 	bl	80022dc <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e04f      	b.n	8003e0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d6a:	4b2b      	ldr	r3, [pc, #172]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f003 020c 	and.w	r2, r3, #12
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d1eb      	bne.n	8003d54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d7c:	4b25      	ldr	r3, [pc, #148]	; (8003e14 <HAL_RCC_ClockConfig+0x1b8>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0307 	and.w	r3, r3, #7
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d20c      	bcs.n	8003da4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d8a:	4b22      	ldr	r3, [pc, #136]	; (8003e14 <HAL_RCC_ClockConfig+0x1b8>)
 8003d8c:	683a      	ldr	r2, [r7, #0]
 8003d8e:	b2d2      	uxtb	r2, r2
 8003d90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d92:	4b20      	ldr	r3, [pc, #128]	; (8003e14 <HAL_RCC_ClockConfig+0x1b8>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0307 	and.w	r3, r3, #7
 8003d9a:	683a      	ldr	r2, [r7, #0]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d001      	beq.n	8003da4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e032      	b.n	8003e0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0304 	and.w	r3, r3, #4
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d008      	beq.n	8003dc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003db0:	4b19      	ldr	r3, [pc, #100]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	4916      	ldr	r1, [pc, #88]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0308 	and.w	r3, r3, #8
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d009      	beq.n	8003de2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dce:	4b12      	ldr	r3, [pc, #72]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	00db      	lsls	r3, r3, #3
 8003ddc:	490e      	ldr	r1, [pc, #56]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003de2:	f000 f821 	bl	8003e28 <HAL_RCC_GetSysClockFreq>
 8003de6:	4602      	mov	r2, r0
 8003de8:	4b0b      	ldr	r3, [pc, #44]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	091b      	lsrs	r3, r3, #4
 8003dee:	f003 030f 	and.w	r3, r3, #15
 8003df2:	490a      	ldr	r1, [pc, #40]	; (8003e1c <HAL_RCC_ClockConfig+0x1c0>)
 8003df4:	5ccb      	ldrb	r3, [r1, r3]
 8003df6:	fa22 f303 	lsr.w	r3, r2, r3
 8003dfa:	4a09      	ldr	r2, [pc, #36]	; (8003e20 <HAL_RCC_ClockConfig+0x1c4>)
 8003dfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003dfe:	4b09      	ldr	r3, [pc, #36]	; (8003e24 <HAL_RCC_ClockConfig+0x1c8>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7fe fa26 	bl	8002254 <HAL_InitTick>

  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	40023c00 	.word	0x40023c00
 8003e18:	40023800 	.word	0x40023800
 8003e1c:	080076a0 	.word	0x080076a0
 8003e20:	20000004 	.word	0x20000004
 8003e24:	20000008 	.word	0x20000008

08003e28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003e2c:	b084      	sub	sp, #16
 8003e2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e30:	2300      	movs	r3, #0
 8003e32:	607b      	str	r3, [r7, #4]
 8003e34:	2300      	movs	r3, #0
 8003e36:	60fb      	str	r3, [r7, #12]
 8003e38:	2300      	movs	r3, #0
 8003e3a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e40:	4b67      	ldr	r3, [pc, #412]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f003 030c 	and.w	r3, r3, #12
 8003e48:	2b08      	cmp	r3, #8
 8003e4a:	d00d      	beq.n	8003e68 <HAL_RCC_GetSysClockFreq+0x40>
 8003e4c:	2b08      	cmp	r3, #8
 8003e4e:	f200 80bd 	bhi.w	8003fcc <HAL_RCC_GetSysClockFreq+0x1a4>
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d002      	beq.n	8003e5c <HAL_RCC_GetSysClockFreq+0x34>
 8003e56:	2b04      	cmp	r3, #4
 8003e58:	d003      	beq.n	8003e62 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e5a:	e0b7      	b.n	8003fcc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e5c:	4b61      	ldr	r3, [pc, #388]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003e5e:	60bb      	str	r3, [r7, #8]
       break;
 8003e60:	e0b7      	b.n	8003fd2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e62:	4b61      	ldr	r3, [pc, #388]	; (8003fe8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003e64:	60bb      	str	r3, [r7, #8]
      break;
 8003e66:	e0b4      	b.n	8003fd2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e68:	4b5d      	ldr	r3, [pc, #372]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e70:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e72:	4b5b      	ldr	r3, [pc, #364]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d04d      	beq.n	8003f1a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e7e:	4b58      	ldr	r3, [pc, #352]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	099b      	lsrs	r3, r3, #6
 8003e84:	461a      	mov	r2, r3
 8003e86:	f04f 0300 	mov.w	r3, #0
 8003e8a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003e8e:	f04f 0100 	mov.w	r1, #0
 8003e92:	ea02 0800 	and.w	r8, r2, r0
 8003e96:	ea03 0901 	and.w	r9, r3, r1
 8003e9a:	4640      	mov	r0, r8
 8003e9c:	4649      	mov	r1, r9
 8003e9e:	f04f 0200 	mov.w	r2, #0
 8003ea2:	f04f 0300 	mov.w	r3, #0
 8003ea6:	014b      	lsls	r3, r1, #5
 8003ea8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003eac:	0142      	lsls	r2, r0, #5
 8003eae:	4610      	mov	r0, r2
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	ebb0 0008 	subs.w	r0, r0, r8
 8003eb6:	eb61 0109 	sbc.w	r1, r1, r9
 8003eba:	f04f 0200 	mov.w	r2, #0
 8003ebe:	f04f 0300 	mov.w	r3, #0
 8003ec2:	018b      	lsls	r3, r1, #6
 8003ec4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003ec8:	0182      	lsls	r2, r0, #6
 8003eca:	1a12      	subs	r2, r2, r0
 8003ecc:	eb63 0301 	sbc.w	r3, r3, r1
 8003ed0:	f04f 0000 	mov.w	r0, #0
 8003ed4:	f04f 0100 	mov.w	r1, #0
 8003ed8:	00d9      	lsls	r1, r3, #3
 8003eda:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ede:	00d0      	lsls	r0, r2, #3
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	eb12 0208 	adds.w	r2, r2, r8
 8003ee8:	eb43 0309 	adc.w	r3, r3, r9
 8003eec:	f04f 0000 	mov.w	r0, #0
 8003ef0:	f04f 0100 	mov.w	r1, #0
 8003ef4:	0259      	lsls	r1, r3, #9
 8003ef6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003efa:	0250      	lsls	r0, r2, #9
 8003efc:	4602      	mov	r2, r0
 8003efe:	460b      	mov	r3, r1
 8003f00:	4610      	mov	r0, r2
 8003f02:	4619      	mov	r1, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	461a      	mov	r2, r3
 8003f08:	f04f 0300 	mov.w	r3, #0
 8003f0c:	f7fc fe52 	bl	8000bb4 <__aeabi_uldivmod>
 8003f10:	4602      	mov	r2, r0
 8003f12:	460b      	mov	r3, r1
 8003f14:	4613      	mov	r3, r2
 8003f16:	60fb      	str	r3, [r7, #12]
 8003f18:	e04a      	b.n	8003fb0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f1a:	4b31      	ldr	r3, [pc, #196]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	099b      	lsrs	r3, r3, #6
 8003f20:	461a      	mov	r2, r3
 8003f22:	f04f 0300 	mov.w	r3, #0
 8003f26:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003f2a:	f04f 0100 	mov.w	r1, #0
 8003f2e:	ea02 0400 	and.w	r4, r2, r0
 8003f32:	ea03 0501 	and.w	r5, r3, r1
 8003f36:	4620      	mov	r0, r4
 8003f38:	4629      	mov	r1, r5
 8003f3a:	f04f 0200 	mov.w	r2, #0
 8003f3e:	f04f 0300 	mov.w	r3, #0
 8003f42:	014b      	lsls	r3, r1, #5
 8003f44:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003f48:	0142      	lsls	r2, r0, #5
 8003f4a:	4610      	mov	r0, r2
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	1b00      	subs	r0, r0, r4
 8003f50:	eb61 0105 	sbc.w	r1, r1, r5
 8003f54:	f04f 0200 	mov.w	r2, #0
 8003f58:	f04f 0300 	mov.w	r3, #0
 8003f5c:	018b      	lsls	r3, r1, #6
 8003f5e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003f62:	0182      	lsls	r2, r0, #6
 8003f64:	1a12      	subs	r2, r2, r0
 8003f66:	eb63 0301 	sbc.w	r3, r3, r1
 8003f6a:	f04f 0000 	mov.w	r0, #0
 8003f6e:	f04f 0100 	mov.w	r1, #0
 8003f72:	00d9      	lsls	r1, r3, #3
 8003f74:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f78:	00d0      	lsls	r0, r2, #3
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	1912      	adds	r2, r2, r4
 8003f80:	eb45 0303 	adc.w	r3, r5, r3
 8003f84:	f04f 0000 	mov.w	r0, #0
 8003f88:	f04f 0100 	mov.w	r1, #0
 8003f8c:	0299      	lsls	r1, r3, #10
 8003f8e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003f92:	0290      	lsls	r0, r2, #10
 8003f94:	4602      	mov	r2, r0
 8003f96:	460b      	mov	r3, r1
 8003f98:	4610      	mov	r0, r2
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	f04f 0300 	mov.w	r3, #0
 8003fa4:	f7fc fe06 	bl	8000bb4 <__aeabi_uldivmod>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	460b      	mov	r3, r1
 8003fac:	4613      	mov	r3, r2
 8003fae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003fb0:	4b0b      	ldr	r3, [pc, #44]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	0c1b      	lsrs	r3, r3, #16
 8003fb6:	f003 0303 	and.w	r3, r3, #3
 8003fba:	3301      	adds	r3, #1
 8003fbc:	005b      	lsls	r3, r3, #1
 8003fbe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc8:	60bb      	str	r3, [r7, #8]
      break;
 8003fca:	e002      	b.n	8003fd2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fcc:	4b05      	ldr	r3, [pc, #20]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003fce:	60bb      	str	r3, [r7, #8]
      break;
 8003fd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fd2:	68bb      	ldr	r3, [r7, #8]
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003fde:	bf00      	nop
 8003fe0:	40023800 	.word	0x40023800
 8003fe4:	00f42400 	.word	0x00f42400
 8003fe8:	007a1200 	.word	0x007a1200

08003fec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fec:	b480      	push	{r7}
 8003fee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ff0:	4b03      	ldr	r3, [pc, #12]	; (8004000 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	20000004 	.word	0x20000004

08004004 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004008:	f7ff fff0 	bl	8003fec <HAL_RCC_GetHCLKFreq>
 800400c:	4602      	mov	r2, r0
 800400e:	4b05      	ldr	r3, [pc, #20]	; (8004024 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	0a9b      	lsrs	r3, r3, #10
 8004014:	f003 0307 	and.w	r3, r3, #7
 8004018:	4903      	ldr	r1, [pc, #12]	; (8004028 <HAL_RCC_GetPCLK1Freq+0x24>)
 800401a:	5ccb      	ldrb	r3, [r1, r3]
 800401c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004020:	4618      	mov	r0, r3
 8004022:	bd80      	pop	{r7, pc}
 8004024:	40023800 	.word	0x40023800
 8004028:	080076b0 	.word	0x080076b0

0800402c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004030:	f7ff ffdc 	bl	8003fec <HAL_RCC_GetHCLKFreq>
 8004034:	4602      	mov	r2, r0
 8004036:	4b05      	ldr	r3, [pc, #20]	; (800404c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	0b5b      	lsrs	r3, r3, #13
 800403c:	f003 0307 	and.w	r3, r3, #7
 8004040:	4903      	ldr	r1, [pc, #12]	; (8004050 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004042:	5ccb      	ldrb	r3, [r1, r3]
 8004044:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004048:	4618      	mov	r0, r3
 800404a:	bd80      	pop	{r7, pc}
 800404c:	40023800 	.word	0x40023800
 8004050:	080076b0 	.word	0x080076b0

08004054 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e041      	b.n	80040ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d106      	bne.n	8004080 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f7fd fe58 	bl	8001d30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2202      	movs	r2, #2
 8004084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	3304      	adds	r3, #4
 8004090:	4619      	mov	r1, r3
 8004092:	4610      	mov	r0, r2
 8004094:	f000 ff0c 	bl	8004eb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3708      	adds	r7, #8
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
	...

080040f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004102:	b2db      	uxtb	r3, r3
 8004104:	2b01      	cmp	r3, #1
 8004106:	d001      	beq.n	800410c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e044      	b.n	8004196 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2202      	movs	r2, #2
 8004110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68da      	ldr	r2, [r3, #12]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f042 0201 	orr.w	r2, r2, #1
 8004122:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a1e      	ldr	r2, [pc, #120]	; (80041a4 <HAL_TIM_Base_Start_IT+0xb0>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d018      	beq.n	8004160 <HAL_TIM_Base_Start_IT+0x6c>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004136:	d013      	beq.n	8004160 <HAL_TIM_Base_Start_IT+0x6c>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a1a      	ldr	r2, [pc, #104]	; (80041a8 <HAL_TIM_Base_Start_IT+0xb4>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d00e      	beq.n	8004160 <HAL_TIM_Base_Start_IT+0x6c>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a19      	ldr	r2, [pc, #100]	; (80041ac <HAL_TIM_Base_Start_IT+0xb8>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d009      	beq.n	8004160 <HAL_TIM_Base_Start_IT+0x6c>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a17      	ldr	r2, [pc, #92]	; (80041b0 <HAL_TIM_Base_Start_IT+0xbc>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d004      	beq.n	8004160 <HAL_TIM_Base_Start_IT+0x6c>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a16      	ldr	r2, [pc, #88]	; (80041b4 <HAL_TIM_Base_Start_IT+0xc0>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d111      	bne.n	8004184 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f003 0307 	and.w	r3, r3, #7
 800416a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2b06      	cmp	r3, #6
 8004170:	d010      	beq.n	8004194 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f042 0201 	orr.w	r2, r2, #1
 8004180:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004182:	e007      	b.n	8004194 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f042 0201 	orr.w	r2, r2, #1
 8004192:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3714      	adds	r7, #20
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	40010000 	.word	0x40010000
 80041a8:	40000400 	.word	0x40000400
 80041ac:	40000800 	.word	0x40000800
 80041b0:	40000c00 	.word	0x40000c00
 80041b4:	40014000 	.word	0x40014000

080041b8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68da      	ldr	r2, [r3, #12]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f022 0201 	bic.w	r2, r2, #1
 80041ce:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	6a1a      	ldr	r2, [r3, #32]
 80041d6:	f241 1311 	movw	r3, #4369	; 0x1111
 80041da:	4013      	ands	r3, r2
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d10f      	bne.n	8004200 <HAL_TIM_Base_Stop_IT+0x48>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	6a1a      	ldr	r2, [r3, #32]
 80041e6:	f240 4344 	movw	r3, #1092	; 0x444
 80041ea:	4013      	ands	r3, r2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d107      	bne.n	8004200 <HAL_TIM_Base_Stop_IT+0x48>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f022 0201 	bic.w	r2, r2, #1
 80041fe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr

08004216 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004216:	b580      	push	{r7, lr}
 8004218:	b082      	sub	sp, #8
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d101      	bne.n	8004228 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e041      	b.n	80042ac <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800422e:	b2db      	uxtb	r3, r3
 8004230:	2b00      	cmp	r3, #0
 8004232:	d106      	bne.n	8004242 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f000 f839 	bl	80042b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2202      	movs	r2, #2
 8004246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	3304      	adds	r3, #4
 8004252:	4619      	mov	r1, r3
 8004254:	4610      	mov	r0, r2
 8004256:	f000 fe2b 	bl	8004eb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2201      	movs	r2, #1
 800427e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2201      	movs	r2, #1
 800428e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3708      	adds	r7, #8
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b086      	sub	sp, #24
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]
 80042d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d109      	bne.n	80042f0 <HAL_TIM_PWM_Start_DMA+0x28>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	bf0c      	ite	eq
 80042e8:	2301      	moveq	r3, #1
 80042ea:	2300      	movne	r3, #0
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	e022      	b.n	8004336 <HAL_TIM_PWM_Start_DMA+0x6e>
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	2b04      	cmp	r3, #4
 80042f4:	d109      	bne.n	800430a <HAL_TIM_PWM_Start_DMA+0x42>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b02      	cmp	r3, #2
 8004300:	bf0c      	ite	eq
 8004302:	2301      	moveq	r3, #1
 8004304:	2300      	movne	r3, #0
 8004306:	b2db      	uxtb	r3, r3
 8004308:	e015      	b.n	8004336 <HAL_TIM_PWM_Start_DMA+0x6e>
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	2b08      	cmp	r3, #8
 800430e:	d109      	bne.n	8004324 <HAL_TIM_PWM_Start_DMA+0x5c>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004316:	b2db      	uxtb	r3, r3
 8004318:	2b02      	cmp	r3, #2
 800431a:	bf0c      	ite	eq
 800431c:	2301      	moveq	r3, #1
 800431e:	2300      	movne	r3, #0
 8004320:	b2db      	uxtb	r3, r3
 8004322:	e008      	b.n	8004336 <HAL_TIM_PWM_Start_DMA+0x6e>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800432a:	b2db      	uxtb	r3, r3
 800432c:	2b02      	cmp	r3, #2
 800432e:	bf0c      	ite	eq
 8004330:	2301      	moveq	r3, #1
 8004332:	2300      	movne	r3, #0
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d001      	beq.n	800433e <HAL_TIM_PWM_Start_DMA+0x76>
  {
    return HAL_BUSY;
 800433a:	2302      	movs	r3, #2
 800433c:	e158      	b.n	80045f0 <HAL_TIM_PWM_Start_DMA+0x328>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d109      	bne.n	8004358 <HAL_TIM_PWM_Start_DMA+0x90>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800434a:	b2db      	uxtb	r3, r3
 800434c:	2b01      	cmp	r3, #1
 800434e:	bf0c      	ite	eq
 8004350:	2301      	moveq	r3, #1
 8004352:	2300      	movne	r3, #0
 8004354:	b2db      	uxtb	r3, r3
 8004356:	e022      	b.n	800439e <HAL_TIM_PWM_Start_DMA+0xd6>
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	2b04      	cmp	r3, #4
 800435c:	d109      	bne.n	8004372 <HAL_TIM_PWM_Start_DMA+0xaa>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b01      	cmp	r3, #1
 8004368:	bf0c      	ite	eq
 800436a:	2301      	moveq	r3, #1
 800436c:	2300      	movne	r3, #0
 800436e:	b2db      	uxtb	r3, r3
 8004370:	e015      	b.n	800439e <HAL_TIM_PWM_Start_DMA+0xd6>
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	2b08      	cmp	r3, #8
 8004376:	d109      	bne.n	800438c <HAL_TIM_PWM_Start_DMA+0xc4>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800437e:	b2db      	uxtb	r3, r3
 8004380:	2b01      	cmp	r3, #1
 8004382:	bf0c      	ite	eq
 8004384:	2301      	moveq	r3, #1
 8004386:	2300      	movne	r3, #0
 8004388:	b2db      	uxtb	r3, r3
 800438a:	e008      	b.n	800439e <HAL_TIM_PWM_Start_DMA+0xd6>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004392:	b2db      	uxtb	r3, r3
 8004394:	2b01      	cmp	r3, #1
 8004396:	bf0c      	ite	eq
 8004398:	2301      	moveq	r3, #1
 800439a:	2300      	movne	r3, #0
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d024      	beq.n	80043ec <HAL_TIM_PWM_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d104      	bne.n	80043b2 <HAL_TIM_PWM_Start_DMA+0xea>
 80043a8:	887b      	ldrh	r3, [r7, #2]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d001      	beq.n	80043b2 <HAL_TIM_PWM_Start_DMA+0xea>
    {
      return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e11e      	b.n	80045f0 <HAL_TIM_PWM_Start_DMA+0x328>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d104      	bne.n	80043c2 <HAL_TIM_PWM_Start_DMA+0xfa>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2202      	movs	r2, #2
 80043bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043c0:	e016      	b.n	80043f0 <HAL_TIM_PWM_Start_DMA+0x128>
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	2b04      	cmp	r3, #4
 80043c6:	d104      	bne.n	80043d2 <HAL_TIM_PWM_Start_DMA+0x10a>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2202      	movs	r2, #2
 80043cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043d0:	e00e      	b.n	80043f0 <HAL_TIM_PWM_Start_DMA+0x128>
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	2b08      	cmp	r3, #8
 80043d6:	d104      	bne.n	80043e2 <HAL_TIM_PWM_Start_DMA+0x11a>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2202      	movs	r2, #2
 80043dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043e0:	e006      	b.n	80043f0 <HAL_TIM_PWM_Start_DMA+0x128>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2202      	movs	r2, #2
 80043e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043ea:	e001      	b.n	80043f0 <HAL_TIM_PWM_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e0ff      	b.n	80045f0 <HAL_TIM_PWM_Start_DMA+0x328>
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	2b0c      	cmp	r3, #12
 80043f4:	f200 80ae 	bhi.w	8004554 <HAL_TIM_PWM_Start_DMA+0x28c>
 80043f8:	a201      	add	r2, pc, #4	; (adr r2, 8004400 <HAL_TIM_PWM_Start_DMA+0x138>)
 80043fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043fe:	bf00      	nop
 8004400:	08004435 	.word	0x08004435
 8004404:	08004555 	.word	0x08004555
 8004408:	08004555 	.word	0x08004555
 800440c:	08004555 	.word	0x08004555
 8004410:	0800447d 	.word	0x0800447d
 8004414:	08004555 	.word	0x08004555
 8004418:	08004555 	.word	0x08004555
 800441c:	08004555 	.word	0x08004555
 8004420:	080044c5 	.word	0x080044c5
 8004424:	08004555 	.word	0x08004555
 8004428:	08004555 	.word	0x08004555
 800442c:	08004555 	.word	0x08004555
 8004430:	0800450d 	.word	0x0800450d
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004438:	4a6f      	ldr	r2, [pc, #444]	; (80045f8 <HAL_TIM_PWM_Start_DMA+0x330>)
 800443a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004440:	4a6e      	ldr	r2, [pc, #440]	; (80045fc <HAL_TIM_PWM_Start_DMA+0x334>)
 8004442:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004448:	4a6d      	ldr	r2, [pc, #436]	; (8004600 <HAL_TIM_PWM_Start_DMA+0x338>)
 800444a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004450:	6879      	ldr	r1, [r7, #4]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	3334      	adds	r3, #52	; 0x34
 8004458:	461a      	mov	r2, r3
 800445a:	887b      	ldrh	r3, [r7, #2]
 800445c:	f7fe fcec 	bl	8002e38 <HAL_DMA_Start_IT>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d001      	beq.n	800446a <HAL_TIM_PWM_Start_DMA+0x1a2>
      {
        /* Return error status */
        return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e0c2      	b.n	80045f0 <HAL_TIM_PWM_Start_DMA+0x328>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68da      	ldr	r2, [r3, #12]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004478:	60da      	str	r2, [r3, #12]
      break;
 800447a:	e06c      	b.n	8004556 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004480:	4a5d      	ldr	r2, [pc, #372]	; (80045f8 <HAL_TIM_PWM_Start_DMA+0x330>)
 8004482:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004488:	4a5c      	ldr	r2, [pc, #368]	; (80045fc <HAL_TIM_PWM_Start_DMA+0x334>)
 800448a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004490:	4a5b      	ldr	r2, [pc, #364]	; (8004600 <HAL_TIM_PWM_Start_DMA+0x338>)
 8004492:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004498:	6879      	ldr	r1, [r7, #4]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	3338      	adds	r3, #56	; 0x38
 80044a0:	461a      	mov	r2, r3
 80044a2:	887b      	ldrh	r3, [r7, #2]
 80044a4:	f7fe fcc8 	bl	8002e38 <HAL_DMA_Start_IT>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d001      	beq.n	80044b2 <HAL_TIM_PWM_Start_DMA+0x1ea>
      {
        /* Return error status */
        return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e09e      	b.n	80045f0 <HAL_TIM_PWM_Start_DMA+0x328>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68da      	ldr	r2, [r3, #12]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80044c0:	60da      	str	r2, [r3, #12]
      break;
 80044c2:	e048      	b.n	8004556 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c8:	4a4b      	ldr	r2, [pc, #300]	; (80045f8 <HAL_TIM_PWM_Start_DMA+0x330>)
 80044ca:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d0:	4a4a      	ldr	r2, [pc, #296]	; (80045fc <HAL_TIM_PWM_Start_DMA+0x334>)
 80044d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d8:	4a49      	ldr	r2, [pc, #292]	; (8004600 <HAL_TIM_PWM_Start_DMA+0x338>)
 80044da:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80044e0:	6879      	ldr	r1, [r7, #4]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	333c      	adds	r3, #60	; 0x3c
 80044e8:	461a      	mov	r2, r3
 80044ea:	887b      	ldrh	r3, [r7, #2]
 80044ec:	f7fe fca4 	bl	8002e38 <HAL_DMA_Start_IT>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <HAL_TIM_PWM_Start_DMA+0x232>
      {
        /* Return error status */
        return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e07a      	b.n	80045f0 <HAL_TIM_PWM_Start_DMA+0x328>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68da      	ldr	r2, [r3, #12]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004508:	60da      	str	r2, [r3, #12]
      break;
 800450a:	e024      	b.n	8004556 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004510:	4a39      	ldr	r2, [pc, #228]	; (80045f8 <HAL_TIM_PWM_Start_DMA+0x330>)
 8004512:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004518:	4a38      	ldr	r2, [pc, #224]	; (80045fc <HAL_TIM_PWM_Start_DMA+0x334>)
 800451a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004520:	4a37      	ldr	r2, [pc, #220]	; (8004600 <HAL_TIM_PWM_Start_DMA+0x338>)
 8004522:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004528:	6879      	ldr	r1, [r7, #4]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	3340      	adds	r3, #64	; 0x40
 8004530:	461a      	mov	r2, r3
 8004532:	887b      	ldrh	r3, [r7, #2]
 8004534:	f7fe fc80 	bl	8002e38 <HAL_DMA_Start_IT>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d001      	beq.n	8004542 <HAL_TIM_PWM_Start_DMA+0x27a>
      {
        /* Return error status */
        return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e056      	b.n	80045f0 <HAL_TIM_PWM_Start_DMA+0x328>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68da      	ldr	r2, [r3, #12]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004550:	60da      	str	r2, [r3, #12]
      break;
 8004552:	e000      	b.n	8004556 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    default:
      break;
 8004554:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2201      	movs	r2, #1
 800455c:	68b9      	ldr	r1, [r7, #8]
 800455e:	4618      	mov	r0, r3
 8004560:	f000 ff4c 	bl	80053fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a26      	ldr	r2, [pc, #152]	; (8004604 <HAL_TIM_PWM_Start_DMA+0x33c>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d107      	bne.n	800457e <HAL_TIM_PWM_Start_DMA+0x2b6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800457c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a20      	ldr	r2, [pc, #128]	; (8004604 <HAL_TIM_PWM_Start_DMA+0x33c>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d018      	beq.n	80045ba <HAL_TIM_PWM_Start_DMA+0x2f2>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004590:	d013      	beq.n	80045ba <HAL_TIM_PWM_Start_DMA+0x2f2>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a1c      	ldr	r2, [pc, #112]	; (8004608 <HAL_TIM_PWM_Start_DMA+0x340>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d00e      	beq.n	80045ba <HAL_TIM_PWM_Start_DMA+0x2f2>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a1a      	ldr	r2, [pc, #104]	; (800460c <HAL_TIM_PWM_Start_DMA+0x344>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d009      	beq.n	80045ba <HAL_TIM_PWM_Start_DMA+0x2f2>
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a19      	ldr	r2, [pc, #100]	; (8004610 <HAL_TIM_PWM_Start_DMA+0x348>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d004      	beq.n	80045ba <HAL_TIM_PWM_Start_DMA+0x2f2>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a17      	ldr	r2, [pc, #92]	; (8004614 <HAL_TIM_PWM_Start_DMA+0x34c>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d111      	bne.n	80045de <HAL_TIM_PWM_Start_DMA+0x316>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f003 0307 	and.w	r3, r3, #7
 80045c4:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	2b06      	cmp	r3, #6
 80045ca:	d010      	beq.n	80045ee <HAL_TIM_PWM_Start_DMA+0x326>
    {
      __HAL_TIM_ENABLE(htim);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f042 0201 	orr.w	r2, r2, #1
 80045da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045dc:	e007      	b.n	80045ee <HAL_TIM_PWM_Start_DMA+0x326>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f042 0201 	orr.w	r2, r2, #1
 80045ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3718      	adds	r7, #24
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	08004d9f 	.word	0x08004d9f
 80045fc:	08004e47 	.word	0x08004e47
 8004600:	08004d0d 	.word	0x08004d0d
 8004604:	40010000 	.word	0x40010000
 8004608:	40000400 	.word	0x40000400
 800460c:	40000800 	.word	0x40000800
 8004610:	40000c00 	.word	0x40000c00
 8004614:	40014000 	.word	0x40014000

08004618 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	2b0c      	cmp	r3, #12
 8004626:	d855      	bhi.n	80046d4 <HAL_TIM_PWM_Stop_DMA+0xbc>
 8004628:	a201      	add	r2, pc, #4	; (adr r2, 8004630 <HAL_TIM_PWM_Stop_DMA+0x18>)
 800462a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800462e:	bf00      	nop
 8004630:	08004665 	.word	0x08004665
 8004634:	080046d5 	.word	0x080046d5
 8004638:	080046d5 	.word	0x080046d5
 800463c:	080046d5 	.word	0x080046d5
 8004640:	08004681 	.word	0x08004681
 8004644:	080046d5 	.word	0x080046d5
 8004648:	080046d5 	.word	0x080046d5
 800464c:	080046d5 	.word	0x080046d5
 8004650:	0800469d 	.word	0x0800469d
 8004654:	080046d5 	.word	0x080046d5
 8004658:	080046d5 	.word	0x080046d5
 800465c:	080046d5 	.word	0x080046d5
 8004660:	080046b9 	.word	0x080046b9
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68da      	ldr	r2, [r3, #12]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004672:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004678:	4618      	mov	r0, r3
 800467a:	f7fe fc35 	bl	8002ee8 <HAL_DMA_Abort_IT>
      break;
 800467e:	e02a      	b.n	80046d6 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68da      	ldr	r2, [r3, #12]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800468e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004694:	4618      	mov	r0, r3
 8004696:	f7fe fc27 	bl	8002ee8 <HAL_DMA_Abort_IT>
      break;
 800469a:	e01c      	b.n	80046d6 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68da      	ldr	r2, [r3, #12]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046aa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b0:	4618      	mov	r0, r3
 80046b2:	f7fe fc19 	bl	8002ee8 <HAL_DMA_Abort_IT>
      break;
 80046b6:	e00e      	b.n	80046d6 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68da      	ldr	r2, [r3, #12]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046c6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7fe fc0b 	bl	8002ee8 <HAL_DMA_Abort_IT>
      break;
 80046d2:	e000      	b.n	80046d6 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 80046d4:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2200      	movs	r2, #0
 80046dc:	6839      	ldr	r1, [r7, #0]
 80046de:	4618      	mov	r0, r3
 80046e0:	f000 fe8c 	bl	80053fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a29      	ldr	r2, [pc, #164]	; (8004790 <HAL_TIM_PWM_Stop_DMA+0x178>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d117      	bne.n	800471e <HAL_TIM_PWM_Stop_DMA+0x106>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	6a1a      	ldr	r2, [r3, #32]
 80046f4:	f241 1311 	movw	r3, #4369	; 0x1111
 80046f8:	4013      	ands	r3, r2
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d10f      	bne.n	800471e <HAL_TIM_PWM_Stop_DMA+0x106>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	6a1a      	ldr	r2, [r3, #32]
 8004704:	f240 4344 	movw	r3, #1092	; 0x444
 8004708:	4013      	ands	r3, r2
 800470a:	2b00      	cmp	r3, #0
 800470c:	d107      	bne.n	800471e <HAL_TIM_PWM_Stop_DMA+0x106>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800471c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	6a1a      	ldr	r2, [r3, #32]
 8004724:	f241 1311 	movw	r3, #4369	; 0x1111
 8004728:	4013      	ands	r3, r2
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10f      	bne.n	800474e <HAL_TIM_PWM_Stop_DMA+0x136>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	6a1a      	ldr	r2, [r3, #32]
 8004734:	f240 4344 	movw	r3, #1092	; 0x444
 8004738:	4013      	ands	r3, r2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d107      	bne.n	800474e <HAL_TIM_PWM_Stop_DMA+0x136>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f022 0201 	bic.w	r2, r2, #1
 800474c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d104      	bne.n	800475e <HAL_TIM_PWM_Stop_DMA+0x146>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800475c:	e013      	b.n	8004786 <HAL_TIM_PWM_Stop_DMA+0x16e>
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	2b04      	cmp	r3, #4
 8004762:	d104      	bne.n	800476e <HAL_TIM_PWM_Stop_DMA+0x156>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800476c:	e00b      	b.n	8004786 <HAL_TIM_PWM_Stop_DMA+0x16e>
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	2b08      	cmp	r3, #8
 8004772:	d104      	bne.n	800477e <HAL_TIM_PWM_Stop_DMA+0x166>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800477c:	e003      	b.n	8004786 <HAL_TIM_PWM_Stop_DMA+0x16e>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2201      	movs	r2, #1
 8004782:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	3708      	adds	r7, #8
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	40010000 	.word	0x40010000

08004794 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d122      	bne.n	80047f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	f003 0302 	and.w	r3, r3, #2
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d11b      	bne.n	80047f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f06f 0202 	mvn.w	r2, #2
 80047c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2201      	movs	r2, #1
 80047c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	f003 0303 	and.w	r3, r3, #3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d003      	beq.n	80047de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 fa7a 	bl	8004cd0 <HAL_TIM_IC_CaptureCallback>
 80047dc:	e005      	b.n	80047ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 fa6c 	bl	8004cbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f7fc fe9d 	bl	8001524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	f003 0304 	and.w	r3, r3, #4
 80047fa:	2b04      	cmp	r3, #4
 80047fc:	d122      	bne.n	8004844 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	f003 0304 	and.w	r3, r3, #4
 8004808:	2b04      	cmp	r3, #4
 800480a:	d11b      	bne.n	8004844 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f06f 0204 	mvn.w	r2, #4
 8004814:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2202      	movs	r2, #2
 800481a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004826:	2b00      	cmp	r3, #0
 8004828:	d003      	beq.n	8004832 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 fa50 	bl	8004cd0 <HAL_TIM_IC_CaptureCallback>
 8004830:	e005      	b.n	800483e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 fa42 	bl	8004cbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f7fc fe73 	bl	8001524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	f003 0308 	and.w	r3, r3, #8
 800484e:	2b08      	cmp	r3, #8
 8004850:	d122      	bne.n	8004898 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	f003 0308 	and.w	r3, r3, #8
 800485c:	2b08      	cmp	r3, #8
 800485e:	d11b      	bne.n	8004898 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f06f 0208 	mvn.w	r2, #8
 8004868:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2204      	movs	r2, #4
 800486e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	69db      	ldr	r3, [r3, #28]
 8004876:	f003 0303 	and.w	r3, r3, #3
 800487a:	2b00      	cmp	r3, #0
 800487c:	d003      	beq.n	8004886 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 fa26 	bl	8004cd0 <HAL_TIM_IC_CaptureCallback>
 8004884:	e005      	b.n	8004892 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 fa18 	bl	8004cbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f7fc fe49 	bl	8001524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	f003 0310 	and.w	r3, r3, #16
 80048a2:	2b10      	cmp	r3, #16
 80048a4:	d122      	bne.n	80048ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	f003 0310 	and.w	r3, r3, #16
 80048b0:	2b10      	cmp	r3, #16
 80048b2:	d11b      	bne.n	80048ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f06f 0210 	mvn.w	r2, #16
 80048bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2208      	movs	r2, #8
 80048c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	69db      	ldr	r3, [r3, #28]
 80048ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d003      	beq.n	80048da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f9fc 	bl	8004cd0 <HAL_TIM_IC_CaptureCallback>
 80048d8:	e005      	b.n	80048e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 f9ee 	bl	8004cbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f7fc fe1f 	bl	8001524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d10e      	bne.n	8004918 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	f003 0301 	and.w	r3, r3, #1
 8004904:	2b01      	cmp	r3, #1
 8004906:	d107      	bne.n	8004918 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f06f 0201 	mvn.w	r2, #1
 8004910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 f9c8 	bl	8004ca8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004922:	2b80      	cmp	r3, #128	; 0x80
 8004924:	d10e      	bne.n	8004944 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004930:	2b80      	cmp	r3, #128	; 0x80
 8004932:	d107      	bne.n	8004944 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800493c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 fe4c 	bl	80055dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800494e:	2b40      	cmp	r3, #64	; 0x40
 8004950:	d10e      	bne.n	8004970 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800495c:	2b40      	cmp	r3, #64	; 0x40
 800495e:	d107      	bne.n	8004970 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 f9ba 	bl	8004ce4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	f003 0320 	and.w	r3, r3, #32
 800497a:	2b20      	cmp	r3, #32
 800497c:	d10e      	bne.n	800499c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	f003 0320 	and.w	r3, r3, #32
 8004988:	2b20      	cmp	r3, #32
 800498a:	d107      	bne.n	800499c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f06f 0220 	mvn.w	r2, #32
 8004994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 fe16 	bl	80055c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800499c:	bf00      	nop
 800499e:	3708      	adds	r7, #8
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d101      	bne.n	80049be <HAL_TIM_PWM_ConfigChannel+0x1a>
 80049ba:	2302      	movs	r3, #2
 80049bc:	e0ac      	b.n	8004b18 <HAL_TIM_PWM_ConfigChannel+0x174>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2b0c      	cmp	r3, #12
 80049ca:	f200 809f 	bhi.w	8004b0c <HAL_TIM_PWM_ConfigChannel+0x168>
 80049ce:	a201      	add	r2, pc, #4	; (adr r2, 80049d4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80049d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d4:	08004a09 	.word	0x08004a09
 80049d8:	08004b0d 	.word	0x08004b0d
 80049dc:	08004b0d 	.word	0x08004b0d
 80049e0:	08004b0d 	.word	0x08004b0d
 80049e4:	08004a49 	.word	0x08004a49
 80049e8:	08004b0d 	.word	0x08004b0d
 80049ec:	08004b0d 	.word	0x08004b0d
 80049f0:	08004b0d 	.word	0x08004b0d
 80049f4:	08004a8b 	.word	0x08004a8b
 80049f8:	08004b0d 	.word	0x08004b0d
 80049fc:	08004b0d 	.word	0x08004b0d
 8004a00:	08004b0d 	.word	0x08004b0d
 8004a04:	08004acb 	.word	0x08004acb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68b9      	ldr	r1, [r7, #8]
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f000 face 	bl	8004fb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	699a      	ldr	r2, [r3, #24]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f042 0208 	orr.w	r2, r2, #8
 8004a22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	699a      	ldr	r2, [r3, #24]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f022 0204 	bic.w	r2, r2, #4
 8004a32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	6999      	ldr	r1, [r3, #24]
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	691a      	ldr	r2, [r3, #16]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	430a      	orrs	r2, r1
 8004a44:	619a      	str	r2, [r3, #24]
      break;
 8004a46:	e062      	b.n	8004b0e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68b9      	ldr	r1, [r7, #8]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 fb14 	bl	800507c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	699a      	ldr	r2, [r3, #24]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	699a      	ldr	r2, [r3, #24]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	6999      	ldr	r1, [r3, #24]
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	021a      	lsls	r2, r3, #8
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	430a      	orrs	r2, r1
 8004a86:	619a      	str	r2, [r3, #24]
      break;
 8004a88:	e041      	b.n	8004b0e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68b9      	ldr	r1, [r7, #8]
 8004a90:	4618      	mov	r0, r3
 8004a92:	f000 fb5f 	bl	8005154 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	69da      	ldr	r2, [r3, #28]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f042 0208 	orr.w	r2, r2, #8
 8004aa4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	69da      	ldr	r2, [r3, #28]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f022 0204 	bic.w	r2, r2, #4
 8004ab4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	69d9      	ldr	r1, [r3, #28]
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	691a      	ldr	r2, [r3, #16]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	61da      	str	r2, [r3, #28]
      break;
 8004ac8:	e021      	b.n	8004b0e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	68b9      	ldr	r1, [r7, #8]
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f000 fba9 	bl	8005228 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	69da      	ldr	r2, [r3, #28]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ae4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	69da      	ldr	r2, [r3, #28]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004af4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	69d9      	ldr	r1, [r3, #28]
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	021a      	lsls	r2, r3, #8
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	430a      	orrs	r2, r1
 8004b08:	61da      	str	r2, [r3, #28]
      break;
 8004b0a:	e000      	b.n	8004b0e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004b0c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3710      	adds	r7, #16
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d101      	bne.n	8004b38 <HAL_TIM_ConfigClockSource+0x18>
 8004b34:	2302      	movs	r3, #2
 8004b36:	e0b3      	b.n	8004ca0 <HAL_TIM_ConfigClockSource+0x180>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2202      	movs	r2, #2
 8004b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b56:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b5e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b70:	d03e      	beq.n	8004bf0 <HAL_TIM_ConfigClockSource+0xd0>
 8004b72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b76:	f200 8087 	bhi.w	8004c88 <HAL_TIM_ConfigClockSource+0x168>
 8004b7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b7e:	f000 8085 	beq.w	8004c8c <HAL_TIM_ConfigClockSource+0x16c>
 8004b82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b86:	d87f      	bhi.n	8004c88 <HAL_TIM_ConfigClockSource+0x168>
 8004b88:	2b70      	cmp	r3, #112	; 0x70
 8004b8a:	d01a      	beq.n	8004bc2 <HAL_TIM_ConfigClockSource+0xa2>
 8004b8c:	2b70      	cmp	r3, #112	; 0x70
 8004b8e:	d87b      	bhi.n	8004c88 <HAL_TIM_ConfigClockSource+0x168>
 8004b90:	2b60      	cmp	r3, #96	; 0x60
 8004b92:	d050      	beq.n	8004c36 <HAL_TIM_ConfigClockSource+0x116>
 8004b94:	2b60      	cmp	r3, #96	; 0x60
 8004b96:	d877      	bhi.n	8004c88 <HAL_TIM_ConfigClockSource+0x168>
 8004b98:	2b50      	cmp	r3, #80	; 0x50
 8004b9a:	d03c      	beq.n	8004c16 <HAL_TIM_ConfigClockSource+0xf6>
 8004b9c:	2b50      	cmp	r3, #80	; 0x50
 8004b9e:	d873      	bhi.n	8004c88 <HAL_TIM_ConfigClockSource+0x168>
 8004ba0:	2b40      	cmp	r3, #64	; 0x40
 8004ba2:	d058      	beq.n	8004c56 <HAL_TIM_ConfigClockSource+0x136>
 8004ba4:	2b40      	cmp	r3, #64	; 0x40
 8004ba6:	d86f      	bhi.n	8004c88 <HAL_TIM_ConfigClockSource+0x168>
 8004ba8:	2b30      	cmp	r3, #48	; 0x30
 8004baa:	d064      	beq.n	8004c76 <HAL_TIM_ConfigClockSource+0x156>
 8004bac:	2b30      	cmp	r3, #48	; 0x30
 8004bae:	d86b      	bhi.n	8004c88 <HAL_TIM_ConfigClockSource+0x168>
 8004bb0:	2b20      	cmp	r3, #32
 8004bb2:	d060      	beq.n	8004c76 <HAL_TIM_ConfigClockSource+0x156>
 8004bb4:	2b20      	cmp	r3, #32
 8004bb6:	d867      	bhi.n	8004c88 <HAL_TIM_ConfigClockSource+0x168>
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d05c      	beq.n	8004c76 <HAL_TIM_ConfigClockSource+0x156>
 8004bbc:	2b10      	cmp	r3, #16
 8004bbe:	d05a      	beq.n	8004c76 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004bc0:	e062      	b.n	8004c88 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6818      	ldr	r0, [r3, #0]
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	6899      	ldr	r1, [r3, #8]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	685a      	ldr	r2, [r3, #4]
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	f000 fbf3 	bl	80053bc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004be4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	609a      	str	r2, [r3, #8]
      break;
 8004bee:	e04e      	b.n	8004c8e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6818      	ldr	r0, [r3, #0]
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	6899      	ldr	r1, [r3, #8]
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	685a      	ldr	r2, [r3, #4]
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	f000 fbdc 	bl	80053bc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	689a      	ldr	r2, [r3, #8]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c12:	609a      	str	r2, [r3, #8]
      break;
 8004c14:	e03b      	b.n	8004c8e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6818      	ldr	r0, [r3, #0]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	6859      	ldr	r1, [r3, #4]
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	461a      	mov	r2, r3
 8004c24:	f000 fb50 	bl	80052c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2150      	movs	r1, #80	; 0x50
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f000 fba9 	bl	8005386 <TIM_ITRx_SetConfig>
      break;
 8004c34:	e02b      	b.n	8004c8e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6818      	ldr	r0, [r3, #0]
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	6859      	ldr	r1, [r3, #4]
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	461a      	mov	r2, r3
 8004c44:	f000 fb6f 	bl	8005326 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2160      	movs	r1, #96	; 0x60
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f000 fb99 	bl	8005386 <TIM_ITRx_SetConfig>
      break;
 8004c54:	e01b      	b.n	8004c8e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6818      	ldr	r0, [r3, #0]
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	6859      	ldr	r1, [r3, #4]
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	461a      	mov	r2, r3
 8004c64:	f000 fb30 	bl	80052c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2140      	movs	r1, #64	; 0x40
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f000 fb89 	bl	8005386 <TIM_ITRx_SetConfig>
      break;
 8004c74:	e00b      	b.n	8004c8e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4619      	mov	r1, r3
 8004c80:	4610      	mov	r0, r2
 8004c82:	f000 fb80 	bl	8005386 <TIM_ITRx_SetConfig>
        break;
 8004c86:	e002      	b.n	8004c8e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004c88:	bf00      	nop
 8004c8a:	e000      	b.n	8004c8e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004c8c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3710      	adds	r7, #16
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cc4:	bf00      	nop
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cd8:	bf00      	nop
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cec:	bf00      	nop
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004d00:	bf00      	nop
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d18:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d107      	bne.n	8004d34 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2201      	movs	r2, #1
 8004d28:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d32:	e02a      	b.n	8004d8a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d107      	bne.n	8004d4e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2202      	movs	r2, #2
 8004d42:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d4c:	e01d      	b.n	8004d8a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d107      	bne.n	8004d68 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2204      	movs	r2, #4
 8004d5c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2201      	movs	r2, #1
 8004d62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d66:	e010      	b.n	8004d8a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d107      	bne.n	8004d82 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2208      	movs	r2, #8
 8004d76:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d80:	e003      	b.n	8004d8a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2201      	movs	r2, #1
 8004d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004d8a:	68f8      	ldr	r0, [r7, #12]
 8004d8c:	f7ff ffb4 	bl	8004cf8 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	771a      	strb	r2, [r3, #28]
}
 8004d96:	bf00      	nop
 8004d98:	3710      	adds	r7, #16
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}

08004d9e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004d9e:	b580      	push	{r7, lr}
 8004da0:	b084      	sub	sp, #16
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004daa:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d10b      	bne.n	8004dce <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2201      	movs	r2, #1
 8004dba:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	69db      	ldr	r3, [r3, #28]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d136      	bne.n	8004e32 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dcc:	e031      	b.n	8004e32 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d10b      	bne.n	8004df0 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2202      	movs	r2, #2
 8004ddc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	69db      	ldr	r3, [r3, #28]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d125      	bne.n	8004e32 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dee:	e020      	b.n	8004e32 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d10b      	bne.n	8004e12 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2204      	movs	r2, #4
 8004dfe:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	69db      	ldr	r3, [r3, #28]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d114      	bne.n	8004e32 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e10:	e00f      	b.n	8004e32 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d10a      	bne.n	8004e32 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2208      	movs	r2, #8
 8004e20:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	69db      	ldr	r3, [r3, #28]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d103      	bne.n	8004e32 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e32:	68f8      	ldr	r0, [r7, #12]
 8004e34:	f7fc fb76 	bl	8001524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	771a      	strb	r2, [r3, #28]
}
 8004e3e:	bf00      	nop
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}

08004e46 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004e46:	b580      	push	{r7, lr}
 8004e48:	b084      	sub	sp, #16
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e52:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d103      	bne.n	8004e66 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2201      	movs	r2, #1
 8004e62:	771a      	strb	r2, [r3, #28]
 8004e64:	e019      	b.n	8004e9a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d103      	bne.n	8004e78 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2202      	movs	r2, #2
 8004e74:	771a      	strb	r2, [r3, #28]
 8004e76:	e010      	b.n	8004e9a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d103      	bne.n	8004e8a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2204      	movs	r2, #4
 8004e86:	771a      	strb	r2, [r3, #28]
 8004e88:	e007      	b.n	8004e9a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d102      	bne.n	8004e9a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2208      	movs	r2, #8
 8004e98:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004e9a:	68f8      	ldr	r0, [r7, #12]
 8004e9c:	f7fc fac2 	bl	8001424 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	771a      	strb	r2, [r3, #28]
}
 8004ea6:	bf00      	nop
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
	...

08004eb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b085      	sub	sp, #20
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a34      	ldr	r2, [pc, #208]	; (8004f94 <TIM_Base_SetConfig+0xe4>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d00f      	beq.n	8004ee8 <TIM_Base_SetConfig+0x38>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ece:	d00b      	beq.n	8004ee8 <TIM_Base_SetConfig+0x38>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a31      	ldr	r2, [pc, #196]	; (8004f98 <TIM_Base_SetConfig+0xe8>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d007      	beq.n	8004ee8 <TIM_Base_SetConfig+0x38>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a30      	ldr	r2, [pc, #192]	; (8004f9c <TIM_Base_SetConfig+0xec>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d003      	beq.n	8004ee8 <TIM_Base_SetConfig+0x38>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a2f      	ldr	r2, [pc, #188]	; (8004fa0 <TIM_Base_SetConfig+0xf0>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d108      	bne.n	8004efa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a25      	ldr	r2, [pc, #148]	; (8004f94 <TIM_Base_SetConfig+0xe4>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d01b      	beq.n	8004f3a <TIM_Base_SetConfig+0x8a>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f08:	d017      	beq.n	8004f3a <TIM_Base_SetConfig+0x8a>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a22      	ldr	r2, [pc, #136]	; (8004f98 <TIM_Base_SetConfig+0xe8>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d013      	beq.n	8004f3a <TIM_Base_SetConfig+0x8a>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a21      	ldr	r2, [pc, #132]	; (8004f9c <TIM_Base_SetConfig+0xec>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d00f      	beq.n	8004f3a <TIM_Base_SetConfig+0x8a>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a20      	ldr	r2, [pc, #128]	; (8004fa0 <TIM_Base_SetConfig+0xf0>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d00b      	beq.n	8004f3a <TIM_Base_SetConfig+0x8a>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a1f      	ldr	r2, [pc, #124]	; (8004fa4 <TIM_Base_SetConfig+0xf4>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d007      	beq.n	8004f3a <TIM_Base_SetConfig+0x8a>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a1e      	ldr	r2, [pc, #120]	; (8004fa8 <TIM_Base_SetConfig+0xf8>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d003      	beq.n	8004f3a <TIM_Base_SetConfig+0x8a>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a1d      	ldr	r2, [pc, #116]	; (8004fac <TIM_Base_SetConfig+0xfc>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d108      	bne.n	8004f4c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	689a      	ldr	r2, [r3, #8]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a08      	ldr	r2, [pc, #32]	; (8004f94 <TIM_Base_SetConfig+0xe4>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d103      	bne.n	8004f80 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	691a      	ldr	r2, [r3, #16]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	615a      	str	r2, [r3, #20]
}
 8004f86:	bf00      	nop
 8004f88:	3714      	adds	r7, #20
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	40010000 	.word	0x40010000
 8004f98:	40000400 	.word	0x40000400
 8004f9c:	40000800 	.word	0x40000800
 8004fa0:	40000c00 	.word	0x40000c00
 8004fa4:	40014000 	.word	0x40014000
 8004fa8:	40014400 	.word	0x40014400
 8004fac:	40014800 	.word	0x40014800

08004fb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b087      	sub	sp, #28
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	f023 0201 	bic.w	r2, r3, #1
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f023 0303 	bic.w	r3, r3, #3
 8004fe6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	f023 0302 	bic.w	r3, r3, #2
 8004ff8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	4313      	orrs	r3, r2
 8005002:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a1c      	ldr	r2, [pc, #112]	; (8005078 <TIM_OC1_SetConfig+0xc8>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d10c      	bne.n	8005026 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	f023 0308 	bic.w	r3, r3, #8
 8005012:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	697a      	ldr	r2, [r7, #20]
 800501a:	4313      	orrs	r3, r2
 800501c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	f023 0304 	bic.w	r3, r3, #4
 8005024:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a13      	ldr	r2, [pc, #76]	; (8005078 <TIM_OC1_SetConfig+0xc8>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d111      	bne.n	8005052 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005034:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800503c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	4313      	orrs	r3, r2
 8005046:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	699b      	ldr	r3, [r3, #24]
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	4313      	orrs	r3, r2
 8005050:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	693a      	ldr	r2, [r7, #16]
 8005056:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	685a      	ldr	r2, [r3, #4]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	697a      	ldr	r2, [r7, #20]
 800506a:	621a      	str	r2, [r3, #32]
}
 800506c:	bf00      	nop
 800506e:	371c      	adds	r7, #28
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr
 8005078:	40010000 	.word	0x40010000

0800507c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800507c:	b480      	push	{r7}
 800507e:	b087      	sub	sp, #28
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	f023 0210 	bic.w	r2, r3, #16
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	021b      	lsls	r3, r3, #8
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	4313      	orrs	r3, r2
 80050be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	f023 0320 	bic.w	r3, r3, #32
 80050c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	011b      	lsls	r3, r3, #4
 80050ce:	697a      	ldr	r2, [r7, #20]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a1e      	ldr	r2, [pc, #120]	; (8005150 <TIM_OC2_SetConfig+0xd4>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d10d      	bne.n	80050f8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	011b      	lsls	r3, r3, #4
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a15      	ldr	r2, [pc, #84]	; (8005150 <TIM_OC2_SetConfig+0xd4>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d113      	bne.n	8005128 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005106:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800510e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	695b      	ldr	r3, [r3, #20]
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	693a      	ldr	r2, [r7, #16]
 8005118:	4313      	orrs	r3, r2
 800511a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	693a      	ldr	r2, [r7, #16]
 8005124:	4313      	orrs	r3, r2
 8005126:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	685a      	ldr	r2, [r3, #4]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	621a      	str	r2, [r3, #32]
}
 8005142:	bf00      	nop
 8005144:	371c      	adds	r7, #28
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	40010000 	.word	0x40010000

08005154 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005154:	b480      	push	{r7}
 8005156:	b087      	sub	sp, #28
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a1b      	ldr	r3, [r3, #32]
 8005162:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a1b      	ldr	r3, [r3, #32]
 800516e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	69db      	ldr	r3, [r3, #28]
 800517a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f023 0303 	bic.w	r3, r3, #3
 800518a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	4313      	orrs	r3, r2
 8005194:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800519c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	021b      	lsls	r3, r3, #8
 80051a4:	697a      	ldr	r2, [r7, #20]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a1d      	ldr	r2, [pc, #116]	; (8005224 <TIM_OC3_SetConfig+0xd0>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d10d      	bne.n	80051ce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	021b      	lsls	r3, r3, #8
 80051c0:	697a      	ldr	r2, [r7, #20]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a14      	ldr	r2, [pc, #80]	; (8005224 <TIM_OC3_SetConfig+0xd0>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d113      	bne.n	80051fe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	011b      	lsls	r3, r3, #4
 80051ec:	693a      	ldr	r2, [r7, #16]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	011b      	lsls	r3, r3, #4
 80051f8:	693a      	ldr	r2, [r7, #16]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	685a      	ldr	r2, [r3, #4]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	697a      	ldr	r2, [r7, #20]
 8005216:	621a      	str	r2, [r3, #32]
}
 8005218:	bf00      	nop
 800521a:	371c      	adds	r7, #28
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr
 8005224:	40010000 	.word	0x40010000

08005228 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005228:	b480      	push	{r7}
 800522a:	b087      	sub	sp, #28
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a1b      	ldr	r3, [r3, #32]
 8005236:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a1b      	ldr	r3, [r3, #32]
 8005242:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	69db      	ldr	r3, [r3, #28]
 800524e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800525e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	021b      	lsls	r3, r3, #8
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	4313      	orrs	r3, r2
 800526a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005272:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	031b      	lsls	r3, r3, #12
 800527a:	693a      	ldr	r2, [r7, #16]
 800527c:	4313      	orrs	r3, r2
 800527e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a10      	ldr	r2, [pc, #64]	; (80052c4 <TIM_OC4_SetConfig+0x9c>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d109      	bne.n	800529c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800528e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	695b      	ldr	r3, [r3, #20]
 8005294:	019b      	lsls	r3, r3, #6
 8005296:	697a      	ldr	r2, [r7, #20]
 8005298:	4313      	orrs	r3, r2
 800529a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	685a      	ldr	r2, [r3, #4]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	621a      	str	r2, [r3, #32]
}
 80052b6:	bf00      	nop
 80052b8:	371c      	adds	r7, #28
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	40010000 	.word	0x40010000

080052c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b087      	sub	sp, #28
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6a1b      	ldr	r3, [r3, #32]
 80052d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6a1b      	ldr	r3, [r3, #32]
 80052de:	f023 0201 	bic.w	r2, r3, #1
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	011b      	lsls	r3, r3, #4
 80052f8:	693a      	ldr	r2, [r7, #16]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	f023 030a 	bic.w	r3, r3, #10
 8005304:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	4313      	orrs	r3, r2
 800530c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	693a      	ldr	r2, [r7, #16]
 8005312:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	621a      	str	r2, [r3, #32]
}
 800531a:	bf00      	nop
 800531c:	371c      	adds	r7, #28
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr

08005326 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005326:	b480      	push	{r7}
 8005328:	b087      	sub	sp, #28
 800532a:	af00      	add	r7, sp, #0
 800532c:	60f8      	str	r0, [r7, #12]
 800532e:	60b9      	str	r1, [r7, #8]
 8005330:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	f023 0210 	bic.w	r2, r3, #16
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6a1b      	ldr	r3, [r3, #32]
 8005348:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005350:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	031b      	lsls	r3, r3, #12
 8005356:	697a      	ldr	r2, [r7, #20]
 8005358:	4313      	orrs	r3, r2
 800535a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005362:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	011b      	lsls	r3, r3, #4
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	4313      	orrs	r3, r2
 800536c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	693a      	ldr	r2, [r7, #16]
 8005378:	621a      	str	r2, [r3, #32]
}
 800537a:	bf00      	nop
 800537c:	371c      	adds	r7, #28
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr

08005386 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005386:	b480      	push	{r7}
 8005388:	b085      	sub	sp, #20
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
 800538e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800539c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800539e:	683a      	ldr	r2, [r7, #0]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	f043 0307 	orr.w	r3, r3, #7
 80053a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	609a      	str	r2, [r3, #8]
}
 80053b0:	bf00      	nop
 80053b2:	3714      	adds	r7, #20
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053bc:	b480      	push	{r7}
 80053be:	b087      	sub	sp, #28
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	607a      	str	r2, [r7, #4]
 80053c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	021a      	lsls	r2, r3, #8
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	431a      	orrs	r2, r3
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	697a      	ldr	r2, [r7, #20]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	609a      	str	r2, [r3, #8]
}
 80053f0:	bf00      	nop
 80053f2:	371c      	adds	r7, #28
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b087      	sub	sp, #28
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	f003 031f 	and.w	r3, r3, #31
 800540e:	2201      	movs	r2, #1
 8005410:	fa02 f303 	lsl.w	r3, r2, r3
 8005414:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6a1a      	ldr	r2, [r3, #32]
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	43db      	mvns	r3, r3
 800541e:	401a      	ands	r2, r3
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6a1a      	ldr	r2, [r3, #32]
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	f003 031f 	and.w	r3, r3, #31
 800542e:	6879      	ldr	r1, [r7, #4]
 8005430:	fa01 f303 	lsl.w	r3, r1, r3
 8005434:	431a      	orrs	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	621a      	str	r2, [r3, #32]
}
 800543a:	bf00      	nop
 800543c:	371c      	adds	r7, #28
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
	...

08005448 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005458:	2b01      	cmp	r3, #1
 800545a:	d101      	bne.n	8005460 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800545c:	2302      	movs	r3, #2
 800545e:	e050      	b.n	8005502 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2202      	movs	r2, #2
 800546c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005486:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	4313      	orrs	r3, r2
 8005490:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a1c      	ldr	r2, [pc, #112]	; (8005510 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d018      	beq.n	80054d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054ac:	d013      	beq.n	80054d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a18      	ldr	r2, [pc, #96]	; (8005514 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d00e      	beq.n	80054d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a16      	ldr	r2, [pc, #88]	; (8005518 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d009      	beq.n	80054d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a15      	ldr	r2, [pc, #84]	; (800551c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d004      	beq.n	80054d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a13      	ldr	r2, [pc, #76]	; (8005520 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d10c      	bne.n	80054f0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	68ba      	ldr	r2, [r7, #8]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68ba      	ldr	r2, [r7, #8]
 80054ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3714      	adds	r7, #20
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	40010000 	.word	0x40010000
 8005514:	40000400 	.word	0x40000400
 8005518:	40000800 	.word	0x40000800
 800551c:	40000c00 	.word	0x40000c00
 8005520:	40014000 	.word	0x40014000

08005524 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800552e:	2300      	movs	r3, #0
 8005530:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005538:	2b01      	cmp	r3, #1
 800553a:	d101      	bne.n	8005540 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800553c:	2302      	movs	r3, #2
 800553e:	e03d      	b.n	80055bc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	4313      	orrs	r3, r2
 8005554:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	4313      	orrs	r3, r2
 8005562:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	4313      	orrs	r3, r2
 8005570:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4313      	orrs	r3, r2
 800557e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	4313      	orrs	r3, r2
 800558c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	695b      	ldr	r3, [r3, #20]
 8005598:	4313      	orrs	r3, r2
 800559a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	69db      	ldr	r3, [r3, #28]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3714      	adds	r7, #20
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055e4:	bf00      	nop
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d101      	bne.n	8005602 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e03f      	b.n	8005682 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005608:	b2db      	uxtb	r3, r3
 800560a:	2b00      	cmp	r3, #0
 800560c:	d106      	bne.n	800561c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f7fc fc38 	bl	8001e8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2224      	movs	r2, #36	; 0x24
 8005620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68da      	ldr	r2, [r3, #12]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005632:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 f905 	bl	8005844 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	691a      	ldr	r2, [r3, #16]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005648:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	695a      	ldr	r2, [r3, #20]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005658:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68da      	ldr	r2, [r3, #12]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005668:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2220      	movs	r2, #32
 8005674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2220      	movs	r2, #32
 800567c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3708      	adds	r7, #8
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}

0800568a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800568a:	b580      	push	{r7, lr}
 800568c:	b08a      	sub	sp, #40	; 0x28
 800568e:	af02      	add	r7, sp, #8
 8005690:	60f8      	str	r0, [r7, #12]
 8005692:	60b9      	str	r1, [r7, #8]
 8005694:	603b      	str	r3, [r7, #0]
 8005696:	4613      	mov	r3, r2
 8005698:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800569a:	2300      	movs	r3, #0
 800569c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	2b20      	cmp	r3, #32
 80056a8:	d17c      	bne.n	80057a4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d002      	beq.n	80056b6 <HAL_UART_Transmit+0x2c>
 80056b0:	88fb      	ldrh	r3, [r7, #6]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d101      	bne.n	80056ba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e075      	b.n	80057a6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d101      	bne.n	80056c8 <HAL_UART_Transmit+0x3e>
 80056c4:	2302      	movs	r3, #2
 80056c6:	e06e      	b.n	80057a6 <HAL_UART_Transmit+0x11c>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2221      	movs	r2, #33	; 0x21
 80056da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056de:	f7fc fdfd 	bl	80022dc <HAL_GetTick>
 80056e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	88fa      	ldrh	r2, [r7, #6]
 80056e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	88fa      	ldrh	r2, [r7, #6]
 80056ee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056f8:	d108      	bne.n	800570c <HAL_UART_Transmit+0x82>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d104      	bne.n	800570c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005702:	2300      	movs	r3, #0
 8005704:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	61bb      	str	r3, [r7, #24]
 800570a:	e003      	b.n	8005714 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005710:	2300      	movs	r3, #0
 8005712:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2200      	movs	r2, #0
 8005718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800571c:	e02a      	b.n	8005774 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	9300      	str	r3, [sp, #0]
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	2200      	movs	r2, #0
 8005726:	2180      	movs	r1, #128	; 0x80
 8005728:	68f8      	ldr	r0, [r7, #12]
 800572a:	f000 f840 	bl	80057ae <UART_WaitOnFlagUntilTimeout>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d001      	beq.n	8005738 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	e036      	b.n	80057a6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d10b      	bne.n	8005756 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	881b      	ldrh	r3, [r3, #0]
 8005742:	461a      	mov	r2, r3
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800574c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	3302      	adds	r3, #2
 8005752:	61bb      	str	r3, [r7, #24]
 8005754:	e007      	b.n	8005766 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	781a      	ldrb	r2, [r3, #0]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	3301      	adds	r3, #1
 8005764:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800576a:	b29b      	uxth	r3, r3
 800576c:	3b01      	subs	r3, #1
 800576e:	b29a      	uxth	r2, r3
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005778:	b29b      	uxth	r3, r3
 800577a:	2b00      	cmp	r3, #0
 800577c:	d1cf      	bne.n	800571e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	9300      	str	r3, [sp, #0]
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	2200      	movs	r2, #0
 8005786:	2140      	movs	r1, #64	; 0x40
 8005788:	68f8      	ldr	r0, [r7, #12]
 800578a:	f000 f810 	bl	80057ae <UART_WaitOnFlagUntilTimeout>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d001      	beq.n	8005798 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e006      	b.n	80057a6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2220      	movs	r2, #32
 800579c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80057a0:	2300      	movs	r3, #0
 80057a2:	e000      	b.n	80057a6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80057a4:	2302      	movs	r3, #2
  }
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3720      	adds	r7, #32
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}

080057ae <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80057ae:	b580      	push	{r7, lr}
 80057b0:	b084      	sub	sp, #16
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	60f8      	str	r0, [r7, #12]
 80057b6:	60b9      	str	r1, [r7, #8]
 80057b8:	603b      	str	r3, [r7, #0]
 80057ba:	4613      	mov	r3, r2
 80057bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057be:	e02c      	b.n	800581a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c6:	d028      	beq.n	800581a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d007      	beq.n	80057de <UART_WaitOnFlagUntilTimeout+0x30>
 80057ce:	f7fc fd85 	bl	80022dc <HAL_GetTick>
 80057d2:	4602      	mov	r2, r0
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	69ba      	ldr	r2, [r7, #24]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d21d      	bcs.n	800581a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	68da      	ldr	r2, [r3, #12]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80057ec:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	695a      	ldr	r2, [r3, #20]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f022 0201 	bic.w	r2, r2, #1
 80057fc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2220      	movs	r2, #32
 8005802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2220      	movs	r2, #32
 800580a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	e00f      	b.n	800583a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	4013      	ands	r3, r2
 8005824:	68ba      	ldr	r2, [r7, #8]
 8005826:	429a      	cmp	r2, r3
 8005828:	bf0c      	ite	eq
 800582a:	2301      	moveq	r3, #1
 800582c:	2300      	movne	r3, #0
 800582e:	b2db      	uxtb	r3, r3
 8005830:	461a      	mov	r2, r3
 8005832:	79fb      	ldrb	r3, [r7, #7]
 8005834:	429a      	cmp	r2, r3
 8005836:	d0c3      	beq.n	80057c0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3710      	adds	r7, #16
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
	...

08005844 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005848:	b09f      	sub	sp, #124	; 0x7c
 800584a:	af00      	add	r7, sp, #0
 800584c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800584e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800585a:	68d9      	ldr	r1, [r3, #12]
 800585c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	ea40 0301 	orr.w	r3, r0, r1
 8005864:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005866:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005868:	689a      	ldr	r2, [r3, #8]
 800586a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	431a      	orrs	r2, r3
 8005870:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005872:	695b      	ldr	r3, [r3, #20]
 8005874:	431a      	orrs	r2, r3
 8005876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005878:	69db      	ldr	r3, [r3, #28]
 800587a:	4313      	orrs	r3, r2
 800587c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800587e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005888:	f021 010c 	bic.w	r1, r1, #12
 800588c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005892:	430b      	orrs	r3, r1
 8005894:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	695b      	ldr	r3, [r3, #20]
 800589c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80058a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058a2:	6999      	ldr	r1, [r3, #24]
 80058a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	ea40 0301 	orr.w	r3, r0, r1
 80058ac:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80058ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	4bc5      	ldr	r3, [pc, #788]	; (8005bc8 <UART_SetConfig+0x384>)
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d004      	beq.n	80058c2 <UART_SetConfig+0x7e>
 80058b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	4bc3      	ldr	r3, [pc, #780]	; (8005bcc <UART_SetConfig+0x388>)
 80058be:	429a      	cmp	r2, r3
 80058c0:	d103      	bne.n	80058ca <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80058c2:	f7fe fbb3 	bl	800402c <HAL_RCC_GetPCLK2Freq>
 80058c6:	6778      	str	r0, [r7, #116]	; 0x74
 80058c8:	e002      	b.n	80058d0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80058ca:	f7fe fb9b 	bl	8004004 <HAL_RCC_GetPCLK1Freq>
 80058ce:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058d2:	69db      	ldr	r3, [r3, #28]
 80058d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058d8:	f040 80b6 	bne.w	8005a48 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80058dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058de:	461c      	mov	r4, r3
 80058e0:	f04f 0500 	mov.w	r5, #0
 80058e4:	4622      	mov	r2, r4
 80058e6:	462b      	mov	r3, r5
 80058e8:	1891      	adds	r1, r2, r2
 80058ea:	6439      	str	r1, [r7, #64]	; 0x40
 80058ec:	415b      	adcs	r3, r3
 80058ee:	647b      	str	r3, [r7, #68]	; 0x44
 80058f0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80058f4:	1912      	adds	r2, r2, r4
 80058f6:	eb45 0303 	adc.w	r3, r5, r3
 80058fa:	f04f 0000 	mov.w	r0, #0
 80058fe:	f04f 0100 	mov.w	r1, #0
 8005902:	00d9      	lsls	r1, r3, #3
 8005904:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005908:	00d0      	lsls	r0, r2, #3
 800590a:	4602      	mov	r2, r0
 800590c:	460b      	mov	r3, r1
 800590e:	1911      	adds	r1, r2, r4
 8005910:	6639      	str	r1, [r7, #96]	; 0x60
 8005912:	416b      	adcs	r3, r5
 8005914:	667b      	str	r3, [r7, #100]	; 0x64
 8005916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	461a      	mov	r2, r3
 800591c:	f04f 0300 	mov.w	r3, #0
 8005920:	1891      	adds	r1, r2, r2
 8005922:	63b9      	str	r1, [r7, #56]	; 0x38
 8005924:	415b      	adcs	r3, r3
 8005926:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005928:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800592c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005930:	f7fb f940 	bl	8000bb4 <__aeabi_uldivmod>
 8005934:	4602      	mov	r2, r0
 8005936:	460b      	mov	r3, r1
 8005938:	4ba5      	ldr	r3, [pc, #660]	; (8005bd0 <UART_SetConfig+0x38c>)
 800593a:	fba3 2302 	umull	r2, r3, r3, r2
 800593e:	095b      	lsrs	r3, r3, #5
 8005940:	011e      	lsls	r6, r3, #4
 8005942:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005944:	461c      	mov	r4, r3
 8005946:	f04f 0500 	mov.w	r5, #0
 800594a:	4622      	mov	r2, r4
 800594c:	462b      	mov	r3, r5
 800594e:	1891      	adds	r1, r2, r2
 8005950:	6339      	str	r1, [r7, #48]	; 0x30
 8005952:	415b      	adcs	r3, r3
 8005954:	637b      	str	r3, [r7, #52]	; 0x34
 8005956:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800595a:	1912      	adds	r2, r2, r4
 800595c:	eb45 0303 	adc.w	r3, r5, r3
 8005960:	f04f 0000 	mov.w	r0, #0
 8005964:	f04f 0100 	mov.w	r1, #0
 8005968:	00d9      	lsls	r1, r3, #3
 800596a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800596e:	00d0      	lsls	r0, r2, #3
 8005970:	4602      	mov	r2, r0
 8005972:	460b      	mov	r3, r1
 8005974:	1911      	adds	r1, r2, r4
 8005976:	65b9      	str	r1, [r7, #88]	; 0x58
 8005978:	416b      	adcs	r3, r5
 800597a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800597c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	461a      	mov	r2, r3
 8005982:	f04f 0300 	mov.w	r3, #0
 8005986:	1891      	adds	r1, r2, r2
 8005988:	62b9      	str	r1, [r7, #40]	; 0x28
 800598a:	415b      	adcs	r3, r3
 800598c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800598e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005992:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005996:	f7fb f90d 	bl	8000bb4 <__aeabi_uldivmod>
 800599a:	4602      	mov	r2, r0
 800599c:	460b      	mov	r3, r1
 800599e:	4b8c      	ldr	r3, [pc, #560]	; (8005bd0 <UART_SetConfig+0x38c>)
 80059a0:	fba3 1302 	umull	r1, r3, r3, r2
 80059a4:	095b      	lsrs	r3, r3, #5
 80059a6:	2164      	movs	r1, #100	; 0x64
 80059a8:	fb01 f303 	mul.w	r3, r1, r3
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	00db      	lsls	r3, r3, #3
 80059b0:	3332      	adds	r3, #50	; 0x32
 80059b2:	4a87      	ldr	r2, [pc, #540]	; (8005bd0 <UART_SetConfig+0x38c>)
 80059b4:	fba2 2303 	umull	r2, r3, r2, r3
 80059b8:	095b      	lsrs	r3, r3, #5
 80059ba:	005b      	lsls	r3, r3, #1
 80059bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80059c0:	441e      	add	r6, r3
 80059c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059c4:	4618      	mov	r0, r3
 80059c6:	f04f 0100 	mov.w	r1, #0
 80059ca:	4602      	mov	r2, r0
 80059cc:	460b      	mov	r3, r1
 80059ce:	1894      	adds	r4, r2, r2
 80059d0:	623c      	str	r4, [r7, #32]
 80059d2:	415b      	adcs	r3, r3
 80059d4:	627b      	str	r3, [r7, #36]	; 0x24
 80059d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80059da:	1812      	adds	r2, r2, r0
 80059dc:	eb41 0303 	adc.w	r3, r1, r3
 80059e0:	f04f 0400 	mov.w	r4, #0
 80059e4:	f04f 0500 	mov.w	r5, #0
 80059e8:	00dd      	lsls	r5, r3, #3
 80059ea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80059ee:	00d4      	lsls	r4, r2, #3
 80059f0:	4622      	mov	r2, r4
 80059f2:	462b      	mov	r3, r5
 80059f4:	1814      	adds	r4, r2, r0
 80059f6:	653c      	str	r4, [r7, #80]	; 0x50
 80059f8:	414b      	adcs	r3, r1
 80059fa:	657b      	str	r3, [r7, #84]	; 0x54
 80059fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	461a      	mov	r2, r3
 8005a02:	f04f 0300 	mov.w	r3, #0
 8005a06:	1891      	adds	r1, r2, r2
 8005a08:	61b9      	str	r1, [r7, #24]
 8005a0a:	415b      	adcs	r3, r3
 8005a0c:	61fb      	str	r3, [r7, #28]
 8005a0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a12:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005a16:	f7fb f8cd 	bl	8000bb4 <__aeabi_uldivmod>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	4b6c      	ldr	r3, [pc, #432]	; (8005bd0 <UART_SetConfig+0x38c>)
 8005a20:	fba3 1302 	umull	r1, r3, r3, r2
 8005a24:	095b      	lsrs	r3, r3, #5
 8005a26:	2164      	movs	r1, #100	; 0x64
 8005a28:	fb01 f303 	mul.w	r3, r1, r3
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	00db      	lsls	r3, r3, #3
 8005a30:	3332      	adds	r3, #50	; 0x32
 8005a32:	4a67      	ldr	r2, [pc, #412]	; (8005bd0 <UART_SetConfig+0x38c>)
 8005a34:	fba2 2303 	umull	r2, r3, r2, r3
 8005a38:	095b      	lsrs	r3, r3, #5
 8005a3a:	f003 0207 	and.w	r2, r3, #7
 8005a3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4432      	add	r2, r6
 8005a44:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005a46:	e0b9      	b.n	8005bbc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a4a:	461c      	mov	r4, r3
 8005a4c:	f04f 0500 	mov.w	r5, #0
 8005a50:	4622      	mov	r2, r4
 8005a52:	462b      	mov	r3, r5
 8005a54:	1891      	adds	r1, r2, r2
 8005a56:	6139      	str	r1, [r7, #16]
 8005a58:	415b      	adcs	r3, r3
 8005a5a:	617b      	str	r3, [r7, #20]
 8005a5c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005a60:	1912      	adds	r2, r2, r4
 8005a62:	eb45 0303 	adc.w	r3, r5, r3
 8005a66:	f04f 0000 	mov.w	r0, #0
 8005a6a:	f04f 0100 	mov.w	r1, #0
 8005a6e:	00d9      	lsls	r1, r3, #3
 8005a70:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a74:	00d0      	lsls	r0, r2, #3
 8005a76:	4602      	mov	r2, r0
 8005a78:	460b      	mov	r3, r1
 8005a7a:	eb12 0804 	adds.w	r8, r2, r4
 8005a7e:	eb43 0905 	adc.w	r9, r3, r5
 8005a82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	4618      	mov	r0, r3
 8005a88:	f04f 0100 	mov.w	r1, #0
 8005a8c:	f04f 0200 	mov.w	r2, #0
 8005a90:	f04f 0300 	mov.w	r3, #0
 8005a94:	008b      	lsls	r3, r1, #2
 8005a96:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005a9a:	0082      	lsls	r2, r0, #2
 8005a9c:	4640      	mov	r0, r8
 8005a9e:	4649      	mov	r1, r9
 8005aa0:	f7fb f888 	bl	8000bb4 <__aeabi_uldivmod>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	460b      	mov	r3, r1
 8005aa8:	4b49      	ldr	r3, [pc, #292]	; (8005bd0 <UART_SetConfig+0x38c>)
 8005aaa:	fba3 2302 	umull	r2, r3, r3, r2
 8005aae:	095b      	lsrs	r3, r3, #5
 8005ab0:	011e      	lsls	r6, r3, #4
 8005ab2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f04f 0100 	mov.w	r1, #0
 8005aba:	4602      	mov	r2, r0
 8005abc:	460b      	mov	r3, r1
 8005abe:	1894      	adds	r4, r2, r2
 8005ac0:	60bc      	str	r4, [r7, #8]
 8005ac2:	415b      	adcs	r3, r3
 8005ac4:	60fb      	str	r3, [r7, #12]
 8005ac6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005aca:	1812      	adds	r2, r2, r0
 8005acc:	eb41 0303 	adc.w	r3, r1, r3
 8005ad0:	f04f 0400 	mov.w	r4, #0
 8005ad4:	f04f 0500 	mov.w	r5, #0
 8005ad8:	00dd      	lsls	r5, r3, #3
 8005ada:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005ade:	00d4      	lsls	r4, r2, #3
 8005ae0:	4622      	mov	r2, r4
 8005ae2:	462b      	mov	r3, r5
 8005ae4:	1814      	adds	r4, r2, r0
 8005ae6:	64bc      	str	r4, [r7, #72]	; 0x48
 8005ae8:	414b      	adcs	r3, r1
 8005aea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005aec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	4618      	mov	r0, r3
 8005af2:	f04f 0100 	mov.w	r1, #0
 8005af6:	f04f 0200 	mov.w	r2, #0
 8005afa:	f04f 0300 	mov.w	r3, #0
 8005afe:	008b      	lsls	r3, r1, #2
 8005b00:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005b04:	0082      	lsls	r2, r0, #2
 8005b06:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005b0a:	f7fb f853 	bl	8000bb4 <__aeabi_uldivmod>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	460b      	mov	r3, r1
 8005b12:	4b2f      	ldr	r3, [pc, #188]	; (8005bd0 <UART_SetConfig+0x38c>)
 8005b14:	fba3 1302 	umull	r1, r3, r3, r2
 8005b18:	095b      	lsrs	r3, r3, #5
 8005b1a:	2164      	movs	r1, #100	; 0x64
 8005b1c:	fb01 f303 	mul.w	r3, r1, r3
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	011b      	lsls	r3, r3, #4
 8005b24:	3332      	adds	r3, #50	; 0x32
 8005b26:	4a2a      	ldr	r2, [pc, #168]	; (8005bd0 <UART_SetConfig+0x38c>)
 8005b28:	fba2 2303 	umull	r2, r3, r2, r3
 8005b2c:	095b      	lsrs	r3, r3, #5
 8005b2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b32:	441e      	add	r6, r3
 8005b34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b36:	4618      	mov	r0, r3
 8005b38:	f04f 0100 	mov.w	r1, #0
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	460b      	mov	r3, r1
 8005b40:	1894      	adds	r4, r2, r2
 8005b42:	603c      	str	r4, [r7, #0]
 8005b44:	415b      	adcs	r3, r3
 8005b46:	607b      	str	r3, [r7, #4]
 8005b48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b4c:	1812      	adds	r2, r2, r0
 8005b4e:	eb41 0303 	adc.w	r3, r1, r3
 8005b52:	f04f 0400 	mov.w	r4, #0
 8005b56:	f04f 0500 	mov.w	r5, #0
 8005b5a:	00dd      	lsls	r5, r3, #3
 8005b5c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005b60:	00d4      	lsls	r4, r2, #3
 8005b62:	4622      	mov	r2, r4
 8005b64:	462b      	mov	r3, r5
 8005b66:	eb12 0a00 	adds.w	sl, r2, r0
 8005b6a:	eb43 0b01 	adc.w	fp, r3, r1
 8005b6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	4618      	mov	r0, r3
 8005b74:	f04f 0100 	mov.w	r1, #0
 8005b78:	f04f 0200 	mov.w	r2, #0
 8005b7c:	f04f 0300 	mov.w	r3, #0
 8005b80:	008b      	lsls	r3, r1, #2
 8005b82:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005b86:	0082      	lsls	r2, r0, #2
 8005b88:	4650      	mov	r0, sl
 8005b8a:	4659      	mov	r1, fp
 8005b8c:	f7fb f812 	bl	8000bb4 <__aeabi_uldivmod>
 8005b90:	4602      	mov	r2, r0
 8005b92:	460b      	mov	r3, r1
 8005b94:	4b0e      	ldr	r3, [pc, #56]	; (8005bd0 <UART_SetConfig+0x38c>)
 8005b96:	fba3 1302 	umull	r1, r3, r3, r2
 8005b9a:	095b      	lsrs	r3, r3, #5
 8005b9c:	2164      	movs	r1, #100	; 0x64
 8005b9e:	fb01 f303 	mul.w	r3, r1, r3
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	011b      	lsls	r3, r3, #4
 8005ba6:	3332      	adds	r3, #50	; 0x32
 8005ba8:	4a09      	ldr	r2, [pc, #36]	; (8005bd0 <UART_SetConfig+0x38c>)
 8005baa:	fba2 2303 	umull	r2, r3, r2, r3
 8005bae:	095b      	lsrs	r3, r3, #5
 8005bb0:	f003 020f 	and.w	r2, r3, #15
 8005bb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4432      	add	r2, r6
 8005bba:	609a      	str	r2, [r3, #8]
}
 8005bbc:	bf00      	nop
 8005bbe:	377c      	adds	r7, #124	; 0x7c
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bc6:	bf00      	nop
 8005bc8:	40011000 	.word	0x40011000
 8005bcc:	40011400 	.word	0x40011400
 8005bd0:	51eb851f 	.word	0x51eb851f

08005bd4 <__errno>:
 8005bd4:	4b01      	ldr	r3, [pc, #4]	; (8005bdc <__errno+0x8>)
 8005bd6:	6818      	ldr	r0, [r3, #0]
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	20000010 	.word	0x20000010

08005be0 <__sflush_r>:
 8005be0:	898a      	ldrh	r2, [r1, #12]
 8005be2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005be6:	4605      	mov	r5, r0
 8005be8:	0710      	lsls	r0, r2, #28
 8005bea:	460c      	mov	r4, r1
 8005bec:	d458      	bmi.n	8005ca0 <__sflush_r+0xc0>
 8005bee:	684b      	ldr	r3, [r1, #4]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	dc05      	bgt.n	8005c00 <__sflush_r+0x20>
 8005bf4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	dc02      	bgt.n	8005c00 <__sflush_r+0x20>
 8005bfa:	2000      	movs	r0, #0
 8005bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c02:	2e00      	cmp	r6, #0
 8005c04:	d0f9      	beq.n	8005bfa <__sflush_r+0x1a>
 8005c06:	2300      	movs	r3, #0
 8005c08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005c0c:	682f      	ldr	r7, [r5, #0]
 8005c0e:	602b      	str	r3, [r5, #0]
 8005c10:	d032      	beq.n	8005c78 <__sflush_r+0x98>
 8005c12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005c14:	89a3      	ldrh	r3, [r4, #12]
 8005c16:	075a      	lsls	r2, r3, #29
 8005c18:	d505      	bpl.n	8005c26 <__sflush_r+0x46>
 8005c1a:	6863      	ldr	r3, [r4, #4]
 8005c1c:	1ac0      	subs	r0, r0, r3
 8005c1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005c20:	b10b      	cbz	r3, 8005c26 <__sflush_r+0x46>
 8005c22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c24:	1ac0      	subs	r0, r0, r3
 8005c26:	2300      	movs	r3, #0
 8005c28:	4602      	mov	r2, r0
 8005c2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c2c:	6a21      	ldr	r1, [r4, #32]
 8005c2e:	4628      	mov	r0, r5
 8005c30:	47b0      	blx	r6
 8005c32:	1c43      	adds	r3, r0, #1
 8005c34:	89a3      	ldrh	r3, [r4, #12]
 8005c36:	d106      	bne.n	8005c46 <__sflush_r+0x66>
 8005c38:	6829      	ldr	r1, [r5, #0]
 8005c3a:	291d      	cmp	r1, #29
 8005c3c:	d82c      	bhi.n	8005c98 <__sflush_r+0xb8>
 8005c3e:	4a2a      	ldr	r2, [pc, #168]	; (8005ce8 <__sflush_r+0x108>)
 8005c40:	40ca      	lsrs	r2, r1
 8005c42:	07d6      	lsls	r6, r2, #31
 8005c44:	d528      	bpl.n	8005c98 <__sflush_r+0xb8>
 8005c46:	2200      	movs	r2, #0
 8005c48:	6062      	str	r2, [r4, #4]
 8005c4a:	04d9      	lsls	r1, r3, #19
 8005c4c:	6922      	ldr	r2, [r4, #16]
 8005c4e:	6022      	str	r2, [r4, #0]
 8005c50:	d504      	bpl.n	8005c5c <__sflush_r+0x7c>
 8005c52:	1c42      	adds	r2, r0, #1
 8005c54:	d101      	bne.n	8005c5a <__sflush_r+0x7a>
 8005c56:	682b      	ldr	r3, [r5, #0]
 8005c58:	b903      	cbnz	r3, 8005c5c <__sflush_r+0x7c>
 8005c5a:	6560      	str	r0, [r4, #84]	; 0x54
 8005c5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c5e:	602f      	str	r7, [r5, #0]
 8005c60:	2900      	cmp	r1, #0
 8005c62:	d0ca      	beq.n	8005bfa <__sflush_r+0x1a>
 8005c64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c68:	4299      	cmp	r1, r3
 8005c6a:	d002      	beq.n	8005c72 <__sflush_r+0x92>
 8005c6c:	4628      	mov	r0, r5
 8005c6e:	f000 f9b1 	bl	8005fd4 <_free_r>
 8005c72:	2000      	movs	r0, #0
 8005c74:	6360      	str	r0, [r4, #52]	; 0x34
 8005c76:	e7c1      	b.n	8005bfc <__sflush_r+0x1c>
 8005c78:	6a21      	ldr	r1, [r4, #32]
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	4628      	mov	r0, r5
 8005c7e:	47b0      	blx	r6
 8005c80:	1c41      	adds	r1, r0, #1
 8005c82:	d1c7      	bne.n	8005c14 <__sflush_r+0x34>
 8005c84:	682b      	ldr	r3, [r5, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d0c4      	beq.n	8005c14 <__sflush_r+0x34>
 8005c8a:	2b1d      	cmp	r3, #29
 8005c8c:	d001      	beq.n	8005c92 <__sflush_r+0xb2>
 8005c8e:	2b16      	cmp	r3, #22
 8005c90:	d101      	bne.n	8005c96 <__sflush_r+0xb6>
 8005c92:	602f      	str	r7, [r5, #0]
 8005c94:	e7b1      	b.n	8005bfa <__sflush_r+0x1a>
 8005c96:	89a3      	ldrh	r3, [r4, #12]
 8005c98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c9c:	81a3      	strh	r3, [r4, #12]
 8005c9e:	e7ad      	b.n	8005bfc <__sflush_r+0x1c>
 8005ca0:	690f      	ldr	r7, [r1, #16]
 8005ca2:	2f00      	cmp	r7, #0
 8005ca4:	d0a9      	beq.n	8005bfa <__sflush_r+0x1a>
 8005ca6:	0793      	lsls	r3, r2, #30
 8005ca8:	680e      	ldr	r6, [r1, #0]
 8005caa:	bf08      	it	eq
 8005cac:	694b      	ldreq	r3, [r1, #20]
 8005cae:	600f      	str	r7, [r1, #0]
 8005cb0:	bf18      	it	ne
 8005cb2:	2300      	movne	r3, #0
 8005cb4:	eba6 0807 	sub.w	r8, r6, r7
 8005cb8:	608b      	str	r3, [r1, #8]
 8005cba:	f1b8 0f00 	cmp.w	r8, #0
 8005cbe:	dd9c      	ble.n	8005bfa <__sflush_r+0x1a>
 8005cc0:	6a21      	ldr	r1, [r4, #32]
 8005cc2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005cc4:	4643      	mov	r3, r8
 8005cc6:	463a      	mov	r2, r7
 8005cc8:	4628      	mov	r0, r5
 8005cca:	47b0      	blx	r6
 8005ccc:	2800      	cmp	r0, #0
 8005cce:	dc06      	bgt.n	8005cde <__sflush_r+0xfe>
 8005cd0:	89a3      	ldrh	r3, [r4, #12]
 8005cd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cd6:	81a3      	strh	r3, [r4, #12]
 8005cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8005cdc:	e78e      	b.n	8005bfc <__sflush_r+0x1c>
 8005cde:	4407      	add	r7, r0
 8005ce0:	eba8 0800 	sub.w	r8, r8, r0
 8005ce4:	e7e9      	b.n	8005cba <__sflush_r+0xda>
 8005ce6:	bf00      	nop
 8005ce8:	20400001 	.word	0x20400001

08005cec <_fflush_r>:
 8005cec:	b538      	push	{r3, r4, r5, lr}
 8005cee:	690b      	ldr	r3, [r1, #16]
 8005cf0:	4605      	mov	r5, r0
 8005cf2:	460c      	mov	r4, r1
 8005cf4:	b913      	cbnz	r3, 8005cfc <_fflush_r+0x10>
 8005cf6:	2500      	movs	r5, #0
 8005cf8:	4628      	mov	r0, r5
 8005cfa:	bd38      	pop	{r3, r4, r5, pc}
 8005cfc:	b118      	cbz	r0, 8005d06 <_fflush_r+0x1a>
 8005cfe:	6983      	ldr	r3, [r0, #24]
 8005d00:	b90b      	cbnz	r3, 8005d06 <_fflush_r+0x1a>
 8005d02:	f000 f899 	bl	8005e38 <__sinit>
 8005d06:	4b14      	ldr	r3, [pc, #80]	; (8005d58 <_fflush_r+0x6c>)
 8005d08:	429c      	cmp	r4, r3
 8005d0a:	d11b      	bne.n	8005d44 <_fflush_r+0x58>
 8005d0c:	686c      	ldr	r4, [r5, #4]
 8005d0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d0ef      	beq.n	8005cf6 <_fflush_r+0xa>
 8005d16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005d18:	07d0      	lsls	r0, r2, #31
 8005d1a:	d404      	bmi.n	8005d26 <_fflush_r+0x3a>
 8005d1c:	0599      	lsls	r1, r3, #22
 8005d1e:	d402      	bmi.n	8005d26 <_fflush_r+0x3a>
 8005d20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d22:	f000 f94c 	bl	8005fbe <__retarget_lock_acquire_recursive>
 8005d26:	4628      	mov	r0, r5
 8005d28:	4621      	mov	r1, r4
 8005d2a:	f7ff ff59 	bl	8005be0 <__sflush_r>
 8005d2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d30:	07da      	lsls	r2, r3, #31
 8005d32:	4605      	mov	r5, r0
 8005d34:	d4e0      	bmi.n	8005cf8 <_fflush_r+0xc>
 8005d36:	89a3      	ldrh	r3, [r4, #12]
 8005d38:	059b      	lsls	r3, r3, #22
 8005d3a:	d4dd      	bmi.n	8005cf8 <_fflush_r+0xc>
 8005d3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d3e:	f000 f93f 	bl	8005fc0 <__retarget_lock_release_recursive>
 8005d42:	e7d9      	b.n	8005cf8 <_fflush_r+0xc>
 8005d44:	4b05      	ldr	r3, [pc, #20]	; (8005d5c <_fflush_r+0x70>)
 8005d46:	429c      	cmp	r4, r3
 8005d48:	d101      	bne.n	8005d4e <_fflush_r+0x62>
 8005d4a:	68ac      	ldr	r4, [r5, #8]
 8005d4c:	e7df      	b.n	8005d0e <_fflush_r+0x22>
 8005d4e:	4b04      	ldr	r3, [pc, #16]	; (8005d60 <_fflush_r+0x74>)
 8005d50:	429c      	cmp	r4, r3
 8005d52:	bf08      	it	eq
 8005d54:	68ec      	ldreq	r4, [r5, #12]
 8005d56:	e7da      	b.n	8005d0e <_fflush_r+0x22>
 8005d58:	080076e0 	.word	0x080076e0
 8005d5c:	08007700 	.word	0x08007700
 8005d60:	080076c0 	.word	0x080076c0

08005d64 <fflush>:
 8005d64:	4601      	mov	r1, r0
 8005d66:	b920      	cbnz	r0, 8005d72 <fflush+0xe>
 8005d68:	4b04      	ldr	r3, [pc, #16]	; (8005d7c <fflush+0x18>)
 8005d6a:	4905      	ldr	r1, [pc, #20]	; (8005d80 <fflush+0x1c>)
 8005d6c:	6818      	ldr	r0, [r3, #0]
 8005d6e:	f000 b8e1 	b.w	8005f34 <_fwalk_reent>
 8005d72:	4b04      	ldr	r3, [pc, #16]	; (8005d84 <fflush+0x20>)
 8005d74:	6818      	ldr	r0, [r3, #0]
 8005d76:	f7ff bfb9 	b.w	8005cec <_fflush_r>
 8005d7a:	bf00      	nop
 8005d7c:	08007720 	.word	0x08007720
 8005d80:	08005ced 	.word	0x08005ced
 8005d84:	20000010 	.word	0x20000010

08005d88 <std>:
 8005d88:	2300      	movs	r3, #0
 8005d8a:	b510      	push	{r4, lr}
 8005d8c:	4604      	mov	r4, r0
 8005d8e:	e9c0 3300 	strd	r3, r3, [r0]
 8005d92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d96:	6083      	str	r3, [r0, #8]
 8005d98:	8181      	strh	r1, [r0, #12]
 8005d9a:	6643      	str	r3, [r0, #100]	; 0x64
 8005d9c:	81c2      	strh	r2, [r0, #14]
 8005d9e:	6183      	str	r3, [r0, #24]
 8005da0:	4619      	mov	r1, r3
 8005da2:	2208      	movs	r2, #8
 8005da4:	305c      	adds	r0, #92	; 0x5c
 8005da6:	f000 f90c 	bl	8005fc2 <memset>
 8005daa:	4b05      	ldr	r3, [pc, #20]	; (8005dc0 <std+0x38>)
 8005dac:	6263      	str	r3, [r4, #36]	; 0x24
 8005dae:	4b05      	ldr	r3, [pc, #20]	; (8005dc4 <std+0x3c>)
 8005db0:	62a3      	str	r3, [r4, #40]	; 0x28
 8005db2:	4b05      	ldr	r3, [pc, #20]	; (8005dc8 <std+0x40>)
 8005db4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005db6:	4b05      	ldr	r3, [pc, #20]	; (8005dcc <std+0x44>)
 8005db8:	6224      	str	r4, [r4, #32]
 8005dba:	6323      	str	r3, [r4, #48]	; 0x30
 8005dbc:	bd10      	pop	{r4, pc}
 8005dbe:	bf00      	nop
 8005dc0:	08006175 	.word	0x08006175
 8005dc4:	08006197 	.word	0x08006197
 8005dc8:	080061cf 	.word	0x080061cf
 8005dcc:	080061f3 	.word	0x080061f3

08005dd0 <_cleanup_r>:
 8005dd0:	4901      	ldr	r1, [pc, #4]	; (8005dd8 <_cleanup_r+0x8>)
 8005dd2:	f000 b8af 	b.w	8005f34 <_fwalk_reent>
 8005dd6:	bf00      	nop
 8005dd8:	08005ced 	.word	0x08005ced

08005ddc <__sfmoreglue>:
 8005ddc:	b570      	push	{r4, r5, r6, lr}
 8005dde:	1e4a      	subs	r2, r1, #1
 8005de0:	2568      	movs	r5, #104	; 0x68
 8005de2:	4355      	muls	r5, r2
 8005de4:	460e      	mov	r6, r1
 8005de6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005dea:	f000 f943 	bl	8006074 <_malloc_r>
 8005dee:	4604      	mov	r4, r0
 8005df0:	b140      	cbz	r0, 8005e04 <__sfmoreglue+0x28>
 8005df2:	2100      	movs	r1, #0
 8005df4:	e9c0 1600 	strd	r1, r6, [r0]
 8005df8:	300c      	adds	r0, #12
 8005dfa:	60a0      	str	r0, [r4, #8]
 8005dfc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005e00:	f000 f8df 	bl	8005fc2 <memset>
 8005e04:	4620      	mov	r0, r4
 8005e06:	bd70      	pop	{r4, r5, r6, pc}

08005e08 <__sfp_lock_acquire>:
 8005e08:	4801      	ldr	r0, [pc, #4]	; (8005e10 <__sfp_lock_acquire+0x8>)
 8005e0a:	f000 b8d8 	b.w	8005fbe <__retarget_lock_acquire_recursive>
 8005e0e:	bf00      	nop
 8005e10:	200002fc 	.word	0x200002fc

08005e14 <__sfp_lock_release>:
 8005e14:	4801      	ldr	r0, [pc, #4]	; (8005e1c <__sfp_lock_release+0x8>)
 8005e16:	f000 b8d3 	b.w	8005fc0 <__retarget_lock_release_recursive>
 8005e1a:	bf00      	nop
 8005e1c:	200002fc 	.word	0x200002fc

08005e20 <__sinit_lock_acquire>:
 8005e20:	4801      	ldr	r0, [pc, #4]	; (8005e28 <__sinit_lock_acquire+0x8>)
 8005e22:	f000 b8cc 	b.w	8005fbe <__retarget_lock_acquire_recursive>
 8005e26:	bf00      	nop
 8005e28:	200002f7 	.word	0x200002f7

08005e2c <__sinit_lock_release>:
 8005e2c:	4801      	ldr	r0, [pc, #4]	; (8005e34 <__sinit_lock_release+0x8>)
 8005e2e:	f000 b8c7 	b.w	8005fc0 <__retarget_lock_release_recursive>
 8005e32:	bf00      	nop
 8005e34:	200002f7 	.word	0x200002f7

08005e38 <__sinit>:
 8005e38:	b510      	push	{r4, lr}
 8005e3a:	4604      	mov	r4, r0
 8005e3c:	f7ff fff0 	bl	8005e20 <__sinit_lock_acquire>
 8005e40:	69a3      	ldr	r3, [r4, #24]
 8005e42:	b11b      	cbz	r3, 8005e4c <__sinit+0x14>
 8005e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e48:	f7ff bff0 	b.w	8005e2c <__sinit_lock_release>
 8005e4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005e50:	6523      	str	r3, [r4, #80]	; 0x50
 8005e52:	4b13      	ldr	r3, [pc, #76]	; (8005ea0 <__sinit+0x68>)
 8005e54:	4a13      	ldr	r2, [pc, #76]	; (8005ea4 <__sinit+0x6c>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	62a2      	str	r2, [r4, #40]	; 0x28
 8005e5a:	42a3      	cmp	r3, r4
 8005e5c:	bf04      	itt	eq
 8005e5e:	2301      	moveq	r3, #1
 8005e60:	61a3      	streq	r3, [r4, #24]
 8005e62:	4620      	mov	r0, r4
 8005e64:	f000 f820 	bl	8005ea8 <__sfp>
 8005e68:	6060      	str	r0, [r4, #4]
 8005e6a:	4620      	mov	r0, r4
 8005e6c:	f000 f81c 	bl	8005ea8 <__sfp>
 8005e70:	60a0      	str	r0, [r4, #8]
 8005e72:	4620      	mov	r0, r4
 8005e74:	f000 f818 	bl	8005ea8 <__sfp>
 8005e78:	2200      	movs	r2, #0
 8005e7a:	60e0      	str	r0, [r4, #12]
 8005e7c:	2104      	movs	r1, #4
 8005e7e:	6860      	ldr	r0, [r4, #4]
 8005e80:	f7ff ff82 	bl	8005d88 <std>
 8005e84:	68a0      	ldr	r0, [r4, #8]
 8005e86:	2201      	movs	r2, #1
 8005e88:	2109      	movs	r1, #9
 8005e8a:	f7ff ff7d 	bl	8005d88 <std>
 8005e8e:	68e0      	ldr	r0, [r4, #12]
 8005e90:	2202      	movs	r2, #2
 8005e92:	2112      	movs	r1, #18
 8005e94:	f7ff ff78 	bl	8005d88 <std>
 8005e98:	2301      	movs	r3, #1
 8005e9a:	61a3      	str	r3, [r4, #24]
 8005e9c:	e7d2      	b.n	8005e44 <__sinit+0xc>
 8005e9e:	bf00      	nop
 8005ea0:	08007720 	.word	0x08007720
 8005ea4:	08005dd1 	.word	0x08005dd1

08005ea8 <__sfp>:
 8005ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eaa:	4607      	mov	r7, r0
 8005eac:	f7ff ffac 	bl	8005e08 <__sfp_lock_acquire>
 8005eb0:	4b1e      	ldr	r3, [pc, #120]	; (8005f2c <__sfp+0x84>)
 8005eb2:	681e      	ldr	r6, [r3, #0]
 8005eb4:	69b3      	ldr	r3, [r6, #24]
 8005eb6:	b913      	cbnz	r3, 8005ebe <__sfp+0x16>
 8005eb8:	4630      	mov	r0, r6
 8005eba:	f7ff ffbd 	bl	8005e38 <__sinit>
 8005ebe:	3648      	adds	r6, #72	; 0x48
 8005ec0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005ec4:	3b01      	subs	r3, #1
 8005ec6:	d503      	bpl.n	8005ed0 <__sfp+0x28>
 8005ec8:	6833      	ldr	r3, [r6, #0]
 8005eca:	b30b      	cbz	r3, 8005f10 <__sfp+0x68>
 8005ecc:	6836      	ldr	r6, [r6, #0]
 8005ece:	e7f7      	b.n	8005ec0 <__sfp+0x18>
 8005ed0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005ed4:	b9d5      	cbnz	r5, 8005f0c <__sfp+0x64>
 8005ed6:	4b16      	ldr	r3, [pc, #88]	; (8005f30 <__sfp+0x88>)
 8005ed8:	60e3      	str	r3, [r4, #12]
 8005eda:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005ede:	6665      	str	r5, [r4, #100]	; 0x64
 8005ee0:	f000 f86c 	bl	8005fbc <__retarget_lock_init_recursive>
 8005ee4:	f7ff ff96 	bl	8005e14 <__sfp_lock_release>
 8005ee8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005eec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005ef0:	6025      	str	r5, [r4, #0]
 8005ef2:	61a5      	str	r5, [r4, #24]
 8005ef4:	2208      	movs	r2, #8
 8005ef6:	4629      	mov	r1, r5
 8005ef8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005efc:	f000 f861 	bl	8005fc2 <memset>
 8005f00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005f04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005f08:	4620      	mov	r0, r4
 8005f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f0c:	3468      	adds	r4, #104	; 0x68
 8005f0e:	e7d9      	b.n	8005ec4 <__sfp+0x1c>
 8005f10:	2104      	movs	r1, #4
 8005f12:	4638      	mov	r0, r7
 8005f14:	f7ff ff62 	bl	8005ddc <__sfmoreglue>
 8005f18:	4604      	mov	r4, r0
 8005f1a:	6030      	str	r0, [r6, #0]
 8005f1c:	2800      	cmp	r0, #0
 8005f1e:	d1d5      	bne.n	8005ecc <__sfp+0x24>
 8005f20:	f7ff ff78 	bl	8005e14 <__sfp_lock_release>
 8005f24:	230c      	movs	r3, #12
 8005f26:	603b      	str	r3, [r7, #0]
 8005f28:	e7ee      	b.n	8005f08 <__sfp+0x60>
 8005f2a:	bf00      	nop
 8005f2c:	08007720 	.word	0x08007720
 8005f30:	ffff0001 	.word	0xffff0001

08005f34 <_fwalk_reent>:
 8005f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f38:	4606      	mov	r6, r0
 8005f3a:	4688      	mov	r8, r1
 8005f3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005f40:	2700      	movs	r7, #0
 8005f42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005f46:	f1b9 0901 	subs.w	r9, r9, #1
 8005f4a:	d505      	bpl.n	8005f58 <_fwalk_reent+0x24>
 8005f4c:	6824      	ldr	r4, [r4, #0]
 8005f4e:	2c00      	cmp	r4, #0
 8005f50:	d1f7      	bne.n	8005f42 <_fwalk_reent+0xe>
 8005f52:	4638      	mov	r0, r7
 8005f54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f58:	89ab      	ldrh	r3, [r5, #12]
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d907      	bls.n	8005f6e <_fwalk_reent+0x3a>
 8005f5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f62:	3301      	adds	r3, #1
 8005f64:	d003      	beq.n	8005f6e <_fwalk_reent+0x3a>
 8005f66:	4629      	mov	r1, r5
 8005f68:	4630      	mov	r0, r6
 8005f6a:	47c0      	blx	r8
 8005f6c:	4307      	orrs	r7, r0
 8005f6e:	3568      	adds	r5, #104	; 0x68
 8005f70:	e7e9      	b.n	8005f46 <_fwalk_reent+0x12>
	...

08005f74 <__libc_init_array>:
 8005f74:	b570      	push	{r4, r5, r6, lr}
 8005f76:	4d0d      	ldr	r5, [pc, #52]	; (8005fac <__libc_init_array+0x38>)
 8005f78:	4c0d      	ldr	r4, [pc, #52]	; (8005fb0 <__libc_init_array+0x3c>)
 8005f7a:	1b64      	subs	r4, r4, r5
 8005f7c:	10a4      	asrs	r4, r4, #2
 8005f7e:	2600      	movs	r6, #0
 8005f80:	42a6      	cmp	r6, r4
 8005f82:	d109      	bne.n	8005f98 <__libc_init_array+0x24>
 8005f84:	4d0b      	ldr	r5, [pc, #44]	; (8005fb4 <__libc_init_array+0x40>)
 8005f86:	4c0c      	ldr	r4, [pc, #48]	; (8005fb8 <__libc_init_array+0x44>)
 8005f88:	f001 fb7c 	bl	8007684 <_init>
 8005f8c:	1b64      	subs	r4, r4, r5
 8005f8e:	10a4      	asrs	r4, r4, #2
 8005f90:	2600      	movs	r6, #0
 8005f92:	42a6      	cmp	r6, r4
 8005f94:	d105      	bne.n	8005fa2 <__libc_init_array+0x2e>
 8005f96:	bd70      	pop	{r4, r5, r6, pc}
 8005f98:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f9c:	4798      	blx	r3
 8005f9e:	3601      	adds	r6, #1
 8005fa0:	e7ee      	b.n	8005f80 <__libc_init_array+0xc>
 8005fa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fa6:	4798      	blx	r3
 8005fa8:	3601      	adds	r6, #1
 8005faa:	e7f2      	b.n	8005f92 <__libc_init_array+0x1e>
 8005fac:	08007908 	.word	0x08007908
 8005fb0:	08007908 	.word	0x08007908
 8005fb4:	08007908 	.word	0x08007908
 8005fb8:	0800790c 	.word	0x0800790c

08005fbc <__retarget_lock_init_recursive>:
 8005fbc:	4770      	bx	lr

08005fbe <__retarget_lock_acquire_recursive>:
 8005fbe:	4770      	bx	lr

08005fc0 <__retarget_lock_release_recursive>:
 8005fc0:	4770      	bx	lr

08005fc2 <memset>:
 8005fc2:	4402      	add	r2, r0
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d100      	bne.n	8005fcc <memset+0xa>
 8005fca:	4770      	bx	lr
 8005fcc:	f803 1b01 	strb.w	r1, [r3], #1
 8005fd0:	e7f9      	b.n	8005fc6 <memset+0x4>
	...

08005fd4 <_free_r>:
 8005fd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005fd6:	2900      	cmp	r1, #0
 8005fd8:	d048      	beq.n	800606c <_free_r+0x98>
 8005fda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fde:	9001      	str	r0, [sp, #4]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	f1a1 0404 	sub.w	r4, r1, #4
 8005fe6:	bfb8      	it	lt
 8005fe8:	18e4      	addlt	r4, r4, r3
 8005fea:	f000 f93b 	bl	8006264 <__malloc_lock>
 8005fee:	4a20      	ldr	r2, [pc, #128]	; (8006070 <_free_r+0x9c>)
 8005ff0:	9801      	ldr	r0, [sp, #4]
 8005ff2:	6813      	ldr	r3, [r2, #0]
 8005ff4:	4615      	mov	r5, r2
 8005ff6:	b933      	cbnz	r3, 8006006 <_free_r+0x32>
 8005ff8:	6063      	str	r3, [r4, #4]
 8005ffa:	6014      	str	r4, [r2, #0]
 8005ffc:	b003      	add	sp, #12
 8005ffe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006002:	f000 b935 	b.w	8006270 <__malloc_unlock>
 8006006:	42a3      	cmp	r3, r4
 8006008:	d90b      	bls.n	8006022 <_free_r+0x4e>
 800600a:	6821      	ldr	r1, [r4, #0]
 800600c:	1862      	adds	r2, r4, r1
 800600e:	4293      	cmp	r3, r2
 8006010:	bf04      	itt	eq
 8006012:	681a      	ldreq	r2, [r3, #0]
 8006014:	685b      	ldreq	r3, [r3, #4]
 8006016:	6063      	str	r3, [r4, #4]
 8006018:	bf04      	itt	eq
 800601a:	1852      	addeq	r2, r2, r1
 800601c:	6022      	streq	r2, [r4, #0]
 800601e:	602c      	str	r4, [r5, #0]
 8006020:	e7ec      	b.n	8005ffc <_free_r+0x28>
 8006022:	461a      	mov	r2, r3
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	b10b      	cbz	r3, 800602c <_free_r+0x58>
 8006028:	42a3      	cmp	r3, r4
 800602a:	d9fa      	bls.n	8006022 <_free_r+0x4e>
 800602c:	6811      	ldr	r1, [r2, #0]
 800602e:	1855      	adds	r5, r2, r1
 8006030:	42a5      	cmp	r5, r4
 8006032:	d10b      	bne.n	800604c <_free_r+0x78>
 8006034:	6824      	ldr	r4, [r4, #0]
 8006036:	4421      	add	r1, r4
 8006038:	1854      	adds	r4, r2, r1
 800603a:	42a3      	cmp	r3, r4
 800603c:	6011      	str	r1, [r2, #0]
 800603e:	d1dd      	bne.n	8005ffc <_free_r+0x28>
 8006040:	681c      	ldr	r4, [r3, #0]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	6053      	str	r3, [r2, #4]
 8006046:	4421      	add	r1, r4
 8006048:	6011      	str	r1, [r2, #0]
 800604a:	e7d7      	b.n	8005ffc <_free_r+0x28>
 800604c:	d902      	bls.n	8006054 <_free_r+0x80>
 800604e:	230c      	movs	r3, #12
 8006050:	6003      	str	r3, [r0, #0]
 8006052:	e7d3      	b.n	8005ffc <_free_r+0x28>
 8006054:	6825      	ldr	r5, [r4, #0]
 8006056:	1961      	adds	r1, r4, r5
 8006058:	428b      	cmp	r3, r1
 800605a:	bf04      	itt	eq
 800605c:	6819      	ldreq	r1, [r3, #0]
 800605e:	685b      	ldreq	r3, [r3, #4]
 8006060:	6063      	str	r3, [r4, #4]
 8006062:	bf04      	itt	eq
 8006064:	1949      	addeq	r1, r1, r5
 8006066:	6021      	streq	r1, [r4, #0]
 8006068:	6054      	str	r4, [r2, #4]
 800606a:	e7c7      	b.n	8005ffc <_free_r+0x28>
 800606c:	b003      	add	sp, #12
 800606e:	bd30      	pop	{r4, r5, pc}
 8006070:	20000120 	.word	0x20000120

08006074 <_malloc_r>:
 8006074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006076:	1ccd      	adds	r5, r1, #3
 8006078:	f025 0503 	bic.w	r5, r5, #3
 800607c:	3508      	adds	r5, #8
 800607e:	2d0c      	cmp	r5, #12
 8006080:	bf38      	it	cc
 8006082:	250c      	movcc	r5, #12
 8006084:	2d00      	cmp	r5, #0
 8006086:	4606      	mov	r6, r0
 8006088:	db01      	blt.n	800608e <_malloc_r+0x1a>
 800608a:	42a9      	cmp	r1, r5
 800608c:	d903      	bls.n	8006096 <_malloc_r+0x22>
 800608e:	230c      	movs	r3, #12
 8006090:	6033      	str	r3, [r6, #0]
 8006092:	2000      	movs	r0, #0
 8006094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006096:	f000 f8e5 	bl	8006264 <__malloc_lock>
 800609a:	4921      	ldr	r1, [pc, #132]	; (8006120 <_malloc_r+0xac>)
 800609c:	680a      	ldr	r2, [r1, #0]
 800609e:	4614      	mov	r4, r2
 80060a0:	b99c      	cbnz	r4, 80060ca <_malloc_r+0x56>
 80060a2:	4f20      	ldr	r7, [pc, #128]	; (8006124 <_malloc_r+0xb0>)
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	b923      	cbnz	r3, 80060b2 <_malloc_r+0x3e>
 80060a8:	4621      	mov	r1, r4
 80060aa:	4630      	mov	r0, r6
 80060ac:	f000 f852 	bl	8006154 <_sbrk_r>
 80060b0:	6038      	str	r0, [r7, #0]
 80060b2:	4629      	mov	r1, r5
 80060b4:	4630      	mov	r0, r6
 80060b6:	f000 f84d 	bl	8006154 <_sbrk_r>
 80060ba:	1c43      	adds	r3, r0, #1
 80060bc:	d123      	bne.n	8006106 <_malloc_r+0x92>
 80060be:	230c      	movs	r3, #12
 80060c0:	6033      	str	r3, [r6, #0]
 80060c2:	4630      	mov	r0, r6
 80060c4:	f000 f8d4 	bl	8006270 <__malloc_unlock>
 80060c8:	e7e3      	b.n	8006092 <_malloc_r+0x1e>
 80060ca:	6823      	ldr	r3, [r4, #0]
 80060cc:	1b5b      	subs	r3, r3, r5
 80060ce:	d417      	bmi.n	8006100 <_malloc_r+0x8c>
 80060d0:	2b0b      	cmp	r3, #11
 80060d2:	d903      	bls.n	80060dc <_malloc_r+0x68>
 80060d4:	6023      	str	r3, [r4, #0]
 80060d6:	441c      	add	r4, r3
 80060d8:	6025      	str	r5, [r4, #0]
 80060da:	e004      	b.n	80060e6 <_malloc_r+0x72>
 80060dc:	6863      	ldr	r3, [r4, #4]
 80060de:	42a2      	cmp	r2, r4
 80060e0:	bf0c      	ite	eq
 80060e2:	600b      	streq	r3, [r1, #0]
 80060e4:	6053      	strne	r3, [r2, #4]
 80060e6:	4630      	mov	r0, r6
 80060e8:	f000 f8c2 	bl	8006270 <__malloc_unlock>
 80060ec:	f104 000b 	add.w	r0, r4, #11
 80060f0:	1d23      	adds	r3, r4, #4
 80060f2:	f020 0007 	bic.w	r0, r0, #7
 80060f6:	1ac2      	subs	r2, r0, r3
 80060f8:	d0cc      	beq.n	8006094 <_malloc_r+0x20>
 80060fa:	1a1b      	subs	r3, r3, r0
 80060fc:	50a3      	str	r3, [r4, r2]
 80060fe:	e7c9      	b.n	8006094 <_malloc_r+0x20>
 8006100:	4622      	mov	r2, r4
 8006102:	6864      	ldr	r4, [r4, #4]
 8006104:	e7cc      	b.n	80060a0 <_malloc_r+0x2c>
 8006106:	1cc4      	adds	r4, r0, #3
 8006108:	f024 0403 	bic.w	r4, r4, #3
 800610c:	42a0      	cmp	r0, r4
 800610e:	d0e3      	beq.n	80060d8 <_malloc_r+0x64>
 8006110:	1a21      	subs	r1, r4, r0
 8006112:	4630      	mov	r0, r6
 8006114:	f000 f81e 	bl	8006154 <_sbrk_r>
 8006118:	3001      	adds	r0, #1
 800611a:	d1dd      	bne.n	80060d8 <_malloc_r+0x64>
 800611c:	e7cf      	b.n	80060be <_malloc_r+0x4a>
 800611e:	bf00      	nop
 8006120:	20000120 	.word	0x20000120
 8006124:	20000124 	.word	0x20000124

08006128 <putchar>:
 8006128:	4b09      	ldr	r3, [pc, #36]	; (8006150 <putchar+0x28>)
 800612a:	b513      	push	{r0, r1, r4, lr}
 800612c:	681c      	ldr	r4, [r3, #0]
 800612e:	4601      	mov	r1, r0
 8006130:	b134      	cbz	r4, 8006140 <putchar+0x18>
 8006132:	69a3      	ldr	r3, [r4, #24]
 8006134:	b923      	cbnz	r3, 8006140 <putchar+0x18>
 8006136:	9001      	str	r0, [sp, #4]
 8006138:	4620      	mov	r0, r4
 800613a:	f7ff fe7d 	bl	8005e38 <__sinit>
 800613e:	9901      	ldr	r1, [sp, #4]
 8006140:	68a2      	ldr	r2, [r4, #8]
 8006142:	4620      	mov	r0, r4
 8006144:	b002      	add	sp, #8
 8006146:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800614a:	f000 b897 	b.w	800627c <_putc_r>
 800614e:	bf00      	nop
 8006150:	20000010 	.word	0x20000010

08006154 <_sbrk_r>:
 8006154:	b538      	push	{r3, r4, r5, lr}
 8006156:	4d06      	ldr	r5, [pc, #24]	; (8006170 <_sbrk_r+0x1c>)
 8006158:	2300      	movs	r3, #0
 800615a:	4604      	mov	r4, r0
 800615c:	4608      	mov	r0, r1
 800615e:	602b      	str	r3, [r5, #0]
 8006160:	f7fb ffb0 	bl	80020c4 <_sbrk>
 8006164:	1c43      	adds	r3, r0, #1
 8006166:	d102      	bne.n	800616e <_sbrk_r+0x1a>
 8006168:	682b      	ldr	r3, [r5, #0]
 800616a:	b103      	cbz	r3, 800616e <_sbrk_r+0x1a>
 800616c:	6023      	str	r3, [r4, #0]
 800616e:	bd38      	pop	{r3, r4, r5, pc}
 8006170:	20000300 	.word	0x20000300

08006174 <__sread>:
 8006174:	b510      	push	{r4, lr}
 8006176:	460c      	mov	r4, r1
 8006178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800617c:	f000 f8c6 	bl	800630c <_read_r>
 8006180:	2800      	cmp	r0, #0
 8006182:	bfab      	itete	ge
 8006184:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006186:	89a3      	ldrhlt	r3, [r4, #12]
 8006188:	181b      	addge	r3, r3, r0
 800618a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800618e:	bfac      	ite	ge
 8006190:	6563      	strge	r3, [r4, #84]	; 0x54
 8006192:	81a3      	strhlt	r3, [r4, #12]
 8006194:	bd10      	pop	{r4, pc}

08006196 <__swrite>:
 8006196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800619a:	461f      	mov	r7, r3
 800619c:	898b      	ldrh	r3, [r1, #12]
 800619e:	05db      	lsls	r3, r3, #23
 80061a0:	4605      	mov	r5, r0
 80061a2:	460c      	mov	r4, r1
 80061a4:	4616      	mov	r6, r2
 80061a6:	d505      	bpl.n	80061b4 <__swrite+0x1e>
 80061a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061ac:	2302      	movs	r3, #2
 80061ae:	2200      	movs	r2, #0
 80061b0:	f000 f846 	bl	8006240 <_lseek_r>
 80061b4:	89a3      	ldrh	r3, [r4, #12]
 80061b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061be:	81a3      	strh	r3, [r4, #12]
 80061c0:	4632      	mov	r2, r6
 80061c2:	463b      	mov	r3, r7
 80061c4:	4628      	mov	r0, r5
 80061c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061ca:	f000 b817 	b.w	80061fc <_write_r>

080061ce <__sseek>:
 80061ce:	b510      	push	{r4, lr}
 80061d0:	460c      	mov	r4, r1
 80061d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061d6:	f000 f833 	bl	8006240 <_lseek_r>
 80061da:	1c43      	adds	r3, r0, #1
 80061dc:	89a3      	ldrh	r3, [r4, #12]
 80061de:	bf15      	itete	ne
 80061e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80061e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80061e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80061ea:	81a3      	strheq	r3, [r4, #12]
 80061ec:	bf18      	it	ne
 80061ee:	81a3      	strhne	r3, [r4, #12]
 80061f0:	bd10      	pop	{r4, pc}

080061f2 <__sclose>:
 80061f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061f6:	f000 b813 	b.w	8006220 <_close_r>
	...

080061fc <_write_r>:
 80061fc:	b538      	push	{r3, r4, r5, lr}
 80061fe:	4d07      	ldr	r5, [pc, #28]	; (800621c <_write_r+0x20>)
 8006200:	4604      	mov	r4, r0
 8006202:	4608      	mov	r0, r1
 8006204:	4611      	mov	r1, r2
 8006206:	2200      	movs	r2, #0
 8006208:	602a      	str	r2, [r5, #0]
 800620a:	461a      	mov	r2, r3
 800620c:	f7fb ff09 	bl	8002022 <_write>
 8006210:	1c43      	adds	r3, r0, #1
 8006212:	d102      	bne.n	800621a <_write_r+0x1e>
 8006214:	682b      	ldr	r3, [r5, #0]
 8006216:	b103      	cbz	r3, 800621a <_write_r+0x1e>
 8006218:	6023      	str	r3, [r4, #0]
 800621a:	bd38      	pop	{r3, r4, r5, pc}
 800621c:	20000300 	.word	0x20000300

08006220 <_close_r>:
 8006220:	b538      	push	{r3, r4, r5, lr}
 8006222:	4d06      	ldr	r5, [pc, #24]	; (800623c <_close_r+0x1c>)
 8006224:	2300      	movs	r3, #0
 8006226:	4604      	mov	r4, r0
 8006228:	4608      	mov	r0, r1
 800622a:	602b      	str	r3, [r5, #0]
 800622c:	f7fb ff15 	bl	800205a <_close>
 8006230:	1c43      	adds	r3, r0, #1
 8006232:	d102      	bne.n	800623a <_close_r+0x1a>
 8006234:	682b      	ldr	r3, [r5, #0]
 8006236:	b103      	cbz	r3, 800623a <_close_r+0x1a>
 8006238:	6023      	str	r3, [r4, #0]
 800623a:	bd38      	pop	{r3, r4, r5, pc}
 800623c:	20000300 	.word	0x20000300

08006240 <_lseek_r>:
 8006240:	b538      	push	{r3, r4, r5, lr}
 8006242:	4d07      	ldr	r5, [pc, #28]	; (8006260 <_lseek_r+0x20>)
 8006244:	4604      	mov	r4, r0
 8006246:	4608      	mov	r0, r1
 8006248:	4611      	mov	r1, r2
 800624a:	2200      	movs	r2, #0
 800624c:	602a      	str	r2, [r5, #0]
 800624e:	461a      	mov	r2, r3
 8006250:	f7fb ff2a 	bl	80020a8 <_lseek>
 8006254:	1c43      	adds	r3, r0, #1
 8006256:	d102      	bne.n	800625e <_lseek_r+0x1e>
 8006258:	682b      	ldr	r3, [r5, #0]
 800625a:	b103      	cbz	r3, 800625e <_lseek_r+0x1e>
 800625c:	6023      	str	r3, [r4, #0]
 800625e:	bd38      	pop	{r3, r4, r5, pc}
 8006260:	20000300 	.word	0x20000300

08006264 <__malloc_lock>:
 8006264:	4801      	ldr	r0, [pc, #4]	; (800626c <__malloc_lock+0x8>)
 8006266:	f7ff beaa 	b.w	8005fbe <__retarget_lock_acquire_recursive>
 800626a:	bf00      	nop
 800626c:	200002f8 	.word	0x200002f8

08006270 <__malloc_unlock>:
 8006270:	4801      	ldr	r0, [pc, #4]	; (8006278 <__malloc_unlock+0x8>)
 8006272:	f7ff bea5 	b.w	8005fc0 <__retarget_lock_release_recursive>
 8006276:	bf00      	nop
 8006278:	200002f8 	.word	0x200002f8

0800627c <_putc_r>:
 800627c:	b570      	push	{r4, r5, r6, lr}
 800627e:	460d      	mov	r5, r1
 8006280:	4614      	mov	r4, r2
 8006282:	4606      	mov	r6, r0
 8006284:	b118      	cbz	r0, 800628e <_putc_r+0x12>
 8006286:	6983      	ldr	r3, [r0, #24]
 8006288:	b90b      	cbnz	r3, 800628e <_putc_r+0x12>
 800628a:	f7ff fdd5 	bl	8005e38 <__sinit>
 800628e:	4b1c      	ldr	r3, [pc, #112]	; (8006300 <_putc_r+0x84>)
 8006290:	429c      	cmp	r4, r3
 8006292:	d124      	bne.n	80062de <_putc_r+0x62>
 8006294:	6874      	ldr	r4, [r6, #4]
 8006296:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006298:	07d8      	lsls	r0, r3, #31
 800629a:	d405      	bmi.n	80062a8 <_putc_r+0x2c>
 800629c:	89a3      	ldrh	r3, [r4, #12]
 800629e:	0599      	lsls	r1, r3, #22
 80062a0:	d402      	bmi.n	80062a8 <_putc_r+0x2c>
 80062a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062a4:	f7ff fe8b 	bl	8005fbe <__retarget_lock_acquire_recursive>
 80062a8:	68a3      	ldr	r3, [r4, #8]
 80062aa:	3b01      	subs	r3, #1
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	60a3      	str	r3, [r4, #8]
 80062b0:	da05      	bge.n	80062be <_putc_r+0x42>
 80062b2:	69a2      	ldr	r2, [r4, #24]
 80062b4:	4293      	cmp	r3, r2
 80062b6:	db1c      	blt.n	80062f2 <_putc_r+0x76>
 80062b8:	b2eb      	uxtb	r3, r5
 80062ba:	2b0a      	cmp	r3, #10
 80062bc:	d019      	beq.n	80062f2 <_putc_r+0x76>
 80062be:	6823      	ldr	r3, [r4, #0]
 80062c0:	1c5a      	adds	r2, r3, #1
 80062c2:	6022      	str	r2, [r4, #0]
 80062c4:	701d      	strb	r5, [r3, #0]
 80062c6:	b2ed      	uxtb	r5, r5
 80062c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80062ca:	07da      	lsls	r2, r3, #31
 80062cc:	d405      	bmi.n	80062da <_putc_r+0x5e>
 80062ce:	89a3      	ldrh	r3, [r4, #12]
 80062d0:	059b      	lsls	r3, r3, #22
 80062d2:	d402      	bmi.n	80062da <_putc_r+0x5e>
 80062d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062d6:	f7ff fe73 	bl	8005fc0 <__retarget_lock_release_recursive>
 80062da:	4628      	mov	r0, r5
 80062dc:	bd70      	pop	{r4, r5, r6, pc}
 80062de:	4b09      	ldr	r3, [pc, #36]	; (8006304 <_putc_r+0x88>)
 80062e0:	429c      	cmp	r4, r3
 80062e2:	d101      	bne.n	80062e8 <_putc_r+0x6c>
 80062e4:	68b4      	ldr	r4, [r6, #8]
 80062e6:	e7d6      	b.n	8006296 <_putc_r+0x1a>
 80062e8:	4b07      	ldr	r3, [pc, #28]	; (8006308 <_putc_r+0x8c>)
 80062ea:	429c      	cmp	r4, r3
 80062ec:	bf08      	it	eq
 80062ee:	68f4      	ldreq	r4, [r6, #12]
 80062f0:	e7d1      	b.n	8006296 <_putc_r+0x1a>
 80062f2:	4629      	mov	r1, r5
 80062f4:	4622      	mov	r2, r4
 80062f6:	4630      	mov	r0, r6
 80062f8:	f000 f81a 	bl	8006330 <__swbuf_r>
 80062fc:	4605      	mov	r5, r0
 80062fe:	e7e3      	b.n	80062c8 <_putc_r+0x4c>
 8006300:	080076e0 	.word	0x080076e0
 8006304:	08007700 	.word	0x08007700
 8006308:	080076c0 	.word	0x080076c0

0800630c <_read_r>:
 800630c:	b538      	push	{r3, r4, r5, lr}
 800630e:	4d07      	ldr	r5, [pc, #28]	; (800632c <_read_r+0x20>)
 8006310:	4604      	mov	r4, r0
 8006312:	4608      	mov	r0, r1
 8006314:	4611      	mov	r1, r2
 8006316:	2200      	movs	r2, #0
 8006318:	602a      	str	r2, [r5, #0]
 800631a:	461a      	mov	r2, r3
 800631c:	f7fb fe64 	bl	8001fe8 <_read>
 8006320:	1c43      	adds	r3, r0, #1
 8006322:	d102      	bne.n	800632a <_read_r+0x1e>
 8006324:	682b      	ldr	r3, [r5, #0]
 8006326:	b103      	cbz	r3, 800632a <_read_r+0x1e>
 8006328:	6023      	str	r3, [r4, #0]
 800632a:	bd38      	pop	{r3, r4, r5, pc}
 800632c:	20000300 	.word	0x20000300

08006330 <__swbuf_r>:
 8006330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006332:	460e      	mov	r6, r1
 8006334:	4614      	mov	r4, r2
 8006336:	4605      	mov	r5, r0
 8006338:	b118      	cbz	r0, 8006342 <__swbuf_r+0x12>
 800633a:	6983      	ldr	r3, [r0, #24]
 800633c:	b90b      	cbnz	r3, 8006342 <__swbuf_r+0x12>
 800633e:	f7ff fd7b 	bl	8005e38 <__sinit>
 8006342:	4b21      	ldr	r3, [pc, #132]	; (80063c8 <__swbuf_r+0x98>)
 8006344:	429c      	cmp	r4, r3
 8006346:	d12b      	bne.n	80063a0 <__swbuf_r+0x70>
 8006348:	686c      	ldr	r4, [r5, #4]
 800634a:	69a3      	ldr	r3, [r4, #24]
 800634c:	60a3      	str	r3, [r4, #8]
 800634e:	89a3      	ldrh	r3, [r4, #12]
 8006350:	071a      	lsls	r2, r3, #28
 8006352:	d52f      	bpl.n	80063b4 <__swbuf_r+0x84>
 8006354:	6923      	ldr	r3, [r4, #16]
 8006356:	b36b      	cbz	r3, 80063b4 <__swbuf_r+0x84>
 8006358:	6923      	ldr	r3, [r4, #16]
 800635a:	6820      	ldr	r0, [r4, #0]
 800635c:	1ac0      	subs	r0, r0, r3
 800635e:	6963      	ldr	r3, [r4, #20]
 8006360:	b2f6      	uxtb	r6, r6
 8006362:	4283      	cmp	r3, r0
 8006364:	4637      	mov	r7, r6
 8006366:	dc04      	bgt.n	8006372 <__swbuf_r+0x42>
 8006368:	4621      	mov	r1, r4
 800636a:	4628      	mov	r0, r5
 800636c:	f7ff fcbe 	bl	8005cec <_fflush_r>
 8006370:	bb30      	cbnz	r0, 80063c0 <__swbuf_r+0x90>
 8006372:	68a3      	ldr	r3, [r4, #8]
 8006374:	3b01      	subs	r3, #1
 8006376:	60a3      	str	r3, [r4, #8]
 8006378:	6823      	ldr	r3, [r4, #0]
 800637a:	1c5a      	adds	r2, r3, #1
 800637c:	6022      	str	r2, [r4, #0]
 800637e:	701e      	strb	r6, [r3, #0]
 8006380:	6963      	ldr	r3, [r4, #20]
 8006382:	3001      	adds	r0, #1
 8006384:	4283      	cmp	r3, r0
 8006386:	d004      	beq.n	8006392 <__swbuf_r+0x62>
 8006388:	89a3      	ldrh	r3, [r4, #12]
 800638a:	07db      	lsls	r3, r3, #31
 800638c:	d506      	bpl.n	800639c <__swbuf_r+0x6c>
 800638e:	2e0a      	cmp	r6, #10
 8006390:	d104      	bne.n	800639c <__swbuf_r+0x6c>
 8006392:	4621      	mov	r1, r4
 8006394:	4628      	mov	r0, r5
 8006396:	f7ff fca9 	bl	8005cec <_fflush_r>
 800639a:	b988      	cbnz	r0, 80063c0 <__swbuf_r+0x90>
 800639c:	4638      	mov	r0, r7
 800639e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063a0:	4b0a      	ldr	r3, [pc, #40]	; (80063cc <__swbuf_r+0x9c>)
 80063a2:	429c      	cmp	r4, r3
 80063a4:	d101      	bne.n	80063aa <__swbuf_r+0x7a>
 80063a6:	68ac      	ldr	r4, [r5, #8]
 80063a8:	e7cf      	b.n	800634a <__swbuf_r+0x1a>
 80063aa:	4b09      	ldr	r3, [pc, #36]	; (80063d0 <__swbuf_r+0xa0>)
 80063ac:	429c      	cmp	r4, r3
 80063ae:	bf08      	it	eq
 80063b0:	68ec      	ldreq	r4, [r5, #12]
 80063b2:	e7ca      	b.n	800634a <__swbuf_r+0x1a>
 80063b4:	4621      	mov	r1, r4
 80063b6:	4628      	mov	r0, r5
 80063b8:	f000 f80c 	bl	80063d4 <__swsetup_r>
 80063bc:	2800      	cmp	r0, #0
 80063be:	d0cb      	beq.n	8006358 <__swbuf_r+0x28>
 80063c0:	f04f 37ff 	mov.w	r7, #4294967295
 80063c4:	e7ea      	b.n	800639c <__swbuf_r+0x6c>
 80063c6:	bf00      	nop
 80063c8:	080076e0 	.word	0x080076e0
 80063cc:	08007700 	.word	0x08007700
 80063d0:	080076c0 	.word	0x080076c0

080063d4 <__swsetup_r>:
 80063d4:	4b32      	ldr	r3, [pc, #200]	; (80064a0 <__swsetup_r+0xcc>)
 80063d6:	b570      	push	{r4, r5, r6, lr}
 80063d8:	681d      	ldr	r5, [r3, #0]
 80063da:	4606      	mov	r6, r0
 80063dc:	460c      	mov	r4, r1
 80063de:	b125      	cbz	r5, 80063ea <__swsetup_r+0x16>
 80063e0:	69ab      	ldr	r3, [r5, #24]
 80063e2:	b913      	cbnz	r3, 80063ea <__swsetup_r+0x16>
 80063e4:	4628      	mov	r0, r5
 80063e6:	f7ff fd27 	bl	8005e38 <__sinit>
 80063ea:	4b2e      	ldr	r3, [pc, #184]	; (80064a4 <__swsetup_r+0xd0>)
 80063ec:	429c      	cmp	r4, r3
 80063ee:	d10f      	bne.n	8006410 <__swsetup_r+0x3c>
 80063f0:	686c      	ldr	r4, [r5, #4]
 80063f2:	89a3      	ldrh	r3, [r4, #12]
 80063f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80063f8:	0719      	lsls	r1, r3, #28
 80063fa:	d42c      	bmi.n	8006456 <__swsetup_r+0x82>
 80063fc:	06dd      	lsls	r5, r3, #27
 80063fe:	d411      	bmi.n	8006424 <__swsetup_r+0x50>
 8006400:	2309      	movs	r3, #9
 8006402:	6033      	str	r3, [r6, #0]
 8006404:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006408:	81a3      	strh	r3, [r4, #12]
 800640a:	f04f 30ff 	mov.w	r0, #4294967295
 800640e:	e03e      	b.n	800648e <__swsetup_r+0xba>
 8006410:	4b25      	ldr	r3, [pc, #148]	; (80064a8 <__swsetup_r+0xd4>)
 8006412:	429c      	cmp	r4, r3
 8006414:	d101      	bne.n	800641a <__swsetup_r+0x46>
 8006416:	68ac      	ldr	r4, [r5, #8]
 8006418:	e7eb      	b.n	80063f2 <__swsetup_r+0x1e>
 800641a:	4b24      	ldr	r3, [pc, #144]	; (80064ac <__swsetup_r+0xd8>)
 800641c:	429c      	cmp	r4, r3
 800641e:	bf08      	it	eq
 8006420:	68ec      	ldreq	r4, [r5, #12]
 8006422:	e7e6      	b.n	80063f2 <__swsetup_r+0x1e>
 8006424:	0758      	lsls	r0, r3, #29
 8006426:	d512      	bpl.n	800644e <__swsetup_r+0x7a>
 8006428:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800642a:	b141      	cbz	r1, 800643e <__swsetup_r+0x6a>
 800642c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006430:	4299      	cmp	r1, r3
 8006432:	d002      	beq.n	800643a <__swsetup_r+0x66>
 8006434:	4630      	mov	r0, r6
 8006436:	f7ff fdcd 	bl	8005fd4 <_free_r>
 800643a:	2300      	movs	r3, #0
 800643c:	6363      	str	r3, [r4, #52]	; 0x34
 800643e:	89a3      	ldrh	r3, [r4, #12]
 8006440:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006444:	81a3      	strh	r3, [r4, #12]
 8006446:	2300      	movs	r3, #0
 8006448:	6063      	str	r3, [r4, #4]
 800644a:	6923      	ldr	r3, [r4, #16]
 800644c:	6023      	str	r3, [r4, #0]
 800644e:	89a3      	ldrh	r3, [r4, #12]
 8006450:	f043 0308 	orr.w	r3, r3, #8
 8006454:	81a3      	strh	r3, [r4, #12]
 8006456:	6923      	ldr	r3, [r4, #16]
 8006458:	b94b      	cbnz	r3, 800646e <__swsetup_r+0x9a>
 800645a:	89a3      	ldrh	r3, [r4, #12]
 800645c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006460:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006464:	d003      	beq.n	800646e <__swsetup_r+0x9a>
 8006466:	4621      	mov	r1, r4
 8006468:	4630      	mov	r0, r6
 800646a:	f000 f845 	bl	80064f8 <__smakebuf_r>
 800646e:	89a0      	ldrh	r0, [r4, #12]
 8006470:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006474:	f010 0301 	ands.w	r3, r0, #1
 8006478:	d00a      	beq.n	8006490 <__swsetup_r+0xbc>
 800647a:	2300      	movs	r3, #0
 800647c:	60a3      	str	r3, [r4, #8]
 800647e:	6963      	ldr	r3, [r4, #20]
 8006480:	425b      	negs	r3, r3
 8006482:	61a3      	str	r3, [r4, #24]
 8006484:	6923      	ldr	r3, [r4, #16]
 8006486:	b943      	cbnz	r3, 800649a <__swsetup_r+0xc6>
 8006488:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800648c:	d1ba      	bne.n	8006404 <__swsetup_r+0x30>
 800648e:	bd70      	pop	{r4, r5, r6, pc}
 8006490:	0781      	lsls	r1, r0, #30
 8006492:	bf58      	it	pl
 8006494:	6963      	ldrpl	r3, [r4, #20]
 8006496:	60a3      	str	r3, [r4, #8]
 8006498:	e7f4      	b.n	8006484 <__swsetup_r+0xb0>
 800649a:	2000      	movs	r0, #0
 800649c:	e7f7      	b.n	800648e <__swsetup_r+0xba>
 800649e:	bf00      	nop
 80064a0:	20000010 	.word	0x20000010
 80064a4:	080076e0 	.word	0x080076e0
 80064a8:	08007700 	.word	0x08007700
 80064ac:	080076c0 	.word	0x080076c0

080064b0 <__swhatbuf_r>:
 80064b0:	b570      	push	{r4, r5, r6, lr}
 80064b2:	460e      	mov	r6, r1
 80064b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064b8:	2900      	cmp	r1, #0
 80064ba:	b096      	sub	sp, #88	; 0x58
 80064bc:	4614      	mov	r4, r2
 80064be:	461d      	mov	r5, r3
 80064c0:	da07      	bge.n	80064d2 <__swhatbuf_r+0x22>
 80064c2:	2300      	movs	r3, #0
 80064c4:	602b      	str	r3, [r5, #0]
 80064c6:	89b3      	ldrh	r3, [r6, #12]
 80064c8:	061a      	lsls	r2, r3, #24
 80064ca:	d410      	bmi.n	80064ee <__swhatbuf_r+0x3e>
 80064cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064d0:	e00e      	b.n	80064f0 <__swhatbuf_r+0x40>
 80064d2:	466a      	mov	r2, sp
 80064d4:	f000 f850 	bl	8006578 <_fstat_r>
 80064d8:	2800      	cmp	r0, #0
 80064da:	dbf2      	blt.n	80064c2 <__swhatbuf_r+0x12>
 80064dc:	9a01      	ldr	r2, [sp, #4]
 80064de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80064e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80064e6:	425a      	negs	r2, r3
 80064e8:	415a      	adcs	r2, r3
 80064ea:	602a      	str	r2, [r5, #0]
 80064ec:	e7ee      	b.n	80064cc <__swhatbuf_r+0x1c>
 80064ee:	2340      	movs	r3, #64	; 0x40
 80064f0:	2000      	movs	r0, #0
 80064f2:	6023      	str	r3, [r4, #0]
 80064f4:	b016      	add	sp, #88	; 0x58
 80064f6:	bd70      	pop	{r4, r5, r6, pc}

080064f8 <__smakebuf_r>:
 80064f8:	898b      	ldrh	r3, [r1, #12]
 80064fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80064fc:	079d      	lsls	r5, r3, #30
 80064fe:	4606      	mov	r6, r0
 8006500:	460c      	mov	r4, r1
 8006502:	d507      	bpl.n	8006514 <__smakebuf_r+0x1c>
 8006504:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006508:	6023      	str	r3, [r4, #0]
 800650a:	6123      	str	r3, [r4, #16]
 800650c:	2301      	movs	r3, #1
 800650e:	6163      	str	r3, [r4, #20]
 8006510:	b002      	add	sp, #8
 8006512:	bd70      	pop	{r4, r5, r6, pc}
 8006514:	ab01      	add	r3, sp, #4
 8006516:	466a      	mov	r2, sp
 8006518:	f7ff ffca 	bl	80064b0 <__swhatbuf_r>
 800651c:	9900      	ldr	r1, [sp, #0]
 800651e:	4605      	mov	r5, r0
 8006520:	4630      	mov	r0, r6
 8006522:	f7ff fda7 	bl	8006074 <_malloc_r>
 8006526:	b948      	cbnz	r0, 800653c <__smakebuf_r+0x44>
 8006528:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800652c:	059a      	lsls	r2, r3, #22
 800652e:	d4ef      	bmi.n	8006510 <__smakebuf_r+0x18>
 8006530:	f023 0303 	bic.w	r3, r3, #3
 8006534:	f043 0302 	orr.w	r3, r3, #2
 8006538:	81a3      	strh	r3, [r4, #12]
 800653a:	e7e3      	b.n	8006504 <__smakebuf_r+0xc>
 800653c:	4b0d      	ldr	r3, [pc, #52]	; (8006574 <__smakebuf_r+0x7c>)
 800653e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006540:	89a3      	ldrh	r3, [r4, #12]
 8006542:	6020      	str	r0, [r4, #0]
 8006544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006548:	81a3      	strh	r3, [r4, #12]
 800654a:	9b00      	ldr	r3, [sp, #0]
 800654c:	6163      	str	r3, [r4, #20]
 800654e:	9b01      	ldr	r3, [sp, #4]
 8006550:	6120      	str	r0, [r4, #16]
 8006552:	b15b      	cbz	r3, 800656c <__smakebuf_r+0x74>
 8006554:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006558:	4630      	mov	r0, r6
 800655a:	f000 f81f 	bl	800659c <_isatty_r>
 800655e:	b128      	cbz	r0, 800656c <__smakebuf_r+0x74>
 8006560:	89a3      	ldrh	r3, [r4, #12]
 8006562:	f023 0303 	bic.w	r3, r3, #3
 8006566:	f043 0301 	orr.w	r3, r3, #1
 800656a:	81a3      	strh	r3, [r4, #12]
 800656c:	89a0      	ldrh	r0, [r4, #12]
 800656e:	4305      	orrs	r5, r0
 8006570:	81a5      	strh	r5, [r4, #12]
 8006572:	e7cd      	b.n	8006510 <__smakebuf_r+0x18>
 8006574:	08005dd1 	.word	0x08005dd1

08006578 <_fstat_r>:
 8006578:	b538      	push	{r3, r4, r5, lr}
 800657a:	4d07      	ldr	r5, [pc, #28]	; (8006598 <_fstat_r+0x20>)
 800657c:	2300      	movs	r3, #0
 800657e:	4604      	mov	r4, r0
 8006580:	4608      	mov	r0, r1
 8006582:	4611      	mov	r1, r2
 8006584:	602b      	str	r3, [r5, #0]
 8006586:	f7fb fd74 	bl	8002072 <_fstat>
 800658a:	1c43      	adds	r3, r0, #1
 800658c:	d102      	bne.n	8006594 <_fstat_r+0x1c>
 800658e:	682b      	ldr	r3, [r5, #0]
 8006590:	b103      	cbz	r3, 8006594 <_fstat_r+0x1c>
 8006592:	6023      	str	r3, [r4, #0]
 8006594:	bd38      	pop	{r3, r4, r5, pc}
 8006596:	bf00      	nop
 8006598:	20000300 	.word	0x20000300

0800659c <_isatty_r>:
 800659c:	b538      	push	{r3, r4, r5, lr}
 800659e:	4d06      	ldr	r5, [pc, #24]	; (80065b8 <_isatty_r+0x1c>)
 80065a0:	2300      	movs	r3, #0
 80065a2:	4604      	mov	r4, r0
 80065a4:	4608      	mov	r0, r1
 80065a6:	602b      	str	r3, [r5, #0]
 80065a8:	f7fb fd73 	bl	8002092 <_isatty>
 80065ac:	1c43      	adds	r3, r0, #1
 80065ae:	d102      	bne.n	80065b6 <_isatty_r+0x1a>
 80065b0:	682b      	ldr	r3, [r5, #0]
 80065b2:	b103      	cbz	r3, 80065b6 <_isatty_r+0x1a>
 80065b4:	6023      	str	r3, [r4, #0]
 80065b6:	bd38      	pop	{r3, r4, r5, pc}
 80065b8:	20000300 	.word	0x20000300
 80065bc:	00000000 	.word	0x00000000

080065c0 <tan>:
 80065c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80065c2:	ec53 2b10 	vmov	r2, r3, d0
 80065c6:	4814      	ldr	r0, [pc, #80]	; (8006618 <tan+0x58>)
 80065c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80065cc:	4281      	cmp	r1, r0
 80065ce:	dc05      	bgt.n	80065dc <tan+0x1c>
 80065d0:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8006610 <tan+0x50>
 80065d4:	2001      	movs	r0, #1
 80065d6:	f000 fd6f 	bl	80070b8 <__kernel_tan>
 80065da:	e009      	b.n	80065f0 <tan+0x30>
 80065dc:	480f      	ldr	r0, [pc, #60]	; (800661c <tan+0x5c>)
 80065de:	4281      	cmp	r1, r0
 80065e0:	dd09      	ble.n	80065f6 <tan+0x36>
 80065e2:	ee10 0a10 	vmov	r0, s0
 80065e6:	4619      	mov	r1, r3
 80065e8:	f7f9 fdfa 	bl	80001e0 <__aeabi_dsub>
 80065ec:	ec41 0b10 	vmov	d0, r0, r1
 80065f0:	b005      	add	sp, #20
 80065f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80065f6:	4668      	mov	r0, sp
 80065f8:	f000 f812 	bl	8006620 <__ieee754_rem_pio2>
 80065fc:	0040      	lsls	r0, r0, #1
 80065fe:	f000 0002 	and.w	r0, r0, #2
 8006602:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006606:	ed9d 0b00 	vldr	d0, [sp]
 800660a:	f1c0 0001 	rsb	r0, r0, #1
 800660e:	e7e2      	b.n	80065d6 <tan+0x16>
	...
 8006618:	3fe921fb 	.word	0x3fe921fb
 800661c:	7fefffff 	.word	0x7fefffff

08006620 <__ieee754_rem_pio2>:
 8006620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006624:	ed2d 8b02 	vpush	{d8}
 8006628:	ec55 4b10 	vmov	r4, r5, d0
 800662c:	4bca      	ldr	r3, [pc, #808]	; (8006958 <__ieee754_rem_pio2+0x338>)
 800662e:	b08b      	sub	sp, #44	; 0x2c
 8006630:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8006634:	4598      	cmp	r8, r3
 8006636:	4682      	mov	sl, r0
 8006638:	9502      	str	r5, [sp, #8]
 800663a:	dc08      	bgt.n	800664e <__ieee754_rem_pio2+0x2e>
 800663c:	2200      	movs	r2, #0
 800663e:	2300      	movs	r3, #0
 8006640:	ed80 0b00 	vstr	d0, [r0]
 8006644:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006648:	f04f 0b00 	mov.w	fp, #0
 800664c:	e028      	b.n	80066a0 <__ieee754_rem_pio2+0x80>
 800664e:	4bc3      	ldr	r3, [pc, #780]	; (800695c <__ieee754_rem_pio2+0x33c>)
 8006650:	4598      	cmp	r8, r3
 8006652:	dc78      	bgt.n	8006746 <__ieee754_rem_pio2+0x126>
 8006654:	9b02      	ldr	r3, [sp, #8]
 8006656:	4ec2      	ldr	r6, [pc, #776]	; (8006960 <__ieee754_rem_pio2+0x340>)
 8006658:	2b00      	cmp	r3, #0
 800665a:	ee10 0a10 	vmov	r0, s0
 800665e:	a3b0      	add	r3, pc, #704	; (adr r3, 8006920 <__ieee754_rem_pio2+0x300>)
 8006660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006664:	4629      	mov	r1, r5
 8006666:	dd39      	ble.n	80066dc <__ieee754_rem_pio2+0xbc>
 8006668:	f7f9 fdba 	bl	80001e0 <__aeabi_dsub>
 800666c:	45b0      	cmp	r8, r6
 800666e:	4604      	mov	r4, r0
 8006670:	460d      	mov	r5, r1
 8006672:	d01b      	beq.n	80066ac <__ieee754_rem_pio2+0x8c>
 8006674:	a3ac      	add	r3, pc, #688	; (adr r3, 8006928 <__ieee754_rem_pio2+0x308>)
 8006676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667a:	f7f9 fdb1 	bl	80001e0 <__aeabi_dsub>
 800667e:	4602      	mov	r2, r0
 8006680:	460b      	mov	r3, r1
 8006682:	e9ca 2300 	strd	r2, r3, [sl]
 8006686:	4620      	mov	r0, r4
 8006688:	4629      	mov	r1, r5
 800668a:	f7f9 fda9 	bl	80001e0 <__aeabi_dsub>
 800668e:	a3a6      	add	r3, pc, #664	; (adr r3, 8006928 <__ieee754_rem_pio2+0x308>)
 8006690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006694:	f7f9 fda4 	bl	80001e0 <__aeabi_dsub>
 8006698:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800669c:	f04f 0b01 	mov.w	fp, #1
 80066a0:	4658      	mov	r0, fp
 80066a2:	b00b      	add	sp, #44	; 0x2c
 80066a4:	ecbd 8b02 	vpop	{d8}
 80066a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066ac:	a3a0      	add	r3, pc, #640	; (adr r3, 8006930 <__ieee754_rem_pio2+0x310>)
 80066ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b2:	f7f9 fd95 	bl	80001e0 <__aeabi_dsub>
 80066b6:	a3a0      	add	r3, pc, #640	; (adr r3, 8006938 <__ieee754_rem_pio2+0x318>)
 80066b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066bc:	4604      	mov	r4, r0
 80066be:	460d      	mov	r5, r1
 80066c0:	f7f9 fd8e 	bl	80001e0 <__aeabi_dsub>
 80066c4:	4602      	mov	r2, r0
 80066c6:	460b      	mov	r3, r1
 80066c8:	e9ca 2300 	strd	r2, r3, [sl]
 80066cc:	4620      	mov	r0, r4
 80066ce:	4629      	mov	r1, r5
 80066d0:	f7f9 fd86 	bl	80001e0 <__aeabi_dsub>
 80066d4:	a398      	add	r3, pc, #608	; (adr r3, 8006938 <__ieee754_rem_pio2+0x318>)
 80066d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066da:	e7db      	b.n	8006694 <__ieee754_rem_pio2+0x74>
 80066dc:	f7f9 fd82 	bl	80001e4 <__adddf3>
 80066e0:	45b0      	cmp	r8, r6
 80066e2:	4604      	mov	r4, r0
 80066e4:	460d      	mov	r5, r1
 80066e6:	d016      	beq.n	8006716 <__ieee754_rem_pio2+0xf6>
 80066e8:	a38f      	add	r3, pc, #572	; (adr r3, 8006928 <__ieee754_rem_pio2+0x308>)
 80066ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ee:	f7f9 fd79 	bl	80001e4 <__adddf3>
 80066f2:	4602      	mov	r2, r0
 80066f4:	460b      	mov	r3, r1
 80066f6:	e9ca 2300 	strd	r2, r3, [sl]
 80066fa:	4620      	mov	r0, r4
 80066fc:	4629      	mov	r1, r5
 80066fe:	f7f9 fd6f 	bl	80001e0 <__aeabi_dsub>
 8006702:	a389      	add	r3, pc, #548	; (adr r3, 8006928 <__ieee754_rem_pio2+0x308>)
 8006704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006708:	f7f9 fd6c 	bl	80001e4 <__adddf3>
 800670c:	f04f 3bff 	mov.w	fp, #4294967295
 8006710:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006714:	e7c4      	b.n	80066a0 <__ieee754_rem_pio2+0x80>
 8006716:	a386      	add	r3, pc, #536	; (adr r3, 8006930 <__ieee754_rem_pio2+0x310>)
 8006718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671c:	f7f9 fd62 	bl	80001e4 <__adddf3>
 8006720:	a385      	add	r3, pc, #532	; (adr r3, 8006938 <__ieee754_rem_pio2+0x318>)
 8006722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006726:	4604      	mov	r4, r0
 8006728:	460d      	mov	r5, r1
 800672a:	f7f9 fd5b 	bl	80001e4 <__adddf3>
 800672e:	4602      	mov	r2, r0
 8006730:	460b      	mov	r3, r1
 8006732:	e9ca 2300 	strd	r2, r3, [sl]
 8006736:	4620      	mov	r0, r4
 8006738:	4629      	mov	r1, r5
 800673a:	f7f9 fd51 	bl	80001e0 <__aeabi_dsub>
 800673e:	a37e      	add	r3, pc, #504	; (adr r3, 8006938 <__ieee754_rem_pio2+0x318>)
 8006740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006744:	e7e0      	b.n	8006708 <__ieee754_rem_pio2+0xe8>
 8006746:	4b87      	ldr	r3, [pc, #540]	; (8006964 <__ieee754_rem_pio2+0x344>)
 8006748:	4598      	cmp	r8, r3
 800674a:	f300 80d9 	bgt.w	8006900 <__ieee754_rem_pio2+0x2e0>
 800674e:	f000 fe87 	bl	8007460 <fabs>
 8006752:	ec55 4b10 	vmov	r4, r5, d0
 8006756:	ee10 0a10 	vmov	r0, s0
 800675a:	a379      	add	r3, pc, #484	; (adr r3, 8006940 <__ieee754_rem_pio2+0x320>)
 800675c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006760:	4629      	mov	r1, r5
 8006762:	f7f9 fef5 	bl	8000550 <__aeabi_dmul>
 8006766:	4b80      	ldr	r3, [pc, #512]	; (8006968 <__ieee754_rem_pio2+0x348>)
 8006768:	2200      	movs	r2, #0
 800676a:	f7f9 fd3b 	bl	80001e4 <__adddf3>
 800676e:	f7fa f989 	bl	8000a84 <__aeabi_d2iz>
 8006772:	4683      	mov	fp, r0
 8006774:	f7f9 fe82 	bl	800047c <__aeabi_i2d>
 8006778:	4602      	mov	r2, r0
 800677a:	460b      	mov	r3, r1
 800677c:	ec43 2b18 	vmov	d8, r2, r3
 8006780:	a367      	add	r3, pc, #412	; (adr r3, 8006920 <__ieee754_rem_pio2+0x300>)
 8006782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006786:	f7f9 fee3 	bl	8000550 <__aeabi_dmul>
 800678a:	4602      	mov	r2, r0
 800678c:	460b      	mov	r3, r1
 800678e:	4620      	mov	r0, r4
 8006790:	4629      	mov	r1, r5
 8006792:	f7f9 fd25 	bl	80001e0 <__aeabi_dsub>
 8006796:	a364      	add	r3, pc, #400	; (adr r3, 8006928 <__ieee754_rem_pio2+0x308>)
 8006798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800679c:	4606      	mov	r6, r0
 800679e:	460f      	mov	r7, r1
 80067a0:	ec51 0b18 	vmov	r0, r1, d8
 80067a4:	f7f9 fed4 	bl	8000550 <__aeabi_dmul>
 80067a8:	f1bb 0f1f 	cmp.w	fp, #31
 80067ac:	4604      	mov	r4, r0
 80067ae:	460d      	mov	r5, r1
 80067b0:	dc0d      	bgt.n	80067ce <__ieee754_rem_pio2+0x1ae>
 80067b2:	4b6e      	ldr	r3, [pc, #440]	; (800696c <__ieee754_rem_pio2+0x34c>)
 80067b4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80067b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067bc:	4543      	cmp	r3, r8
 80067be:	d006      	beq.n	80067ce <__ieee754_rem_pio2+0x1ae>
 80067c0:	4622      	mov	r2, r4
 80067c2:	462b      	mov	r3, r5
 80067c4:	4630      	mov	r0, r6
 80067c6:	4639      	mov	r1, r7
 80067c8:	f7f9 fd0a 	bl	80001e0 <__aeabi_dsub>
 80067cc:	e00f      	b.n	80067ee <__ieee754_rem_pio2+0x1ce>
 80067ce:	462b      	mov	r3, r5
 80067d0:	4622      	mov	r2, r4
 80067d2:	4630      	mov	r0, r6
 80067d4:	4639      	mov	r1, r7
 80067d6:	f7f9 fd03 	bl	80001e0 <__aeabi_dsub>
 80067da:	ea4f 5328 	mov.w	r3, r8, asr #20
 80067de:	9303      	str	r3, [sp, #12]
 80067e0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80067e4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80067e8:	f1b8 0f10 	cmp.w	r8, #16
 80067ec:	dc02      	bgt.n	80067f4 <__ieee754_rem_pio2+0x1d4>
 80067ee:	e9ca 0100 	strd	r0, r1, [sl]
 80067f2:	e039      	b.n	8006868 <__ieee754_rem_pio2+0x248>
 80067f4:	a34e      	add	r3, pc, #312	; (adr r3, 8006930 <__ieee754_rem_pio2+0x310>)
 80067f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067fa:	ec51 0b18 	vmov	r0, r1, d8
 80067fe:	f7f9 fea7 	bl	8000550 <__aeabi_dmul>
 8006802:	4604      	mov	r4, r0
 8006804:	460d      	mov	r5, r1
 8006806:	4602      	mov	r2, r0
 8006808:	460b      	mov	r3, r1
 800680a:	4630      	mov	r0, r6
 800680c:	4639      	mov	r1, r7
 800680e:	f7f9 fce7 	bl	80001e0 <__aeabi_dsub>
 8006812:	4602      	mov	r2, r0
 8006814:	460b      	mov	r3, r1
 8006816:	4680      	mov	r8, r0
 8006818:	4689      	mov	r9, r1
 800681a:	4630      	mov	r0, r6
 800681c:	4639      	mov	r1, r7
 800681e:	f7f9 fcdf 	bl	80001e0 <__aeabi_dsub>
 8006822:	4622      	mov	r2, r4
 8006824:	462b      	mov	r3, r5
 8006826:	f7f9 fcdb 	bl	80001e0 <__aeabi_dsub>
 800682a:	a343      	add	r3, pc, #268	; (adr r3, 8006938 <__ieee754_rem_pio2+0x318>)
 800682c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006830:	4604      	mov	r4, r0
 8006832:	460d      	mov	r5, r1
 8006834:	ec51 0b18 	vmov	r0, r1, d8
 8006838:	f7f9 fe8a 	bl	8000550 <__aeabi_dmul>
 800683c:	4622      	mov	r2, r4
 800683e:	462b      	mov	r3, r5
 8006840:	f7f9 fcce 	bl	80001e0 <__aeabi_dsub>
 8006844:	4602      	mov	r2, r0
 8006846:	460b      	mov	r3, r1
 8006848:	4604      	mov	r4, r0
 800684a:	460d      	mov	r5, r1
 800684c:	4640      	mov	r0, r8
 800684e:	4649      	mov	r1, r9
 8006850:	f7f9 fcc6 	bl	80001e0 <__aeabi_dsub>
 8006854:	9a03      	ldr	r2, [sp, #12]
 8006856:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800685a:	1ad3      	subs	r3, r2, r3
 800685c:	2b31      	cmp	r3, #49	; 0x31
 800685e:	dc24      	bgt.n	80068aa <__ieee754_rem_pio2+0x28a>
 8006860:	e9ca 0100 	strd	r0, r1, [sl]
 8006864:	4646      	mov	r6, r8
 8006866:	464f      	mov	r7, r9
 8006868:	e9da 8900 	ldrd	r8, r9, [sl]
 800686c:	4630      	mov	r0, r6
 800686e:	4642      	mov	r2, r8
 8006870:	464b      	mov	r3, r9
 8006872:	4639      	mov	r1, r7
 8006874:	f7f9 fcb4 	bl	80001e0 <__aeabi_dsub>
 8006878:	462b      	mov	r3, r5
 800687a:	4622      	mov	r2, r4
 800687c:	f7f9 fcb0 	bl	80001e0 <__aeabi_dsub>
 8006880:	9b02      	ldr	r3, [sp, #8]
 8006882:	2b00      	cmp	r3, #0
 8006884:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006888:	f6bf af0a 	bge.w	80066a0 <__ieee754_rem_pio2+0x80>
 800688c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006890:	f8ca 3004 	str.w	r3, [sl, #4]
 8006894:	f8ca 8000 	str.w	r8, [sl]
 8006898:	f8ca 0008 	str.w	r0, [sl, #8]
 800689c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80068a0:	f8ca 300c 	str.w	r3, [sl, #12]
 80068a4:	f1cb 0b00 	rsb	fp, fp, #0
 80068a8:	e6fa      	b.n	80066a0 <__ieee754_rem_pio2+0x80>
 80068aa:	a327      	add	r3, pc, #156	; (adr r3, 8006948 <__ieee754_rem_pio2+0x328>)
 80068ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b0:	ec51 0b18 	vmov	r0, r1, d8
 80068b4:	f7f9 fe4c 	bl	8000550 <__aeabi_dmul>
 80068b8:	4604      	mov	r4, r0
 80068ba:	460d      	mov	r5, r1
 80068bc:	4602      	mov	r2, r0
 80068be:	460b      	mov	r3, r1
 80068c0:	4640      	mov	r0, r8
 80068c2:	4649      	mov	r1, r9
 80068c4:	f7f9 fc8c 	bl	80001e0 <__aeabi_dsub>
 80068c8:	4602      	mov	r2, r0
 80068ca:	460b      	mov	r3, r1
 80068cc:	4606      	mov	r6, r0
 80068ce:	460f      	mov	r7, r1
 80068d0:	4640      	mov	r0, r8
 80068d2:	4649      	mov	r1, r9
 80068d4:	f7f9 fc84 	bl	80001e0 <__aeabi_dsub>
 80068d8:	4622      	mov	r2, r4
 80068da:	462b      	mov	r3, r5
 80068dc:	f7f9 fc80 	bl	80001e0 <__aeabi_dsub>
 80068e0:	a31b      	add	r3, pc, #108	; (adr r3, 8006950 <__ieee754_rem_pio2+0x330>)
 80068e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e6:	4604      	mov	r4, r0
 80068e8:	460d      	mov	r5, r1
 80068ea:	ec51 0b18 	vmov	r0, r1, d8
 80068ee:	f7f9 fe2f 	bl	8000550 <__aeabi_dmul>
 80068f2:	4622      	mov	r2, r4
 80068f4:	462b      	mov	r3, r5
 80068f6:	f7f9 fc73 	bl	80001e0 <__aeabi_dsub>
 80068fa:	4604      	mov	r4, r0
 80068fc:	460d      	mov	r5, r1
 80068fe:	e75f      	b.n	80067c0 <__ieee754_rem_pio2+0x1a0>
 8006900:	4b1b      	ldr	r3, [pc, #108]	; (8006970 <__ieee754_rem_pio2+0x350>)
 8006902:	4598      	cmp	r8, r3
 8006904:	dd36      	ble.n	8006974 <__ieee754_rem_pio2+0x354>
 8006906:	ee10 2a10 	vmov	r2, s0
 800690a:	462b      	mov	r3, r5
 800690c:	4620      	mov	r0, r4
 800690e:	4629      	mov	r1, r5
 8006910:	f7f9 fc66 	bl	80001e0 <__aeabi_dsub>
 8006914:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006918:	e9ca 0100 	strd	r0, r1, [sl]
 800691c:	e694      	b.n	8006648 <__ieee754_rem_pio2+0x28>
 800691e:	bf00      	nop
 8006920:	54400000 	.word	0x54400000
 8006924:	3ff921fb 	.word	0x3ff921fb
 8006928:	1a626331 	.word	0x1a626331
 800692c:	3dd0b461 	.word	0x3dd0b461
 8006930:	1a600000 	.word	0x1a600000
 8006934:	3dd0b461 	.word	0x3dd0b461
 8006938:	2e037073 	.word	0x2e037073
 800693c:	3ba3198a 	.word	0x3ba3198a
 8006940:	6dc9c883 	.word	0x6dc9c883
 8006944:	3fe45f30 	.word	0x3fe45f30
 8006948:	2e000000 	.word	0x2e000000
 800694c:	3ba3198a 	.word	0x3ba3198a
 8006950:	252049c1 	.word	0x252049c1
 8006954:	397b839a 	.word	0x397b839a
 8006958:	3fe921fb 	.word	0x3fe921fb
 800695c:	4002d97b 	.word	0x4002d97b
 8006960:	3ff921fb 	.word	0x3ff921fb
 8006964:	413921fb 	.word	0x413921fb
 8006968:	3fe00000 	.word	0x3fe00000
 800696c:	08007724 	.word	0x08007724
 8006970:	7fefffff 	.word	0x7fefffff
 8006974:	ea4f 5428 	mov.w	r4, r8, asr #20
 8006978:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800697c:	ee10 0a10 	vmov	r0, s0
 8006980:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8006984:	ee10 6a10 	vmov	r6, s0
 8006988:	460f      	mov	r7, r1
 800698a:	f7fa f87b 	bl	8000a84 <__aeabi_d2iz>
 800698e:	f7f9 fd75 	bl	800047c <__aeabi_i2d>
 8006992:	4602      	mov	r2, r0
 8006994:	460b      	mov	r3, r1
 8006996:	4630      	mov	r0, r6
 8006998:	4639      	mov	r1, r7
 800699a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800699e:	f7f9 fc1f 	bl	80001e0 <__aeabi_dsub>
 80069a2:	4b22      	ldr	r3, [pc, #136]	; (8006a2c <__ieee754_rem_pio2+0x40c>)
 80069a4:	2200      	movs	r2, #0
 80069a6:	f7f9 fdd3 	bl	8000550 <__aeabi_dmul>
 80069aa:	460f      	mov	r7, r1
 80069ac:	4606      	mov	r6, r0
 80069ae:	f7fa f869 	bl	8000a84 <__aeabi_d2iz>
 80069b2:	f7f9 fd63 	bl	800047c <__aeabi_i2d>
 80069b6:	4602      	mov	r2, r0
 80069b8:	460b      	mov	r3, r1
 80069ba:	4630      	mov	r0, r6
 80069bc:	4639      	mov	r1, r7
 80069be:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80069c2:	f7f9 fc0d 	bl	80001e0 <__aeabi_dsub>
 80069c6:	4b19      	ldr	r3, [pc, #100]	; (8006a2c <__ieee754_rem_pio2+0x40c>)
 80069c8:	2200      	movs	r2, #0
 80069ca:	f7f9 fdc1 	bl	8000550 <__aeabi_dmul>
 80069ce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80069d2:	ad04      	add	r5, sp, #16
 80069d4:	f04f 0803 	mov.w	r8, #3
 80069d8:	46a9      	mov	r9, r5
 80069da:	2600      	movs	r6, #0
 80069dc:	2700      	movs	r7, #0
 80069de:	4632      	mov	r2, r6
 80069e0:	463b      	mov	r3, r7
 80069e2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80069e6:	46c3      	mov	fp, r8
 80069e8:	3d08      	subs	r5, #8
 80069ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80069ee:	f7fa f817 	bl	8000a20 <__aeabi_dcmpeq>
 80069f2:	2800      	cmp	r0, #0
 80069f4:	d1f3      	bne.n	80069de <__ieee754_rem_pio2+0x3be>
 80069f6:	4b0e      	ldr	r3, [pc, #56]	; (8006a30 <__ieee754_rem_pio2+0x410>)
 80069f8:	9301      	str	r3, [sp, #4]
 80069fa:	2302      	movs	r3, #2
 80069fc:	9300      	str	r3, [sp, #0]
 80069fe:	4622      	mov	r2, r4
 8006a00:	465b      	mov	r3, fp
 8006a02:	4651      	mov	r1, sl
 8006a04:	4648      	mov	r0, r9
 8006a06:	f000 f817 	bl	8006a38 <__kernel_rem_pio2>
 8006a0a:	9b02      	ldr	r3, [sp, #8]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	4683      	mov	fp, r0
 8006a10:	f6bf ae46 	bge.w	80066a0 <__ieee754_rem_pio2+0x80>
 8006a14:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006a18:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006a1c:	f8ca 3004 	str.w	r3, [sl, #4]
 8006a20:	f8da 300c 	ldr.w	r3, [sl, #12]
 8006a24:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006a28:	e73a      	b.n	80068a0 <__ieee754_rem_pio2+0x280>
 8006a2a:	bf00      	nop
 8006a2c:	41700000 	.word	0x41700000
 8006a30:	080077a4 	.word	0x080077a4
 8006a34:	00000000 	.word	0x00000000

08006a38 <__kernel_rem_pio2>:
 8006a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a3c:	ed2d 8b02 	vpush	{d8}
 8006a40:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8006a44:	f112 0f14 	cmn.w	r2, #20
 8006a48:	9308      	str	r3, [sp, #32]
 8006a4a:	9101      	str	r1, [sp, #4]
 8006a4c:	4bc6      	ldr	r3, [pc, #792]	; (8006d68 <__kernel_rem_pio2+0x330>)
 8006a4e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8006a50:	9009      	str	r0, [sp, #36]	; 0x24
 8006a52:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006a56:	9304      	str	r3, [sp, #16]
 8006a58:	9b08      	ldr	r3, [sp, #32]
 8006a5a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006a5e:	bfa8      	it	ge
 8006a60:	1ed4      	subge	r4, r2, #3
 8006a62:	9306      	str	r3, [sp, #24]
 8006a64:	bfb2      	itee	lt
 8006a66:	2400      	movlt	r4, #0
 8006a68:	2318      	movge	r3, #24
 8006a6a:	fb94 f4f3 	sdivge	r4, r4, r3
 8006a6e:	f06f 0317 	mvn.w	r3, #23
 8006a72:	fb04 3303 	mla	r3, r4, r3, r3
 8006a76:	eb03 0a02 	add.w	sl, r3, r2
 8006a7a:	9b04      	ldr	r3, [sp, #16]
 8006a7c:	9a06      	ldr	r2, [sp, #24]
 8006a7e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8006d58 <__kernel_rem_pio2+0x320>
 8006a82:	eb03 0802 	add.w	r8, r3, r2
 8006a86:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8006a88:	1aa7      	subs	r7, r4, r2
 8006a8a:	ae20      	add	r6, sp, #128	; 0x80
 8006a8c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006a90:	2500      	movs	r5, #0
 8006a92:	4545      	cmp	r5, r8
 8006a94:	dd18      	ble.n	8006ac8 <__kernel_rem_pio2+0x90>
 8006a96:	9b08      	ldr	r3, [sp, #32]
 8006a98:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8006a9c:	aa20      	add	r2, sp, #128	; 0x80
 8006a9e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8006d58 <__kernel_rem_pio2+0x320>
 8006aa2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8006aa6:	f1c3 0301 	rsb	r3, r3, #1
 8006aaa:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8006aae:	9307      	str	r3, [sp, #28]
 8006ab0:	9b07      	ldr	r3, [sp, #28]
 8006ab2:	9a04      	ldr	r2, [sp, #16]
 8006ab4:	4443      	add	r3, r8
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	db2f      	blt.n	8006b1a <__kernel_rem_pio2+0xe2>
 8006aba:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006abe:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006ac2:	462f      	mov	r7, r5
 8006ac4:	2600      	movs	r6, #0
 8006ac6:	e01b      	b.n	8006b00 <__kernel_rem_pio2+0xc8>
 8006ac8:	42ef      	cmn	r7, r5
 8006aca:	d407      	bmi.n	8006adc <__kernel_rem_pio2+0xa4>
 8006acc:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006ad0:	f7f9 fcd4 	bl	800047c <__aeabi_i2d>
 8006ad4:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006ad8:	3501      	adds	r5, #1
 8006ada:	e7da      	b.n	8006a92 <__kernel_rem_pio2+0x5a>
 8006adc:	ec51 0b18 	vmov	r0, r1, d8
 8006ae0:	e7f8      	b.n	8006ad4 <__kernel_rem_pio2+0x9c>
 8006ae2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ae6:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006aea:	f7f9 fd31 	bl	8000550 <__aeabi_dmul>
 8006aee:	4602      	mov	r2, r0
 8006af0:	460b      	mov	r3, r1
 8006af2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006af6:	f7f9 fb75 	bl	80001e4 <__adddf3>
 8006afa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006afe:	3601      	adds	r6, #1
 8006b00:	9b06      	ldr	r3, [sp, #24]
 8006b02:	429e      	cmp	r6, r3
 8006b04:	f1a7 0708 	sub.w	r7, r7, #8
 8006b08:	ddeb      	ble.n	8006ae2 <__kernel_rem_pio2+0xaa>
 8006b0a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006b0e:	3508      	adds	r5, #8
 8006b10:	ecab 7b02 	vstmia	fp!, {d7}
 8006b14:	f108 0801 	add.w	r8, r8, #1
 8006b18:	e7ca      	b.n	8006ab0 <__kernel_rem_pio2+0x78>
 8006b1a:	9b04      	ldr	r3, [sp, #16]
 8006b1c:	aa0c      	add	r2, sp, #48	; 0x30
 8006b1e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006b22:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b24:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8006b26:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006b2a:	9c04      	ldr	r4, [sp, #16]
 8006b2c:	930a      	str	r3, [sp, #40]	; 0x28
 8006b2e:	ab98      	add	r3, sp, #608	; 0x260
 8006b30:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006b34:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8006b38:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8006b3c:	f8cd b008 	str.w	fp, [sp, #8]
 8006b40:	4625      	mov	r5, r4
 8006b42:	2d00      	cmp	r5, #0
 8006b44:	dc78      	bgt.n	8006c38 <__kernel_rem_pio2+0x200>
 8006b46:	ec47 6b10 	vmov	d0, r6, r7
 8006b4a:	4650      	mov	r0, sl
 8006b4c:	f000 fd14 	bl	8007578 <scalbn>
 8006b50:	ec57 6b10 	vmov	r6, r7, d0
 8006b54:	2200      	movs	r2, #0
 8006b56:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006b5a:	ee10 0a10 	vmov	r0, s0
 8006b5e:	4639      	mov	r1, r7
 8006b60:	f7f9 fcf6 	bl	8000550 <__aeabi_dmul>
 8006b64:	ec41 0b10 	vmov	d0, r0, r1
 8006b68:	f000 fc86 	bl	8007478 <floor>
 8006b6c:	4b7f      	ldr	r3, [pc, #508]	; (8006d6c <__kernel_rem_pio2+0x334>)
 8006b6e:	ec51 0b10 	vmov	r0, r1, d0
 8006b72:	2200      	movs	r2, #0
 8006b74:	f7f9 fcec 	bl	8000550 <__aeabi_dmul>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	4630      	mov	r0, r6
 8006b7e:	4639      	mov	r1, r7
 8006b80:	f7f9 fb2e 	bl	80001e0 <__aeabi_dsub>
 8006b84:	460f      	mov	r7, r1
 8006b86:	4606      	mov	r6, r0
 8006b88:	f7f9 ff7c 	bl	8000a84 <__aeabi_d2iz>
 8006b8c:	9007      	str	r0, [sp, #28]
 8006b8e:	f7f9 fc75 	bl	800047c <__aeabi_i2d>
 8006b92:	4602      	mov	r2, r0
 8006b94:	460b      	mov	r3, r1
 8006b96:	4630      	mov	r0, r6
 8006b98:	4639      	mov	r1, r7
 8006b9a:	f7f9 fb21 	bl	80001e0 <__aeabi_dsub>
 8006b9e:	f1ba 0f00 	cmp.w	sl, #0
 8006ba2:	4606      	mov	r6, r0
 8006ba4:	460f      	mov	r7, r1
 8006ba6:	dd70      	ble.n	8006c8a <__kernel_rem_pio2+0x252>
 8006ba8:	1e62      	subs	r2, r4, #1
 8006baa:	ab0c      	add	r3, sp, #48	; 0x30
 8006bac:	9d07      	ldr	r5, [sp, #28]
 8006bae:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006bb2:	f1ca 0118 	rsb	r1, sl, #24
 8006bb6:	fa40 f301 	asr.w	r3, r0, r1
 8006bba:	441d      	add	r5, r3
 8006bbc:	408b      	lsls	r3, r1
 8006bbe:	1ac0      	subs	r0, r0, r3
 8006bc0:	ab0c      	add	r3, sp, #48	; 0x30
 8006bc2:	9507      	str	r5, [sp, #28]
 8006bc4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8006bc8:	f1ca 0317 	rsb	r3, sl, #23
 8006bcc:	fa40 f303 	asr.w	r3, r0, r3
 8006bd0:	9302      	str	r3, [sp, #8]
 8006bd2:	9b02      	ldr	r3, [sp, #8]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	dd66      	ble.n	8006ca6 <__kernel_rem_pio2+0x26e>
 8006bd8:	9b07      	ldr	r3, [sp, #28]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	3301      	adds	r3, #1
 8006bde:	9307      	str	r3, [sp, #28]
 8006be0:	4615      	mov	r5, r2
 8006be2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006be6:	4294      	cmp	r4, r2
 8006be8:	f300 8099 	bgt.w	8006d1e <__kernel_rem_pio2+0x2e6>
 8006bec:	f1ba 0f00 	cmp.w	sl, #0
 8006bf0:	dd07      	ble.n	8006c02 <__kernel_rem_pio2+0x1ca>
 8006bf2:	f1ba 0f01 	cmp.w	sl, #1
 8006bf6:	f000 80a5 	beq.w	8006d44 <__kernel_rem_pio2+0x30c>
 8006bfa:	f1ba 0f02 	cmp.w	sl, #2
 8006bfe:	f000 80c1 	beq.w	8006d84 <__kernel_rem_pio2+0x34c>
 8006c02:	9b02      	ldr	r3, [sp, #8]
 8006c04:	2b02      	cmp	r3, #2
 8006c06:	d14e      	bne.n	8006ca6 <__kernel_rem_pio2+0x26e>
 8006c08:	4632      	mov	r2, r6
 8006c0a:	463b      	mov	r3, r7
 8006c0c:	4958      	ldr	r1, [pc, #352]	; (8006d70 <__kernel_rem_pio2+0x338>)
 8006c0e:	2000      	movs	r0, #0
 8006c10:	f7f9 fae6 	bl	80001e0 <__aeabi_dsub>
 8006c14:	4606      	mov	r6, r0
 8006c16:	460f      	mov	r7, r1
 8006c18:	2d00      	cmp	r5, #0
 8006c1a:	d044      	beq.n	8006ca6 <__kernel_rem_pio2+0x26e>
 8006c1c:	4650      	mov	r0, sl
 8006c1e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8006d60 <__kernel_rem_pio2+0x328>
 8006c22:	f000 fca9 	bl	8007578 <scalbn>
 8006c26:	4630      	mov	r0, r6
 8006c28:	4639      	mov	r1, r7
 8006c2a:	ec53 2b10 	vmov	r2, r3, d0
 8006c2e:	f7f9 fad7 	bl	80001e0 <__aeabi_dsub>
 8006c32:	4606      	mov	r6, r0
 8006c34:	460f      	mov	r7, r1
 8006c36:	e036      	b.n	8006ca6 <__kernel_rem_pio2+0x26e>
 8006c38:	4b4e      	ldr	r3, [pc, #312]	; (8006d74 <__kernel_rem_pio2+0x33c>)
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	4630      	mov	r0, r6
 8006c3e:	4639      	mov	r1, r7
 8006c40:	f7f9 fc86 	bl	8000550 <__aeabi_dmul>
 8006c44:	f7f9 ff1e 	bl	8000a84 <__aeabi_d2iz>
 8006c48:	f7f9 fc18 	bl	800047c <__aeabi_i2d>
 8006c4c:	4b4a      	ldr	r3, [pc, #296]	; (8006d78 <__kernel_rem_pio2+0x340>)
 8006c4e:	2200      	movs	r2, #0
 8006c50:	4680      	mov	r8, r0
 8006c52:	4689      	mov	r9, r1
 8006c54:	f7f9 fc7c 	bl	8000550 <__aeabi_dmul>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	460b      	mov	r3, r1
 8006c5c:	4630      	mov	r0, r6
 8006c5e:	4639      	mov	r1, r7
 8006c60:	f7f9 fabe 	bl	80001e0 <__aeabi_dsub>
 8006c64:	f7f9 ff0e 	bl	8000a84 <__aeabi_d2iz>
 8006c68:	9b02      	ldr	r3, [sp, #8]
 8006c6a:	f843 0b04 	str.w	r0, [r3], #4
 8006c6e:	3d01      	subs	r5, #1
 8006c70:	9302      	str	r3, [sp, #8]
 8006c72:	ab70      	add	r3, sp, #448	; 0x1c0
 8006c74:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c7c:	4640      	mov	r0, r8
 8006c7e:	4649      	mov	r1, r9
 8006c80:	f7f9 fab0 	bl	80001e4 <__adddf3>
 8006c84:	4606      	mov	r6, r0
 8006c86:	460f      	mov	r7, r1
 8006c88:	e75b      	b.n	8006b42 <__kernel_rem_pio2+0x10a>
 8006c8a:	d105      	bne.n	8006c98 <__kernel_rem_pio2+0x260>
 8006c8c:	1e63      	subs	r3, r4, #1
 8006c8e:	aa0c      	add	r2, sp, #48	; 0x30
 8006c90:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006c94:	15c3      	asrs	r3, r0, #23
 8006c96:	e79b      	b.n	8006bd0 <__kernel_rem_pio2+0x198>
 8006c98:	4b38      	ldr	r3, [pc, #224]	; (8006d7c <__kernel_rem_pio2+0x344>)
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f7f9 fede 	bl	8000a5c <__aeabi_dcmpge>
 8006ca0:	2800      	cmp	r0, #0
 8006ca2:	d139      	bne.n	8006d18 <__kernel_rem_pio2+0x2e0>
 8006ca4:	9002      	str	r0, [sp, #8]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	2300      	movs	r3, #0
 8006caa:	4630      	mov	r0, r6
 8006cac:	4639      	mov	r1, r7
 8006cae:	f7f9 feb7 	bl	8000a20 <__aeabi_dcmpeq>
 8006cb2:	2800      	cmp	r0, #0
 8006cb4:	f000 80b4 	beq.w	8006e20 <__kernel_rem_pio2+0x3e8>
 8006cb8:	f104 3bff 	add.w	fp, r4, #4294967295
 8006cbc:	465b      	mov	r3, fp
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	9904      	ldr	r1, [sp, #16]
 8006cc2:	428b      	cmp	r3, r1
 8006cc4:	da65      	bge.n	8006d92 <__kernel_rem_pio2+0x35a>
 8006cc6:	2a00      	cmp	r2, #0
 8006cc8:	d07b      	beq.n	8006dc2 <__kernel_rem_pio2+0x38a>
 8006cca:	ab0c      	add	r3, sp, #48	; 0x30
 8006ccc:	f1aa 0a18 	sub.w	sl, sl, #24
 8006cd0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	f000 80a0 	beq.w	8006e1a <__kernel_rem_pio2+0x3e2>
 8006cda:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8006d60 <__kernel_rem_pio2+0x328>
 8006cde:	4650      	mov	r0, sl
 8006ce0:	f000 fc4a 	bl	8007578 <scalbn>
 8006ce4:	4f23      	ldr	r7, [pc, #140]	; (8006d74 <__kernel_rem_pio2+0x33c>)
 8006ce6:	ec55 4b10 	vmov	r4, r5, d0
 8006cea:	46d8      	mov	r8, fp
 8006cec:	2600      	movs	r6, #0
 8006cee:	f1b8 0f00 	cmp.w	r8, #0
 8006cf2:	f280 80cf 	bge.w	8006e94 <__kernel_rem_pio2+0x45c>
 8006cf6:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8006d58 <__kernel_rem_pio2+0x320>
 8006cfa:	465f      	mov	r7, fp
 8006cfc:	f04f 0800 	mov.w	r8, #0
 8006d00:	2f00      	cmp	r7, #0
 8006d02:	f2c0 80fd 	blt.w	8006f00 <__kernel_rem_pio2+0x4c8>
 8006d06:	ab70      	add	r3, sp, #448	; 0x1c0
 8006d08:	f8df a074 	ldr.w	sl, [pc, #116]	; 8006d80 <__kernel_rem_pio2+0x348>
 8006d0c:	ec55 4b18 	vmov	r4, r5, d8
 8006d10:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8006d14:	2600      	movs	r6, #0
 8006d16:	e0e5      	b.n	8006ee4 <__kernel_rem_pio2+0x4ac>
 8006d18:	2302      	movs	r3, #2
 8006d1a:	9302      	str	r3, [sp, #8]
 8006d1c:	e75c      	b.n	8006bd8 <__kernel_rem_pio2+0x1a0>
 8006d1e:	f8db 3000 	ldr.w	r3, [fp]
 8006d22:	b955      	cbnz	r5, 8006d3a <__kernel_rem_pio2+0x302>
 8006d24:	b123      	cbz	r3, 8006d30 <__kernel_rem_pio2+0x2f8>
 8006d26:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8006d2a:	f8cb 3000 	str.w	r3, [fp]
 8006d2e:	2301      	movs	r3, #1
 8006d30:	3201      	adds	r2, #1
 8006d32:	f10b 0b04 	add.w	fp, fp, #4
 8006d36:	461d      	mov	r5, r3
 8006d38:	e755      	b.n	8006be6 <__kernel_rem_pio2+0x1ae>
 8006d3a:	1acb      	subs	r3, r1, r3
 8006d3c:	f8cb 3000 	str.w	r3, [fp]
 8006d40:	462b      	mov	r3, r5
 8006d42:	e7f5      	b.n	8006d30 <__kernel_rem_pio2+0x2f8>
 8006d44:	1e62      	subs	r2, r4, #1
 8006d46:	ab0c      	add	r3, sp, #48	; 0x30
 8006d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d4c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006d50:	a90c      	add	r1, sp, #48	; 0x30
 8006d52:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006d56:	e754      	b.n	8006c02 <__kernel_rem_pio2+0x1ca>
	...
 8006d64:	3ff00000 	.word	0x3ff00000
 8006d68:	080078f0 	.word	0x080078f0
 8006d6c:	40200000 	.word	0x40200000
 8006d70:	3ff00000 	.word	0x3ff00000
 8006d74:	3e700000 	.word	0x3e700000
 8006d78:	41700000 	.word	0x41700000
 8006d7c:	3fe00000 	.word	0x3fe00000
 8006d80:	080078b0 	.word	0x080078b0
 8006d84:	1e62      	subs	r2, r4, #1
 8006d86:	ab0c      	add	r3, sp, #48	; 0x30
 8006d88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d8c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006d90:	e7de      	b.n	8006d50 <__kernel_rem_pio2+0x318>
 8006d92:	a90c      	add	r1, sp, #48	; 0x30
 8006d94:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006d98:	3b01      	subs	r3, #1
 8006d9a:	430a      	orrs	r2, r1
 8006d9c:	e790      	b.n	8006cc0 <__kernel_rem_pio2+0x288>
 8006d9e:	3301      	adds	r3, #1
 8006da0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006da4:	2900      	cmp	r1, #0
 8006da6:	d0fa      	beq.n	8006d9e <__kernel_rem_pio2+0x366>
 8006da8:	9a08      	ldr	r2, [sp, #32]
 8006daa:	18e3      	adds	r3, r4, r3
 8006dac:	18a6      	adds	r6, r4, r2
 8006dae:	aa20      	add	r2, sp, #128	; 0x80
 8006db0:	1c65      	adds	r5, r4, #1
 8006db2:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8006db6:	9302      	str	r3, [sp, #8]
 8006db8:	9b02      	ldr	r3, [sp, #8]
 8006dba:	42ab      	cmp	r3, r5
 8006dbc:	da04      	bge.n	8006dc8 <__kernel_rem_pio2+0x390>
 8006dbe:	461c      	mov	r4, r3
 8006dc0:	e6b5      	b.n	8006b2e <__kernel_rem_pio2+0xf6>
 8006dc2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e7eb      	b.n	8006da0 <__kernel_rem_pio2+0x368>
 8006dc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006dce:	f7f9 fb55 	bl	800047c <__aeabi_i2d>
 8006dd2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006dd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dd8:	46b3      	mov	fp, r6
 8006dda:	461c      	mov	r4, r3
 8006ddc:	2700      	movs	r7, #0
 8006dde:	f04f 0800 	mov.w	r8, #0
 8006de2:	f04f 0900 	mov.w	r9, #0
 8006de6:	9b06      	ldr	r3, [sp, #24]
 8006de8:	429f      	cmp	r7, r3
 8006dea:	dd06      	ble.n	8006dfa <__kernel_rem_pio2+0x3c2>
 8006dec:	ab70      	add	r3, sp, #448	; 0x1c0
 8006dee:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006df2:	e9c3 8900 	strd	r8, r9, [r3]
 8006df6:	3501      	adds	r5, #1
 8006df8:	e7de      	b.n	8006db8 <__kernel_rem_pio2+0x380>
 8006dfa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8006dfe:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8006e02:	f7f9 fba5 	bl	8000550 <__aeabi_dmul>
 8006e06:	4602      	mov	r2, r0
 8006e08:	460b      	mov	r3, r1
 8006e0a:	4640      	mov	r0, r8
 8006e0c:	4649      	mov	r1, r9
 8006e0e:	f7f9 f9e9 	bl	80001e4 <__adddf3>
 8006e12:	3701      	adds	r7, #1
 8006e14:	4680      	mov	r8, r0
 8006e16:	4689      	mov	r9, r1
 8006e18:	e7e5      	b.n	8006de6 <__kernel_rem_pio2+0x3ae>
 8006e1a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006e1e:	e754      	b.n	8006cca <__kernel_rem_pio2+0x292>
 8006e20:	ec47 6b10 	vmov	d0, r6, r7
 8006e24:	f1ca 0000 	rsb	r0, sl, #0
 8006e28:	f000 fba6 	bl	8007578 <scalbn>
 8006e2c:	ec57 6b10 	vmov	r6, r7, d0
 8006e30:	4b9f      	ldr	r3, [pc, #636]	; (80070b0 <__kernel_rem_pio2+0x678>)
 8006e32:	ee10 0a10 	vmov	r0, s0
 8006e36:	2200      	movs	r2, #0
 8006e38:	4639      	mov	r1, r7
 8006e3a:	f7f9 fe0f 	bl	8000a5c <__aeabi_dcmpge>
 8006e3e:	b300      	cbz	r0, 8006e82 <__kernel_rem_pio2+0x44a>
 8006e40:	4b9c      	ldr	r3, [pc, #624]	; (80070b4 <__kernel_rem_pio2+0x67c>)
 8006e42:	2200      	movs	r2, #0
 8006e44:	4630      	mov	r0, r6
 8006e46:	4639      	mov	r1, r7
 8006e48:	f7f9 fb82 	bl	8000550 <__aeabi_dmul>
 8006e4c:	f7f9 fe1a 	bl	8000a84 <__aeabi_d2iz>
 8006e50:	4605      	mov	r5, r0
 8006e52:	f7f9 fb13 	bl	800047c <__aeabi_i2d>
 8006e56:	4b96      	ldr	r3, [pc, #600]	; (80070b0 <__kernel_rem_pio2+0x678>)
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f7f9 fb79 	bl	8000550 <__aeabi_dmul>
 8006e5e:	460b      	mov	r3, r1
 8006e60:	4602      	mov	r2, r0
 8006e62:	4639      	mov	r1, r7
 8006e64:	4630      	mov	r0, r6
 8006e66:	f7f9 f9bb 	bl	80001e0 <__aeabi_dsub>
 8006e6a:	f7f9 fe0b 	bl	8000a84 <__aeabi_d2iz>
 8006e6e:	f104 0b01 	add.w	fp, r4, #1
 8006e72:	ab0c      	add	r3, sp, #48	; 0x30
 8006e74:	f10a 0a18 	add.w	sl, sl, #24
 8006e78:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006e7c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8006e80:	e72b      	b.n	8006cda <__kernel_rem_pio2+0x2a2>
 8006e82:	4630      	mov	r0, r6
 8006e84:	4639      	mov	r1, r7
 8006e86:	f7f9 fdfd 	bl	8000a84 <__aeabi_d2iz>
 8006e8a:	ab0c      	add	r3, sp, #48	; 0x30
 8006e8c:	46a3      	mov	fp, r4
 8006e8e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006e92:	e722      	b.n	8006cda <__kernel_rem_pio2+0x2a2>
 8006e94:	ab70      	add	r3, sp, #448	; 0x1c0
 8006e96:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8006e9a:	ab0c      	add	r3, sp, #48	; 0x30
 8006e9c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006ea0:	f7f9 faec 	bl	800047c <__aeabi_i2d>
 8006ea4:	4622      	mov	r2, r4
 8006ea6:	462b      	mov	r3, r5
 8006ea8:	f7f9 fb52 	bl	8000550 <__aeabi_dmul>
 8006eac:	4632      	mov	r2, r6
 8006eae:	e9c9 0100 	strd	r0, r1, [r9]
 8006eb2:	463b      	mov	r3, r7
 8006eb4:	4620      	mov	r0, r4
 8006eb6:	4629      	mov	r1, r5
 8006eb8:	f7f9 fb4a 	bl	8000550 <__aeabi_dmul>
 8006ebc:	f108 38ff 	add.w	r8, r8, #4294967295
 8006ec0:	4604      	mov	r4, r0
 8006ec2:	460d      	mov	r5, r1
 8006ec4:	e713      	b.n	8006cee <__kernel_rem_pio2+0x2b6>
 8006ec6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8006eca:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8006ece:	f7f9 fb3f 	bl	8000550 <__aeabi_dmul>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	460b      	mov	r3, r1
 8006ed6:	4620      	mov	r0, r4
 8006ed8:	4629      	mov	r1, r5
 8006eda:	f7f9 f983 	bl	80001e4 <__adddf3>
 8006ede:	3601      	adds	r6, #1
 8006ee0:	4604      	mov	r4, r0
 8006ee2:	460d      	mov	r5, r1
 8006ee4:	9b04      	ldr	r3, [sp, #16]
 8006ee6:	429e      	cmp	r6, r3
 8006ee8:	dc01      	bgt.n	8006eee <__kernel_rem_pio2+0x4b6>
 8006eea:	45b0      	cmp	r8, r6
 8006eec:	daeb      	bge.n	8006ec6 <__kernel_rem_pio2+0x48e>
 8006eee:	ab48      	add	r3, sp, #288	; 0x120
 8006ef0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006ef4:	e9c3 4500 	strd	r4, r5, [r3]
 8006ef8:	3f01      	subs	r7, #1
 8006efa:	f108 0801 	add.w	r8, r8, #1
 8006efe:	e6ff      	b.n	8006d00 <__kernel_rem_pio2+0x2c8>
 8006f00:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8006f02:	2b02      	cmp	r3, #2
 8006f04:	dc0b      	bgt.n	8006f1e <__kernel_rem_pio2+0x4e6>
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	dc6e      	bgt.n	8006fe8 <__kernel_rem_pio2+0x5b0>
 8006f0a:	d045      	beq.n	8006f98 <__kernel_rem_pio2+0x560>
 8006f0c:	9b07      	ldr	r3, [sp, #28]
 8006f0e:	f003 0007 	and.w	r0, r3, #7
 8006f12:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8006f16:	ecbd 8b02 	vpop	{d8}
 8006f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f1e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8006f20:	2b03      	cmp	r3, #3
 8006f22:	d1f3      	bne.n	8006f0c <__kernel_rem_pio2+0x4d4>
 8006f24:	ab48      	add	r3, sp, #288	; 0x120
 8006f26:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8006f2a:	46d0      	mov	r8, sl
 8006f2c:	46d9      	mov	r9, fp
 8006f2e:	f1b9 0f00 	cmp.w	r9, #0
 8006f32:	f1a8 0808 	sub.w	r8, r8, #8
 8006f36:	dc64      	bgt.n	8007002 <__kernel_rem_pio2+0x5ca>
 8006f38:	465c      	mov	r4, fp
 8006f3a:	2c01      	cmp	r4, #1
 8006f3c:	f1aa 0a08 	sub.w	sl, sl, #8
 8006f40:	dc7e      	bgt.n	8007040 <__kernel_rem_pio2+0x608>
 8006f42:	2000      	movs	r0, #0
 8006f44:	2100      	movs	r1, #0
 8006f46:	f1bb 0f01 	cmp.w	fp, #1
 8006f4a:	f300 8097 	bgt.w	800707c <__kernel_rem_pio2+0x644>
 8006f4e:	9b02      	ldr	r3, [sp, #8]
 8006f50:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8006f54:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	f040 8099 	bne.w	8007090 <__kernel_rem_pio2+0x658>
 8006f5e:	9b01      	ldr	r3, [sp, #4]
 8006f60:	e9c3 5600 	strd	r5, r6, [r3]
 8006f64:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8006f68:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006f6c:	e7ce      	b.n	8006f0c <__kernel_rem_pio2+0x4d4>
 8006f6e:	ab48      	add	r3, sp, #288	; 0x120
 8006f70:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f78:	f7f9 f934 	bl	80001e4 <__adddf3>
 8006f7c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006f80:	f1bb 0f00 	cmp.w	fp, #0
 8006f84:	daf3      	bge.n	8006f6e <__kernel_rem_pio2+0x536>
 8006f86:	9b02      	ldr	r3, [sp, #8]
 8006f88:	b113      	cbz	r3, 8006f90 <__kernel_rem_pio2+0x558>
 8006f8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006f8e:	4619      	mov	r1, r3
 8006f90:	9b01      	ldr	r3, [sp, #4]
 8006f92:	e9c3 0100 	strd	r0, r1, [r3]
 8006f96:	e7b9      	b.n	8006f0c <__kernel_rem_pio2+0x4d4>
 8006f98:	2000      	movs	r0, #0
 8006f9a:	2100      	movs	r1, #0
 8006f9c:	e7f0      	b.n	8006f80 <__kernel_rem_pio2+0x548>
 8006f9e:	ab48      	add	r3, sp, #288	; 0x120
 8006fa0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa8:	f7f9 f91c 	bl	80001e4 <__adddf3>
 8006fac:	3c01      	subs	r4, #1
 8006fae:	2c00      	cmp	r4, #0
 8006fb0:	daf5      	bge.n	8006f9e <__kernel_rem_pio2+0x566>
 8006fb2:	9b02      	ldr	r3, [sp, #8]
 8006fb4:	b1e3      	cbz	r3, 8006ff0 <__kernel_rem_pio2+0x5b8>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006fbc:	9c01      	ldr	r4, [sp, #4]
 8006fbe:	e9c4 2300 	strd	r2, r3, [r4]
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8006fca:	f7f9 f909 	bl	80001e0 <__aeabi_dsub>
 8006fce:	ad4a      	add	r5, sp, #296	; 0x128
 8006fd0:	2401      	movs	r4, #1
 8006fd2:	45a3      	cmp	fp, r4
 8006fd4:	da0f      	bge.n	8006ff6 <__kernel_rem_pio2+0x5be>
 8006fd6:	9b02      	ldr	r3, [sp, #8]
 8006fd8:	b113      	cbz	r3, 8006fe0 <__kernel_rem_pio2+0x5a8>
 8006fda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006fde:	4619      	mov	r1, r3
 8006fe0:	9b01      	ldr	r3, [sp, #4]
 8006fe2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006fe6:	e791      	b.n	8006f0c <__kernel_rem_pio2+0x4d4>
 8006fe8:	465c      	mov	r4, fp
 8006fea:	2000      	movs	r0, #0
 8006fec:	2100      	movs	r1, #0
 8006fee:	e7de      	b.n	8006fae <__kernel_rem_pio2+0x576>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	e7e2      	b.n	8006fbc <__kernel_rem_pio2+0x584>
 8006ff6:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8006ffa:	f7f9 f8f3 	bl	80001e4 <__adddf3>
 8006ffe:	3401      	adds	r4, #1
 8007000:	e7e7      	b.n	8006fd2 <__kernel_rem_pio2+0x59a>
 8007002:	e9d8 4500 	ldrd	r4, r5, [r8]
 8007006:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800700a:	4620      	mov	r0, r4
 800700c:	4632      	mov	r2, r6
 800700e:	463b      	mov	r3, r7
 8007010:	4629      	mov	r1, r5
 8007012:	f7f9 f8e7 	bl	80001e4 <__adddf3>
 8007016:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800701a:	4602      	mov	r2, r0
 800701c:	460b      	mov	r3, r1
 800701e:	4620      	mov	r0, r4
 8007020:	4629      	mov	r1, r5
 8007022:	f7f9 f8dd 	bl	80001e0 <__aeabi_dsub>
 8007026:	4632      	mov	r2, r6
 8007028:	463b      	mov	r3, r7
 800702a:	f7f9 f8db 	bl	80001e4 <__adddf3>
 800702e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007032:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8007036:	ed88 7b00 	vstr	d7, [r8]
 800703a:	f109 39ff 	add.w	r9, r9, #4294967295
 800703e:	e776      	b.n	8006f2e <__kernel_rem_pio2+0x4f6>
 8007040:	e9da 8900 	ldrd	r8, r9, [sl]
 8007044:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8007048:	4640      	mov	r0, r8
 800704a:	4632      	mov	r2, r6
 800704c:	463b      	mov	r3, r7
 800704e:	4649      	mov	r1, r9
 8007050:	f7f9 f8c8 	bl	80001e4 <__adddf3>
 8007054:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007058:	4602      	mov	r2, r0
 800705a:	460b      	mov	r3, r1
 800705c:	4640      	mov	r0, r8
 800705e:	4649      	mov	r1, r9
 8007060:	f7f9 f8be 	bl	80001e0 <__aeabi_dsub>
 8007064:	4632      	mov	r2, r6
 8007066:	463b      	mov	r3, r7
 8007068:	f7f9 f8bc 	bl	80001e4 <__adddf3>
 800706c:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007070:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007074:	ed8a 7b00 	vstr	d7, [sl]
 8007078:	3c01      	subs	r4, #1
 800707a:	e75e      	b.n	8006f3a <__kernel_rem_pio2+0x502>
 800707c:	ab48      	add	r3, sp, #288	; 0x120
 800707e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007086:	f7f9 f8ad 	bl	80001e4 <__adddf3>
 800708a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800708e:	e75a      	b.n	8006f46 <__kernel_rem_pio2+0x50e>
 8007090:	9b01      	ldr	r3, [sp, #4]
 8007092:	9a01      	ldr	r2, [sp, #4]
 8007094:	601d      	str	r5, [r3, #0]
 8007096:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800709a:	605c      	str	r4, [r3, #4]
 800709c:	609f      	str	r7, [r3, #8]
 800709e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80070a2:	60d3      	str	r3, [r2, #12]
 80070a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80070a8:	6110      	str	r0, [r2, #16]
 80070aa:	6153      	str	r3, [r2, #20]
 80070ac:	e72e      	b.n	8006f0c <__kernel_rem_pio2+0x4d4>
 80070ae:	bf00      	nop
 80070b0:	41700000 	.word	0x41700000
 80070b4:	3e700000 	.word	0x3e700000

080070b8 <__kernel_tan>:
 80070b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070bc:	ed2d 8b04 	vpush	{d8-d9}
 80070c0:	ec5b ab10 	vmov	sl, fp, d0
 80070c4:	4be2      	ldr	r3, [pc, #904]	; (8007450 <__kernel_tan+0x398>)
 80070c6:	b085      	sub	sp, #20
 80070c8:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 80070cc:	429f      	cmp	r7, r3
 80070ce:	ed8d 1b00 	vstr	d1, [sp]
 80070d2:	4606      	mov	r6, r0
 80070d4:	f8cd b00c 	str.w	fp, [sp, #12]
 80070d8:	dc24      	bgt.n	8007124 <__kernel_tan+0x6c>
 80070da:	ee10 0a10 	vmov	r0, s0
 80070de:	4659      	mov	r1, fp
 80070e0:	f7f9 fcd0 	bl	8000a84 <__aeabi_d2iz>
 80070e4:	2800      	cmp	r0, #0
 80070e6:	d148      	bne.n	800717a <__kernel_tan+0xc2>
 80070e8:	1c73      	adds	r3, r6, #1
 80070ea:	4652      	mov	r2, sl
 80070ec:	4313      	orrs	r3, r2
 80070ee:	433b      	orrs	r3, r7
 80070f0:	d112      	bne.n	8007118 <__kernel_tan+0x60>
 80070f2:	ec4b ab10 	vmov	d0, sl, fp
 80070f6:	f000 f9b3 	bl	8007460 <fabs>
 80070fa:	49d6      	ldr	r1, [pc, #856]	; (8007454 <__kernel_tan+0x39c>)
 80070fc:	ec53 2b10 	vmov	r2, r3, d0
 8007100:	2000      	movs	r0, #0
 8007102:	f7f9 fb4f 	bl	80007a4 <__aeabi_ddiv>
 8007106:	4682      	mov	sl, r0
 8007108:	468b      	mov	fp, r1
 800710a:	ec4b ab10 	vmov	d0, sl, fp
 800710e:	b005      	add	sp, #20
 8007110:	ecbd 8b04 	vpop	{d8-d9}
 8007114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007118:	2e01      	cmp	r6, #1
 800711a:	d0f6      	beq.n	800710a <__kernel_tan+0x52>
 800711c:	49ce      	ldr	r1, [pc, #824]	; (8007458 <__kernel_tan+0x3a0>)
 800711e:	465b      	mov	r3, fp
 8007120:	2000      	movs	r0, #0
 8007122:	e7ee      	b.n	8007102 <__kernel_tan+0x4a>
 8007124:	4bcd      	ldr	r3, [pc, #820]	; (800745c <__kernel_tan+0x3a4>)
 8007126:	429f      	cmp	r7, r3
 8007128:	dd27      	ble.n	800717a <__kernel_tan+0xc2>
 800712a:	9b03      	ldr	r3, [sp, #12]
 800712c:	2b00      	cmp	r3, #0
 800712e:	da0a      	bge.n	8007146 <__kernel_tan+0x8e>
 8007130:	e9dd 2100 	ldrd	r2, r1, [sp]
 8007134:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007138:	469b      	mov	fp, r3
 800713a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800713e:	e9cd 2300 	strd	r2, r3, [sp]
 8007142:	ee10 aa10 	vmov	sl, s0
 8007146:	4652      	mov	r2, sl
 8007148:	465b      	mov	r3, fp
 800714a:	a1a1      	add	r1, pc, #644	; (adr r1, 80073d0 <__kernel_tan+0x318>)
 800714c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007150:	f7f9 f846 	bl	80001e0 <__aeabi_dsub>
 8007154:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007158:	4604      	mov	r4, r0
 800715a:	460d      	mov	r5, r1
 800715c:	a19e      	add	r1, pc, #632	; (adr r1, 80073d8 <__kernel_tan+0x320>)
 800715e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007162:	f7f9 f83d 	bl	80001e0 <__aeabi_dsub>
 8007166:	4622      	mov	r2, r4
 8007168:	462b      	mov	r3, r5
 800716a:	f7f9 f83b 	bl	80001e4 <__adddf3>
 800716e:	ed9f 7b9c 	vldr	d7, [pc, #624]	; 80073e0 <__kernel_tan+0x328>
 8007172:	ed8d 7b00 	vstr	d7, [sp]
 8007176:	4682      	mov	sl, r0
 8007178:	468b      	mov	fp, r1
 800717a:	4652      	mov	r2, sl
 800717c:	465b      	mov	r3, fp
 800717e:	4650      	mov	r0, sl
 8007180:	4659      	mov	r1, fp
 8007182:	f7f9 f9e5 	bl	8000550 <__aeabi_dmul>
 8007186:	4602      	mov	r2, r0
 8007188:	460b      	mov	r3, r1
 800718a:	4680      	mov	r8, r0
 800718c:	4689      	mov	r9, r1
 800718e:	f7f9 f9df 	bl	8000550 <__aeabi_dmul>
 8007192:	4642      	mov	r2, r8
 8007194:	4604      	mov	r4, r0
 8007196:	460d      	mov	r5, r1
 8007198:	464b      	mov	r3, r9
 800719a:	4650      	mov	r0, sl
 800719c:	4659      	mov	r1, fp
 800719e:	f7f9 f9d7 	bl	8000550 <__aeabi_dmul>
 80071a2:	a391      	add	r3, pc, #580	; (adr r3, 80073e8 <__kernel_tan+0x330>)
 80071a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a8:	ec41 0b18 	vmov	d8, r0, r1
 80071ac:	4620      	mov	r0, r4
 80071ae:	4629      	mov	r1, r5
 80071b0:	f7f9 f9ce 	bl	8000550 <__aeabi_dmul>
 80071b4:	a38e      	add	r3, pc, #568	; (adr r3, 80073f0 <__kernel_tan+0x338>)
 80071b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ba:	f7f9 f813 	bl	80001e4 <__adddf3>
 80071be:	4622      	mov	r2, r4
 80071c0:	462b      	mov	r3, r5
 80071c2:	f7f9 f9c5 	bl	8000550 <__aeabi_dmul>
 80071c6:	a38c      	add	r3, pc, #560	; (adr r3, 80073f8 <__kernel_tan+0x340>)
 80071c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071cc:	f7f9 f80a 	bl	80001e4 <__adddf3>
 80071d0:	4622      	mov	r2, r4
 80071d2:	462b      	mov	r3, r5
 80071d4:	f7f9 f9bc 	bl	8000550 <__aeabi_dmul>
 80071d8:	a389      	add	r3, pc, #548	; (adr r3, 8007400 <__kernel_tan+0x348>)
 80071da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071de:	f7f9 f801 	bl	80001e4 <__adddf3>
 80071e2:	4622      	mov	r2, r4
 80071e4:	462b      	mov	r3, r5
 80071e6:	f7f9 f9b3 	bl	8000550 <__aeabi_dmul>
 80071ea:	a387      	add	r3, pc, #540	; (adr r3, 8007408 <__kernel_tan+0x350>)
 80071ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f0:	f7f8 fff8 	bl	80001e4 <__adddf3>
 80071f4:	4622      	mov	r2, r4
 80071f6:	462b      	mov	r3, r5
 80071f8:	f7f9 f9aa 	bl	8000550 <__aeabi_dmul>
 80071fc:	a384      	add	r3, pc, #528	; (adr r3, 8007410 <__kernel_tan+0x358>)
 80071fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007202:	f7f8 ffef 	bl	80001e4 <__adddf3>
 8007206:	4642      	mov	r2, r8
 8007208:	464b      	mov	r3, r9
 800720a:	f7f9 f9a1 	bl	8000550 <__aeabi_dmul>
 800720e:	a382      	add	r3, pc, #520	; (adr r3, 8007418 <__kernel_tan+0x360>)
 8007210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007214:	ec41 0b19 	vmov	d9, r0, r1
 8007218:	4620      	mov	r0, r4
 800721a:	4629      	mov	r1, r5
 800721c:	f7f9 f998 	bl	8000550 <__aeabi_dmul>
 8007220:	a37f      	add	r3, pc, #508	; (adr r3, 8007420 <__kernel_tan+0x368>)
 8007222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007226:	f7f8 ffdd 	bl	80001e4 <__adddf3>
 800722a:	4622      	mov	r2, r4
 800722c:	462b      	mov	r3, r5
 800722e:	f7f9 f98f 	bl	8000550 <__aeabi_dmul>
 8007232:	a37d      	add	r3, pc, #500	; (adr r3, 8007428 <__kernel_tan+0x370>)
 8007234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007238:	f7f8 ffd4 	bl	80001e4 <__adddf3>
 800723c:	4622      	mov	r2, r4
 800723e:	462b      	mov	r3, r5
 8007240:	f7f9 f986 	bl	8000550 <__aeabi_dmul>
 8007244:	a37a      	add	r3, pc, #488	; (adr r3, 8007430 <__kernel_tan+0x378>)
 8007246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800724a:	f7f8 ffcb 	bl	80001e4 <__adddf3>
 800724e:	4622      	mov	r2, r4
 8007250:	462b      	mov	r3, r5
 8007252:	f7f9 f97d 	bl	8000550 <__aeabi_dmul>
 8007256:	a378      	add	r3, pc, #480	; (adr r3, 8007438 <__kernel_tan+0x380>)
 8007258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800725c:	f7f8 ffc2 	bl	80001e4 <__adddf3>
 8007260:	4622      	mov	r2, r4
 8007262:	462b      	mov	r3, r5
 8007264:	f7f9 f974 	bl	8000550 <__aeabi_dmul>
 8007268:	a375      	add	r3, pc, #468	; (adr r3, 8007440 <__kernel_tan+0x388>)
 800726a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800726e:	f7f8 ffb9 	bl	80001e4 <__adddf3>
 8007272:	4602      	mov	r2, r0
 8007274:	460b      	mov	r3, r1
 8007276:	ec51 0b19 	vmov	r0, r1, d9
 800727a:	f7f8 ffb3 	bl	80001e4 <__adddf3>
 800727e:	ec53 2b18 	vmov	r2, r3, d8
 8007282:	f7f9 f965 	bl	8000550 <__aeabi_dmul>
 8007286:	e9dd 2300 	ldrd	r2, r3, [sp]
 800728a:	f7f8 ffab 	bl	80001e4 <__adddf3>
 800728e:	4642      	mov	r2, r8
 8007290:	464b      	mov	r3, r9
 8007292:	f7f9 f95d 	bl	8000550 <__aeabi_dmul>
 8007296:	e9dd 2300 	ldrd	r2, r3, [sp]
 800729a:	f7f8 ffa3 	bl	80001e4 <__adddf3>
 800729e:	a36a      	add	r3, pc, #424	; (adr r3, 8007448 <__kernel_tan+0x390>)
 80072a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a4:	4604      	mov	r4, r0
 80072a6:	460d      	mov	r5, r1
 80072a8:	ec51 0b18 	vmov	r0, r1, d8
 80072ac:	f7f9 f950 	bl	8000550 <__aeabi_dmul>
 80072b0:	4622      	mov	r2, r4
 80072b2:	462b      	mov	r3, r5
 80072b4:	f7f8 ff96 	bl	80001e4 <__adddf3>
 80072b8:	460b      	mov	r3, r1
 80072ba:	ec41 0b18 	vmov	d8, r0, r1
 80072be:	4602      	mov	r2, r0
 80072c0:	4659      	mov	r1, fp
 80072c2:	4650      	mov	r0, sl
 80072c4:	f7f8 ff8e 	bl	80001e4 <__adddf3>
 80072c8:	4b64      	ldr	r3, [pc, #400]	; (800745c <__kernel_tan+0x3a4>)
 80072ca:	429f      	cmp	r7, r3
 80072cc:	4604      	mov	r4, r0
 80072ce:	460d      	mov	r5, r1
 80072d0:	dd3e      	ble.n	8007350 <__kernel_tan+0x298>
 80072d2:	4630      	mov	r0, r6
 80072d4:	f7f9 f8d2 	bl	800047c <__aeabi_i2d>
 80072d8:	4622      	mov	r2, r4
 80072da:	4680      	mov	r8, r0
 80072dc:	4689      	mov	r9, r1
 80072de:	462b      	mov	r3, r5
 80072e0:	4620      	mov	r0, r4
 80072e2:	4629      	mov	r1, r5
 80072e4:	f7f9 f934 	bl	8000550 <__aeabi_dmul>
 80072e8:	4642      	mov	r2, r8
 80072ea:	4606      	mov	r6, r0
 80072ec:	460f      	mov	r7, r1
 80072ee:	464b      	mov	r3, r9
 80072f0:	4620      	mov	r0, r4
 80072f2:	4629      	mov	r1, r5
 80072f4:	f7f8 ff76 	bl	80001e4 <__adddf3>
 80072f8:	4602      	mov	r2, r0
 80072fa:	460b      	mov	r3, r1
 80072fc:	4630      	mov	r0, r6
 80072fe:	4639      	mov	r1, r7
 8007300:	f7f9 fa50 	bl	80007a4 <__aeabi_ddiv>
 8007304:	ec53 2b18 	vmov	r2, r3, d8
 8007308:	f7f8 ff6a 	bl	80001e0 <__aeabi_dsub>
 800730c:	4602      	mov	r2, r0
 800730e:	460b      	mov	r3, r1
 8007310:	4650      	mov	r0, sl
 8007312:	4659      	mov	r1, fp
 8007314:	f7f8 ff64 	bl	80001e0 <__aeabi_dsub>
 8007318:	4602      	mov	r2, r0
 800731a:	460b      	mov	r3, r1
 800731c:	f7f8 ff62 	bl	80001e4 <__adddf3>
 8007320:	4602      	mov	r2, r0
 8007322:	460b      	mov	r3, r1
 8007324:	4640      	mov	r0, r8
 8007326:	4649      	mov	r1, r9
 8007328:	f7f8 ff5a 	bl	80001e0 <__aeabi_dsub>
 800732c:	9b03      	ldr	r3, [sp, #12]
 800732e:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 8007332:	f00a 0a02 	and.w	sl, sl, #2
 8007336:	4604      	mov	r4, r0
 8007338:	f1ca 0001 	rsb	r0, sl, #1
 800733c:	460d      	mov	r5, r1
 800733e:	f7f9 f89d 	bl	800047c <__aeabi_i2d>
 8007342:	4602      	mov	r2, r0
 8007344:	460b      	mov	r3, r1
 8007346:	4620      	mov	r0, r4
 8007348:	4629      	mov	r1, r5
 800734a:	f7f9 f901 	bl	8000550 <__aeabi_dmul>
 800734e:	e6da      	b.n	8007106 <__kernel_tan+0x4e>
 8007350:	2e01      	cmp	r6, #1
 8007352:	d038      	beq.n	80073c6 <__kernel_tan+0x30e>
 8007354:	460f      	mov	r7, r1
 8007356:	4689      	mov	r9, r1
 8007358:	4602      	mov	r2, r0
 800735a:	460b      	mov	r3, r1
 800735c:	2000      	movs	r0, #0
 800735e:	493e      	ldr	r1, [pc, #248]	; (8007458 <__kernel_tan+0x3a0>)
 8007360:	f7f9 fa20 	bl	80007a4 <__aeabi_ddiv>
 8007364:	2600      	movs	r6, #0
 8007366:	e9cd 0100 	strd	r0, r1, [sp]
 800736a:	4652      	mov	r2, sl
 800736c:	465b      	mov	r3, fp
 800736e:	4630      	mov	r0, r6
 8007370:	4639      	mov	r1, r7
 8007372:	f7f8 ff35 	bl	80001e0 <__aeabi_dsub>
 8007376:	e9dd 4500 	ldrd	r4, r5, [sp]
 800737a:	4602      	mov	r2, r0
 800737c:	460b      	mov	r3, r1
 800737e:	ec51 0b18 	vmov	r0, r1, d8
 8007382:	f7f8 ff2d 	bl	80001e0 <__aeabi_dsub>
 8007386:	4632      	mov	r2, r6
 8007388:	462b      	mov	r3, r5
 800738a:	f7f9 f8e1 	bl	8000550 <__aeabi_dmul>
 800738e:	46b0      	mov	r8, r6
 8007390:	460f      	mov	r7, r1
 8007392:	4606      	mov	r6, r0
 8007394:	4642      	mov	r2, r8
 8007396:	462b      	mov	r3, r5
 8007398:	4640      	mov	r0, r8
 800739a:	4649      	mov	r1, r9
 800739c:	f7f9 f8d8 	bl	8000550 <__aeabi_dmul>
 80073a0:	4b2c      	ldr	r3, [pc, #176]	; (8007454 <__kernel_tan+0x39c>)
 80073a2:	2200      	movs	r2, #0
 80073a4:	f7f8 ff1e 	bl	80001e4 <__adddf3>
 80073a8:	4602      	mov	r2, r0
 80073aa:	460b      	mov	r3, r1
 80073ac:	4630      	mov	r0, r6
 80073ae:	4639      	mov	r1, r7
 80073b0:	f7f8 ff18 	bl	80001e4 <__adddf3>
 80073b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80073b8:	f7f9 f8ca 	bl	8000550 <__aeabi_dmul>
 80073bc:	4642      	mov	r2, r8
 80073be:	462b      	mov	r3, r5
 80073c0:	f7f8 ff10 	bl	80001e4 <__adddf3>
 80073c4:	e69f      	b.n	8007106 <__kernel_tan+0x4e>
 80073c6:	4682      	mov	sl, r0
 80073c8:	468b      	mov	fp, r1
 80073ca:	e69e      	b.n	800710a <__kernel_tan+0x52>
 80073cc:	f3af 8000 	nop.w
 80073d0:	54442d18 	.word	0x54442d18
 80073d4:	3fe921fb 	.word	0x3fe921fb
 80073d8:	33145c07 	.word	0x33145c07
 80073dc:	3c81a626 	.word	0x3c81a626
	...
 80073e8:	74bf7ad4 	.word	0x74bf7ad4
 80073ec:	3efb2a70 	.word	0x3efb2a70
 80073f0:	32f0a7e9 	.word	0x32f0a7e9
 80073f4:	3f12b80f 	.word	0x3f12b80f
 80073f8:	1a8d1068 	.word	0x1a8d1068
 80073fc:	3f3026f7 	.word	0x3f3026f7
 8007400:	fee08315 	.word	0xfee08315
 8007404:	3f57dbc8 	.word	0x3f57dbc8
 8007408:	e96e8493 	.word	0xe96e8493
 800740c:	3f8226e3 	.word	0x3f8226e3
 8007410:	1bb341fe 	.word	0x1bb341fe
 8007414:	3faba1ba 	.word	0x3faba1ba
 8007418:	db605373 	.word	0xdb605373
 800741c:	bef375cb 	.word	0xbef375cb
 8007420:	a03792a6 	.word	0xa03792a6
 8007424:	3f147e88 	.word	0x3f147e88
 8007428:	f2f26501 	.word	0xf2f26501
 800742c:	3f4344d8 	.word	0x3f4344d8
 8007430:	c9560328 	.word	0xc9560328
 8007434:	3f6d6d22 	.word	0x3f6d6d22
 8007438:	8406d637 	.word	0x8406d637
 800743c:	3f9664f4 	.word	0x3f9664f4
 8007440:	1110fe7a 	.word	0x1110fe7a
 8007444:	3fc11111 	.word	0x3fc11111
 8007448:	55555563 	.word	0x55555563
 800744c:	3fd55555 	.word	0x3fd55555
 8007450:	3e2fffff 	.word	0x3e2fffff
 8007454:	3ff00000 	.word	0x3ff00000
 8007458:	bff00000 	.word	0xbff00000
 800745c:	3fe59427 	.word	0x3fe59427

08007460 <fabs>:
 8007460:	ec51 0b10 	vmov	r0, r1, d0
 8007464:	ee10 2a10 	vmov	r2, s0
 8007468:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800746c:	ec43 2b10 	vmov	d0, r2, r3
 8007470:	4770      	bx	lr
 8007472:	0000      	movs	r0, r0
 8007474:	0000      	movs	r0, r0
	...

08007478 <floor>:
 8007478:	ec51 0b10 	vmov	r0, r1, d0
 800747c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007480:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007484:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007488:	2e13      	cmp	r6, #19
 800748a:	ee10 5a10 	vmov	r5, s0
 800748e:	ee10 8a10 	vmov	r8, s0
 8007492:	460c      	mov	r4, r1
 8007494:	dc32      	bgt.n	80074fc <floor+0x84>
 8007496:	2e00      	cmp	r6, #0
 8007498:	da14      	bge.n	80074c4 <floor+0x4c>
 800749a:	a333      	add	r3, pc, #204	; (adr r3, 8007568 <floor+0xf0>)
 800749c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a0:	f7f8 fea0 	bl	80001e4 <__adddf3>
 80074a4:	2200      	movs	r2, #0
 80074a6:	2300      	movs	r3, #0
 80074a8:	f7f9 fae2 	bl	8000a70 <__aeabi_dcmpgt>
 80074ac:	b138      	cbz	r0, 80074be <floor+0x46>
 80074ae:	2c00      	cmp	r4, #0
 80074b0:	da57      	bge.n	8007562 <floor+0xea>
 80074b2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80074b6:	431d      	orrs	r5, r3
 80074b8:	d001      	beq.n	80074be <floor+0x46>
 80074ba:	4c2d      	ldr	r4, [pc, #180]	; (8007570 <floor+0xf8>)
 80074bc:	2500      	movs	r5, #0
 80074be:	4621      	mov	r1, r4
 80074c0:	4628      	mov	r0, r5
 80074c2:	e025      	b.n	8007510 <floor+0x98>
 80074c4:	4f2b      	ldr	r7, [pc, #172]	; (8007574 <floor+0xfc>)
 80074c6:	4137      	asrs	r7, r6
 80074c8:	ea01 0307 	and.w	r3, r1, r7
 80074cc:	4303      	orrs	r3, r0
 80074ce:	d01f      	beq.n	8007510 <floor+0x98>
 80074d0:	a325      	add	r3, pc, #148	; (adr r3, 8007568 <floor+0xf0>)
 80074d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d6:	f7f8 fe85 	bl	80001e4 <__adddf3>
 80074da:	2200      	movs	r2, #0
 80074dc:	2300      	movs	r3, #0
 80074de:	f7f9 fac7 	bl	8000a70 <__aeabi_dcmpgt>
 80074e2:	2800      	cmp	r0, #0
 80074e4:	d0eb      	beq.n	80074be <floor+0x46>
 80074e6:	2c00      	cmp	r4, #0
 80074e8:	bfbe      	ittt	lt
 80074ea:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80074ee:	fa43 f606 	asrlt.w	r6, r3, r6
 80074f2:	19a4      	addlt	r4, r4, r6
 80074f4:	ea24 0407 	bic.w	r4, r4, r7
 80074f8:	2500      	movs	r5, #0
 80074fa:	e7e0      	b.n	80074be <floor+0x46>
 80074fc:	2e33      	cmp	r6, #51	; 0x33
 80074fe:	dd0b      	ble.n	8007518 <floor+0xa0>
 8007500:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007504:	d104      	bne.n	8007510 <floor+0x98>
 8007506:	ee10 2a10 	vmov	r2, s0
 800750a:	460b      	mov	r3, r1
 800750c:	f7f8 fe6a 	bl	80001e4 <__adddf3>
 8007510:	ec41 0b10 	vmov	d0, r0, r1
 8007514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007518:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800751c:	f04f 33ff 	mov.w	r3, #4294967295
 8007520:	fa23 f707 	lsr.w	r7, r3, r7
 8007524:	4207      	tst	r7, r0
 8007526:	d0f3      	beq.n	8007510 <floor+0x98>
 8007528:	a30f      	add	r3, pc, #60	; (adr r3, 8007568 <floor+0xf0>)
 800752a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800752e:	f7f8 fe59 	bl	80001e4 <__adddf3>
 8007532:	2200      	movs	r2, #0
 8007534:	2300      	movs	r3, #0
 8007536:	f7f9 fa9b 	bl	8000a70 <__aeabi_dcmpgt>
 800753a:	2800      	cmp	r0, #0
 800753c:	d0bf      	beq.n	80074be <floor+0x46>
 800753e:	2c00      	cmp	r4, #0
 8007540:	da02      	bge.n	8007548 <floor+0xd0>
 8007542:	2e14      	cmp	r6, #20
 8007544:	d103      	bne.n	800754e <floor+0xd6>
 8007546:	3401      	adds	r4, #1
 8007548:	ea25 0507 	bic.w	r5, r5, r7
 800754c:	e7b7      	b.n	80074be <floor+0x46>
 800754e:	2301      	movs	r3, #1
 8007550:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007554:	fa03 f606 	lsl.w	r6, r3, r6
 8007558:	4435      	add	r5, r6
 800755a:	4545      	cmp	r5, r8
 800755c:	bf38      	it	cc
 800755e:	18e4      	addcc	r4, r4, r3
 8007560:	e7f2      	b.n	8007548 <floor+0xd0>
 8007562:	2500      	movs	r5, #0
 8007564:	462c      	mov	r4, r5
 8007566:	e7aa      	b.n	80074be <floor+0x46>
 8007568:	8800759c 	.word	0x8800759c
 800756c:	7e37e43c 	.word	0x7e37e43c
 8007570:	bff00000 	.word	0xbff00000
 8007574:	000fffff 	.word	0x000fffff

08007578 <scalbn>:
 8007578:	b570      	push	{r4, r5, r6, lr}
 800757a:	ec55 4b10 	vmov	r4, r5, d0
 800757e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007582:	4606      	mov	r6, r0
 8007584:	462b      	mov	r3, r5
 8007586:	b99a      	cbnz	r2, 80075b0 <scalbn+0x38>
 8007588:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800758c:	4323      	orrs	r3, r4
 800758e:	d036      	beq.n	80075fe <scalbn+0x86>
 8007590:	4b39      	ldr	r3, [pc, #228]	; (8007678 <scalbn+0x100>)
 8007592:	4629      	mov	r1, r5
 8007594:	ee10 0a10 	vmov	r0, s0
 8007598:	2200      	movs	r2, #0
 800759a:	f7f8 ffd9 	bl	8000550 <__aeabi_dmul>
 800759e:	4b37      	ldr	r3, [pc, #220]	; (800767c <scalbn+0x104>)
 80075a0:	429e      	cmp	r6, r3
 80075a2:	4604      	mov	r4, r0
 80075a4:	460d      	mov	r5, r1
 80075a6:	da10      	bge.n	80075ca <scalbn+0x52>
 80075a8:	a32b      	add	r3, pc, #172	; (adr r3, 8007658 <scalbn+0xe0>)
 80075aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ae:	e03a      	b.n	8007626 <scalbn+0xae>
 80075b0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80075b4:	428a      	cmp	r2, r1
 80075b6:	d10c      	bne.n	80075d2 <scalbn+0x5a>
 80075b8:	ee10 2a10 	vmov	r2, s0
 80075bc:	4620      	mov	r0, r4
 80075be:	4629      	mov	r1, r5
 80075c0:	f7f8 fe10 	bl	80001e4 <__adddf3>
 80075c4:	4604      	mov	r4, r0
 80075c6:	460d      	mov	r5, r1
 80075c8:	e019      	b.n	80075fe <scalbn+0x86>
 80075ca:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80075ce:	460b      	mov	r3, r1
 80075d0:	3a36      	subs	r2, #54	; 0x36
 80075d2:	4432      	add	r2, r6
 80075d4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80075d8:	428a      	cmp	r2, r1
 80075da:	dd08      	ble.n	80075ee <scalbn+0x76>
 80075dc:	2d00      	cmp	r5, #0
 80075de:	a120      	add	r1, pc, #128	; (adr r1, 8007660 <scalbn+0xe8>)
 80075e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075e4:	da1c      	bge.n	8007620 <scalbn+0xa8>
 80075e6:	a120      	add	r1, pc, #128	; (adr r1, 8007668 <scalbn+0xf0>)
 80075e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075ec:	e018      	b.n	8007620 <scalbn+0xa8>
 80075ee:	2a00      	cmp	r2, #0
 80075f0:	dd08      	ble.n	8007604 <scalbn+0x8c>
 80075f2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80075f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80075fa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80075fe:	ec45 4b10 	vmov	d0, r4, r5
 8007602:	bd70      	pop	{r4, r5, r6, pc}
 8007604:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007608:	da19      	bge.n	800763e <scalbn+0xc6>
 800760a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800760e:	429e      	cmp	r6, r3
 8007610:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8007614:	dd0a      	ble.n	800762c <scalbn+0xb4>
 8007616:	a112      	add	r1, pc, #72	; (adr r1, 8007660 <scalbn+0xe8>)
 8007618:	e9d1 0100 	ldrd	r0, r1, [r1]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d1e2      	bne.n	80075e6 <scalbn+0x6e>
 8007620:	a30f      	add	r3, pc, #60	; (adr r3, 8007660 <scalbn+0xe8>)
 8007622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007626:	f7f8 ff93 	bl	8000550 <__aeabi_dmul>
 800762a:	e7cb      	b.n	80075c4 <scalbn+0x4c>
 800762c:	a10a      	add	r1, pc, #40	; (adr r1, 8007658 <scalbn+0xe0>)
 800762e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d0b8      	beq.n	80075a8 <scalbn+0x30>
 8007636:	a10e      	add	r1, pc, #56	; (adr r1, 8007670 <scalbn+0xf8>)
 8007638:	e9d1 0100 	ldrd	r0, r1, [r1]
 800763c:	e7b4      	b.n	80075a8 <scalbn+0x30>
 800763e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007642:	3236      	adds	r2, #54	; 0x36
 8007644:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007648:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800764c:	4620      	mov	r0, r4
 800764e:	4b0c      	ldr	r3, [pc, #48]	; (8007680 <scalbn+0x108>)
 8007650:	2200      	movs	r2, #0
 8007652:	e7e8      	b.n	8007626 <scalbn+0xae>
 8007654:	f3af 8000 	nop.w
 8007658:	c2f8f359 	.word	0xc2f8f359
 800765c:	01a56e1f 	.word	0x01a56e1f
 8007660:	8800759c 	.word	0x8800759c
 8007664:	7e37e43c 	.word	0x7e37e43c
 8007668:	8800759c 	.word	0x8800759c
 800766c:	fe37e43c 	.word	0xfe37e43c
 8007670:	c2f8f359 	.word	0xc2f8f359
 8007674:	81a56e1f 	.word	0x81a56e1f
 8007678:	43500000 	.word	0x43500000
 800767c:	ffff3cb0 	.word	0xffff3cb0
 8007680:	3c900000 	.word	0x3c900000

08007684 <_init>:
 8007684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007686:	bf00      	nop
 8007688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800768a:	bc08      	pop	{r3}
 800768c:	469e      	mov	lr, r3
 800768e:	4770      	bx	lr

08007690 <_fini>:
 8007690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007692:	bf00      	nop
 8007694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007696:	bc08      	pop	{r3}
 8007698:	469e      	mov	lr, r3
 800769a:	4770      	bx	lr
