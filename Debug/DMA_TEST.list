
DMA_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ecc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e8  0800a070  0800a070  0001a070  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a858  0800a858  0002024c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a858  0800a858  0001a858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a860  0800a860  0002024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a860  0800a860  0001a860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a864  0800a864  0001a864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000024c  20000000  0800a868  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  2000024c  0800aab4  0002024c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b8  0800aab4  000204b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001364f  00000000  00000000  0002027c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a65  00000000  00000000  000338cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f88  00000000  00000000  00036330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e70  00000000  00000000  000372b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019496  00000000  00000000  00038128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013879  00000000  00000000  000515be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009caa7  00000000  00000000  00064e37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001018de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005728  00000000  00000000  00101934  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000024c 	.word	0x2000024c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a054 	.word	0x0800a054

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000250 	.word	0x20000250
 80001dc:	0800a054 	.word	0x0800a054

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2uiz>:
 8000bac:	004a      	lsls	r2, r1, #1
 8000bae:	d211      	bcs.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb4:	d211      	bcs.n	8000bda <__aeabi_d2uiz+0x2e>
 8000bb6:	d50d      	bpl.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc0:	d40e      	bmi.n	8000be0 <__aeabi_d2uiz+0x34>
 8000bc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bde:	d102      	bne.n	8000be6 <__aeabi_d2uiz+0x3a>
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	4770      	bx	lr
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	4770      	bx	lr

08000bec <__aeabi_d2f>:
 8000bec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf4:	bf24      	itt	cs
 8000bf6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bfa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfe:	d90d      	bls.n	8000c1c <__aeabi_d2f+0x30>
 8000c00:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c0c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c14:	bf08      	it	eq
 8000c16:	f020 0001 	biceq.w	r0, r0, #1
 8000c1a:	4770      	bx	lr
 8000c1c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c20:	d121      	bne.n	8000c66 <__aeabi_d2f+0x7a>
 8000c22:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c26:	bfbc      	itt	lt
 8000c28:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	4770      	bxlt	lr
 8000c2e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c32:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c36:	f1c2 0218 	rsb	r2, r2, #24
 8000c3a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c42:	fa20 f002 	lsr.w	r0, r0, r2
 8000c46:	bf18      	it	ne
 8000c48:	f040 0001 	orrne.w	r0, r0, #1
 8000c4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c54:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c58:	ea40 000c 	orr.w	r0, r0, ip
 8000c5c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c64:	e7cc      	b.n	8000c00 <__aeabi_d2f+0x14>
 8000c66:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6a:	d107      	bne.n	8000c7c <__aeabi_d2f+0x90>
 8000c6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c70:	bf1e      	ittt	ne
 8000c72:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c76:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c7a:	4770      	bxne	lr
 8000c7c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop

08000c8c <__aeabi_ldivmod>:
 8000c8c:	b97b      	cbnz	r3, 8000cae <__aeabi_ldivmod+0x22>
 8000c8e:	b972      	cbnz	r2, 8000cae <__aeabi_ldivmod+0x22>
 8000c90:	2900      	cmp	r1, #0
 8000c92:	bfbe      	ittt	lt
 8000c94:	2000      	movlt	r0, #0
 8000c96:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c9a:	e006      	blt.n	8000caa <__aeabi_ldivmod+0x1e>
 8000c9c:	bf08      	it	eq
 8000c9e:	2800      	cmpeq	r0, #0
 8000ca0:	bf1c      	itt	ne
 8000ca2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ca6:	f04f 30ff 	movne.w	r0, #4294967295
 8000caa:	f000 b9b9 	b.w	8001020 <__aeabi_idiv0>
 8000cae:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb6:	2900      	cmp	r1, #0
 8000cb8:	db09      	blt.n	8000cce <__aeabi_ldivmod+0x42>
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	db1a      	blt.n	8000cf4 <__aeabi_ldivmod+0x68>
 8000cbe:	f000 f84d 	bl	8000d5c <__udivmoddi4>
 8000cc2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cca:	b004      	add	sp, #16
 8000ccc:	4770      	bx	lr
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	db1b      	blt.n	8000d10 <__aeabi_ldivmod+0x84>
 8000cd8:	f000 f840 	bl	8000d5c <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4240      	negs	r0, r0
 8000ce8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cec:	4252      	negs	r2, r2
 8000cee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf2:	4770      	bx	lr
 8000cf4:	4252      	negs	r2, r2
 8000cf6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cfa:	f000 f82f 	bl	8000d5c <__udivmoddi4>
 8000cfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d06:	b004      	add	sp, #16
 8000d08:	4240      	negs	r0, r0
 8000d0a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0e:	4770      	bx	lr
 8000d10:	4252      	negs	r2, r2
 8000d12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d16:	f000 f821 	bl	8000d5c <__udivmoddi4>
 8000d1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d22:	b004      	add	sp, #16
 8000d24:	4252      	negs	r2, r2
 8000d26:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d2a:	4770      	bx	lr

08000d2c <__aeabi_uldivmod>:
 8000d2c:	b953      	cbnz	r3, 8000d44 <__aeabi_uldivmod+0x18>
 8000d2e:	b94a      	cbnz	r2, 8000d44 <__aeabi_uldivmod+0x18>
 8000d30:	2900      	cmp	r1, #0
 8000d32:	bf08      	it	eq
 8000d34:	2800      	cmpeq	r0, #0
 8000d36:	bf1c      	itt	ne
 8000d38:	f04f 31ff 	movne.w	r1, #4294967295
 8000d3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000d40:	f000 b96e 	b.w	8001020 <__aeabi_idiv0>
 8000d44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d4c:	f000 f806 	bl	8000d5c <__udivmoddi4>
 8000d50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d58:	b004      	add	sp, #16
 8000d5a:	4770      	bx	lr

08000d5c <__udivmoddi4>:
 8000d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d60:	9d08      	ldr	r5, [sp, #32]
 8000d62:	4604      	mov	r4, r0
 8000d64:	468c      	mov	ip, r1
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	f040 8083 	bne.w	8000e72 <__udivmoddi4+0x116>
 8000d6c:	428a      	cmp	r2, r1
 8000d6e:	4617      	mov	r7, r2
 8000d70:	d947      	bls.n	8000e02 <__udivmoddi4+0xa6>
 8000d72:	fab2 f282 	clz	r2, r2
 8000d76:	b142      	cbz	r2, 8000d8a <__udivmoddi4+0x2e>
 8000d78:	f1c2 0020 	rsb	r0, r2, #32
 8000d7c:	fa24 f000 	lsr.w	r0, r4, r0
 8000d80:	4091      	lsls	r1, r2
 8000d82:	4097      	lsls	r7, r2
 8000d84:	ea40 0c01 	orr.w	ip, r0, r1
 8000d88:	4094      	lsls	r4, r2
 8000d8a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d8e:	0c23      	lsrs	r3, r4, #16
 8000d90:	fbbc f6f8 	udiv	r6, ip, r8
 8000d94:	fa1f fe87 	uxth.w	lr, r7
 8000d98:	fb08 c116 	mls	r1, r8, r6, ip
 8000d9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da0:	fb06 f10e 	mul.w	r1, r6, lr
 8000da4:	4299      	cmp	r1, r3
 8000da6:	d909      	bls.n	8000dbc <__udivmoddi4+0x60>
 8000da8:	18fb      	adds	r3, r7, r3
 8000daa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dae:	f080 8119 	bcs.w	8000fe4 <__udivmoddi4+0x288>
 8000db2:	4299      	cmp	r1, r3
 8000db4:	f240 8116 	bls.w	8000fe4 <__udivmoddi4+0x288>
 8000db8:	3e02      	subs	r6, #2
 8000dba:	443b      	add	r3, r7
 8000dbc:	1a5b      	subs	r3, r3, r1
 8000dbe:	b2a4      	uxth	r4, r4
 8000dc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc4:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dcc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd0:	45a6      	cmp	lr, r4
 8000dd2:	d909      	bls.n	8000de8 <__udivmoddi4+0x8c>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dda:	f080 8105 	bcs.w	8000fe8 <__udivmoddi4+0x28c>
 8000dde:	45a6      	cmp	lr, r4
 8000de0:	f240 8102 	bls.w	8000fe8 <__udivmoddi4+0x28c>
 8000de4:	3802      	subs	r0, #2
 8000de6:	443c      	add	r4, r7
 8000de8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dec:	eba4 040e 	sub.w	r4, r4, lr
 8000df0:	2600      	movs	r6, #0
 8000df2:	b11d      	cbz	r5, 8000dfc <__udivmoddi4+0xa0>
 8000df4:	40d4      	lsrs	r4, r2
 8000df6:	2300      	movs	r3, #0
 8000df8:	e9c5 4300 	strd	r4, r3, [r5]
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	b902      	cbnz	r2, 8000e06 <__udivmoddi4+0xaa>
 8000e04:	deff      	udf	#255	; 0xff
 8000e06:	fab2 f282 	clz	r2, r2
 8000e0a:	2a00      	cmp	r2, #0
 8000e0c:	d150      	bne.n	8000eb0 <__udivmoddi4+0x154>
 8000e0e:	1bcb      	subs	r3, r1, r7
 8000e10:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e14:	fa1f f887 	uxth.w	r8, r7
 8000e18:	2601      	movs	r6, #1
 8000e1a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e1e:	0c21      	lsrs	r1, r4, #16
 8000e20:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e28:	fb08 f30c 	mul.w	r3, r8, ip
 8000e2c:	428b      	cmp	r3, r1
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0xe4>
 8000e30:	1879      	adds	r1, r7, r1
 8000e32:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0xe2>
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	f200 80e9 	bhi.w	8001010 <__udivmoddi4+0x2b4>
 8000e3e:	4684      	mov	ip, r0
 8000e40:	1ac9      	subs	r1, r1, r3
 8000e42:	b2a3      	uxth	r3, r4
 8000e44:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e48:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e4c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e50:	fb08 f800 	mul.w	r8, r8, r0
 8000e54:	45a0      	cmp	r8, r4
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x10c>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x10a>
 8000e60:	45a0      	cmp	r8, r4
 8000e62:	f200 80d9 	bhi.w	8001018 <__udivmoddi4+0x2bc>
 8000e66:	4618      	mov	r0, r3
 8000e68:	eba4 0408 	sub.w	r4, r4, r8
 8000e6c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e70:	e7bf      	b.n	8000df2 <__udivmoddi4+0x96>
 8000e72:	428b      	cmp	r3, r1
 8000e74:	d909      	bls.n	8000e8a <__udivmoddi4+0x12e>
 8000e76:	2d00      	cmp	r5, #0
 8000e78:	f000 80b1 	beq.w	8000fde <__udivmoddi4+0x282>
 8000e7c:	2600      	movs	r6, #0
 8000e7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000e82:	4630      	mov	r0, r6
 8000e84:	4631      	mov	r1, r6
 8000e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8a:	fab3 f683 	clz	r6, r3
 8000e8e:	2e00      	cmp	r6, #0
 8000e90:	d14a      	bne.n	8000f28 <__udivmoddi4+0x1cc>
 8000e92:	428b      	cmp	r3, r1
 8000e94:	d302      	bcc.n	8000e9c <__udivmoddi4+0x140>
 8000e96:	4282      	cmp	r2, r0
 8000e98:	f200 80b8 	bhi.w	800100c <__udivmoddi4+0x2b0>
 8000e9c:	1a84      	subs	r4, r0, r2
 8000e9e:	eb61 0103 	sbc.w	r1, r1, r3
 8000ea2:	2001      	movs	r0, #1
 8000ea4:	468c      	mov	ip, r1
 8000ea6:	2d00      	cmp	r5, #0
 8000ea8:	d0a8      	beq.n	8000dfc <__udivmoddi4+0xa0>
 8000eaa:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eae:	e7a5      	b.n	8000dfc <__udivmoddi4+0xa0>
 8000eb0:	f1c2 0320 	rsb	r3, r2, #32
 8000eb4:	fa20 f603 	lsr.w	r6, r0, r3
 8000eb8:	4097      	lsls	r7, r2
 8000eba:	fa01 f002 	lsl.w	r0, r1, r2
 8000ebe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec2:	40d9      	lsrs	r1, r3
 8000ec4:	4330      	orrs	r0, r6
 8000ec6:	0c03      	lsrs	r3, r0, #16
 8000ec8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ecc:	fa1f f887 	uxth.w	r8, r7
 8000ed0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ed4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ed8:	fb06 f108 	mul.w	r1, r6, r8
 8000edc:	4299      	cmp	r1, r3
 8000ede:	fa04 f402 	lsl.w	r4, r4, r2
 8000ee2:	d909      	bls.n	8000ef8 <__udivmoddi4+0x19c>
 8000ee4:	18fb      	adds	r3, r7, r3
 8000ee6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eea:	f080 808d 	bcs.w	8001008 <__udivmoddi4+0x2ac>
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	f240 808a 	bls.w	8001008 <__udivmoddi4+0x2ac>
 8000ef4:	3e02      	subs	r6, #2
 8000ef6:	443b      	add	r3, r7
 8000ef8:	1a5b      	subs	r3, r3, r1
 8000efa:	b281      	uxth	r1, r0
 8000efc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f00:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f08:	fb00 f308 	mul.w	r3, r0, r8
 8000f0c:	428b      	cmp	r3, r1
 8000f0e:	d907      	bls.n	8000f20 <__udivmoddi4+0x1c4>
 8000f10:	1879      	adds	r1, r7, r1
 8000f12:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f16:	d273      	bcs.n	8001000 <__udivmoddi4+0x2a4>
 8000f18:	428b      	cmp	r3, r1
 8000f1a:	d971      	bls.n	8001000 <__udivmoddi4+0x2a4>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4439      	add	r1, r7
 8000f20:	1acb      	subs	r3, r1, r3
 8000f22:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f26:	e778      	b.n	8000e1a <__udivmoddi4+0xbe>
 8000f28:	f1c6 0c20 	rsb	ip, r6, #32
 8000f2c:	fa03 f406 	lsl.w	r4, r3, r6
 8000f30:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f34:	431c      	orrs	r4, r3
 8000f36:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000f3e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f42:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f46:	431f      	orrs	r7, r3
 8000f48:	0c3b      	lsrs	r3, r7, #16
 8000f4a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f4e:	fa1f f884 	uxth.w	r8, r4
 8000f52:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f56:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f5a:	fb09 fa08 	mul.w	sl, r9, r8
 8000f5e:	458a      	cmp	sl, r1
 8000f60:	fa02 f206 	lsl.w	r2, r2, r6
 8000f64:	fa00 f306 	lsl.w	r3, r0, r6
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x220>
 8000f6a:	1861      	adds	r1, r4, r1
 8000f6c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f70:	d248      	bcs.n	8001004 <__udivmoddi4+0x2a8>
 8000f72:	458a      	cmp	sl, r1
 8000f74:	d946      	bls.n	8001004 <__udivmoddi4+0x2a8>
 8000f76:	f1a9 0902 	sub.w	r9, r9, #2
 8000f7a:	4421      	add	r1, r4
 8000f7c:	eba1 010a 	sub.w	r1, r1, sl
 8000f80:	b2bf      	uxth	r7, r7
 8000f82:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f86:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f8a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f8e:	fb00 f808 	mul.w	r8, r0, r8
 8000f92:	45b8      	cmp	r8, r7
 8000f94:	d907      	bls.n	8000fa6 <__udivmoddi4+0x24a>
 8000f96:	19e7      	adds	r7, r4, r7
 8000f98:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f9c:	d22e      	bcs.n	8000ffc <__udivmoddi4+0x2a0>
 8000f9e:	45b8      	cmp	r8, r7
 8000fa0:	d92c      	bls.n	8000ffc <__udivmoddi4+0x2a0>
 8000fa2:	3802      	subs	r0, #2
 8000fa4:	4427      	add	r7, r4
 8000fa6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000faa:	eba7 0708 	sub.w	r7, r7, r8
 8000fae:	fba0 8902 	umull	r8, r9, r0, r2
 8000fb2:	454f      	cmp	r7, r9
 8000fb4:	46c6      	mov	lr, r8
 8000fb6:	4649      	mov	r1, r9
 8000fb8:	d31a      	bcc.n	8000ff0 <__udivmoddi4+0x294>
 8000fba:	d017      	beq.n	8000fec <__udivmoddi4+0x290>
 8000fbc:	b15d      	cbz	r5, 8000fd6 <__udivmoddi4+0x27a>
 8000fbe:	ebb3 020e 	subs.w	r2, r3, lr
 8000fc2:	eb67 0701 	sbc.w	r7, r7, r1
 8000fc6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fca:	40f2      	lsrs	r2, r6
 8000fcc:	ea4c 0202 	orr.w	r2, ip, r2
 8000fd0:	40f7      	lsrs	r7, r6
 8000fd2:	e9c5 2700 	strd	r2, r7, [r5]
 8000fd6:	2600      	movs	r6, #0
 8000fd8:	4631      	mov	r1, r6
 8000fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fde:	462e      	mov	r6, r5
 8000fe0:	4628      	mov	r0, r5
 8000fe2:	e70b      	b.n	8000dfc <__udivmoddi4+0xa0>
 8000fe4:	4606      	mov	r6, r0
 8000fe6:	e6e9      	b.n	8000dbc <__udivmoddi4+0x60>
 8000fe8:	4618      	mov	r0, r3
 8000fea:	e6fd      	b.n	8000de8 <__udivmoddi4+0x8c>
 8000fec:	4543      	cmp	r3, r8
 8000fee:	d2e5      	bcs.n	8000fbc <__udivmoddi4+0x260>
 8000ff0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ff4:	eb69 0104 	sbc.w	r1, r9, r4
 8000ff8:	3801      	subs	r0, #1
 8000ffa:	e7df      	b.n	8000fbc <__udivmoddi4+0x260>
 8000ffc:	4608      	mov	r0, r1
 8000ffe:	e7d2      	b.n	8000fa6 <__udivmoddi4+0x24a>
 8001000:	4660      	mov	r0, ip
 8001002:	e78d      	b.n	8000f20 <__udivmoddi4+0x1c4>
 8001004:	4681      	mov	r9, r0
 8001006:	e7b9      	b.n	8000f7c <__udivmoddi4+0x220>
 8001008:	4666      	mov	r6, ip
 800100a:	e775      	b.n	8000ef8 <__udivmoddi4+0x19c>
 800100c:	4630      	mov	r0, r6
 800100e:	e74a      	b.n	8000ea6 <__udivmoddi4+0x14a>
 8001010:	f1ac 0c02 	sub.w	ip, ip, #2
 8001014:	4439      	add	r1, r7
 8001016:	e713      	b.n	8000e40 <__udivmoddi4+0xe4>
 8001018:	3802      	subs	r0, #2
 800101a:	443c      	add	r4, r7
 800101c:	e724      	b.n	8000e68 <__udivmoddi4+0x10c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <_WAsys_default_stdout_logging_cb_func>:
 * @param arg_buff the message need to be printed
 * @param arg_len size of message(arg_buff) length
 * @see WAsys_logging_init_default
 */
static void _WAsys_default_stdout_logging_cb_func(char *arg_buff,
		size_t arg_len) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
	size_t _a;
	for (_a = 0; _a < arg_len; _a++) {
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	e00f      	b.n	8001054 <_WAsys_default_stdout_logging_cb_func+0x30>
		putchar(arg_buff[_a]);
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	4413      	add	r3, r2
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	4618      	mov	r0, r3
 800103e:	f005 fa49 	bl	80064d4 <putchar>
		fflush(stdout);
 8001042:	4b09      	ldr	r3, [pc, #36]	; (8001068 <_WAsys_default_stdout_logging_cb_func+0x44>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	4618      	mov	r0, r3
 800104a:	f004 ff3b 	bl	8005ec4 <fflush>
	for (_a = 0; _a < arg_len; _a++) {
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	3301      	adds	r3, #1
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fa      	ldr	r2, [r7, #12]
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	429a      	cmp	r2, r3
 800105a:	d3eb      	bcc.n	8001034 <_WAsys_default_stdout_logging_cb_func+0x10>
	}
}
 800105c:	bf00      	nop
 800105e:	bf00      	nop
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000018 	.word	0x20000018

0800106c <_WAsys_default_system_timestamp_func>:

/**
 * @brief Default system timestamp func. Calls time() funcs(if lib thinks it might be available) or zero
 * @see WAsys_logging_init_default
 */
static time_t _WAsys_default_system_timestamp_func(void) {
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0

	/*when time() func is possibly available*/
#ifdef _WAsys_TIME_FUNC_MAYBE_DEFINED
	time(&_ts);
#else
	_ts = 0;
 8001072:	f04f 0200 	mov.w	r2, #0
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	e9c7 2300 	strd	r2, r3, [r7]
#endif
	return (time_t) _ts;
 800107e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001082:	4610      	mov	r0, r2
 8001084:	4619      	mov	r1, r3
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <_WAsys_print_timestamp>:
/**
 * @brief Format and prints out the current timestamp on associated lib's conf out cb
 * @param timestamp need to be formatted and printed
 * @see WAsys_logging_init_default
 */
static void _WAsys_print_timestamp(time_t arg_ts) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b08a      	sub	sp, #40	; 0x28
 8001094:	af00      	add	r7, sp, #0
 8001096:	e9c7 0100 	strd	r0, r1, [r7]

	/*to hold a datetime not scalar*/
	struct tm *_tst;

	/*filling the datetime struct*/
	_tst = localtime(&arg_ts);
 800109a:	463b      	mov	r3, r7
 800109c:	4618      	mov	r0, r3
 800109e:	f005 f83d 	bl	800611c <localtime>
 80010a2:	6278      	str	r0, [r7, #36]	; 0x24

	/*A local var, to hold the printed datetime*/
	char _msg[WAsys_TIMESTAMP_DATE_FORMAT_LEN];

	/*print the result on msg*/
	strftime(_msg, WAsys_TIMESTAMP_DATE_FORMAT_LEN, WAsys_TIMESTAMP_DATE_FORMAT,
 80010a4:	f107 000c 	add.w	r0, r7, #12
 80010a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010aa:	4a07      	ldr	r2, [pc, #28]	; (80010c8 <_WAsys_print_timestamp+0x38>)
 80010ac:	2115      	movs	r1, #21
 80010ae:	f005 ffcf 	bl	8007050 <strftime>
			_tst);

	/*calling the associated callback func to printout the timestamp*/
	_logging.callback_func(_msg,
 80010b2:	4b06      	ldr	r3, [pc, #24]	; (80010cc <_WAsys_print_timestamp+0x3c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f107 020c 	add.w	r2, r7, #12
 80010ba:	2114      	movs	r1, #20
 80010bc:	4610      	mov	r0, r2
 80010be:	4798      	blx	r3
	WAsys_TIMESTAMP_DATE_FORMAT_LEN - 1 /*-1 for avoiding sending NIL*/);

}
 80010c0:	bf00      	nop
 80010c2:	3728      	adds	r7, #40	; 0x28
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	0800a070 	.word	0x0800a070
 80010cc:	20000324 	.word	0x20000324

080010d0 <_WAsys_log_br>:
 * @see WAsys_NULL_ARGUMENT_LOGGING
 * @see WAsys_log_bytea_hex
 * @see log_bytea
 */
static void _WAsys_log_br(char *arg_msg, uint8_t arg_br,
		uint8_t arg_can_include_ts) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	460b      	mov	r3, r1
 80010da:	70fb      	strb	r3, [r7, #3]
 80010dc:	4613      	mov	r3, r2
 80010de:	70bb      	strb	r3, [r7, #2]

	/*when lib has not initialized yet, then do nothing*/
	if (_WAsys_logging_lib_initialized == 0) {
 80010e0:	4b16      	ldr	r3, [pc, #88]	; (800113c <_WAsys_log_br+0x6c>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d024      	beq.n	8001132 <_WAsys_log_br+0x62>
		return;
	}

	if (_logging.including_timestamp && arg_can_include_ts) {
 80010e8:	4b15      	ldr	r3, [pc, #84]	; (8001140 <_WAsys_log_br+0x70>)
 80010ea:	7a1b      	ldrb	r3, [r3, #8]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d004      	beq.n	80010fa <_WAsys_log_br+0x2a>
 80010f0:	78bb      	ldrb	r3, [r7, #2]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <_WAsys_log_br+0x2a>
		WAsys_log_ts();
 80010f6:	f000 f885 	bl	8001204 <WAsys_log_ts>
	}

	char *_log_msg;
	/*using WAsys_NULL_ARGUMENT_LOGGING when given arg is a NULL ptr*/
	if (arg_msg != NULL) {
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d002      	beq.n	8001106 <_WAsys_log_br+0x36>
		_log_msg = arg_msg;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	e001      	b.n	800110a <_WAsys_log_br+0x3a>
	} else {
		_log_msg = WAsys_NULL_ARGUMENT_LOGGING;
 8001106:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <_WAsys_log_br+0x74>)
 8001108:	60fb      	str	r3, [r7, #12]
	}

	/*calculating the size of given log msg*/
	size_t _log_msg_len = strlen(_log_msg);
 800110a:	68f8      	ldr	r0, [r7, #12]
 800110c:	f7ff f868 	bl	80001e0 <strlen>
 8001110:	60b8      	str	r0, [r7, #8]

	/*calling for calling cb func for logging*/
	_logging.callback_func(_log_msg, _log_msg_len);
 8001112:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <_WAsys_log_br+0x70>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	68b9      	ldr	r1, [r7, #8]
 8001118:	68f8      	ldr	r0, [r7, #12]
 800111a:	4798      	blx	r3
	if (arg_br) {
 800111c:	78fb      	ldrb	r3, [r7, #3]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d008      	beq.n	8001134 <_WAsys_log_br+0x64>
		static char _lf[1] = { '\n' };
		static size_t _lf_len = sizeof(_lf);
		_logging.callback_func(_lf, _lf_len);
 8001122:	4b07      	ldr	r3, [pc, #28]	; (8001140 <_WAsys_log_br+0x70>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a08      	ldr	r2, [pc, #32]	; (8001148 <_WAsys_log_br+0x78>)
 8001128:	6812      	ldr	r2, [r2, #0]
 800112a:	4611      	mov	r1, r2
 800112c:	4807      	ldr	r0, [pc, #28]	; (800114c <_WAsys_log_br+0x7c>)
 800112e:	4798      	blx	r3
 8001130:	e000      	b.n	8001134 <_WAsys_log_br+0x64>
		return;
 8001132:	bf00      	nop
	}
}
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000268 	.word	0x20000268
 8001140:	20000324 	.word	0x20000324
 8001144:	0800a084 	.word	0x0800a084
 8001148:	20000000 	.word	0x20000000
 800114c:	20000004 	.word	0x20000004

08001150 <WAsys_logging_init>:
/* - - - - - - - static func - - end - - - - - - - */
/***************************************************/

/*************************************************/
/* - - - - - - - Functions - begin - - - - - - - */
void WAsys_logging_init(WAsys_LOGGING_CONF_T arg_logging_conf) {
 8001150:	b490      	push	{r4, r7}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	/*copy the given arg into local conf var*/
	_logging = arg_logging_conf;
 800115c:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <WAsys_logging_init+0x50>)
 800115e:	461c      	mov	r4, r3
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001166:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	/*setting default out cb when associated func is NULL*/
	if (_logging.callback_func == NULL) {
 800116a:	4b0d      	ldr	r3, [pc, #52]	; (80011a0 <WAsys_logging_init+0x50>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d102      	bne.n	8001178 <WAsys_logging_init+0x28>
		_logging.callback_func = _WAsys_default_stdout_logging_cb_func;
 8001172:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <WAsys_logging_init+0x50>)
 8001174:	4a0b      	ldr	r2, [pc, #44]	; (80011a4 <WAsys_logging_init+0x54>)
 8001176:	601a      	str	r2, [r3, #0]
	}

	/*Using default timestamp func, when timestamp is needed using the default date/time func*/
	if (_logging.including_timestamp) {
 8001178:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <WAsys_logging_init+0x50>)
 800117a:	7a1b      	ldrb	r3, [r3, #8]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d006      	beq.n	800118e <WAsys_logging_init+0x3e>
		if (_logging.system_ts_func == NULL) {
 8001180:	4b07      	ldr	r3, [pc, #28]	; (80011a0 <WAsys_logging_init+0x50>)
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d102      	bne.n	800118e <WAsys_logging_init+0x3e>
			_logging.system_ts_func = _WAsys_default_system_timestamp_func;
 8001188:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <WAsys_logging_init+0x50>)
 800118a:	4a07      	ldr	r2, [pc, #28]	; (80011a8 <WAsys_logging_init+0x58>)
 800118c:	605a      	str	r2, [r3, #4]
		}
	}

	/*marking the lib initialized*/
	_WAsys_logging_lib_initialized = 1;
 800118e:	4b07      	ldr	r3, [pc, #28]	; (80011ac <WAsys_logging_init+0x5c>)
 8001190:	2201      	movs	r2, #1
 8001192:	701a      	strb	r2, [r3, #0]
}
 8001194:	bf00      	nop
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bc90      	pop	{r4, r7}
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	20000324 	.word	0x20000324
 80011a4:	08001025 	.word	0x08001025
 80011a8:	0800106d 	.word	0x0800106d
 80011ac:	20000268 	.word	0x20000268

080011b0 <WAsys_logf>:

void WAsys_zeromsg(void){
	memset(WAsys_logging_msg, 0, _MSG_LEN);
}

void WAsys_logf(char *fmt, ...) {
 80011b0:	b40f      	push	{r0, r1, r2, r3}
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
	va_list _args;
	va_start(_args, fmt);
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	607b      	str	r3, [r7, #4]
#if __cplusplus > 199711L
	vsnprintf(WAsys_logging_msg, sizeof(WAsys_logging_msg), fmt, _args);
#else
	vsprintf(WAsys_logging_msg, fmt, _args);
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	6939      	ldr	r1, [r7, #16]
 80011c2:	4807      	ldr	r0, [pc, #28]	; (80011e0 <WAsys_logf+0x30>)
 80011c4:	f006 fa22 	bl	800760c <vsiprintf>
#endif
	va_end(_args);
	WAsys_log_br(WAsys_logging_msg, 0);
 80011c8:	2100      	movs	r1, #0
 80011ca:	4805      	ldr	r0, [pc, #20]	; (80011e0 <WAsys_logf+0x30>)
 80011cc:	f000 f80a 	bl	80011e4 <WAsys_log_br>
}
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80011da:	b004      	add	sp, #16
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	20000330 	.word	0x20000330

080011e4 <WAsys_log_br>:

#endif

void WAsys_log_br(char *arg_msg, uint8_t arg_br) {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	460b      	mov	r3, r1
 80011ee:	70fb      	strb	r3, [r7, #3]

	_WAsys_log_br(arg_msg, arg_br, 1);
 80011f0:	78fb      	ldrb	r3, [r7, #3]
 80011f2:	2201      	movs	r2, #1
 80011f4:	4619      	mov	r1, r3
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff ff6a 	bl	80010d0 <_WAsys_log_br>

}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <WAsys_log_ts>:

void WAsys_log_ts(void) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
	/*if it's possible to */
	if (_WAsys_logging_lib_initialized == 0 || _logging.system_ts_func == NULL) {
 800120a:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <WAsys_log_ts+0x34>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d00d      	beq.n	800122e <WAsys_log_ts+0x2a>
 8001212:	4b0a      	ldr	r3, [pc, #40]	; (800123c <WAsys_log_ts+0x38>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d009      	beq.n	800122e <WAsys_log_ts+0x2a>
		return;
	}
	/*get current timestmap*/
	time_t _ts = _logging.system_ts_func();
 800121a:	4b08      	ldr	r3, [pc, #32]	; (800123c <WAsys_log_ts+0x38>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	4798      	blx	r3
 8001220:	e9c7 0100 	strd	r0, r1, [r7]

	/*format and print it out*/
	_WAsys_print_timestamp(_ts);
 8001224:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001228:	f7ff ff32 	bl	8001090 <_WAsys_print_timestamp>
 800122c:	e000      	b.n	8001230 <WAsys_log_ts+0x2c>
		return;
 800122e:	bf00      	nop
}
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000268 	.word	0x20000268
 800123c:	20000324 	.word	0x20000324

08001240 <hsl_to_rgb>:
#include "color_utils.h"

uint32_t hsl_to_rgb(uint8_t h, uint8_t s, uint8_t l) {
 8001240:	b480      	push	{r7}
 8001242:	b087      	sub	sp, #28
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	71fb      	strb	r3, [r7, #7]
 800124a:	460b      	mov	r3, r1
 800124c:	71bb      	strb	r3, [r7, #6]
 800124e:	4613      	mov	r3, r2
 8001250:	717b      	strb	r3, [r7, #5]
	if(l == 0) return 0;
 8001252:	797b      	ldrb	r3, [r7, #5]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d101      	bne.n	800125c <hsl_to_rgb+0x1c>
 8001258:	2300      	movs	r3, #0
 800125a:	e0b1      	b.n	80013c0 <hsl_to_rgb+0x180>

	volatile uint8_t  r, g, b, lo, c, x, m;
	volatile uint16_t h1, l1, H;
	l1 = l + 1;
 800125c:	797b      	ldrb	r3, [r7, #5]
 800125e:	b29b      	uxth	r3, r3
 8001260:	3301      	adds	r3, #1
 8001262:	b29b      	uxth	r3, r3
 8001264:	81bb      	strh	r3, [r7, #12]
	if (l < 128)    c = ((l1 << 1) * s) >> 8;
 8001266:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800126a:	2b00      	cmp	r3, #0
 800126c:	db09      	blt.n	8001282 <hsl_to_rgb+0x42>
 800126e:	89bb      	ldrh	r3, [r7, #12]
 8001270:	b29b      	uxth	r3, r3
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	79ba      	ldrb	r2, [r7, #6]
 8001276:	fb02 f303 	mul.w	r3, r2, r3
 800127a:	121b      	asrs	r3, r3, #8
 800127c:	b2db      	uxtb	r3, r3
 800127e:	74fb      	strb	r3, [r7, #19]
 8001280:	e00a      	b.n	8001298 <hsl_to_rgb+0x58>
	else            c = (512 - (l1 << 1)) * s >> 8;
 8001282:	89bb      	ldrh	r3, [r7, #12]
 8001284:	b29b      	uxth	r3, r3
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800128c:	79ba      	ldrb	r2, [r7, #6]
 800128e:	fb02 f303 	mul.w	r3, r2, r3
 8001292:	121b      	asrs	r3, r3, #8
 8001294:	b2db      	uxtb	r3, r3
 8001296:	74fb      	strb	r3, [r7, #19]

	H = h * 6;              // 0 to 1535 (actually 1530)
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	b29b      	uxth	r3, r3
 800129c:	461a      	mov	r2, r3
 800129e:	0052      	lsls	r2, r2, #1
 80012a0:	4413      	add	r3, r2
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	817b      	strh	r3, [r7, #10]
	lo = H & 255;           // Low byte  = primary/secondary color mix
 80012a8:	897b      	ldrh	r3, [r7, #10]
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	753b      	strb	r3, [r7, #20]
	h1 = lo + 1;
 80012b0:	7d3b      	ldrb	r3, [r7, #20]
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	3301      	adds	r3, #1
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	81fb      	strh	r3, [r7, #14]

	if ((H & 256) == 0)   x = h1 * c >> 8;          // even sextant, like red to yellow
 80012bc:	897b      	ldrh	r3, [r7, #10]
 80012be:	b29b      	uxth	r3, r3
 80012c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d109      	bne.n	80012dc <hsl_to_rgb+0x9c>
 80012c8:	89fb      	ldrh	r3, [r7, #14]
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	7cfa      	ldrb	r2, [r7, #19]
 80012ce:	b2d2      	uxtb	r2, r2
 80012d0:	fb02 f303 	mul.w	r3, r2, r3
 80012d4:	121b      	asrs	r3, r3, #8
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	74bb      	strb	r3, [r7, #18]
 80012da:	e00a      	b.n	80012f2 <hsl_to_rgb+0xb2>
	else                  x = (256 - h1) * c >> 8;  // odd sextant, like yellow to green
 80012dc:	89fb      	ldrh	r3, [r7, #14]
 80012de:	b29b      	uxth	r3, r3
 80012e0:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80012e4:	7cfa      	ldrb	r2, [r7, #19]
 80012e6:	b2d2      	uxtb	r2, r2
 80012e8:	fb02 f303 	mul.w	r3, r2, r3
 80012ec:	121b      	asrs	r3, r3, #8
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	74bb      	strb	r3, [r7, #18]

	m = l - (c >> 1);
 80012f2:	7cfb      	ldrb	r3, [r7, #19]
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	085b      	lsrs	r3, r3, #1
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	797a      	ldrb	r2, [r7, #5]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	747b      	strb	r3, [r7, #17]
	switch(H >> 8) {       // High byte = sextant of colorwheel
 8001302:	897b      	ldrh	r3, [r7, #10]
 8001304:	b29b      	uxth	r3, r3
 8001306:	0a1b      	lsrs	r3, r3, #8
 8001308:	b29b      	uxth	r3, r3
 800130a:	2b04      	cmp	r3, #4
 800130c:	d839      	bhi.n	8001382 <hsl_to_rgb+0x142>
 800130e:	a201      	add	r2, pc, #4	; (adr r2, 8001314 <hsl_to_rgb+0xd4>)
 8001310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001314:	08001329 	.word	0x08001329
 8001318:	0800133b 	.word	0x0800133b
 800131c:	0800134d 	.word	0x0800134d
 8001320:	0800135f 	.word	0x0800135f
 8001324:	08001371 	.word	0x08001371
	 case 0 : r = c; g = x; b = 0; break; // R to Y
 8001328:	7cfb      	ldrb	r3, [r7, #19]
 800132a:	b2db      	uxtb	r3, r3
 800132c:	75fb      	strb	r3, [r7, #23]
 800132e:	7cbb      	ldrb	r3, [r7, #18]
 8001330:	b2db      	uxtb	r3, r3
 8001332:	75bb      	strb	r3, [r7, #22]
 8001334:	2300      	movs	r3, #0
 8001336:	757b      	strb	r3, [r7, #21]
 8001338:	e02c      	b.n	8001394 <hsl_to_rgb+0x154>
	 case 1 : r = x; g = c; b = 0; break; // Y to G
 800133a:	7cbb      	ldrb	r3, [r7, #18]
 800133c:	b2db      	uxtb	r3, r3
 800133e:	75fb      	strb	r3, [r7, #23]
 8001340:	7cfb      	ldrb	r3, [r7, #19]
 8001342:	b2db      	uxtb	r3, r3
 8001344:	75bb      	strb	r3, [r7, #22]
 8001346:	2300      	movs	r3, #0
 8001348:	757b      	strb	r3, [r7, #21]
 800134a:	e023      	b.n	8001394 <hsl_to_rgb+0x154>
	 case 2 : r = 0; g = c; b = x; break; // G to C
 800134c:	2300      	movs	r3, #0
 800134e:	75fb      	strb	r3, [r7, #23]
 8001350:	7cfb      	ldrb	r3, [r7, #19]
 8001352:	b2db      	uxtb	r3, r3
 8001354:	75bb      	strb	r3, [r7, #22]
 8001356:	7cbb      	ldrb	r3, [r7, #18]
 8001358:	b2db      	uxtb	r3, r3
 800135a:	757b      	strb	r3, [r7, #21]
 800135c:	e01a      	b.n	8001394 <hsl_to_rgb+0x154>
	 case 3 : r = 0; g = x; b = c; break; // C to B
 800135e:	2300      	movs	r3, #0
 8001360:	75fb      	strb	r3, [r7, #23]
 8001362:	7cbb      	ldrb	r3, [r7, #18]
 8001364:	b2db      	uxtb	r3, r3
 8001366:	75bb      	strb	r3, [r7, #22]
 8001368:	7cfb      	ldrb	r3, [r7, #19]
 800136a:	b2db      	uxtb	r3, r3
 800136c:	757b      	strb	r3, [r7, #21]
 800136e:	e011      	b.n	8001394 <hsl_to_rgb+0x154>
	 case 4 : r = x; g = 0; b = c; break; // B to M
 8001370:	7cbb      	ldrb	r3, [r7, #18]
 8001372:	b2db      	uxtb	r3, r3
 8001374:	75fb      	strb	r3, [r7, #23]
 8001376:	2300      	movs	r3, #0
 8001378:	75bb      	strb	r3, [r7, #22]
 800137a:	7cfb      	ldrb	r3, [r7, #19]
 800137c:	b2db      	uxtb	r3, r3
 800137e:	757b      	strb	r3, [r7, #21]
 8001380:	e008      	b.n	8001394 <hsl_to_rgb+0x154>
	 default: r = c; g = 0; b = x; break; // M to R
 8001382:	7cfb      	ldrb	r3, [r7, #19]
 8001384:	b2db      	uxtb	r3, r3
 8001386:	75fb      	strb	r3, [r7, #23]
 8001388:	2300      	movs	r3, #0
 800138a:	75bb      	strb	r3, [r7, #22]
 800138c:	7cbb      	ldrb	r3, [r7, #18]
 800138e:	b2db      	uxtb	r3, r3
 8001390:	757b      	strb	r3, [r7, #21]
 8001392:	bf00      	nop
	}

	return (((uint32_t)r + m) << 16) | (((uint32_t)g + m) << 8) | ((uint32_t)b + m);
 8001394:	7dfb      	ldrb	r3, [r7, #23]
 8001396:	b2db      	uxtb	r3, r3
 8001398:	461a      	mov	r2, r3
 800139a:	7c7b      	ldrb	r3, [r7, #17]
 800139c:	b2db      	uxtb	r3, r3
 800139e:	4413      	add	r3, r2
 80013a0:	041a      	lsls	r2, r3, #16
 80013a2:	7dbb      	ldrb	r3, [r7, #22]
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	4619      	mov	r1, r3
 80013a8:	7c7b      	ldrb	r3, [r7, #17]
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	440b      	add	r3, r1
 80013ae:	021b      	lsls	r3, r3, #8
 80013b0:	431a      	orrs	r2, r3
 80013b2:	7d7b      	ldrb	r3, [r7, #21]
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	4619      	mov	r1, r3
 80013b8:	7c7b      	ldrb	r3, [r7, #17]
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	440b      	add	r3, r1
 80013be:	4313      	orrs	r3, r2
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	371c      	adds	r7, #28
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <set_brightness>:

static inline uint8_t scale8(uint8_t x, uint8_t scale) {
  return ((uint16_t)x * scale) >> 8;
}

void set_brightness(int bright) {
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
	if (bright == brightness) {
 80013d4:	4b07      	ldr	r3, [pc, #28]	; (80013f4 <set_brightness+0x28>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d003      	beq.n	80013e6 <set_brightness+0x1a>
		return;
	}

	brightness = bright;
 80013de:	4a05      	ldr	r2, [pc, #20]	; (80013f4 <set_brightness+0x28>)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6013      	str	r3, [r2, #0]
 80013e4:	e000      	b.n	80013e8 <set_brightness+0x1c>
		return;
 80013e6:	bf00      	nop
}
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	200002e8 	.word	0x200002e8

080013f8 <get_brightness>:

int get_brightness() {
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
	return brightness;
 80013fc:	4b03      	ldr	r3, [pc, #12]	; (800140c <get_brightness+0x14>)
 80013fe:	681b      	ldr	r3, [r3, #0]
}
 8001400:	4618      	mov	r0, r3
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	200002e8 	.word	0x200002e8

08001410 <led_set_RGB>:

void led_set_RGB(uint8_t index, uint8_t r, uint8_t g, uint8_t b) {
 8001410:	b5b0      	push	{r4, r5, r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	4604      	mov	r4, r0
 8001418:	4608      	mov	r0, r1
 800141a:	4611      	mov	r1, r2
 800141c:	461a      	mov	r2, r3
 800141e:	4623      	mov	r3, r4
 8001420:	71fb      	strb	r3, [r7, #7]
 8001422:	4603      	mov	r3, r0
 8001424:	71bb      	strb	r3, [r7, #6]
 8001426:	460b      	mov	r3, r1
 8001428:	717b      	strb	r3, [r7, #5]
 800142a:	4613      	mov	r3, r2
 800142c:	713b      	strb	r3, [r7, #4]
  float angle = 90-brightness;  // in degrees
 800142e:	4b4c      	ldr	r3, [pc, #304]	; (8001560 <led_set_RGB+0x150>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8001436:	ee07 3a90 	vmov	s15, r3
 800143a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800143e:	edc7 7a03 	vstr	s15, [r7, #12]
  angle = angle*PI / 180;  // in rad
 8001442:	68f8      	ldr	r0, [r7, #12]
 8001444:	f7ff f898 	bl	8000578 <__aeabi_f2d>
 8001448:	a343      	add	r3, pc, #268	; (adr r3, 8001558 <led_set_RGB+0x148>)
 800144a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144e:	f7ff f8eb 	bl	8000628 <__aeabi_dmul>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	4610      	mov	r0, r2
 8001458:	4619      	mov	r1, r3
 800145a:	f04f 0200 	mov.w	r2, #0
 800145e:	4b41      	ldr	r3, [pc, #260]	; (8001564 <led_set_RGB+0x154>)
 8001460:	f7ff fa0c 	bl	800087c <__aeabi_ddiv>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	4610      	mov	r0, r2
 800146a:	4619      	mov	r1, r3
 800146c:	f7ff fbbe 	bl	8000bec <__aeabi_d2f>
 8001470:	4603      	mov	r3, r0
 8001472:	60fb      	str	r3, [r7, #12]
  rgb_arr[3 * index]= (g)/(tan(angle)); // g;
 8001474:	797b      	ldrb	r3, [r7, #5]
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff f86c 	bl	8000554 <__aeabi_i2d>
 800147c:	4604      	mov	r4, r0
 800147e:	460d      	mov	r5, r1
 8001480:	68f8      	ldr	r0, [r7, #12]
 8001482:	f7ff f879 	bl	8000578 <__aeabi_f2d>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	ec43 2b10 	vmov	d0, r2, r3
 800148e:	f007 fd7f 	bl	8008f90 <tan>
 8001492:	ec53 2b10 	vmov	r2, r3, d0
 8001496:	4620      	mov	r0, r4
 8001498:	4629      	mov	r1, r5
 800149a:	f7ff f9ef 	bl	800087c <__aeabi_ddiv>
 800149e:	4602      	mov	r2, r0
 80014a0:	460b      	mov	r3, r1
 80014a2:	4610      	mov	r0, r2
 80014a4:	4619      	mov	r1, r3
 80014a6:	79fa      	ldrb	r2, [r7, #7]
 80014a8:	4613      	mov	r3, r2
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	189c      	adds	r4, r3, r2
 80014ae:	f7ff fb7d 	bl	8000bac <__aeabi_d2uiz>
 80014b2:	4603      	mov	r3, r0
 80014b4:	b2da      	uxtb	r2, r3
 80014b6:	4b2c      	ldr	r3, [pc, #176]	; (8001568 <led_set_RGB+0x158>)
 80014b8:	551a      	strb	r2, [r3, r4]
  rgb_arr[3 * index + 1] = (r)/(tan(angle));
 80014ba:	79bb      	ldrb	r3, [r7, #6]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff f849 	bl	8000554 <__aeabi_i2d>
 80014c2:	4604      	mov	r4, r0
 80014c4:	460d      	mov	r5, r1
 80014c6:	68f8      	ldr	r0, [r7, #12]
 80014c8:	f7ff f856 	bl	8000578 <__aeabi_f2d>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	ec43 2b10 	vmov	d0, r2, r3
 80014d4:	f007 fd5c 	bl	8008f90 <tan>
 80014d8:	ec53 2b10 	vmov	r2, r3, d0
 80014dc:	4620      	mov	r0, r4
 80014de:	4629      	mov	r1, r5
 80014e0:	f7ff f9cc 	bl	800087c <__aeabi_ddiv>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4610      	mov	r0, r2
 80014ea:	4619      	mov	r1, r3
 80014ec:	79fa      	ldrb	r2, [r7, #7]
 80014ee:	4613      	mov	r3, r2
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	4413      	add	r3, r2
 80014f4:	1c5c      	adds	r4, r3, #1
 80014f6:	f7ff fb59 	bl	8000bac <__aeabi_d2uiz>
 80014fa:	4603      	mov	r3, r0
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	4b1a      	ldr	r3, [pc, #104]	; (8001568 <led_set_RGB+0x158>)
 8001500:	551a      	strb	r2, [r3, r4]
  rgb_arr[3 * index + 2] = (b)/(tan(angle));
 8001502:	793b      	ldrb	r3, [r7, #4]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff f825 	bl	8000554 <__aeabi_i2d>
 800150a:	4604      	mov	r4, r0
 800150c:	460d      	mov	r5, r1
 800150e:	68f8      	ldr	r0, [r7, #12]
 8001510:	f7ff f832 	bl	8000578 <__aeabi_f2d>
 8001514:	4602      	mov	r2, r0
 8001516:	460b      	mov	r3, r1
 8001518:	ec43 2b10 	vmov	d0, r2, r3
 800151c:	f007 fd38 	bl	8008f90 <tan>
 8001520:	ec53 2b10 	vmov	r2, r3, d0
 8001524:	4620      	mov	r0, r4
 8001526:	4629      	mov	r1, r5
 8001528:	f7ff f9a8 	bl	800087c <__aeabi_ddiv>
 800152c:	4602      	mov	r2, r0
 800152e:	460b      	mov	r3, r1
 8001530:	4610      	mov	r0, r2
 8001532:	4619      	mov	r1, r3
 8001534:	79fa      	ldrb	r2, [r7, #7]
 8001536:	4613      	mov	r3, r2
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	4413      	add	r3, r2
 800153c:	1c9c      	adds	r4, r3, #2
 800153e:	f7ff fb35 	bl	8000bac <__aeabi_d2uiz>
 8001542:	4603      	mov	r3, r0
 8001544:	b2da      	uxtb	r2, r3
 8001546:	4b08      	ldr	r3, [pc, #32]	; (8001568 <led_set_RGB+0x158>)
 8001548:	551a      	strb	r2, [r3, r4]

}
 800154a:	bf00      	nop
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bdb0      	pop	{r4, r5, r7, pc}
 8001552:	bf00      	nop
 8001554:	f3af 8000 	nop.w
 8001558:	53c8d4f1 	.word	0x53c8d4f1
 800155c:	400921fb 	.word	0x400921fb
 8001560:	200002e8 	.word	0x200002e8
 8001564:	40668000 	.word	0x40668000
 8001568:	2000026c 	.word	0x2000026c

0800156c <led_render>:

void led_render() {
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
  //for(uint8_t i = 0; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;

  if(wr_buf_p != 0 || hdma_tim1_ch1.State != HAL_DMA_STATE_READY) {
 8001572:	4b50      	ldr	r3, [pc, #320]	; (80016b4 <led_render+0x148>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d105      	bne.n	8001586 <led_render+0x1a>
 800157a:	4b4f      	ldr	r3, [pc, #316]	; (80016b8 <led_render+0x14c>)
 800157c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2b01      	cmp	r3, #1
 8001584:	d015      	beq.n	80015b2 <led_render+0x46>
	// Ongoing transfer, cancel!
	for(uint8_t i = 0; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 8001586:	2300      	movs	r3, #0
 8001588:	71fb      	strb	r3, [r7, #7]
 800158a:	e007      	b.n	800159c <led_render+0x30>
 800158c:	79fb      	ldrb	r3, [r7, #7]
 800158e:	4a4b      	ldr	r2, [pc, #300]	; (80016bc <led_render+0x150>)
 8001590:	2100      	movs	r1, #0
 8001592:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	3301      	adds	r3, #1
 800159a:	71fb      	strb	r3, [r7, #7]
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	2b2f      	cmp	r3, #47	; 0x2f
 80015a0:	d9f4      	bls.n	800158c <led_render+0x20>
	wr_buf_p = 0;
 80015a2:	4b44      	ldr	r3, [pc, #272]	; (80016b4 <led_render+0x148>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 80015a8:	2100      	movs	r1, #0
 80015aa:	4845      	ldr	r0, [pc, #276]	; (80016c0 <led_render+0x154>)
 80015ac:	f003 f9f6 	bl	800499c <HAL_TIM_PWM_Stop_DMA>
	return;
 80015b0:	e07c      	b.n	80016ac <led_render+0x140>
  }

  for(uint_fast8_t i = 0; i < 8; ++i) {
 80015b2:	2300      	movs	r3, #0
 80015b4:	603b      	str	r3, [r7, #0]
 80015b6:	e06d      	b.n	8001694 <led_render+0x128>
    wr_buf[i     ] = PWM_LO << (((rgb_arr[0] << i) & 0x80) > 0);
 80015b8:	4b42      	ldr	r3, [pc, #264]	; (80016c4 <led_render+0x158>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	461a      	mov	r2, r3
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	dd01      	ble.n	80015d0 <led_render+0x64>
 80015cc:	213a      	movs	r1, #58	; 0x3a
 80015ce:	e000      	b.n	80015d2 <led_render+0x66>
 80015d0:	211d      	movs	r1, #29
 80015d2:	4a3a      	ldr	r2, [pc, #232]	; (80016bc <led_render+0x150>)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i +  8] = PWM_LO << (((rgb_arr[1] << i) & 0x80) > 0);
 80015da:	4b3a      	ldr	r3, [pc, #232]	; (80016c4 <led_render+0x158>)
 80015dc:	785b      	ldrb	r3, [r3, #1]
 80015de:	461a      	mov	r2, r3
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	dd01      	ble.n	80015f2 <led_render+0x86>
 80015ee:	213a      	movs	r1, #58	; 0x3a
 80015f0:	e000      	b.n	80015f4 <led_render+0x88>
 80015f2:	211d      	movs	r1, #29
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	3308      	adds	r3, #8
 80015f8:	4a30      	ldr	r2, [pc, #192]	; (80016bc <led_render+0x150>)
 80015fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 16] = PWM_LO << (((rgb_arr[2] << i) & 0x80) > 0);
 80015fe:	4b31      	ldr	r3, [pc, #196]	; (80016c4 <led_render+0x158>)
 8001600:	789b      	ldrb	r3, [r3, #2]
 8001602:	461a      	mov	r2, r3
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800160e:	2b00      	cmp	r3, #0
 8001610:	dd01      	ble.n	8001616 <led_render+0xaa>
 8001612:	213a      	movs	r1, #58	; 0x3a
 8001614:	e000      	b.n	8001618 <led_render+0xac>
 8001616:	211d      	movs	r1, #29
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	3310      	adds	r3, #16
 800161c:	4a27      	ldr	r2, [pc, #156]	; (80016bc <led_render+0x150>)
 800161e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 24] = PWM_LO << (((rgb_arr[3] << i) & 0x80) > 0);
 8001622:	4b28      	ldr	r3, [pc, #160]	; (80016c4 <led_render+0x158>)
 8001624:	78db      	ldrb	r3, [r3, #3]
 8001626:	461a      	mov	r2, r3
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001632:	2b00      	cmp	r3, #0
 8001634:	dd01      	ble.n	800163a <led_render+0xce>
 8001636:	213a      	movs	r1, #58	; 0x3a
 8001638:	e000      	b.n	800163c <led_render+0xd0>
 800163a:	211d      	movs	r1, #29
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	3318      	adds	r3, #24
 8001640:	4a1e      	ldr	r2, [pc, #120]	; (80016bc <led_render+0x150>)
 8001642:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 32] = PWM_LO << (((rgb_arr[4] << i) & 0x80) > 0);
 8001646:	4b1f      	ldr	r3, [pc, #124]	; (80016c4 <led_render+0x158>)
 8001648:	791b      	ldrb	r3, [r3, #4]
 800164a:	461a      	mov	r2, r3
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001656:	2b00      	cmp	r3, #0
 8001658:	dd01      	ble.n	800165e <led_render+0xf2>
 800165a:	213a      	movs	r1, #58	; 0x3a
 800165c:	e000      	b.n	8001660 <led_render+0xf4>
 800165e:	211d      	movs	r1, #29
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	3320      	adds	r3, #32
 8001664:	4a15      	ldr	r2, [pc, #84]	; (80016bc <led_render+0x150>)
 8001666:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 40] = PWM_LO << (((rgb_arr[5] << i) & 0x80) > 0);
 800166a:	4b16      	ldr	r3, [pc, #88]	; (80016c4 <led_render+0x158>)
 800166c:	795b      	ldrb	r3, [r3, #5]
 800166e:	461a      	mov	r2, r3
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800167a:	2b00      	cmp	r3, #0
 800167c:	dd01      	ble.n	8001682 <led_render+0x116>
 800167e:	213a      	movs	r1, #58	; 0x3a
 8001680:	e000      	b.n	8001684 <led_render+0x118>
 8001682:	211d      	movs	r1, #29
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	3328      	adds	r3, #40	; 0x28
 8001688:	4a0c      	ldr	r2, [pc, #48]	; (80016bc <led_render+0x150>)
 800168a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(uint_fast8_t i = 0; i < 8; ++i) {
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	3301      	adds	r3, #1
 8001692:	603b      	str	r3, [r7, #0]
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	2b07      	cmp	r3, #7
 8001698:	d98e      	bls.n	80015b8 <led_render+0x4c>
  }

  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)wr_buf, WR_BUF_LEN);
 800169a:	2330      	movs	r3, #48	; 0x30
 800169c:	4a07      	ldr	r2, [pc, #28]	; (80016bc <led_render+0x150>)
 800169e:	2100      	movs	r1, #0
 80016a0:	4807      	ldr	r0, [pc, #28]	; (80016c0 <led_render+0x154>)
 80016a2:	f002 ffcb 	bl	800463c <HAL_TIM_PWM_Start_DMA>
  wr_buf_p = 2;
 80016a6:	4b03      	ldr	r3, [pc, #12]	; (80016b4 <led_render+0x148>)
 80016a8:	2202      	movs	r2, #2
 80016aa:	601a      	str	r2, [r3, #0]
}
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	200002e4 	.word	0x200002e4
 80016b8:	20000370 	.word	0x20000370
 80016bc:	20000284 	.word	0x20000284
 80016c0:	20000418 	.word	0x20000418
 80016c4:	2000026c 	.word	0x2000026c

080016c8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim) {
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 80016d0:	4b3a      	ldr	r3, [pc, #232]	; (80017bc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b07      	cmp	r3, #7
 80016d6:	d854      	bhi.n	8001782 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xba>
    // We're in. Fill the even buffer
    for(uint_fast8_t i = 0; i < 8; ++i) {
 80016d8:	2300      	movs	r3, #0
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	e048      	b.n	8001770 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xa8>
      wr_buf[i     ] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 80016de:	4b37      	ldr	r3, [pc, #220]	; (80017bc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	4613      	mov	r3, r2
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	4413      	add	r3, r2
 80016e8:	4a35      	ldr	r2, [pc, #212]	; (80017c0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 80016ea:	5cd3      	ldrb	r3, [r2, r3]
 80016ec:	461a      	mov	r2, r3
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	dd01      	ble.n	8001700 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x38>
 80016fc:	213a      	movs	r1, #58	; 0x3a
 80016fe:	e000      	b.n	8001702 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x3a>
 8001700:	211d      	movs	r1, #29
 8001702:	4a30      	ldr	r2, [pc, #192]	; (80017c4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      wr_buf[i +  8] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 800170a:	4b2c      	ldr	r3, [pc, #176]	; (80017bc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	4613      	mov	r3, r2
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	4413      	add	r3, r2
 8001714:	3301      	adds	r3, #1
 8001716:	4a2a      	ldr	r2, [pc, #168]	; (80017c0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 8001718:	5cd3      	ldrb	r3, [r2, r3]
 800171a:	461a      	mov	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001726:	2b00      	cmp	r3, #0
 8001728:	dd01      	ble.n	800172e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x66>
 800172a:	213a      	movs	r1, #58	; 0x3a
 800172c:	e000      	b.n	8001730 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x68>
 800172e:	211d      	movs	r1, #29
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	3308      	adds	r3, #8
 8001734:	4a23      	ldr	r2, [pc, #140]	; (80017c4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8001736:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      wr_buf[i + 16] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 800173a:	4b20      	ldr	r3, [pc, #128]	; (80017bc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	4613      	mov	r3, r2
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	4413      	add	r3, r2
 8001744:	3302      	adds	r3, #2
 8001746:	4a1e      	ldr	r2, [pc, #120]	; (80017c0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 8001748:	5cd3      	ldrb	r3, [r2, r3]
 800174a:	461a      	mov	r2, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001756:	2b00      	cmp	r3, #0
 8001758:	dd01      	ble.n	800175e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x96>
 800175a:	213a      	movs	r1, #58	; 0x3a
 800175c:	e000      	b.n	8001760 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x98>
 800175e:	211d      	movs	r1, #29
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	3310      	adds	r3, #16
 8001764:	4a17      	ldr	r2, [pc, #92]	; (80017c4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8001766:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	3301      	adds	r3, #1
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2b07      	cmp	r3, #7
 8001774:	d9b3      	bls.n	80016de <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x16>
    }
    wr_buf_p++;
 8001776:	4b11      	ldr	r3, [pc, #68]	; (80017bc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	3301      	adds	r3, #1
 800177c:	4a0f      	ldr	r2, [pc, #60]	; (80017bc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 800177e:	6013      	str	r3, [r2, #0]
  	//                               WS2812B: 48 * 1.25 us = 60 us == good enough reset
    // First half reset zero fill
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
    wr_buf_p++;
  }
}
 8001780:	e016      	b.n	80017b0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe8>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 8001782:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2b09      	cmp	r3, #9
 8001788:	d812      	bhi.n	80017b0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe8>
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
 800178a:	2300      	movs	r3, #0
 800178c:	72fb      	strb	r3, [r7, #11]
 800178e:	e007      	b.n	80017a0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xd8>
 8001790:	7afb      	ldrb	r3, [r7, #11]
 8001792:	4a0c      	ldr	r2, [pc, #48]	; (80017c4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8001794:	2100      	movs	r1, #0
 8001796:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800179a:	7afb      	ldrb	r3, [r7, #11]
 800179c:	3301      	adds	r3, #1
 800179e:	72fb      	strb	r3, [r7, #11]
 80017a0:	7afb      	ldrb	r3, [r7, #11]
 80017a2:	2b17      	cmp	r3, #23
 80017a4:	d9f4      	bls.n	8001790 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xc8>
    wr_buf_p++;
 80017a6:	4b05      	ldr	r3, [pc, #20]	; (80017bc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	3301      	adds	r3, #1
 80017ac:	4a03      	ldr	r2, [pc, #12]	; (80017bc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 80017ae:	6013      	str	r3, [r2, #0]
}
 80017b0:	bf00      	nop
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	200002e4 	.word	0x200002e4
 80017c0:	2000026c 	.word	0x2000026c
 80017c4:	20000284 	.word	0x20000284

080017c8 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
	  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
	  if(wr_buf_p < NUM_PIXELS) {
 80017d0:	4b3e      	ldr	r3, [pc, #248]	; (80018cc <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b07      	cmp	r3, #7
 80017d6:	d855      	bhi.n	8001884 <HAL_TIM_PWM_PulseFinishedCallback+0xbc>
	    // We're in. Fill the odd buffer
	    for(uint_fast8_t i = 0; i < 8; ++i) {
 80017d8:	2300      	movs	r3, #0
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	e049      	b.n	8001872 <HAL_TIM_PWM_PulseFinishedCallback+0xaa>
	      wr_buf[i + 24] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 80017de:	4b3b      	ldr	r3, [pc, #236]	; (80018cc <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	4613      	mov	r3, r2
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	4413      	add	r3, r2
 80017e8:	4a39      	ldr	r2, [pc, #228]	; (80018d0 <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 80017ea:	5cd3      	ldrb	r3, [r2, r3]
 80017ec:	461a      	mov	r2, r3
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	dd01      	ble.n	8001800 <HAL_TIM_PWM_PulseFinishedCallback+0x38>
 80017fc:	213a      	movs	r1, #58	; 0x3a
 80017fe:	e000      	b.n	8001802 <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
 8001800:	211d      	movs	r1, #29
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	3318      	adds	r3, #24
 8001806:	4a33      	ldr	r2, [pc, #204]	; (80018d4 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8001808:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	      wr_buf[i + 32] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 800180c:	4b2f      	ldr	r3, [pc, #188]	; (80018cc <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	4613      	mov	r3, r2
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	4413      	add	r3, r2
 8001816:	3301      	adds	r3, #1
 8001818:	4a2d      	ldr	r2, [pc, #180]	; (80018d0 <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 800181a:	5cd3      	ldrb	r3, [r2, r3]
 800181c:	461a      	mov	r2, r3
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001828:	2b00      	cmp	r3, #0
 800182a:	dd01      	ble.n	8001830 <HAL_TIM_PWM_PulseFinishedCallback+0x68>
 800182c:	213a      	movs	r1, #58	; 0x3a
 800182e:	e000      	b.n	8001832 <HAL_TIM_PWM_PulseFinishedCallback+0x6a>
 8001830:	211d      	movs	r1, #29
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	3320      	adds	r3, #32
 8001836:	4a27      	ldr	r2, [pc, #156]	; (80018d4 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8001838:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	      wr_buf[i + 40] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 800183c:	4b23      	ldr	r3, [pc, #140]	; (80018cc <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	4613      	mov	r3, r2
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	4413      	add	r3, r2
 8001846:	3302      	adds	r3, #2
 8001848:	4a21      	ldr	r2, [pc, #132]	; (80018d0 <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 800184a:	5cd3      	ldrb	r3, [r2, r3]
 800184c:	461a      	mov	r2, r3
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001858:	2b00      	cmp	r3, #0
 800185a:	dd01      	ble.n	8001860 <HAL_TIM_PWM_PulseFinishedCallback+0x98>
 800185c:	213a      	movs	r1, #58	; 0x3a
 800185e:	e000      	b.n	8001862 <HAL_TIM_PWM_PulseFinishedCallback+0x9a>
 8001860:	211d      	movs	r1, #29
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	3328      	adds	r3, #40	; 0x28
 8001866:	4a1b      	ldr	r2, [pc, #108]	; (80018d4 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8001868:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	    for(uint_fast8_t i = 0; i < 8; ++i) {
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	3301      	adds	r3, #1
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2b07      	cmp	r3, #7
 8001876:	d9b2      	bls.n	80017de <HAL_TIM_PWM_PulseFinishedCallback+0x16>
	    }
	    wr_buf_p++;
 8001878:	4b14      	ldr	r3, [pc, #80]	; (80018cc <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	3301      	adds	r3, #1
 800187e:	4a13      	ldr	r2, [pc, #76]	; (80018cc <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8001880:	6013      	str	r3, [r2, #0]
	  } else {
	    // We're done. Lean back and until next time!
	    wr_buf_p = 0;
	    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
	  }
}
 8001882:	e01e      	b.n	80018c2 <HAL_TIM_PWM_PulseFinishedCallback+0xfa>
	  } else if (wr_buf_p < NUM_PIXELS + 2) {
 8001884:	4b11      	ldr	r3, [pc, #68]	; (80018cc <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2b09      	cmp	r3, #9
 800188a:	d813      	bhi.n	80018b4 <HAL_TIM_PWM_PulseFinishedCallback+0xec>
	    for(uint8_t i = WR_BUF_LEN / 2; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 800188c:	2318      	movs	r3, #24
 800188e:	72fb      	strb	r3, [r7, #11]
 8001890:	e007      	b.n	80018a2 <HAL_TIM_PWM_PulseFinishedCallback+0xda>
 8001892:	7afb      	ldrb	r3, [r7, #11]
 8001894:	4a0f      	ldr	r2, [pc, #60]	; (80018d4 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8001896:	2100      	movs	r1, #0
 8001898:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800189c:	7afb      	ldrb	r3, [r7, #11]
 800189e:	3301      	adds	r3, #1
 80018a0:	72fb      	strb	r3, [r7, #11]
 80018a2:	7afb      	ldrb	r3, [r7, #11]
 80018a4:	2b2f      	cmp	r3, #47	; 0x2f
 80018a6:	d9f4      	bls.n	8001892 <HAL_TIM_PWM_PulseFinishedCallback+0xca>
	    ++wr_buf_p;
 80018a8:	4b08      	ldr	r3, [pc, #32]	; (80018cc <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	3301      	adds	r3, #1
 80018ae:	4a07      	ldr	r2, [pc, #28]	; (80018cc <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80018b0:	6013      	str	r3, [r2, #0]
}
 80018b2:	e006      	b.n	80018c2 <HAL_TIM_PWM_PulseFinishedCallback+0xfa>
	    wr_buf_p = 0;
 80018b4:	4b05      	ldr	r3, [pc, #20]	; (80018cc <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
	    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 80018ba:	2100      	movs	r1, #0
 80018bc:	4806      	ldr	r0, [pc, #24]	; (80018d8 <HAL_TIM_PWM_PulseFinishedCallback+0x110>)
 80018be:	f003 f86d 	bl	800499c <HAL_TIM_PWM_Stop_DMA>
}
 80018c2:	bf00      	nop
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	200002e4 	.word	0x200002e4
 80018d0:	2000026c 	.word	0x2000026c
 80018d4:	20000284 	.word	0x20000284
 80018d8:	20000418 	.word	0x20000418

080018dc <serial_log>:
static void MX_ADC1_Init(void);
/* USER CODE BEGIN PFP */

#define _WAsys_DEF_UART_TIMEOUT_MS 512
/*function must follow WAsys_LOGGING_NATIVE_IO_CALLBACK_FUNC_T type*/
static void serial_log(char *arg_buff, size_t arg_len){
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
 /*Sending the given log value to UART3 interface*/
 HAL_UART_Transmit(&huart2,(uint8_t*)arg_buff,arg_len,_WAsys_DEF_UART_TIMEOUT_MS);
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018ee:	6879      	ldr	r1, [r7, #4]
 80018f0:	4803      	ldr	r0, [pc, #12]	; (8001900 <serial_log+0x24>)
 80018f2:	f003 ff56 	bl	80057a2 <HAL_UART_Transmit>
}
 80018f6:	bf00      	nop
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20000460 	.word	0x20000460

08001904 <MAP>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t MAP(int x, int in_min, int in_max, int out_min, int out_max)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
 8001910:	603b      	str	r3, [r7, #0]
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001912:	68fa      	ldr	r2, [r7, #12]
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	69b9      	ldr	r1, [r7, #24]
 800191a:	683a      	ldr	r2, [r7, #0]
 800191c:	1a8a      	subs	r2, r1, r2
 800191e:	fb02 f203 	mul.w	r2, r2, r3
 8001922:	6879      	ldr	r1, [r7, #4]
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	1acb      	subs	r3, r1, r3
 8001928:	fb92 f2f3 	sdiv	r2, r2, r3
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	4413      	add	r3, r2
}
 8001930:	4618      	mov	r0, r3
 8001932:	3714      	adds	r7, #20
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b088      	sub	sp, #32
 8001940:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001942:	f000 fd47 	bl	80023d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001946:	f000 f841 	bl	80019cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800194a:	f000 f9e3 	bl	8001d14 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800194e:	f000 f997 	bl	8001c80 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8001952:	f000 f9bf 	bl	8001cd4 <MX_DMA_Init>
  MX_TIM1_Init();
 8001956:	f000 f8f3 	bl	8001b40 <MX_TIM1_Init>
  MX_ADC1_Init();
 800195a:	f000 f89f 	bl	8001a9c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  WAsys_LOGGING_CONF_T _WAsys_log_conf_ins;
  _WAsys_log_conf_ins.callback_func=serial_log;
 800195e:	4b18      	ldr	r3, [pc, #96]	; (80019c0 <main+0x84>)
 8001960:	607b      	str	r3, [r7, #4]
  _WAsys_log_conf_ins.including_timestamp = 0;
 8001962:	2300      	movs	r3, #0
 8001964:	733b      	strb	r3, [r7, #12]
  WAsys_logging_init(_WAsys_log_conf_ins);
 8001966:	1d3b      	adds	r3, r7, #4
 8001968:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800196c:	f7ff fbf0 	bl	8001150 <WAsys_logging_init>

  uint32_t raw;
  set_brightness(5);
 8001970:	2005      	movs	r0, #5
 8001972:	f7ff fd2b 	bl	80013cc <set_brightness>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  rainbow_effect_fade();
 8001976:	f000 fccf 	bl	8002318 <rainbow_effect_fade>
      HAL_ADC_Start(&hadc1);
 800197a:	4812      	ldr	r0, [pc, #72]	; (80019c4 <main+0x88>)
 800197c:	f000 fe04 	bl	8002588 <HAL_ADC_Start>
      HAL_ADC_PollForConversion(&hadc1, 300);
 8001980:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001984:	480f      	ldr	r0, [pc, #60]	; (80019c4 <main+0x88>)
 8001986:	f000 feb3 	bl	80026f0 <HAL_ADC_PollForConversion>

      raw =  HAL_ADC_GetValue(&hadc1);
 800198a:	480e      	ldr	r0, [pc, #56]	; (80019c4 <main+0x88>)
 800198c:	f001 f87c 	bl	8002a88 <HAL_ADC_GetValue>
 8001990:	6178      	str	r0, [r7, #20]
      int outB = MAP(raw, 3800, 1, 1, 15);
 8001992:	6978      	ldr	r0, [r7, #20]
 8001994:	230f      	movs	r3, #15
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	2301      	movs	r3, #1
 800199a:	2201      	movs	r2, #1
 800199c:	f640 61d8 	movw	r1, #3800	; 0xed8
 80019a0:	f7ff ffb0 	bl	8001904 <MAP>
 80019a4:	4603      	mov	r3, r0
 80019a6:	613b      	str	r3, [r7, #16]
      logf("set_brightness: %d\n",outB);
 80019a8:	6939      	ldr	r1, [r7, #16]
 80019aa:	4807      	ldr	r0, [pc, #28]	; (80019c8 <main+0x8c>)
 80019ac:	f7ff fc00 	bl	80011b0 <WAsys_logf>

      set_brightness(outB);
 80019b0:	6938      	ldr	r0, [r7, #16]
 80019b2:	f7ff fd0b 	bl	80013cc <set_brightness>
      HAL_Delay(30);
 80019b6:	201e      	movs	r0, #30
 80019b8:	f000 fd7e 	bl	80024b8 <HAL_Delay>
  {
 80019bc:	e7db      	b.n	8001976 <main+0x3a>
 80019be:	bf00      	nop
 80019c0:	080018dd 	.word	0x080018dd
 80019c4:	200003d0 	.word	0x200003d0
 80019c8:	0800a0ac 	.word	0x0800a0ac

080019cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b094      	sub	sp, #80	; 0x50
 80019d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019d2:	f107 0320 	add.w	r3, r7, #32
 80019d6:	2230      	movs	r2, #48	; 0x30
 80019d8:	2100      	movs	r1, #0
 80019da:	4618      	mov	r0, r3
 80019dc:	f004 fcc8 	bl	8006370 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019e0:	f107 030c 	add.w	r3, r7, #12
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	60da      	str	r2, [r3, #12]
 80019ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f0:	2300      	movs	r3, #0
 80019f2:	60bb      	str	r3, [r7, #8]
 80019f4:	4b27      	ldr	r3, [pc, #156]	; (8001a94 <SystemClock_Config+0xc8>)
 80019f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f8:	4a26      	ldr	r2, [pc, #152]	; (8001a94 <SystemClock_Config+0xc8>)
 80019fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001a00:	4b24      	ldr	r3, [pc, #144]	; (8001a94 <SystemClock_Config+0xc8>)
 8001a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a08:	60bb      	str	r3, [r7, #8]
 8001a0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	607b      	str	r3, [r7, #4]
 8001a10:	4b21      	ldr	r3, [pc, #132]	; (8001a98 <SystemClock_Config+0xcc>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a20      	ldr	r2, [pc, #128]	; (8001a98 <SystemClock_Config+0xcc>)
 8001a16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a1a:	6013      	str	r3, [r2, #0]
 8001a1c:	4b1e      	ldr	r3, [pc, #120]	; (8001a98 <SystemClock_Config+0xcc>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a24:	607b      	str	r3, [r7, #4]
 8001a26:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001a2c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a32:	2302      	movs	r3, #2
 8001a34:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a3c:	2304      	movs	r3, #4
 8001a3e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001a40:	2348      	movs	r3, #72	; 0x48
 8001a42:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a44:	2302      	movs	r3, #2
 8001a46:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a48:	2304      	movs	r3, #4
 8001a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a4c:	f107 0320 	add.w	r3, r7, #32
 8001a50:	4618      	mov	r0, r3
 8001a52:	f002 f8d7 	bl	8003c04 <HAL_RCC_OscConfig>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a5c:	f000 f9ee 	bl	8001e3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a60:	230f      	movs	r3, #15
 8001a62:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a64:	2302      	movs	r3, #2
 8001a66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a70:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a72:	2300      	movs	r3, #0
 8001a74:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a76:	f107 030c 	add.w	r3, r7, #12
 8001a7a:	2102      	movs	r1, #2
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f002 fb39 	bl	80040f4 <HAL_RCC_ClockConfig>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001a88:	f000 f9d8 	bl	8001e3c <Error_Handler>
  }
}
 8001a8c:	bf00      	nop
 8001a8e:	3750      	adds	r7, #80	; 0x50
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40007000 	.word	0x40007000

08001a9c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001aa2:	463b      	mov	r3, r7
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001aae:	4b21      	ldr	r3, [pc, #132]	; (8001b34 <MX_ADC1_Init+0x98>)
 8001ab0:	4a21      	ldr	r2, [pc, #132]	; (8001b38 <MX_ADC1_Init+0x9c>)
 8001ab2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001ab4:	4b1f      	ldr	r3, [pc, #124]	; (8001b34 <MX_ADC1_Init+0x98>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001aba:	4b1e      	ldr	r3, [pc, #120]	; (8001b34 <MX_ADC1_Init+0x98>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001ac0:	4b1c      	ldr	r3, [pc, #112]	; (8001b34 <MX_ADC1_Init+0x98>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001ac6:	4b1b      	ldr	r3, [pc, #108]	; (8001b34 <MX_ADC1_Init+0x98>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001acc:	4b19      	ldr	r3, [pc, #100]	; (8001b34 <MX_ADC1_Init+0x98>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ad4:	4b17      	ldr	r3, [pc, #92]	; (8001b34 <MX_ADC1_Init+0x98>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ada:	4b16      	ldr	r3, [pc, #88]	; (8001b34 <MX_ADC1_Init+0x98>)
 8001adc:	4a17      	ldr	r2, [pc, #92]	; (8001b3c <MX_ADC1_Init+0xa0>)
 8001ade:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ae0:	4b14      	ldr	r3, [pc, #80]	; (8001b34 <MX_ADC1_Init+0x98>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001ae6:	4b13      	ldr	r3, [pc, #76]	; (8001b34 <MX_ADC1_Init+0x98>)
 8001ae8:	2201      	movs	r2, #1
 8001aea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001aec:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <MX_ADC1_Init+0x98>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001af4:	4b0f      	ldr	r3, [pc, #60]	; (8001b34 <MX_ADC1_Init+0x98>)
 8001af6:	2201      	movs	r2, #1
 8001af8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001afa:	480e      	ldr	r0, [pc, #56]	; (8001b34 <MX_ADC1_Init+0x98>)
 8001afc:	f000 fd00 	bl	8002500 <HAL_ADC_Init>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001b06:	f000 f999 	bl	8001e3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b12:	2300      	movs	r3, #0
 8001b14:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b16:	463b      	mov	r3, r7
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4806      	ldr	r0, [pc, #24]	; (8001b34 <MX_ADC1_Init+0x98>)
 8001b1c:	f000 ffe0 	bl	8002ae0 <HAL_ADC_ConfigChannel>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001b26:	f000 f989 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b2a:	bf00      	nop
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	200003d0 	.word	0x200003d0
 8001b38:	40012000 	.word	0x40012000
 8001b3c:	0f000001 	.word	0x0f000001

08001b40 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b096      	sub	sp, #88	; 0x58
 8001b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b46:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	605a      	str	r2, [r3, #4]
 8001b50:	609a      	str	r2, [r3, #8]
 8001b52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b54:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	605a      	str	r2, [r3, #4]
 8001b68:	609a      	str	r2, [r3, #8]
 8001b6a:	60da      	str	r2, [r3, #12]
 8001b6c:	611a      	str	r2, [r3, #16]
 8001b6e:	615a      	str	r2, [r3, #20]
 8001b70:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b72:	1d3b      	adds	r3, r7, #4
 8001b74:	2220      	movs	r2, #32
 8001b76:	2100      	movs	r1, #0
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f004 fbf9 	bl	8006370 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b7e:	4b3e      	ldr	r3, [pc, #248]	; (8001c78 <MX_TIM1_Init+0x138>)
 8001b80:	4a3e      	ldr	r2, [pc, #248]	; (8001c7c <MX_TIM1_Init+0x13c>)
 8001b82:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001b84:	4b3c      	ldr	r3, [pc, #240]	; (8001c78 <MX_TIM1_Init+0x138>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b8a:	4b3b      	ldr	r3, [pc, #236]	; (8001c78 <MX_TIM1_Init+0x138>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 8001b90:	4b39      	ldr	r3, [pc, #228]	; (8001c78 <MX_TIM1_Init+0x138>)
 8001b92:	2259      	movs	r2, #89	; 0x59
 8001b94:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b96:	4b38      	ldr	r3, [pc, #224]	; (8001c78 <MX_TIM1_Init+0x138>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b9c:	4b36      	ldr	r3, [pc, #216]	; (8001c78 <MX_TIM1_Init+0x138>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ba2:	4b35      	ldr	r3, [pc, #212]	; (8001c78 <MX_TIM1_Init+0x138>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ba8:	4833      	ldr	r0, [pc, #204]	; (8001c78 <MX_TIM1_Init+0x138>)
 8001baa:	f002 fc9f 	bl	80044ec <HAL_TIM_Base_Init>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001bb4:	f000 f942 	bl	8001e3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bbc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001bbe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	482c      	ldr	r0, [pc, #176]	; (8001c78 <MX_TIM1_Init+0x138>)
 8001bc6:	f003 f871 	bl	8004cac <HAL_TIM_ConfigClockSource>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001bd0:	f000 f934 	bl	8001e3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001bd4:	4828      	ldr	r0, [pc, #160]	; (8001c78 <MX_TIM1_Init+0x138>)
 8001bd6:	f002 fcd8 	bl	800458a <HAL_TIM_PWM_Init>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001be0:	f000 f92c 	bl	8001e3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001be4:	2300      	movs	r3, #0
 8001be6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001be8:	2300      	movs	r3, #0
 8001bea:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4821      	ldr	r0, [pc, #132]	; (8001c78 <MX_TIM1_Init+0x138>)
 8001bf4:	f003 fcc8 	bl	8005588 <HAL_TIMEx_MasterConfigSynchronization>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001bfe:	f000 f91d 	bl	8001e3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c02:	2360      	movs	r3, #96	; 0x60
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 40;
 8001c06:	2328      	movs	r3, #40	; 0x28
 8001c08:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c12:	2300      	movs	r3, #0
 8001c14:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c16:	2300      	movs	r3, #0
 8001c18:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c22:	2200      	movs	r2, #0
 8001c24:	4619      	mov	r1, r3
 8001c26:	4814      	ldr	r0, [pc, #80]	; (8001c78 <MX_TIM1_Init+0x138>)
 8001c28:	f002 ff7e 	bl	8004b28 <HAL_TIM_PWM_ConfigChannel>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001c32:	f000 f903 	bl	8001e3c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c36:	2300      	movs	r3, #0
 8001c38:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c42:	2300      	movs	r3, #0
 8001c44:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c46:	2300      	movs	r3, #0
 8001c48:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c4e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c50:	2300      	movs	r3, #0
 8001c52:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c54:	1d3b      	adds	r3, r7, #4
 8001c56:	4619      	mov	r1, r3
 8001c58:	4807      	ldr	r0, [pc, #28]	; (8001c78 <MX_TIM1_Init+0x138>)
 8001c5a:	f003 fd03 	bl	8005664 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001c64:	f000 f8ea 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c68:	4803      	ldr	r0, [pc, #12]	; (8001c78 <MX_TIM1_Init+0x138>)
 8001c6a:	f000 f9b5 	bl	8001fd8 <HAL_TIM_MspPostInit>

}
 8001c6e:	bf00      	nop
 8001c70:	3758      	adds	r7, #88	; 0x58
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20000418 	.word	0x20000418
 8001c7c:	40010000 	.word	0x40010000

08001c80 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c84:	4b11      	ldr	r3, [pc, #68]	; (8001ccc <MX_USART2_UART_Init+0x4c>)
 8001c86:	4a12      	ldr	r2, [pc, #72]	; (8001cd0 <MX_USART2_UART_Init+0x50>)
 8001c88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c8a:	4b10      	ldr	r3, [pc, #64]	; (8001ccc <MX_USART2_UART_Init+0x4c>)
 8001c8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c92:	4b0e      	ldr	r3, [pc, #56]	; (8001ccc <MX_USART2_UART_Init+0x4c>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c98:	4b0c      	ldr	r3, [pc, #48]	; (8001ccc <MX_USART2_UART_Init+0x4c>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c9e:	4b0b      	ldr	r3, [pc, #44]	; (8001ccc <MX_USART2_UART_Init+0x4c>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ca4:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <MX_USART2_UART_Init+0x4c>)
 8001ca6:	220c      	movs	r2, #12
 8001ca8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001caa:	4b08      	ldr	r3, [pc, #32]	; (8001ccc <MX_USART2_UART_Init+0x4c>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cb0:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <MX_USART2_UART_Init+0x4c>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cb6:	4805      	ldr	r0, [pc, #20]	; (8001ccc <MX_USART2_UART_Init+0x4c>)
 8001cb8:	f003 fd26 	bl	8005708 <HAL_UART_Init>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001cc2:	f000 f8bb 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	20000460 	.word	0x20000460
 8001cd0:	40004400 	.word	0x40004400

08001cd4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	607b      	str	r3, [r7, #4]
 8001cde:	4b0c      	ldr	r3, [pc, #48]	; (8001d10 <MX_DMA_Init+0x3c>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	4a0b      	ldr	r2, [pc, #44]	; (8001d10 <MX_DMA_Init+0x3c>)
 8001ce4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cea:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <MX_DMA_Init+0x3c>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cf2:	607b      	str	r3, [r7, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	2039      	movs	r0, #57	; 0x39
 8001cfc:	f001 fa03 	bl	8003106 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001d00:	2039      	movs	r0, #57	; 0x39
 8001d02:	f001 fa1c 	bl	800313e <HAL_NVIC_EnableIRQ>

}
 8001d06:	bf00      	nop
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40023800 	.word	0x40023800

08001d14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b08a      	sub	sp, #40	; 0x28
 8001d18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d1a:	f107 0314 	add.w	r3, r7, #20
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	605a      	str	r2, [r3, #4]
 8001d24:	609a      	str	r2, [r3, #8]
 8001d26:	60da      	str	r2, [r3, #12]
 8001d28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	613b      	str	r3, [r7, #16]
 8001d2e:	4b32      	ldr	r3, [pc, #200]	; (8001df8 <MX_GPIO_Init+0xe4>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	4a31      	ldr	r2, [pc, #196]	; (8001df8 <MX_GPIO_Init+0xe4>)
 8001d34:	f043 0304 	orr.w	r3, r3, #4
 8001d38:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3a:	4b2f      	ldr	r3, [pc, #188]	; (8001df8 <MX_GPIO_Init+0xe4>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	f003 0304 	and.w	r3, r3, #4
 8001d42:	613b      	str	r3, [r7, #16]
 8001d44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	60fb      	str	r3, [r7, #12]
 8001d4a:	4b2b      	ldr	r3, [pc, #172]	; (8001df8 <MX_GPIO_Init+0xe4>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	4a2a      	ldr	r2, [pc, #168]	; (8001df8 <MX_GPIO_Init+0xe4>)
 8001d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d54:	6313      	str	r3, [r2, #48]	; 0x30
 8001d56:	4b28      	ldr	r3, [pc, #160]	; (8001df8 <MX_GPIO_Init+0xe4>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	60bb      	str	r3, [r7, #8]
 8001d66:	4b24      	ldr	r3, [pc, #144]	; (8001df8 <MX_GPIO_Init+0xe4>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	4a23      	ldr	r2, [pc, #140]	; (8001df8 <MX_GPIO_Init+0xe4>)
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	6313      	str	r3, [r2, #48]	; 0x30
 8001d72:	4b21      	ldr	r3, [pc, #132]	; (8001df8 <MX_GPIO_Init+0xe4>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	60bb      	str	r3, [r7, #8]
 8001d7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	607b      	str	r3, [r7, #4]
 8001d82:	4b1d      	ldr	r3, [pc, #116]	; (8001df8 <MX_GPIO_Init+0xe4>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	4a1c      	ldr	r2, [pc, #112]	; (8001df8 <MX_GPIO_Init+0xe4>)
 8001d88:	f043 0302 	orr.w	r3, r3, #2
 8001d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8e:	4b1a      	ldr	r3, [pc, #104]	; (8001df8 <MX_GPIO_Init+0xe4>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	607b      	str	r3, [r7, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_12, GPIO_PIN_RESET);
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 8001da0:	4816      	ldr	r0, [pc, #88]	; (8001dfc <MX_GPIO_Init+0xe8>)
 8001da2:	f001 fefd 	bl	8003ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001da6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001daa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001dac:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001db0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001db6:	f107 0314 	add.w	r3, r7, #20
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4810      	ldr	r0, [pc, #64]	; (8001e00 <MX_GPIO_Init+0xec>)
 8001dbe:	f001 fd6b 	bl	8003898 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA12 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_12;
 8001dc2:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001dc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd4:	f107 0314 	add.w	r3, r7, #20
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4808      	ldr	r0, [pc, #32]	; (8001dfc <MX_GPIO_Init+0xe8>)
 8001ddc:	f001 fd5c 	bl	8003898 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001de0:	2200      	movs	r2, #0
 8001de2:	2100      	movs	r1, #0
 8001de4:	2028      	movs	r0, #40	; 0x28
 8001de6:	f001 f98e 	bl	8003106 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001dea:	2028      	movs	r0, #40	; 0x28
 8001dec:	f001 f9a7 	bl	800313e <HAL_NVIC_EnableIRQ>

}
 8001df0:	bf00      	nop
 8001df2:	3728      	adds	r7, #40	; 0x28
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	40020000 	.word	0x40020000
 8001e00:	40020800 	.word	0x40020800

08001e04 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	80fb      	strh	r3, [r7, #6]
	int newBri = get_brightness() + 5;
 8001e0e:	f7ff faf3 	bl	80013f8 <get_brightness>
 8001e12:	4603      	mov	r3, r0
 8001e14:	3305      	adds	r3, #5
 8001e16:	60fb      	str	r3, [r7, #12]
	if (newBri > 45) {
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2b2d      	cmp	r3, #45	; 0x2d
 8001e1c:	dd01      	ble.n	8001e22 <HAL_GPIO_EXTI_Callback+0x1e>
		newBri = 0;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60fb      	str	r3, [r7, #12]
	}

	set_brightness(newBri);
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	f7ff fad2 	bl	80013cc <set_brightness>
	logf("set_brightness: %d\n",newBri);
 8001e28:	68f9      	ldr	r1, [r7, #12]
 8001e2a:	4803      	ldr	r0, [pc, #12]	; (8001e38 <HAL_GPIO_EXTI_Callback+0x34>)
 8001e2c:	f7ff f9c0 	bl	80011b0 <WAsys_logf>
}
 8001e30:	bf00      	nop
 8001e32:	3710      	adds	r7, #16
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	0800a0ac 	.word	0x0800a0ac

08001e3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e40:	b672      	cpsid	i
}
 8001e42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e44:	e7fe      	b.n	8001e44 <Error_Handler+0x8>
	...

08001e48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	607b      	str	r3, [r7, #4]
 8001e52:	4b10      	ldr	r3, [pc, #64]	; (8001e94 <HAL_MspInit+0x4c>)
 8001e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e56:	4a0f      	ldr	r2, [pc, #60]	; (8001e94 <HAL_MspInit+0x4c>)
 8001e58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e5e:	4b0d      	ldr	r3, [pc, #52]	; (8001e94 <HAL_MspInit+0x4c>)
 8001e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e66:	607b      	str	r3, [r7, #4]
 8001e68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	603b      	str	r3, [r7, #0]
 8001e6e:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <HAL_MspInit+0x4c>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	4a08      	ldr	r2, [pc, #32]	; (8001e94 <HAL_MspInit+0x4c>)
 8001e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e78:	6413      	str	r3, [r2, #64]	; 0x40
 8001e7a:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <HAL_MspInit+0x4c>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e82:	603b      	str	r3, [r7, #0]
 8001e84:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001e86:	2007      	movs	r0, #7
 8001e88:	f001 f932 	bl	80030f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e8c:	bf00      	nop
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40023800 	.word	0x40023800

08001e98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b08a      	sub	sp, #40	; 0x28
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea0:	f107 0314 	add.w	r3, r7, #20
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	60da      	str	r2, [r3, #12]
 8001eae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a1b      	ldr	r2, [pc, #108]	; (8001f24 <HAL_ADC_MspInit+0x8c>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d12f      	bne.n	8001f1a <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	613b      	str	r3, [r7, #16]
 8001ebe:	4b1a      	ldr	r3, [pc, #104]	; (8001f28 <HAL_ADC_MspInit+0x90>)
 8001ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec2:	4a19      	ldr	r2, [pc, #100]	; (8001f28 <HAL_ADC_MspInit+0x90>)
 8001ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ec8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eca:	4b17      	ldr	r3, [pc, #92]	; (8001f28 <HAL_ADC_MspInit+0x90>)
 8001ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed2:	613b      	str	r3, [r7, #16]
 8001ed4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60fb      	str	r3, [r7, #12]
 8001eda:	4b13      	ldr	r3, [pc, #76]	; (8001f28 <HAL_ADC_MspInit+0x90>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	4a12      	ldr	r2, [pc, #72]	; (8001f28 <HAL_ADC_MspInit+0x90>)
 8001ee0:	f043 0301 	orr.w	r3, r3, #1
 8001ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee6:	4b10      	ldr	r3, [pc, #64]	; (8001f28 <HAL_ADC_MspInit+0x90>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efa:	2300      	movs	r3, #0
 8001efc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efe:	f107 0314 	add.w	r3, r7, #20
 8001f02:	4619      	mov	r1, r3
 8001f04:	4809      	ldr	r0, [pc, #36]	; (8001f2c <HAL_ADC_MspInit+0x94>)
 8001f06:	f001 fcc7 	bl	8003898 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	2012      	movs	r0, #18
 8001f10:	f001 f8f9 	bl	8003106 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001f14:	2012      	movs	r0, #18
 8001f16:	f001 f912 	bl	800313e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f1a:	bf00      	nop
 8001f1c:	3728      	adds	r7, #40	; 0x28
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40012000 	.word	0x40012000
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	40020000 	.word	0x40020000

08001f30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a22      	ldr	r2, [pc, #136]	; (8001fc8 <HAL_TIM_Base_MspInit+0x98>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d13e      	bne.n	8001fc0 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	4b21      	ldr	r3, [pc, #132]	; (8001fcc <HAL_TIM_Base_MspInit+0x9c>)
 8001f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4a:	4a20      	ldr	r2, [pc, #128]	; (8001fcc <HAL_TIM_Base_MspInit+0x9c>)
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	6453      	str	r3, [r2, #68]	; 0x44
 8001f52:	4b1e      	ldr	r3, [pc, #120]	; (8001fcc <HAL_TIM_Base_MspInit+0x9c>)
 8001f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8001f5e:	4b1c      	ldr	r3, [pc, #112]	; (8001fd0 <HAL_TIM_Base_MspInit+0xa0>)
 8001f60:	4a1c      	ldr	r2, [pc, #112]	; (8001fd4 <HAL_TIM_Base_MspInit+0xa4>)
 8001f62:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8001f64:	4b1a      	ldr	r3, [pc, #104]	; (8001fd0 <HAL_TIM_Base_MspInit+0xa0>)
 8001f66:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001f6a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f6c:	4b18      	ldr	r3, [pc, #96]	; (8001fd0 <HAL_TIM_Base_MspInit+0xa0>)
 8001f6e:	2240      	movs	r2, #64	; 0x40
 8001f70:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f72:	4b17      	ldr	r3, [pc, #92]	; (8001fd0 <HAL_TIM_Base_MspInit+0xa0>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001f78:	4b15      	ldr	r3, [pc, #84]	; (8001fd0 <HAL_TIM_Base_MspInit+0xa0>)
 8001f7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f7e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f80:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <HAL_TIM_Base_MspInit+0xa0>)
 8001f82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f86:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f88:	4b11      	ldr	r3, [pc, #68]	; (8001fd0 <HAL_TIM_Base_MspInit+0xa0>)
 8001f8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f8e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8001f90:	4b0f      	ldr	r3, [pc, #60]	; (8001fd0 <HAL_TIM_Base_MspInit+0xa0>)
 8001f92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f96:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001f98:	4b0d      	ldr	r3, [pc, #52]	; (8001fd0 <HAL_TIM_Base_MspInit+0xa0>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f9e:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <HAL_TIM_Base_MspInit+0xa0>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001fa4:	480a      	ldr	r0, [pc, #40]	; (8001fd0 <HAL_TIM_Base_MspInit+0xa0>)
 8001fa6:	f001 f8e5 	bl	8003174 <HAL_DMA_Init>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8001fb0:	f7ff ff44 	bl	8001e3c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a06      	ldr	r2, [pc, #24]	; (8001fd0 <HAL_TIM_Base_MspInit+0xa0>)
 8001fb8:	625a      	str	r2, [r3, #36]	; 0x24
 8001fba:	4a05      	ldr	r2, [pc, #20]	; (8001fd0 <HAL_TIM_Base_MspInit+0xa0>)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001fc0:	bf00      	nop
 8001fc2:	3710      	adds	r7, #16
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40010000 	.word	0x40010000
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	20000370 	.word	0x20000370
 8001fd4:	40026428 	.word	0x40026428

08001fd8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b088      	sub	sp, #32
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe0:	f107 030c 	add.w	r3, r7, #12
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	605a      	str	r2, [r3, #4]
 8001fea:	609a      	str	r2, [r3, #8]
 8001fec:	60da      	str	r2, [r3, #12]
 8001fee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a12      	ldr	r2, [pc, #72]	; (8002040 <HAL_TIM_MspPostInit+0x68>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d11e      	bne.n	8002038 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60bb      	str	r3, [r7, #8]
 8001ffe:	4b11      	ldr	r3, [pc, #68]	; (8002044 <HAL_TIM_MspPostInit+0x6c>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	4a10      	ldr	r2, [pc, #64]	; (8002044 <HAL_TIM_MspPostInit+0x6c>)
 8002004:	f043 0301 	orr.w	r3, r3, #1
 8002008:	6313      	str	r3, [r2, #48]	; 0x30
 800200a:	4b0e      	ldr	r3, [pc, #56]	; (8002044 <HAL_TIM_MspPostInit+0x6c>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	60bb      	str	r3, [r7, #8]
 8002014:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002016:	f44f 7380 	mov.w	r3, #256	; 0x100
 800201a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201c:	2302      	movs	r3, #2
 800201e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002024:	2300      	movs	r3, #0
 8002026:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002028:	2301      	movs	r3, #1
 800202a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800202c:	f107 030c 	add.w	r3, r7, #12
 8002030:	4619      	mov	r1, r3
 8002032:	4805      	ldr	r0, [pc, #20]	; (8002048 <HAL_TIM_MspPostInit+0x70>)
 8002034:	f001 fc30 	bl	8003898 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002038:	bf00      	nop
 800203a:	3720      	adds	r7, #32
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40010000 	.word	0x40010000
 8002044:	40023800 	.word	0x40023800
 8002048:	40020000 	.word	0x40020000

0800204c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b08a      	sub	sp, #40	; 0x28
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002054:	f107 0314 	add.w	r3, r7, #20
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	605a      	str	r2, [r3, #4]
 800205e:	609a      	str	r2, [r3, #8]
 8002060:	60da      	str	r2, [r3, #12]
 8002062:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a19      	ldr	r2, [pc, #100]	; (80020d0 <HAL_UART_MspInit+0x84>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d12b      	bne.n	80020c6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	613b      	str	r3, [r7, #16]
 8002072:	4b18      	ldr	r3, [pc, #96]	; (80020d4 <HAL_UART_MspInit+0x88>)
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	4a17      	ldr	r2, [pc, #92]	; (80020d4 <HAL_UART_MspInit+0x88>)
 8002078:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800207c:	6413      	str	r3, [r2, #64]	; 0x40
 800207e:	4b15      	ldr	r3, [pc, #84]	; (80020d4 <HAL_UART_MspInit+0x88>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002086:	613b      	str	r3, [r7, #16]
 8002088:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	4b11      	ldr	r3, [pc, #68]	; (80020d4 <HAL_UART_MspInit+0x88>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	4a10      	ldr	r2, [pc, #64]	; (80020d4 <HAL_UART_MspInit+0x88>)
 8002094:	f043 0301 	orr.w	r3, r3, #1
 8002098:	6313      	str	r3, [r2, #48]	; 0x30
 800209a:	4b0e      	ldr	r3, [pc, #56]	; (80020d4 <HAL_UART_MspInit+0x88>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80020a6:	230c      	movs	r3, #12
 80020a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020aa:	2302      	movs	r3, #2
 80020ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ae:	2300      	movs	r3, #0
 80020b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b2:	2303      	movs	r3, #3
 80020b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020b6:	2307      	movs	r3, #7
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ba:	f107 0314 	add.w	r3, r7, #20
 80020be:	4619      	mov	r1, r3
 80020c0:	4805      	ldr	r0, [pc, #20]	; (80020d8 <HAL_UART_MspInit+0x8c>)
 80020c2:	f001 fbe9 	bl	8003898 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80020c6:	bf00      	nop
 80020c8:	3728      	adds	r7, #40	; 0x28
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	40004400 	.word	0x40004400
 80020d4:	40023800 	.word	0x40023800
 80020d8:	40020000 	.word	0x40020000

080020dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020e0:	e7fe      	b.n	80020e0 <NMI_Handler+0x4>

080020e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020e2:	b480      	push	{r7}
 80020e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020e6:	e7fe      	b.n	80020e6 <HardFault_Handler+0x4>

080020e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020ec:	e7fe      	b.n	80020ec <MemManage_Handler+0x4>

080020ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020ee:	b480      	push	{r7}
 80020f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020f2:	e7fe      	b.n	80020f2 <BusFault_Handler+0x4>

080020f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020f8:	e7fe      	b.n	80020f8 <UsageFault_Handler+0x4>

080020fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020fa:	b480      	push	{r7}
 80020fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020fe:	bf00      	nop
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800210c:	bf00      	nop
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr

08002116 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002116:	b480      	push	{r7}
 8002118:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800211a:	bf00      	nop
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002128:	f000 f9a6 	bl	8002478 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800212c:	bf00      	nop
 800212e:	bd80      	pop	{r7, pc}

08002130 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002134:	4802      	ldr	r0, [pc, #8]	; (8002140 <ADC_IRQHandler+0x10>)
 8002136:	f000 fb66 	bl	8002806 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800213a:	bf00      	nop
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	200003d0 	.word	0x200003d0

08002144 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002148:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800214c:	f001 fd42 	bl	8003bd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002150:	bf00      	nop
 8002152:	bd80      	pop	{r7, pc}

08002154 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8002158:	4802      	ldr	r0, [pc, #8]	; (8002164 <DMA2_Stream1_IRQHandler+0x10>)
 800215a:	f001 f933 	bl	80033c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000370 	.word	0x20000370

08002168 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
	return 1;
 800216c:	2301      	movs	r3, #1
}
 800216e:	4618      	mov	r0, r3
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <_kill>:

int _kill(int pid, int sig)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002182:	f003 fdd7 	bl	8005d34 <__errno>
 8002186:	4603      	mov	r3, r0
 8002188:	2216      	movs	r2, #22
 800218a:	601a      	str	r2, [r3, #0]
	return -1;
 800218c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002190:	4618      	mov	r0, r3
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <_exit>:

void _exit (int status)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80021a0:	f04f 31ff 	mov.w	r1, #4294967295
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f7ff ffe7 	bl	8002178 <_kill>
	while (1) {}		/* Make sure we hang here */
 80021aa:	e7fe      	b.n	80021aa <_exit+0x12>

080021ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021b8:	2300      	movs	r3, #0
 80021ba:	617b      	str	r3, [r7, #20]
 80021bc:	e00a      	b.n	80021d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80021be:	f3af 8000 	nop.w
 80021c2:	4601      	mov	r1, r0
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	1c5a      	adds	r2, r3, #1
 80021c8:	60ba      	str	r2, [r7, #8]
 80021ca:	b2ca      	uxtb	r2, r1
 80021cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	3301      	adds	r3, #1
 80021d2:	617b      	str	r3, [r7, #20]
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	429a      	cmp	r2, r3
 80021da:	dbf0      	blt.n	80021be <_read+0x12>
	}

return len;
 80021dc:	687b      	ldr	r3, [r7, #4]
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3718      	adds	r7, #24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b086      	sub	sp, #24
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	60f8      	str	r0, [r7, #12]
 80021ee:	60b9      	str	r1, [r7, #8]
 80021f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021f2:	2300      	movs	r3, #0
 80021f4:	617b      	str	r3, [r7, #20]
 80021f6:	e009      	b.n	800220c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	1c5a      	adds	r2, r3, #1
 80021fc:	60ba      	str	r2, [r7, #8]
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	4618      	mov	r0, r3
 8002202:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	3301      	adds	r3, #1
 800220a:	617b      	str	r3, [r7, #20]
 800220c:	697a      	ldr	r2, [r7, #20]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	429a      	cmp	r2, r3
 8002212:	dbf1      	blt.n	80021f8 <_write+0x12>
	}
	return len;
 8002214:	687b      	ldr	r3, [r7, #4]
}
 8002216:	4618      	mov	r0, r3
 8002218:	3718      	adds	r7, #24
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <_close>:

int _close(int file)
{
 800221e:	b480      	push	{r7}
 8002220:	b083      	sub	sp, #12
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
	return -1;
 8002226:	f04f 33ff 	mov.w	r3, #4294967295
}
 800222a:	4618      	mov	r0, r3
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr

08002236 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002236:	b480      	push	{r7}
 8002238:	b083      	sub	sp, #12
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
 800223e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002246:	605a      	str	r2, [r3, #4]
	return 0;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <_isatty>:

int _isatty(int file)
{
 8002256:	b480      	push	{r7}
 8002258:	b083      	sub	sp, #12
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
	return 1;
 800225e:	2301      	movs	r3, #1
}
 8002260:	4618      	mov	r0, r3
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
	return 0;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3714      	adds	r7, #20
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
	...

08002288 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002290:	4a14      	ldr	r2, [pc, #80]	; (80022e4 <_sbrk+0x5c>)
 8002292:	4b15      	ldr	r3, [pc, #84]	; (80022e8 <_sbrk+0x60>)
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800229c:	4b13      	ldr	r3, [pc, #76]	; (80022ec <_sbrk+0x64>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d102      	bne.n	80022aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022a4:	4b11      	ldr	r3, [pc, #68]	; (80022ec <_sbrk+0x64>)
 80022a6:	4a12      	ldr	r2, [pc, #72]	; (80022f0 <_sbrk+0x68>)
 80022a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022aa:	4b10      	ldr	r3, [pc, #64]	; (80022ec <_sbrk+0x64>)
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4413      	add	r3, r2
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d207      	bcs.n	80022c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022b8:	f003 fd3c 	bl	8005d34 <__errno>
 80022bc:	4603      	mov	r3, r0
 80022be:	220c      	movs	r2, #12
 80022c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022c2:	f04f 33ff 	mov.w	r3, #4294967295
 80022c6:	e009      	b.n	80022dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022c8:	4b08      	ldr	r3, [pc, #32]	; (80022ec <_sbrk+0x64>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022ce:	4b07      	ldr	r3, [pc, #28]	; (80022ec <_sbrk+0x64>)
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4413      	add	r3, r2
 80022d6:	4a05      	ldr	r2, [pc, #20]	; (80022ec <_sbrk+0x64>)
 80022d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022da:	68fb      	ldr	r3, [r7, #12]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3718      	adds	r7, #24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	20020000 	.word	0x20020000
 80022e8:	00000400 	.word	0x00000400
 80022ec:	200002f0 	.word	0x200002f0
 80022f0:	200004b8 	.word	0x200004b8

080022f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022f8:	4b06      	ldr	r3, [pc, #24]	; (8002314 <SystemInit+0x20>)
 80022fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022fe:	4a05      	ldr	r2, [pc, #20]	; (8002314 <SystemInit+0x20>)
 8002300:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002304:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002308:	bf00      	nop
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	e000ed00 	.word	0xe000ed00

08002318 <rainbow_effect_fade>:
#include "color_utils.h"

uint8_t ang = 0;
const uint8_t angle_difference = 11;

void rainbow_effect_fade() {
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < NUM_PIXELS; i++) {
 800231e:	2300      	movs	r3, #0
 8002320:	71fb      	strb	r3, [r7, #7]
 8002322:	e01c      	b.n	800235e <rainbow_effect_fade+0x46>
		uint32_t rgb_color = hsl_to_rgb(ang + (i * angle_difference), 255, 127);
 8002324:	220b      	movs	r2, #11
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	fb13 f302 	smulbb	r3, r3, r2
 800232c:	b2da      	uxtb	r2, r3
 800232e:	4b13      	ldr	r3, [pc, #76]	; (800237c <rainbow_effect_fade+0x64>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	4413      	add	r3, r2
 8002334:	b2db      	uxtb	r3, r3
 8002336:	227f      	movs	r2, #127	; 0x7f
 8002338:	21ff      	movs	r1, #255	; 0xff
 800233a:	4618      	mov	r0, r3
 800233c:	f7fe ff80 	bl	8001240 <hsl_to_rgb>
 8002340:	6038      	str	r0, [r7, #0]
		led_set_RGB(i, (rgb_color >> 16) & 0xFF, (rgb_color >> 8) & 0xFF, rgb_color & 0xFF);
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	0c1b      	lsrs	r3, r3, #16
 8002346:	b2d9      	uxtb	r1, r3
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	0a1b      	lsrs	r3, r3, #8
 800234c:	b2da      	uxtb	r2, r3
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	b2db      	uxtb	r3, r3
 8002352:	79f8      	ldrb	r0, [r7, #7]
 8002354:	f7ff f85c 	bl	8001410 <led_set_RGB>
	for(uint8_t i = 0; i < NUM_PIXELS; i++) {
 8002358:	79fb      	ldrb	r3, [r7, #7]
 800235a:	3301      	adds	r3, #1
 800235c:	71fb      	strb	r3, [r7, #7]
 800235e:	79fb      	ldrb	r3, [r7, #7]
 8002360:	2b07      	cmp	r3, #7
 8002362:	d9df      	bls.n	8002324 <rainbow_effect_fade+0xc>
	}
  	++ang;
 8002364:	4b05      	ldr	r3, [pc, #20]	; (800237c <rainbow_effect_fade+0x64>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	3301      	adds	r3, #1
 800236a:	b2da      	uxtb	r2, r3
 800236c:	4b03      	ldr	r3, [pc, #12]	; (800237c <rainbow_effect_fade+0x64>)
 800236e:	701a      	strb	r2, [r3, #0]
  	led_render();
 8002370:	f7ff f8fc 	bl	800156c <led_render>
}
 8002374:	bf00      	nop
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	200002f4 	.word	0x200002f4

08002380 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002380:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002384:	480d      	ldr	r0, [pc, #52]	; (80023bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002386:	490e      	ldr	r1, [pc, #56]	; (80023c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002388:	4a0e      	ldr	r2, [pc, #56]	; (80023c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800238a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800238c:	e002      	b.n	8002394 <LoopCopyDataInit>

0800238e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800238e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002390:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002392:	3304      	adds	r3, #4

08002394 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002394:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002396:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002398:	d3f9      	bcc.n	800238e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800239a:	4a0b      	ldr	r2, [pc, #44]	; (80023c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800239c:	4c0b      	ldr	r4, [pc, #44]	; (80023cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800239e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023a0:	e001      	b.n	80023a6 <LoopFillZerobss>

080023a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023a4:	3204      	adds	r2, #4

080023a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023a8:	d3fb      	bcc.n	80023a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80023aa:	f7ff ffa3 	bl	80022f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023ae:	f003 fe91 	bl	80060d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023b2:	f7ff fac3 	bl	800193c <main>
  bx  lr    
 80023b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80023b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023c0:	2000024c 	.word	0x2000024c
  ldr r2, =_sidata
 80023c4:	0800a868 	.word	0x0800a868
  ldr r2, =_sbss
 80023c8:	2000024c 	.word	0x2000024c
  ldr r4, =_ebss
 80023cc:	200004b8 	.word	0x200004b8

080023d0 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023d0:	e7fe      	b.n	80023d0 <DMA1_Stream0_IRQHandler>
	...

080023d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023d8:	4b0e      	ldr	r3, [pc, #56]	; (8002414 <HAL_Init+0x40>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a0d      	ldr	r2, [pc, #52]	; (8002414 <HAL_Init+0x40>)
 80023de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023e4:	4b0b      	ldr	r3, [pc, #44]	; (8002414 <HAL_Init+0x40>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a0a      	ldr	r2, [pc, #40]	; (8002414 <HAL_Init+0x40>)
 80023ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023f0:	4b08      	ldr	r3, [pc, #32]	; (8002414 <HAL_Init+0x40>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a07      	ldr	r2, [pc, #28]	; (8002414 <HAL_Init+0x40>)
 80023f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023fc:	2003      	movs	r0, #3
 80023fe:	f000 fe77 	bl	80030f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002402:	2000      	movs	r0, #0
 8002404:	f000 f808 	bl	8002418 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002408:	f7ff fd1e 	bl	8001e48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	40023c00 	.word	0x40023c00

08002418 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002420:	4b12      	ldr	r3, [pc, #72]	; (800246c <HAL_InitTick+0x54>)
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	4b12      	ldr	r3, [pc, #72]	; (8002470 <HAL_InitTick+0x58>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	4619      	mov	r1, r3
 800242a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800242e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002432:	fbb2 f3f3 	udiv	r3, r2, r3
 8002436:	4618      	mov	r0, r3
 8002438:	f000 fe8f 	bl	800315a <HAL_SYSTICK_Config>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e00e      	b.n	8002464 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2b0f      	cmp	r3, #15
 800244a:	d80a      	bhi.n	8002462 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800244c:	2200      	movs	r2, #0
 800244e:	6879      	ldr	r1, [r7, #4]
 8002450:	f04f 30ff 	mov.w	r0, #4294967295
 8002454:	f000 fe57 	bl	8003106 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002458:	4a06      	ldr	r2, [pc, #24]	; (8002474 <HAL_InitTick+0x5c>)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800245e:	2300      	movs	r3, #0
 8002460:	e000      	b.n	8002464 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
}
 8002464:	4618      	mov	r0, r3
 8002466:	3708      	adds	r7, #8
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	2000000c 	.word	0x2000000c
 8002470:	20000014 	.word	0x20000014
 8002474:	20000010 	.word	0x20000010

08002478 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800247c:	4b06      	ldr	r3, [pc, #24]	; (8002498 <HAL_IncTick+0x20>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	461a      	mov	r2, r3
 8002482:	4b06      	ldr	r3, [pc, #24]	; (800249c <HAL_IncTick+0x24>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4413      	add	r3, r2
 8002488:	4a04      	ldr	r2, [pc, #16]	; (800249c <HAL_IncTick+0x24>)
 800248a:	6013      	str	r3, [r2, #0]
}
 800248c:	bf00      	nop
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	20000014 	.word	0x20000014
 800249c:	200004a4 	.word	0x200004a4

080024a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  return uwTick;
 80024a4:	4b03      	ldr	r3, [pc, #12]	; (80024b4 <HAL_GetTick+0x14>)
 80024a6:	681b      	ldr	r3, [r3, #0]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	200004a4 	.word	0x200004a4

080024b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024c0:	f7ff ffee 	bl	80024a0 <HAL_GetTick>
 80024c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d0:	d005      	beq.n	80024de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024d2:	4b0a      	ldr	r3, [pc, #40]	; (80024fc <HAL_Delay+0x44>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	461a      	mov	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	4413      	add	r3, r2
 80024dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024de:	bf00      	nop
 80024e0:	f7ff ffde 	bl	80024a0 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d8f7      	bhi.n	80024e0 <HAL_Delay+0x28>
  {
  }
}
 80024f0:	bf00      	nop
 80024f2:	bf00      	nop
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	20000014 	.word	0x20000014

08002500 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002508:	2300      	movs	r3, #0
 800250a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e033      	b.n	800257e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	2b00      	cmp	r3, #0
 800251c:	d109      	bne.n	8002532 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7ff fcba 	bl	8001e98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002536:	f003 0310 	and.w	r3, r3, #16
 800253a:	2b00      	cmp	r3, #0
 800253c:	d118      	bne.n	8002570 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002546:	f023 0302 	bic.w	r3, r3, #2
 800254a:	f043 0202 	orr.w	r2, r3, #2
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 fbf6 	bl	8002d44 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	f023 0303 	bic.w	r3, r3, #3
 8002566:	f043 0201 	orr.w	r2, r3, #1
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	641a      	str	r2, [r3, #64]	; 0x40
 800256e:	e001      	b.n	8002574 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800257c:	7bfb      	ldrb	r3, [r7, #15]
}
 800257e:	4618      	mov	r0, r3
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
	...

08002588 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002588:	b480      	push	{r7}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002590:	2300      	movs	r3, #0
 8002592:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800259a:	2b01      	cmp	r3, #1
 800259c:	d101      	bne.n	80025a2 <HAL_ADC_Start+0x1a>
 800259e:	2302      	movs	r3, #2
 80025a0:	e097      	b.n	80026d2 <HAL_ADC_Start+0x14a>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2201      	movs	r2, #1
 80025a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d018      	beq.n	80025ea <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	689a      	ldr	r2, [r3, #8]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f042 0201 	orr.w	r2, r2, #1
 80025c6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80025c8:	4b45      	ldr	r3, [pc, #276]	; (80026e0 <HAL_ADC_Start+0x158>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a45      	ldr	r2, [pc, #276]	; (80026e4 <HAL_ADC_Start+0x15c>)
 80025ce:	fba2 2303 	umull	r2, r3, r2, r3
 80025d2:	0c9a      	lsrs	r2, r3, #18
 80025d4:	4613      	mov	r3, r2
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	4413      	add	r3, r2
 80025da:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80025dc:	e002      	b.n	80025e4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	3b01      	subs	r3, #1
 80025e2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1f9      	bne.n	80025de <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d15f      	bne.n	80026b8 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002600:	f023 0301 	bic.w	r3, r3, #1
 8002604:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002616:	2b00      	cmp	r3, #0
 8002618:	d007      	beq.n	800262a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002622:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002636:	d106      	bne.n	8002646 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263c:	f023 0206 	bic.w	r2, r3, #6
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	645a      	str	r2, [r3, #68]	; 0x44
 8002644:	e002      	b.n	800264c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002654:	4b24      	ldr	r3, [pc, #144]	; (80026e8 <HAL_ADC_Start+0x160>)
 8002656:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002660:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f003 031f 	and.w	r3, r3, #31
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10f      	bne.n	800268e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d129      	bne.n	80026d0 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689a      	ldr	r2, [r3, #8]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800268a:	609a      	str	r2, [r3, #8]
 800268c:	e020      	b.n	80026d0 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a16      	ldr	r2, [pc, #88]	; (80026ec <HAL_ADC_Start+0x164>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d11b      	bne.n	80026d0 <HAL_ADC_Start+0x148>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d114      	bne.n	80026d0 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80026b4:	609a      	str	r2, [r3, #8]
 80026b6:	e00b      	b.n	80026d0 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026bc:	f043 0210 	orr.w	r2, r3, #16
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c8:	f043 0201 	orr.w	r2, r3, #1
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3714      	adds	r7, #20
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	2000000c 	.word	0x2000000c
 80026e4:	431bde83 	.word	0x431bde83
 80026e8:	40012300 	.word	0x40012300
 80026ec:	40012000 	.word	0x40012000

080026f0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80026fa:	2300      	movs	r3, #0
 80026fc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002708:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800270c:	d113      	bne.n	8002736 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002718:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800271c:	d10b      	bne.n	8002736 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	f043 0220 	orr.w	r2, r3, #32
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e063      	b.n	80027fe <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002736:	f7ff feb3 	bl	80024a0 <HAL_GetTick>
 800273a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800273c:	e021      	b.n	8002782 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002744:	d01d      	beq.n	8002782 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d007      	beq.n	800275c <HAL_ADC_PollForConversion+0x6c>
 800274c:	f7ff fea8 	bl	80024a0 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	683a      	ldr	r2, [r7, #0]
 8002758:	429a      	cmp	r2, r3
 800275a:	d212      	bcs.n	8002782 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b02      	cmp	r3, #2
 8002768:	d00b      	beq.n	8002782 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276e:	f043 0204 	orr.w	r2, r3, #4
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e03d      	b.n	80027fe <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b02      	cmp	r3, #2
 800278e:	d1d6      	bne.n	800273e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f06f 0212 	mvn.w	r2, #18
 8002798:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d123      	bne.n	80027fc <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d11f      	bne.n	80027fc <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d006      	beq.n	80027d8 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d111      	bne.n	80027fc <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d105      	bne.n	80027fc <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f4:	f043 0201 	orr.w	r2, r3, #1
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b084      	sub	sp, #16
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800280e:	2300      	movs	r3, #0
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	2300      	movs	r3, #0
 8002814:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b02      	cmp	r3, #2
 8002822:	bf0c      	ite	eq
 8002824:	2301      	moveq	r3, #1
 8002826:	2300      	movne	r3, #0
 8002828:	b2db      	uxtb	r3, r3
 800282a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f003 0320 	and.w	r3, r3, #32
 8002836:	2b20      	cmp	r3, #32
 8002838:	bf0c      	ite	eq
 800283a:	2301      	moveq	r3, #1
 800283c:	2300      	movne	r3, #0
 800283e:	b2db      	uxtb	r3, r3
 8002840:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d049      	beq.n	80028dc <HAL_ADC_IRQHandler+0xd6>
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d046      	beq.n	80028dc <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	f003 0310 	and.w	r3, r3, #16
 8002856:	2b00      	cmp	r3, #0
 8002858:	d105      	bne.n	8002866 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d12b      	bne.n	80028cc <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002878:	2b00      	cmp	r3, #0
 800287a:	d127      	bne.n	80028cc <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002882:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002886:	2b00      	cmp	r3, #0
 8002888:	d006      	beq.n	8002898 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002894:	2b00      	cmp	r3, #0
 8002896:	d119      	bne.n	80028cc <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	685a      	ldr	r2, [r3, #4]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f022 0220 	bic.w	r2, r2, #32
 80028a6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d105      	bne.n	80028cc <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c4:	f043 0201 	orr.w	r2, r3, #1
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f000 f8e8 	bl	8002aa2 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f06f 0212 	mvn.w	r2, #18
 80028da:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0304 	and.w	r3, r3, #4
 80028e6:	2b04      	cmp	r3, #4
 80028e8:	bf0c      	ite	eq
 80028ea:	2301      	moveq	r3, #1
 80028ec:	2300      	movne	r3, #0
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028fc:	2b80      	cmp	r3, #128	; 0x80
 80028fe:	bf0c      	ite	eq
 8002900:	2301      	moveq	r3, #1
 8002902:	2300      	movne	r3, #0
 8002904:	b2db      	uxtb	r3, r3
 8002906:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d057      	beq.n	80029be <HAL_ADC_IRQHandler+0x1b8>
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d054      	beq.n	80029be <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002918:	f003 0310 	and.w	r3, r3, #16
 800291c:	2b00      	cmp	r3, #0
 800291e:	d105      	bne.n	800292c <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002924:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d139      	bne.n	80029ae <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002940:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002944:	2b00      	cmp	r3, #0
 8002946:	d006      	beq.n	8002956 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002952:	2b00      	cmp	r3, #0
 8002954:	d12b      	bne.n	80029ae <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002960:	2b00      	cmp	r3, #0
 8002962:	d124      	bne.n	80029ae <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800296e:	2b00      	cmp	r3, #0
 8002970:	d11d      	bne.n	80029ae <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002976:	2b00      	cmp	r3, #0
 8002978:	d119      	bne.n	80029ae <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	685a      	ldr	r2, [r3, #4]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002988:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d105      	bne.n	80029ae <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	f043 0201 	orr.w	r2, r3, #1
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 fac4 	bl	8002f3c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f06f 020c 	mvn.w	r2, #12
 80029bc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0301 	and.w	r3, r3, #1
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	bf0c      	ite	eq
 80029cc:	2301      	moveq	r3, #1
 80029ce:	2300      	movne	r3, #0
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029de:	2b40      	cmp	r3, #64	; 0x40
 80029e0:	bf0c      	ite	eq
 80029e2:	2301      	moveq	r3, #1
 80029e4:	2300      	movne	r3, #0
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d017      	beq.n	8002a20 <HAL_ADC_IRQHandler+0x21a>
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d014      	beq.n	8002a20 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0301 	and.w	r3, r3, #1
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d10d      	bne.n	8002a20 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a08:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f000 f850 	bl	8002ab6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f06f 0201 	mvn.w	r2, #1
 8002a1e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0320 	and.w	r3, r3, #32
 8002a2a:	2b20      	cmp	r3, #32
 8002a2c:	bf0c      	ite	eq
 8002a2e:	2301      	moveq	r3, #1
 8002a30:	2300      	movne	r3, #0
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a44:	bf0c      	ite	eq
 8002a46:	2301      	moveq	r3, #1
 8002a48:	2300      	movne	r3, #0
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d015      	beq.n	8002a80 <HAL_ADC_IRQHandler+0x27a>
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d012      	beq.n	8002a80 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5e:	f043 0202 	orr.w	r2, r3, #2
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f06f 0220 	mvn.w	r2, #32
 8002a6e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 f82a 	bl	8002aca <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f06f 0220 	mvn.w	r2, #32
 8002a7e:	601a      	str	r2, [r3, #0]
  }
}
 8002a80:	bf00      	nop
 8002a82:	3710      	adds	r7, #16
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b083      	sub	sp, #12
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002aaa:	bf00      	nop
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b083      	sub	sp, #12
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr

08002aca <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b083      	sub	sp, #12
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002ad2:	bf00      	nop
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
	...

08002ae0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002aea:	2300      	movs	r3, #0
 8002aec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d101      	bne.n	8002afc <HAL_ADC_ConfigChannel+0x1c>
 8002af8:	2302      	movs	r3, #2
 8002afa:	e113      	b.n	8002d24 <HAL_ADC_ConfigChannel+0x244>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2b09      	cmp	r3, #9
 8002b0a:	d925      	bls.n	8002b58 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68d9      	ldr	r1, [r3, #12]
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	461a      	mov	r2, r3
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	4413      	add	r3, r2
 8002b20:	3b1e      	subs	r3, #30
 8002b22:	2207      	movs	r2, #7
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	43da      	mvns	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	400a      	ands	r2, r1
 8002b30:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68d9      	ldr	r1, [r3, #12]
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	689a      	ldr	r2, [r3, #8]
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	4618      	mov	r0, r3
 8002b44:	4603      	mov	r3, r0
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	4403      	add	r3, r0
 8002b4a:	3b1e      	subs	r3, #30
 8002b4c:	409a      	lsls	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	60da      	str	r2, [r3, #12]
 8002b56:	e022      	b.n	8002b9e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6919      	ldr	r1, [r3, #16]
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	461a      	mov	r2, r3
 8002b66:	4613      	mov	r3, r2
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	4413      	add	r3, r2
 8002b6c:	2207      	movs	r2, #7
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	43da      	mvns	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	400a      	ands	r2, r1
 8002b7a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6919      	ldr	r1, [r3, #16]
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	689a      	ldr	r2, [r3, #8]
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	4603      	mov	r3, r0
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	4403      	add	r3, r0
 8002b94:	409a      	lsls	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	2b06      	cmp	r3, #6
 8002ba4:	d824      	bhi.n	8002bf0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685a      	ldr	r2, [r3, #4]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	4413      	add	r3, r2
 8002bb6:	3b05      	subs	r3, #5
 8002bb8:	221f      	movs	r2, #31
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	43da      	mvns	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	400a      	ands	r2, r1
 8002bc6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685a      	ldr	r2, [r3, #4]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4413      	add	r3, r2
 8002be0:	3b05      	subs	r3, #5
 8002be2:	fa00 f203 	lsl.w	r2, r0, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	430a      	orrs	r2, r1
 8002bec:	635a      	str	r2, [r3, #52]	; 0x34
 8002bee:	e04c      	b.n	8002c8a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	2b0c      	cmp	r3, #12
 8002bf6:	d824      	bhi.n	8002c42 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685a      	ldr	r2, [r3, #4]
 8002c02:	4613      	mov	r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	4413      	add	r3, r2
 8002c08:	3b23      	subs	r3, #35	; 0x23
 8002c0a:	221f      	movs	r2, #31
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	43da      	mvns	r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	400a      	ands	r2, r1
 8002c18:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	4618      	mov	r0, r3
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685a      	ldr	r2, [r3, #4]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	4413      	add	r3, r2
 8002c32:	3b23      	subs	r3, #35	; 0x23
 8002c34:	fa00 f203 	lsl.w	r2, r0, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	631a      	str	r2, [r3, #48]	; 0x30
 8002c40:	e023      	b.n	8002c8a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	4413      	add	r3, r2
 8002c52:	3b41      	subs	r3, #65	; 0x41
 8002c54:	221f      	movs	r2, #31
 8002c56:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5a:	43da      	mvns	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	400a      	ands	r2, r1
 8002c62:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	4618      	mov	r0, r3
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685a      	ldr	r2, [r3, #4]
 8002c76:	4613      	mov	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	4413      	add	r3, r2
 8002c7c:	3b41      	subs	r3, #65	; 0x41
 8002c7e:	fa00 f203 	lsl.w	r2, r0, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	430a      	orrs	r2, r1
 8002c88:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c8a:	4b29      	ldr	r3, [pc, #164]	; (8002d30 <HAL_ADC_ConfigChannel+0x250>)
 8002c8c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a28      	ldr	r2, [pc, #160]	; (8002d34 <HAL_ADC_ConfigChannel+0x254>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d10f      	bne.n	8002cb8 <HAL_ADC_ConfigChannel+0x1d8>
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2b12      	cmp	r3, #18
 8002c9e:	d10b      	bne.n	8002cb8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a1d      	ldr	r2, [pc, #116]	; (8002d34 <HAL_ADC_ConfigChannel+0x254>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d12b      	bne.n	8002d1a <HAL_ADC_ConfigChannel+0x23a>
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a1c      	ldr	r2, [pc, #112]	; (8002d38 <HAL_ADC_ConfigChannel+0x258>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d003      	beq.n	8002cd4 <HAL_ADC_ConfigChannel+0x1f4>
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2b11      	cmp	r3, #17
 8002cd2:	d122      	bne.n	8002d1a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a11      	ldr	r2, [pc, #68]	; (8002d38 <HAL_ADC_ConfigChannel+0x258>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d111      	bne.n	8002d1a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002cf6:	4b11      	ldr	r3, [pc, #68]	; (8002d3c <HAL_ADC_ConfigChannel+0x25c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a11      	ldr	r2, [pc, #68]	; (8002d40 <HAL_ADC_ConfigChannel+0x260>)
 8002cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002d00:	0c9a      	lsrs	r2, r3, #18
 8002d02:	4613      	mov	r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	4413      	add	r3, r2
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d0c:	e002      	b.n	8002d14 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	3b01      	subs	r3, #1
 8002d12:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1f9      	bne.n	8002d0e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3714      	adds	r7, #20
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr
 8002d30:	40012300 	.word	0x40012300
 8002d34:	40012000 	.word	0x40012000
 8002d38:	10000012 	.word	0x10000012
 8002d3c:	2000000c 	.word	0x2000000c
 8002d40:	431bde83 	.word	0x431bde83

08002d44 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d4c:	4b79      	ldr	r3, [pc, #484]	; (8002f34 <ADC_Init+0x1f0>)
 8002d4e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	685a      	ldr	r2, [r3, #4]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	431a      	orrs	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	685a      	ldr	r2, [r3, #4]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	6859      	ldr	r1, [r3, #4]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	021a      	lsls	r2, r3, #8
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	685a      	ldr	r2, [r3, #4]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002d9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6859      	ldr	r1, [r3, #4]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	430a      	orrs	r2, r1
 8002dae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	689a      	ldr	r2, [r3, #8]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dbe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6899      	ldr	r1, [r3, #8]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	68da      	ldr	r2, [r3, #12]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd6:	4a58      	ldr	r2, [pc, #352]	; (8002f38 <ADC_Init+0x1f4>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d022      	beq.n	8002e22 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	689a      	ldr	r2, [r3, #8]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002dea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6899      	ldr	r1, [r3, #8]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	6899      	ldr	r1, [r3, #8]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	609a      	str	r2, [r3, #8]
 8002e20:	e00f      	b.n	8002e42 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	689a      	ldr	r2, [r3, #8]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e40:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	689a      	ldr	r2, [r3, #8]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f022 0202 	bic.w	r2, r2, #2
 8002e50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	6899      	ldr	r1, [r3, #8]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	7e1b      	ldrb	r3, [r3, #24]
 8002e5c:	005a      	lsls	r2, r3, #1
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d01b      	beq.n	8002ea8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	685a      	ldr	r2, [r3, #4]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e7e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002e8e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6859      	ldr	r1, [r3, #4]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	035a      	lsls	r2, r3, #13
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	605a      	str	r2, [r3, #4]
 8002ea6:	e007      	b.n	8002eb8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	685a      	ldr	r2, [r3, #4]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002eb6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002ec6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	69db      	ldr	r3, [r3, #28]
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	051a      	lsls	r2, r3, #20
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	689a      	ldr	r2, [r3, #8]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002eec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	6899      	ldr	r1, [r3, #8]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002efa:	025a      	lsls	r2, r3, #9
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	430a      	orrs	r2, r1
 8002f02:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	689a      	ldr	r2, [r3, #8]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	6899      	ldr	r1, [r3, #8]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	029a      	lsls	r2, r3, #10
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	430a      	orrs	r2, r1
 8002f26:	609a      	str	r2, [r3, #8]
}
 8002f28:	bf00      	nop
 8002f2a:	3714      	adds	r7, #20
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr
 8002f34:	40012300 	.word	0x40012300
 8002f38:	0f000001 	.word	0x0f000001

08002f3c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f003 0307 	and.w	r3, r3, #7
 8002f5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f60:	4b0c      	ldr	r3, [pc, #48]	; (8002f94 <__NVIC_SetPriorityGrouping+0x44>)
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f66:	68ba      	ldr	r2, [r7, #8]
 8002f68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f82:	4a04      	ldr	r2, [pc, #16]	; (8002f94 <__NVIC_SetPriorityGrouping+0x44>)
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	60d3      	str	r3, [r2, #12]
}
 8002f88:	bf00      	nop
 8002f8a:	3714      	adds	r7, #20
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr
 8002f94:	e000ed00 	.word	0xe000ed00

08002f98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f9c:	4b04      	ldr	r3, [pc, #16]	; (8002fb0 <__NVIC_GetPriorityGrouping+0x18>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	0a1b      	lsrs	r3, r3, #8
 8002fa2:	f003 0307 	and.w	r3, r3, #7
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr
 8002fb0:	e000ed00 	.word	0xe000ed00

08002fb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	4603      	mov	r3, r0
 8002fbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	db0b      	blt.n	8002fde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fc6:	79fb      	ldrb	r3, [r7, #7]
 8002fc8:	f003 021f 	and.w	r2, r3, #31
 8002fcc:	4907      	ldr	r1, [pc, #28]	; (8002fec <__NVIC_EnableIRQ+0x38>)
 8002fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd2:	095b      	lsrs	r3, r3, #5
 8002fd4:	2001      	movs	r0, #1
 8002fd6:	fa00 f202 	lsl.w	r2, r0, r2
 8002fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fde:	bf00      	nop
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	e000e100 	.word	0xe000e100

08002ff0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	6039      	str	r1, [r7, #0]
 8002ffa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003000:	2b00      	cmp	r3, #0
 8003002:	db0a      	blt.n	800301a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	b2da      	uxtb	r2, r3
 8003008:	490c      	ldr	r1, [pc, #48]	; (800303c <__NVIC_SetPriority+0x4c>)
 800300a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300e:	0112      	lsls	r2, r2, #4
 8003010:	b2d2      	uxtb	r2, r2
 8003012:	440b      	add	r3, r1
 8003014:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003018:	e00a      	b.n	8003030 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	b2da      	uxtb	r2, r3
 800301e:	4908      	ldr	r1, [pc, #32]	; (8003040 <__NVIC_SetPriority+0x50>)
 8003020:	79fb      	ldrb	r3, [r7, #7]
 8003022:	f003 030f 	and.w	r3, r3, #15
 8003026:	3b04      	subs	r3, #4
 8003028:	0112      	lsls	r2, r2, #4
 800302a:	b2d2      	uxtb	r2, r2
 800302c:	440b      	add	r3, r1
 800302e:	761a      	strb	r2, [r3, #24]
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr
 800303c:	e000e100 	.word	0xe000e100
 8003040:	e000ed00 	.word	0xe000ed00

08003044 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003044:	b480      	push	{r7}
 8003046:	b089      	sub	sp, #36	; 0x24
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f003 0307 	and.w	r3, r3, #7
 8003056:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	f1c3 0307 	rsb	r3, r3, #7
 800305e:	2b04      	cmp	r3, #4
 8003060:	bf28      	it	cs
 8003062:	2304      	movcs	r3, #4
 8003064:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	3304      	adds	r3, #4
 800306a:	2b06      	cmp	r3, #6
 800306c:	d902      	bls.n	8003074 <NVIC_EncodePriority+0x30>
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	3b03      	subs	r3, #3
 8003072:	e000      	b.n	8003076 <NVIC_EncodePriority+0x32>
 8003074:	2300      	movs	r3, #0
 8003076:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003078:	f04f 32ff 	mov.w	r2, #4294967295
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	fa02 f303 	lsl.w	r3, r2, r3
 8003082:	43da      	mvns	r2, r3
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	401a      	ands	r2, r3
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800308c:	f04f 31ff 	mov.w	r1, #4294967295
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	fa01 f303 	lsl.w	r3, r1, r3
 8003096:	43d9      	mvns	r1, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800309c:	4313      	orrs	r3, r2
         );
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3724      	adds	r7, #36	; 0x24
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
	...

080030ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	3b01      	subs	r3, #1
 80030b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030bc:	d301      	bcc.n	80030c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030be:	2301      	movs	r3, #1
 80030c0:	e00f      	b.n	80030e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030c2:	4a0a      	ldr	r2, [pc, #40]	; (80030ec <SysTick_Config+0x40>)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	3b01      	subs	r3, #1
 80030c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030ca:	210f      	movs	r1, #15
 80030cc:	f04f 30ff 	mov.w	r0, #4294967295
 80030d0:	f7ff ff8e 	bl	8002ff0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030d4:	4b05      	ldr	r3, [pc, #20]	; (80030ec <SysTick_Config+0x40>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030da:	4b04      	ldr	r3, [pc, #16]	; (80030ec <SysTick_Config+0x40>)
 80030dc:	2207      	movs	r2, #7
 80030de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	e000e010 	.word	0xe000e010

080030f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f7ff ff29 	bl	8002f50 <__NVIC_SetPriorityGrouping>
}
 80030fe:	bf00      	nop
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003106:	b580      	push	{r7, lr}
 8003108:	b086      	sub	sp, #24
 800310a:	af00      	add	r7, sp, #0
 800310c:	4603      	mov	r3, r0
 800310e:	60b9      	str	r1, [r7, #8]
 8003110:	607a      	str	r2, [r7, #4]
 8003112:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003114:	2300      	movs	r3, #0
 8003116:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003118:	f7ff ff3e 	bl	8002f98 <__NVIC_GetPriorityGrouping>
 800311c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	68b9      	ldr	r1, [r7, #8]
 8003122:	6978      	ldr	r0, [r7, #20]
 8003124:	f7ff ff8e 	bl	8003044 <NVIC_EncodePriority>
 8003128:	4602      	mov	r2, r0
 800312a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800312e:	4611      	mov	r1, r2
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff ff5d 	bl	8002ff0 <__NVIC_SetPriority>
}
 8003136:	bf00      	nop
 8003138:	3718      	adds	r7, #24
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800313e:	b580      	push	{r7, lr}
 8003140:	b082      	sub	sp, #8
 8003142:	af00      	add	r7, sp, #0
 8003144:	4603      	mov	r3, r0
 8003146:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff ff31 	bl	8002fb4 <__NVIC_EnableIRQ>
}
 8003152:	bf00      	nop
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b082      	sub	sp, #8
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7ff ffa2 	bl	80030ac <SysTick_Config>
 8003168:	4603      	mov	r3, r0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
	...

08003174 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800317c:	2300      	movs	r3, #0
 800317e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003180:	f7ff f98e 	bl	80024a0 <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d101      	bne.n	8003190 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e099      	b.n	80032c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2202      	movs	r2, #2
 8003194:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f022 0201 	bic.w	r2, r2, #1
 80031ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031b0:	e00f      	b.n	80031d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031b2:	f7ff f975 	bl	80024a0 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	2b05      	cmp	r3, #5
 80031be:	d908      	bls.n	80031d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2220      	movs	r2, #32
 80031c4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2203      	movs	r2, #3
 80031ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e078      	b.n	80032c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0301 	and.w	r3, r3, #1
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1e8      	bne.n	80031b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80031e8:	697a      	ldr	r2, [r7, #20]
 80031ea:	4b38      	ldr	r3, [pc, #224]	; (80032cc <HAL_DMA_Init+0x158>)
 80031ec:	4013      	ands	r3, r2
 80031ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685a      	ldr	r2, [r3, #4]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	691b      	ldr	r3, [r3, #16]
 8003204:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800320a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003216:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a1b      	ldr	r3, [r3, #32]
 800321c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	4313      	orrs	r3, r2
 8003222:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	2b04      	cmp	r3, #4
 800322a:	d107      	bne.n	800323c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003234:	4313      	orrs	r3, r2
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	4313      	orrs	r3, r2
 800323a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	f023 0307 	bic.w	r3, r3, #7
 8003252:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003258:	697a      	ldr	r2, [r7, #20]
 800325a:	4313      	orrs	r3, r2
 800325c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003262:	2b04      	cmp	r3, #4
 8003264:	d117      	bne.n	8003296 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	4313      	orrs	r3, r2
 800326e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003274:	2b00      	cmp	r3, #0
 8003276:	d00e      	beq.n	8003296 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f000 fa91 	bl	80037a0 <DMA_CheckFifoParam>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d008      	beq.n	8003296 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2240      	movs	r2, #64	; 0x40
 8003288:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2201      	movs	r2, #1
 800328e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003292:	2301      	movs	r3, #1
 8003294:	e016      	b.n	80032c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	697a      	ldr	r2, [r7, #20]
 800329c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 fa48 	bl	8003734 <DMA_CalcBaseAndBitshift>
 80032a4:	4603      	mov	r3, r0
 80032a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ac:	223f      	movs	r2, #63	; 0x3f
 80032ae:	409a      	lsls	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2201      	movs	r2, #1
 80032be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3718      	adds	r7, #24
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	f010803f 	.word	0xf010803f

080032d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]
 80032dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032de:	2300      	movs	r3, #0
 80032e0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d101      	bne.n	80032f6 <HAL_DMA_Start_IT+0x26>
 80032f2:	2302      	movs	r3, #2
 80032f4:	e040      	b.n	8003378 <HAL_DMA_Start_IT+0xa8>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b01      	cmp	r3, #1
 8003308:	d12f      	bne.n	800336a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2202      	movs	r2, #2
 800330e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	68b9      	ldr	r1, [r7, #8]
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f000 f9da 	bl	80036d8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003328:	223f      	movs	r2, #63	; 0x3f
 800332a:	409a      	lsls	r2, r3
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 0216 	orr.w	r2, r2, #22
 800333e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003344:	2b00      	cmp	r3, #0
 8003346:	d007      	beq.n	8003358 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f042 0208 	orr.w	r2, r2, #8
 8003356:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f042 0201 	orr.w	r2, r2, #1
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	e005      	b.n	8003376 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003372:	2302      	movs	r3, #2
 8003374:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003376:	7dfb      	ldrb	r3, [r7, #23]
}
 8003378:	4618      	mov	r0, r3
 800337a:	3718      	adds	r7, #24
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800338e:	b2db      	uxtb	r3, r3
 8003390:	2b02      	cmp	r3, #2
 8003392:	d004      	beq.n	800339e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2280      	movs	r2, #128	; 0x80
 8003398:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e00c      	b.n	80033b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2205      	movs	r2, #5
 80033a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f022 0201 	bic.w	r2, r2, #1
 80033b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80033d0:	4b92      	ldr	r3, [pc, #584]	; (800361c <HAL_DMA_IRQHandler+0x258>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a92      	ldr	r2, [pc, #584]	; (8003620 <HAL_DMA_IRQHandler+0x25c>)
 80033d6:	fba2 2303 	umull	r2, r3, r2, r3
 80033da:	0a9b      	lsrs	r3, r3, #10
 80033dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ee:	2208      	movs	r2, #8
 80033f0:	409a      	lsls	r2, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	4013      	ands	r3, r2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d01a      	beq.n	8003430 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0304 	and.w	r3, r3, #4
 8003404:	2b00      	cmp	r3, #0
 8003406:	d013      	beq.n	8003430 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 0204 	bic.w	r2, r2, #4
 8003416:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800341c:	2208      	movs	r2, #8
 800341e:	409a      	lsls	r2, r3
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003428:	f043 0201 	orr.w	r2, r3, #1
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003434:	2201      	movs	r2, #1
 8003436:	409a      	lsls	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	4013      	ands	r3, r2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d012      	beq.n	8003466 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00b      	beq.n	8003466 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003452:	2201      	movs	r2, #1
 8003454:	409a      	lsls	r2, r3
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800345e:	f043 0202 	orr.w	r2, r3, #2
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800346a:	2204      	movs	r2, #4
 800346c:	409a      	lsls	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	4013      	ands	r3, r2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d012      	beq.n	800349c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00b      	beq.n	800349c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003488:	2204      	movs	r2, #4
 800348a:	409a      	lsls	r2, r3
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003494:	f043 0204 	orr.w	r2, r3, #4
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a0:	2210      	movs	r2, #16
 80034a2:	409a      	lsls	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	4013      	ands	r3, r2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d043      	beq.n	8003534 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0308 	and.w	r3, r3, #8
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d03c      	beq.n	8003534 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034be:	2210      	movs	r2, #16
 80034c0:	409a      	lsls	r2, r3
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d018      	beq.n	8003506 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d108      	bne.n	80034f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d024      	beq.n	8003534 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	4798      	blx	r3
 80034f2:	e01f      	b.n	8003534 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d01b      	beq.n	8003534 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	4798      	blx	r3
 8003504:	e016      	b.n	8003534 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003510:	2b00      	cmp	r3, #0
 8003512:	d107      	bne.n	8003524 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f022 0208 	bic.w	r2, r2, #8
 8003522:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003528:	2b00      	cmp	r3, #0
 800352a:	d003      	beq.n	8003534 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003538:	2220      	movs	r2, #32
 800353a:	409a      	lsls	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	4013      	ands	r3, r2
 8003540:	2b00      	cmp	r3, #0
 8003542:	f000 808e 	beq.w	8003662 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0310 	and.w	r3, r3, #16
 8003550:	2b00      	cmp	r3, #0
 8003552:	f000 8086 	beq.w	8003662 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800355a:	2220      	movs	r2, #32
 800355c:	409a      	lsls	r2, r3
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b05      	cmp	r3, #5
 800356c:	d136      	bne.n	80035dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f022 0216 	bic.w	r2, r2, #22
 800357c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	695a      	ldr	r2, [r3, #20]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800358c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	2b00      	cmp	r3, #0
 8003594:	d103      	bne.n	800359e <HAL_DMA_IRQHandler+0x1da>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800359a:	2b00      	cmp	r3, #0
 800359c:	d007      	beq.n	80035ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f022 0208 	bic.w	r2, r2, #8
 80035ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b2:	223f      	movs	r2, #63	; 0x3f
 80035b4:	409a      	lsls	r2, r3
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d07d      	beq.n	80036ce <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	4798      	blx	r3
        }
        return;
 80035da:	e078      	b.n	80036ce <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d01c      	beq.n	8003624 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d108      	bne.n	800360a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d030      	beq.n	8003662 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	4798      	blx	r3
 8003608:	e02b      	b.n	8003662 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800360e:	2b00      	cmp	r3, #0
 8003610:	d027      	beq.n	8003662 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	4798      	blx	r3
 800361a:	e022      	b.n	8003662 <HAL_DMA_IRQHandler+0x29e>
 800361c:	2000000c 	.word	0x2000000c
 8003620:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10f      	bne.n	8003652 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 0210 	bic.w	r2, r2, #16
 8003640:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003656:	2b00      	cmp	r3, #0
 8003658:	d003      	beq.n	8003662 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003666:	2b00      	cmp	r3, #0
 8003668:	d032      	beq.n	80036d0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b00      	cmp	r3, #0
 8003674:	d022      	beq.n	80036bc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2205      	movs	r2, #5
 800367a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 0201 	bic.w	r2, r2, #1
 800368c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	3301      	adds	r3, #1
 8003692:	60bb      	str	r3, [r7, #8]
 8003694:	697a      	ldr	r2, [r7, #20]
 8003696:	429a      	cmp	r2, r3
 8003698:	d307      	bcc.n	80036aa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1f2      	bne.n	800368e <HAL_DMA_IRQHandler+0x2ca>
 80036a8:	e000      	b.n	80036ac <HAL_DMA_IRQHandler+0x2e8>
          break;
 80036aa:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d005      	beq.n	80036d0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	4798      	blx	r3
 80036cc:	e000      	b.n	80036d0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80036ce:	bf00      	nop
    }
  }
}
 80036d0:	3718      	adds	r7, #24
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop

080036d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036d8:	b480      	push	{r7}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
 80036e4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80036f4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	2b40      	cmp	r3, #64	; 0x40
 8003704:	d108      	bne.n	8003718 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68ba      	ldr	r2, [r7, #8]
 8003714:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003716:	e007      	b.n	8003728 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68ba      	ldr	r2, [r7, #8]
 800371e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	60da      	str	r2, [r3, #12]
}
 8003728:	bf00      	nop
 800372a:	3714      	adds	r7, #20
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003734:	b480      	push	{r7}
 8003736:	b085      	sub	sp, #20
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	b2db      	uxtb	r3, r3
 8003742:	3b10      	subs	r3, #16
 8003744:	4a14      	ldr	r2, [pc, #80]	; (8003798 <DMA_CalcBaseAndBitshift+0x64>)
 8003746:	fba2 2303 	umull	r2, r3, r2, r3
 800374a:	091b      	lsrs	r3, r3, #4
 800374c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800374e:	4a13      	ldr	r2, [pc, #76]	; (800379c <DMA_CalcBaseAndBitshift+0x68>)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	4413      	add	r3, r2
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	461a      	mov	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2b03      	cmp	r3, #3
 8003760:	d909      	bls.n	8003776 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800376a:	f023 0303 	bic.w	r3, r3, #3
 800376e:	1d1a      	adds	r2, r3, #4
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	659a      	str	r2, [r3, #88]	; 0x58
 8003774:	e007      	b.n	8003786 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800377e:	f023 0303 	bic.w	r3, r3, #3
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800378a:	4618      	mov	r0, r3
 800378c:	3714      	adds	r7, #20
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	aaaaaaab 	.word	0xaaaaaaab
 800379c:	0800a0e4 	.word	0x0800a0e4

080037a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037a8:	2300      	movs	r3, #0
 80037aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d11f      	bne.n	80037fa <DMA_CheckFifoParam+0x5a>
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	2b03      	cmp	r3, #3
 80037be:	d856      	bhi.n	800386e <DMA_CheckFifoParam+0xce>
 80037c0:	a201      	add	r2, pc, #4	; (adr r2, 80037c8 <DMA_CheckFifoParam+0x28>)
 80037c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c6:	bf00      	nop
 80037c8:	080037d9 	.word	0x080037d9
 80037cc:	080037eb 	.word	0x080037eb
 80037d0:	080037d9 	.word	0x080037d9
 80037d4:	0800386f 	.word	0x0800386f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d046      	beq.n	8003872 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037e8:	e043      	b.n	8003872 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037f2:	d140      	bne.n	8003876 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037f8:	e03d      	b.n	8003876 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003802:	d121      	bne.n	8003848 <DMA_CheckFifoParam+0xa8>
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	2b03      	cmp	r3, #3
 8003808:	d837      	bhi.n	800387a <DMA_CheckFifoParam+0xda>
 800380a:	a201      	add	r2, pc, #4	; (adr r2, 8003810 <DMA_CheckFifoParam+0x70>)
 800380c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003810:	08003821 	.word	0x08003821
 8003814:	08003827 	.word	0x08003827
 8003818:	08003821 	.word	0x08003821
 800381c:	08003839 	.word	0x08003839
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	73fb      	strb	r3, [r7, #15]
      break;
 8003824:	e030      	b.n	8003888 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d025      	beq.n	800387e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003836:	e022      	b.n	800387e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003840:	d11f      	bne.n	8003882 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003846:	e01c      	b.n	8003882 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	2b02      	cmp	r3, #2
 800384c:	d903      	bls.n	8003856 <DMA_CheckFifoParam+0xb6>
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	2b03      	cmp	r3, #3
 8003852:	d003      	beq.n	800385c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003854:	e018      	b.n	8003888 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	73fb      	strb	r3, [r7, #15]
      break;
 800385a:	e015      	b.n	8003888 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003860:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00e      	beq.n	8003886 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	73fb      	strb	r3, [r7, #15]
      break;
 800386c:	e00b      	b.n	8003886 <DMA_CheckFifoParam+0xe6>
      break;
 800386e:	bf00      	nop
 8003870:	e00a      	b.n	8003888 <DMA_CheckFifoParam+0xe8>
      break;
 8003872:	bf00      	nop
 8003874:	e008      	b.n	8003888 <DMA_CheckFifoParam+0xe8>
      break;
 8003876:	bf00      	nop
 8003878:	e006      	b.n	8003888 <DMA_CheckFifoParam+0xe8>
      break;
 800387a:	bf00      	nop
 800387c:	e004      	b.n	8003888 <DMA_CheckFifoParam+0xe8>
      break;
 800387e:	bf00      	nop
 8003880:	e002      	b.n	8003888 <DMA_CheckFifoParam+0xe8>
      break;   
 8003882:	bf00      	nop
 8003884:	e000      	b.n	8003888 <DMA_CheckFifoParam+0xe8>
      break;
 8003886:	bf00      	nop
    }
  } 
  
  return status; 
 8003888:	7bfb      	ldrb	r3, [r7, #15]
}
 800388a:	4618      	mov	r0, r3
 800388c:	3714      	adds	r7, #20
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop

08003898 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003898:	b480      	push	{r7}
 800389a:	b089      	sub	sp, #36	; 0x24
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038a2:	2300      	movs	r3, #0
 80038a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80038a6:	2300      	movs	r3, #0
 80038a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80038aa:	2300      	movs	r3, #0
 80038ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038ae:	2300      	movs	r3, #0
 80038b0:	61fb      	str	r3, [r7, #28]
 80038b2:	e159      	b.n	8003b68 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038b4:	2201      	movs	r2, #1
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	fa02 f303 	lsl.w	r3, r2, r3
 80038bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	4013      	ands	r3, r2
 80038c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	f040 8148 	bne.w	8003b62 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f003 0303 	and.w	r3, r3, #3
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d005      	beq.n	80038ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d130      	bne.n	800394c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	005b      	lsls	r3, r3, #1
 80038f4:	2203      	movs	r2, #3
 80038f6:	fa02 f303 	lsl.w	r3, r2, r3
 80038fa:	43db      	mvns	r3, r3
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	4013      	ands	r3, r2
 8003900:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	68da      	ldr	r2, [r3, #12]
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	fa02 f303 	lsl.w	r3, r2, r3
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	4313      	orrs	r3, r2
 8003912:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003920:	2201      	movs	r2, #1
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	fa02 f303 	lsl.w	r3, r2, r3
 8003928:	43db      	mvns	r3, r3
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	4013      	ands	r3, r2
 800392e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	091b      	lsrs	r3, r3, #4
 8003936:	f003 0201 	and.w	r2, r3, #1
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	fa02 f303 	lsl.w	r3, r2, r3
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	4313      	orrs	r3, r2
 8003944:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f003 0303 	and.w	r3, r3, #3
 8003954:	2b03      	cmp	r3, #3
 8003956:	d017      	beq.n	8003988 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	005b      	lsls	r3, r3, #1
 8003962:	2203      	movs	r2, #3
 8003964:	fa02 f303 	lsl.w	r3, r2, r3
 8003968:	43db      	mvns	r3, r3
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	4013      	ands	r3, r2
 800396e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	689a      	ldr	r2, [r3, #8]
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	005b      	lsls	r3, r3, #1
 8003978:	fa02 f303 	lsl.w	r3, r2, r3
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	4313      	orrs	r3, r2
 8003980:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f003 0303 	and.w	r3, r3, #3
 8003990:	2b02      	cmp	r3, #2
 8003992:	d123      	bne.n	80039dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	08da      	lsrs	r2, r3, #3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	3208      	adds	r2, #8
 800399c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	f003 0307 	and.w	r3, r3, #7
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	220f      	movs	r2, #15
 80039ac:	fa02 f303 	lsl.w	r3, r2, r3
 80039b0:	43db      	mvns	r3, r3
 80039b2:	69ba      	ldr	r2, [r7, #24]
 80039b4:	4013      	ands	r3, r2
 80039b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	691a      	ldr	r2, [r3, #16]
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	f003 0307 	and.w	r3, r3, #7
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	fa02 f303 	lsl.w	r3, r2, r3
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	08da      	lsrs	r2, r3, #3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	3208      	adds	r2, #8
 80039d6:	69b9      	ldr	r1, [r7, #24]
 80039d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	2203      	movs	r2, #3
 80039e8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ec:	43db      	mvns	r3, r3
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	4013      	ands	r3, r2
 80039f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f003 0203 	and.w	r2, r3, #3
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	fa02 f303 	lsl.w	r3, r2, r3
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f000 80a2 	beq.w	8003b62 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a1e:	2300      	movs	r3, #0
 8003a20:	60fb      	str	r3, [r7, #12]
 8003a22:	4b57      	ldr	r3, [pc, #348]	; (8003b80 <HAL_GPIO_Init+0x2e8>)
 8003a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a26:	4a56      	ldr	r2, [pc, #344]	; (8003b80 <HAL_GPIO_Init+0x2e8>)
 8003a28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a2e:	4b54      	ldr	r3, [pc, #336]	; (8003b80 <HAL_GPIO_Init+0x2e8>)
 8003a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a36:	60fb      	str	r3, [r7, #12]
 8003a38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a3a:	4a52      	ldr	r2, [pc, #328]	; (8003b84 <HAL_GPIO_Init+0x2ec>)
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	089b      	lsrs	r3, r3, #2
 8003a40:	3302      	adds	r3, #2
 8003a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	f003 0303 	and.w	r3, r3, #3
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	220f      	movs	r2, #15
 8003a52:	fa02 f303 	lsl.w	r3, r2, r3
 8003a56:	43db      	mvns	r3, r3
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a49      	ldr	r2, [pc, #292]	; (8003b88 <HAL_GPIO_Init+0x2f0>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d019      	beq.n	8003a9a <HAL_GPIO_Init+0x202>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a48      	ldr	r2, [pc, #288]	; (8003b8c <HAL_GPIO_Init+0x2f4>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d013      	beq.n	8003a96 <HAL_GPIO_Init+0x1fe>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a47      	ldr	r2, [pc, #284]	; (8003b90 <HAL_GPIO_Init+0x2f8>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d00d      	beq.n	8003a92 <HAL_GPIO_Init+0x1fa>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a46      	ldr	r2, [pc, #280]	; (8003b94 <HAL_GPIO_Init+0x2fc>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d007      	beq.n	8003a8e <HAL_GPIO_Init+0x1f6>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a45      	ldr	r2, [pc, #276]	; (8003b98 <HAL_GPIO_Init+0x300>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d101      	bne.n	8003a8a <HAL_GPIO_Init+0x1f2>
 8003a86:	2304      	movs	r3, #4
 8003a88:	e008      	b.n	8003a9c <HAL_GPIO_Init+0x204>
 8003a8a:	2307      	movs	r3, #7
 8003a8c:	e006      	b.n	8003a9c <HAL_GPIO_Init+0x204>
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e004      	b.n	8003a9c <HAL_GPIO_Init+0x204>
 8003a92:	2302      	movs	r3, #2
 8003a94:	e002      	b.n	8003a9c <HAL_GPIO_Init+0x204>
 8003a96:	2301      	movs	r3, #1
 8003a98:	e000      	b.n	8003a9c <HAL_GPIO_Init+0x204>
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	69fa      	ldr	r2, [r7, #28]
 8003a9e:	f002 0203 	and.w	r2, r2, #3
 8003aa2:	0092      	lsls	r2, r2, #2
 8003aa4:	4093      	lsls	r3, r2
 8003aa6:	69ba      	ldr	r2, [r7, #24]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003aac:	4935      	ldr	r1, [pc, #212]	; (8003b84 <HAL_GPIO_Init+0x2ec>)
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	089b      	lsrs	r3, r3, #2
 8003ab2:	3302      	adds	r3, #2
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003aba:	4b38      	ldr	r3, [pc, #224]	; (8003b9c <HAL_GPIO_Init+0x304>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	43db      	mvns	r3, r3
 8003ac4:	69ba      	ldr	r2, [r7, #24]
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d003      	beq.n	8003ade <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ade:	4a2f      	ldr	r2, [pc, #188]	; (8003b9c <HAL_GPIO_Init+0x304>)
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003ae4:	4b2d      	ldr	r3, [pc, #180]	; (8003b9c <HAL_GPIO_Init+0x304>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	43db      	mvns	r3, r3
 8003aee:	69ba      	ldr	r2, [r7, #24]
 8003af0:	4013      	ands	r3, r2
 8003af2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d003      	beq.n	8003b08 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b08:	4a24      	ldr	r2, [pc, #144]	; (8003b9c <HAL_GPIO_Init+0x304>)
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b0e:	4b23      	ldr	r3, [pc, #140]	; (8003b9c <HAL_GPIO_Init+0x304>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	43db      	mvns	r3, r3
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d003      	beq.n	8003b32 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003b2a:	69ba      	ldr	r2, [r7, #24]
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b32:	4a1a      	ldr	r2, [pc, #104]	; (8003b9c <HAL_GPIO_Init+0x304>)
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b38:	4b18      	ldr	r3, [pc, #96]	; (8003b9c <HAL_GPIO_Init+0x304>)
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	43db      	mvns	r3, r3
 8003b42:	69ba      	ldr	r2, [r7, #24]
 8003b44:	4013      	ands	r3, r2
 8003b46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d003      	beq.n	8003b5c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003b54:	69ba      	ldr	r2, [r7, #24]
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b5c:	4a0f      	ldr	r2, [pc, #60]	; (8003b9c <HAL_GPIO_Init+0x304>)
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	3301      	adds	r3, #1
 8003b66:	61fb      	str	r3, [r7, #28]
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	2b0f      	cmp	r3, #15
 8003b6c:	f67f aea2 	bls.w	80038b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b70:	bf00      	nop
 8003b72:	bf00      	nop
 8003b74:	3724      	adds	r7, #36	; 0x24
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	40023800 	.word	0x40023800
 8003b84:	40013800 	.word	0x40013800
 8003b88:	40020000 	.word	0x40020000
 8003b8c:	40020400 	.word	0x40020400
 8003b90:	40020800 	.word	0x40020800
 8003b94:	40020c00 	.word	0x40020c00
 8003b98:	40021000 	.word	0x40021000
 8003b9c:	40013c00 	.word	0x40013c00

08003ba0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	460b      	mov	r3, r1
 8003baa:	807b      	strh	r3, [r7, #2]
 8003bac:	4613      	mov	r3, r2
 8003bae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bb0:	787b      	ldrb	r3, [r7, #1]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d003      	beq.n	8003bbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bb6:	887a      	ldrh	r2, [r7, #2]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003bbc:	e003      	b.n	8003bc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003bbe:	887b      	ldrh	r3, [r7, #2]
 8003bc0:	041a      	lsls	r2, r3, #16
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	619a      	str	r2, [r3, #24]
}
 8003bc6:	bf00      	nop
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
	...

08003bd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	4603      	mov	r3, r0
 8003bdc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003bde:	4b08      	ldr	r3, [pc, #32]	; (8003c00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003be0:	695a      	ldr	r2, [r3, #20]
 8003be2:	88fb      	ldrh	r3, [r7, #6]
 8003be4:	4013      	ands	r3, r2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d006      	beq.n	8003bf8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003bea:	4a05      	ldr	r2, [pc, #20]	; (8003c00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bec:	88fb      	ldrh	r3, [r7, #6]
 8003bee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003bf0:	88fb      	ldrh	r3, [r7, #6]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7fe f906 	bl	8001e04 <HAL_GPIO_EXTI_Callback>
  }
}
 8003bf8:	bf00      	nop
 8003bfa:	3708      	adds	r7, #8
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	40013c00 	.word	0x40013c00

08003c04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d101      	bne.n	8003c16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e264      	b.n	80040e0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0301 	and.w	r3, r3, #1
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d075      	beq.n	8003d0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c22:	4ba3      	ldr	r3, [pc, #652]	; (8003eb0 <HAL_RCC_OscConfig+0x2ac>)
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f003 030c 	and.w	r3, r3, #12
 8003c2a:	2b04      	cmp	r3, #4
 8003c2c:	d00c      	beq.n	8003c48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c2e:	4ba0      	ldr	r3, [pc, #640]	; (8003eb0 <HAL_RCC_OscConfig+0x2ac>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c36:	2b08      	cmp	r3, #8
 8003c38:	d112      	bne.n	8003c60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c3a:	4b9d      	ldr	r3, [pc, #628]	; (8003eb0 <HAL_RCC_OscConfig+0x2ac>)
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c46:	d10b      	bne.n	8003c60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c48:	4b99      	ldr	r3, [pc, #612]	; (8003eb0 <HAL_RCC_OscConfig+0x2ac>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d05b      	beq.n	8003d0c <HAL_RCC_OscConfig+0x108>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d157      	bne.n	8003d0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e23f      	b.n	80040e0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c68:	d106      	bne.n	8003c78 <HAL_RCC_OscConfig+0x74>
 8003c6a:	4b91      	ldr	r3, [pc, #580]	; (8003eb0 <HAL_RCC_OscConfig+0x2ac>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a90      	ldr	r2, [pc, #576]	; (8003eb0 <HAL_RCC_OscConfig+0x2ac>)
 8003c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c74:	6013      	str	r3, [r2, #0]
 8003c76:	e01d      	b.n	8003cb4 <HAL_RCC_OscConfig+0xb0>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c80:	d10c      	bne.n	8003c9c <HAL_RCC_OscConfig+0x98>
 8003c82:	4b8b      	ldr	r3, [pc, #556]	; (8003eb0 <HAL_RCC_OscConfig+0x2ac>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a8a      	ldr	r2, [pc, #552]	; (8003eb0 <HAL_RCC_OscConfig+0x2ac>)
 8003c88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c8c:	6013      	str	r3, [r2, #0]
 8003c8e:	4b88      	ldr	r3, [pc, #544]	; (8003eb0 <HAL_RCC_OscConfig+0x2ac>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a87      	ldr	r2, [pc, #540]	; (8003eb0 <HAL_RCC_OscConfig+0x2ac>)
 8003c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c98:	6013      	str	r3, [r2, #0]
 8003c9a:	e00b      	b.n	8003cb4 <HAL_RCC_OscConfig+0xb0>
 8003c9c:	4b84      	ldr	r3, [pc, #528]	; (8003eb0 <HAL_RCC_OscConfig+0x2ac>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a83      	ldr	r2, [pc, #524]	; (8003eb0 <HAL_RCC_OscConfig+0x2ac>)
 8003ca2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ca6:	6013      	str	r3, [r2, #0]
 8003ca8:	4b81      	ldr	r3, [pc, #516]	; (8003eb0 <HAL_RCC_OscConfig+0x2ac>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a80      	ldr	r2, [pc, #512]	; (8003eb0 <HAL_RCC_OscConfig+0x2ac>)
 8003cae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d013      	beq.n	8003ce4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cbc:	f7fe fbf0 	bl	80024a0 <HAL_GetTick>
 8003cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cc4:	f7fe fbec 	bl	80024a0 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b64      	cmp	r3, #100	; 0x64
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e204      	b.n	80040e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cd6:	4b76      	ldr	r3, [pc, #472]	; (8003eb0 <HAL_RCC_OscConfig+0x2ac>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d0f0      	beq.n	8003cc4 <HAL_RCC_OscConfig+0xc0>
 8003ce2:	e014      	b.n	8003d0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce4:	f7fe fbdc 	bl	80024a0 <HAL_GetTick>
 8003ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cea:	e008      	b.n	8003cfe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cec:	f7fe fbd8 	bl	80024a0 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b64      	cmp	r3, #100	; 0x64
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e1f0      	b.n	80040e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cfe:	4b6c      	ldr	r3, [pc, #432]	; (8003eb0 <HAL_RCC_OscConfig+0x2ac>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1f0      	bne.n	8003cec <HAL_RCC_OscConfig+0xe8>
 8003d0a:	e000      	b.n	8003d0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d063      	beq.n	8003de2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d1a:	4b65      	ldr	r3, [pc, #404]	; (8003eb0 <HAL_RCC_OscConfig+0x2ac>)
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f003 030c 	and.w	r3, r3, #12
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d00b      	beq.n	8003d3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d26:	4b62      	ldr	r3, [pc, #392]	; (8003eb0 <HAL_RCC_OscConfig+0x2ac>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d2e:	2b08      	cmp	r3, #8
 8003d30:	d11c      	bne.n	8003d6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d32:	4b5f      	ldr	r3, [pc, #380]	; (8003eb0 <HAL_RCC_OscConfig+0x2ac>)
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d116      	bne.n	8003d6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d3e:	4b5c      	ldr	r3, [pc, #368]	; (8003eb0 <HAL_RCC_OscConfig+0x2ac>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0302 	and.w	r3, r3, #2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d005      	beq.n	8003d56 <HAL_RCC_OscConfig+0x152>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d001      	beq.n	8003d56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e1c4      	b.n	80040e0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d56:	4b56      	ldr	r3, [pc, #344]	; (8003eb0 <HAL_RCC_OscConfig+0x2ac>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	00db      	lsls	r3, r3, #3
 8003d64:	4952      	ldr	r1, [pc, #328]	; (8003eb0 <HAL_RCC_OscConfig+0x2ac>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d6a:	e03a      	b.n	8003de2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d020      	beq.n	8003db6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d74:	4b4f      	ldr	r3, [pc, #316]	; (8003eb4 <HAL_RCC_OscConfig+0x2b0>)
 8003d76:	2201      	movs	r2, #1
 8003d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d7a:	f7fe fb91 	bl	80024a0 <HAL_GetTick>
 8003d7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d80:	e008      	b.n	8003d94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d82:	f7fe fb8d 	bl	80024a0 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d901      	bls.n	8003d94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e1a5      	b.n	80040e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d94:	4b46      	ldr	r3, [pc, #280]	; (8003eb0 <HAL_RCC_OscConfig+0x2ac>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0302 	and.w	r3, r3, #2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d0f0      	beq.n	8003d82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003da0:	4b43      	ldr	r3, [pc, #268]	; (8003eb0 <HAL_RCC_OscConfig+0x2ac>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	00db      	lsls	r3, r3, #3
 8003dae:	4940      	ldr	r1, [pc, #256]	; (8003eb0 <HAL_RCC_OscConfig+0x2ac>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	600b      	str	r3, [r1, #0]
 8003db4:	e015      	b.n	8003de2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003db6:	4b3f      	ldr	r3, [pc, #252]	; (8003eb4 <HAL_RCC_OscConfig+0x2b0>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dbc:	f7fe fb70 	bl	80024a0 <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dc4:	f7fe fb6c 	bl	80024a0 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e184      	b.n	80040e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dd6:	4b36      	ldr	r3, [pc, #216]	; (8003eb0 <HAL_RCC_OscConfig+0x2ac>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1f0      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0308 	and.w	r3, r3, #8
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d030      	beq.n	8003e50 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d016      	beq.n	8003e24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003df6:	4b30      	ldr	r3, [pc, #192]	; (8003eb8 <HAL_RCC_OscConfig+0x2b4>)
 8003df8:	2201      	movs	r2, #1
 8003dfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dfc:	f7fe fb50 	bl	80024a0 <HAL_GetTick>
 8003e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e02:	e008      	b.n	8003e16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e04:	f7fe fb4c 	bl	80024a0 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e164      	b.n	80040e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e16:	4b26      	ldr	r3, [pc, #152]	; (8003eb0 <HAL_RCC_OscConfig+0x2ac>)
 8003e18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d0f0      	beq.n	8003e04 <HAL_RCC_OscConfig+0x200>
 8003e22:	e015      	b.n	8003e50 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e24:	4b24      	ldr	r3, [pc, #144]	; (8003eb8 <HAL_RCC_OscConfig+0x2b4>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e2a:	f7fe fb39 	bl	80024a0 <HAL_GetTick>
 8003e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e30:	e008      	b.n	8003e44 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e32:	f7fe fb35 	bl	80024a0 <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d901      	bls.n	8003e44 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e14d      	b.n	80040e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e44:	4b1a      	ldr	r3, [pc, #104]	; (8003eb0 <HAL_RCC_OscConfig+0x2ac>)
 8003e46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d1f0      	bne.n	8003e32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0304 	and.w	r3, r3, #4
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	f000 80a0 	beq.w	8003f9e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e62:	4b13      	ldr	r3, [pc, #76]	; (8003eb0 <HAL_RCC_OscConfig+0x2ac>)
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d10f      	bne.n	8003e8e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e6e:	2300      	movs	r3, #0
 8003e70:	60bb      	str	r3, [r7, #8]
 8003e72:	4b0f      	ldr	r3, [pc, #60]	; (8003eb0 <HAL_RCC_OscConfig+0x2ac>)
 8003e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e76:	4a0e      	ldr	r2, [pc, #56]	; (8003eb0 <HAL_RCC_OscConfig+0x2ac>)
 8003e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e7e:	4b0c      	ldr	r3, [pc, #48]	; (8003eb0 <HAL_RCC_OscConfig+0x2ac>)
 8003e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e86:	60bb      	str	r3, [r7, #8]
 8003e88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e8e:	4b0b      	ldr	r3, [pc, #44]	; (8003ebc <HAL_RCC_OscConfig+0x2b8>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d121      	bne.n	8003ede <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e9a:	4b08      	ldr	r3, [pc, #32]	; (8003ebc <HAL_RCC_OscConfig+0x2b8>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a07      	ldr	r2, [pc, #28]	; (8003ebc <HAL_RCC_OscConfig+0x2b8>)
 8003ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ea4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ea6:	f7fe fafb 	bl	80024a0 <HAL_GetTick>
 8003eaa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eac:	e011      	b.n	8003ed2 <HAL_RCC_OscConfig+0x2ce>
 8003eae:	bf00      	nop
 8003eb0:	40023800 	.word	0x40023800
 8003eb4:	42470000 	.word	0x42470000
 8003eb8:	42470e80 	.word	0x42470e80
 8003ebc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ec0:	f7fe faee 	bl	80024a0 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e106      	b.n	80040e0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ed2:	4b85      	ldr	r3, [pc, #532]	; (80040e8 <HAL_RCC_OscConfig+0x4e4>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d0f0      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d106      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x2f0>
 8003ee6:	4b81      	ldr	r3, [pc, #516]	; (80040ec <HAL_RCC_OscConfig+0x4e8>)
 8003ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eea:	4a80      	ldr	r2, [pc, #512]	; (80040ec <HAL_RCC_OscConfig+0x4e8>)
 8003eec:	f043 0301 	orr.w	r3, r3, #1
 8003ef0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ef2:	e01c      	b.n	8003f2e <HAL_RCC_OscConfig+0x32a>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	2b05      	cmp	r3, #5
 8003efa:	d10c      	bne.n	8003f16 <HAL_RCC_OscConfig+0x312>
 8003efc:	4b7b      	ldr	r3, [pc, #492]	; (80040ec <HAL_RCC_OscConfig+0x4e8>)
 8003efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f00:	4a7a      	ldr	r2, [pc, #488]	; (80040ec <HAL_RCC_OscConfig+0x4e8>)
 8003f02:	f043 0304 	orr.w	r3, r3, #4
 8003f06:	6713      	str	r3, [r2, #112]	; 0x70
 8003f08:	4b78      	ldr	r3, [pc, #480]	; (80040ec <HAL_RCC_OscConfig+0x4e8>)
 8003f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0c:	4a77      	ldr	r2, [pc, #476]	; (80040ec <HAL_RCC_OscConfig+0x4e8>)
 8003f0e:	f043 0301 	orr.w	r3, r3, #1
 8003f12:	6713      	str	r3, [r2, #112]	; 0x70
 8003f14:	e00b      	b.n	8003f2e <HAL_RCC_OscConfig+0x32a>
 8003f16:	4b75      	ldr	r3, [pc, #468]	; (80040ec <HAL_RCC_OscConfig+0x4e8>)
 8003f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1a:	4a74      	ldr	r2, [pc, #464]	; (80040ec <HAL_RCC_OscConfig+0x4e8>)
 8003f1c:	f023 0301 	bic.w	r3, r3, #1
 8003f20:	6713      	str	r3, [r2, #112]	; 0x70
 8003f22:	4b72      	ldr	r3, [pc, #456]	; (80040ec <HAL_RCC_OscConfig+0x4e8>)
 8003f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f26:	4a71      	ldr	r2, [pc, #452]	; (80040ec <HAL_RCC_OscConfig+0x4e8>)
 8003f28:	f023 0304 	bic.w	r3, r3, #4
 8003f2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d015      	beq.n	8003f62 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f36:	f7fe fab3 	bl	80024a0 <HAL_GetTick>
 8003f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f3c:	e00a      	b.n	8003f54 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f3e:	f7fe faaf 	bl	80024a0 <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d901      	bls.n	8003f54 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e0c5      	b.n	80040e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f54:	4b65      	ldr	r3, [pc, #404]	; (80040ec <HAL_RCC_OscConfig+0x4e8>)
 8003f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f58:	f003 0302 	and.w	r3, r3, #2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d0ee      	beq.n	8003f3e <HAL_RCC_OscConfig+0x33a>
 8003f60:	e014      	b.n	8003f8c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f62:	f7fe fa9d 	bl	80024a0 <HAL_GetTick>
 8003f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f68:	e00a      	b.n	8003f80 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f6a:	f7fe fa99 	bl	80024a0 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d901      	bls.n	8003f80 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e0af      	b.n	80040e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f80:	4b5a      	ldr	r3, [pc, #360]	; (80040ec <HAL_RCC_OscConfig+0x4e8>)
 8003f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f84:	f003 0302 	and.w	r3, r3, #2
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1ee      	bne.n	8003f6a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f8c:	7dfb      	ldrb	r3, [r7, #23]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d105      	bne.n	8003f9e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f92:	4b56      	ldr	r3, [pc, #344]	; (80040ec <HAL_RCC_OscConfig+0x4e8>)
 8003f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f96:	4a55      	ldr	r2, [pc, #340]	; (80040ec <HAL_RCC_OscConfig+0x4e8>)
 8003f98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f9c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f000 809b 	beq.w	80040de <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fa8:	4b50      	ldr	r3, [pc, #320]	; (80040ec <HAL_RCC_OscConfig+0x4e8>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f003 030c 	and.w	r3, r3, #12
 8003fb0:	2b08      	cmp	r3, #8
 8003fb2:	d05c      	beq.n	800406e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d141      	bne.n	8004040 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fbc:	4b4c      	ldr	r3, [pc, #304]	; (80040f0 <HAL_RCC_OscConfig+0x4ec>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc2:	f7fe fa6d 	bl	80024a0 <HAL_GetTick>
 8003fc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fc8:	e008      	b.n	8003fdc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fca:	f7fe fa69 	bl	80024a0 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d901      	bls.n	8003fdc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e081      	b.n	80040e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fdc:	4b43      	ldr	r3, [pc, #268]	; (80040ec <HAL_RCC_OscConfig+0x4e8>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1f0      	bne.n	8003fca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	69da      	ldr	r2, [r3, #28]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	431a      	orrs	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff6:	019b      	lsls	r3, r3, #6
 8003ff8:	431a      	orrs	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ffe:	085b      	lsrs	r3, r3, #1
 8004000:	3b01      	subs	r3, #1
 8004002:	041b      	lsls	r3, r3, #16
 8004004:	431a      	orrs	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400a:	061b      	lsls	r3, r3, #24
 800400c:	4937      	ldr	r1, [pc, #220]	; (80040ec <HAL_RCC_OscConfig+0x4e8>)
 800400e:	4313      	orrs	r3, r2
 8004010:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004012:	4b37      	ldr	r3, [pc, #220]	; (80040f0 <HAL_RCC_OscConfig+0x4ec>)
 8004014:	2201      	movs	r2, #1
 8004016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004018:	f7fe fa42 	bl	80024a0 <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004020:	f7fe fa3e 	bl	80024a0 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b02      	cmp	r3, #2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e056      	b.n	80040e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004032:	4b2e      	ldr	r3, [pc, #184]	; (80040ec <HAL_RCC_OscConfig+0x4e8>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d0f0      	beq.n	8004020 <HAL_RCC_OscConfig+0x41c>
 800403e:	e04e      	b.n	80040de <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004040:	4b2b      	ldr	r3, [pc, #172]	; (80040f0 <HAL_RCC_OscConfig+0x4ec>)
 8004042:	2200      	movs	r2, #0
 8004044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004046:	f7fe fa2b 	bl	80024a0 <HAL_GetTick>
 800404a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800404c:	e008      	b.n	8004060 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800404e:	f7fe fa27 	bl	80024a0 <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	2b02      	cmp	r3, #2
 800405a:	d901      	bls.n	8004060 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e03f      	b.n	80040e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004060:	4b22      	ldr	r3, [pc, #136]	; (80040ec <HAL_RCC_OscConfig+0x4e8>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d1f0      	bne.n	800404e <HAL_RCC_OscConfig+0x44a>
 800406c:	e037      	b.n	80040de <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	2b01      	cmp	r3, #1
 8004074:	d101      	bne.n	800407a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e032      	b.n	80040e0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800407a:	4b1c      	ldr	r3, [pc, #112]	; (80040ec <HAL_RCC_OscConfig+0x4e8>)
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	2b01      	cmp	r3, #1
 8004086:	d028      	beq.n	80040da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004092:	429a      	cmp	r2, r3
 8004094:	d121      	bne.n	80040da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d11a      	bne.n	80040da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040aa:	4013      	ands	r3, r2
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040b0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d111      	bne.n	80040da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c0:	085b      	lsrs	r3, r3, #1
 80040c2:	3b01      	subs	r3, #1
 80040c4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d107      	bne.n	80040da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d001      	beq.n	80040de <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e000      	b.n	80040e0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3718      	adds	r7, #24
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	40007000 	.word	0x40007000
 80040ec:	40023800 	.word	0x40023800
 80040f0:	42470060 	.word	0x42470060

080040f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d101      	bne.n	8004108 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e0cc      	b.n	80042a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004108:	4b68      	ldr	r3, [pc, #416]	; (80042ac <HAL_RCC_ClockConfig+0x1b8>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0307 	and.w	r3, r3, #7
 8004110:	683a      	ldr	r2, [r7, #0]
 8004112:	429a      	cmp	r2, r3
 8004114:	d90c      	bls.n	8004130 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004116:	4b65      	ldr	r3, [pc, #404]	; (80042ac <HAL_RCC_ClockConfig+0x1b8>)
 8004118:	683a      	ldr	r2, [r7, #0]
 800411a:	b2d2      	uxtb	r2, r2
 800411c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800411e:	4b63      	ldr	r3, [pc, #396]	; (80042ac <HAL_RCC_ClockConfig+0x1b8>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0307 	and.w	r3, r3, #7
 8004126:	683a      	ldr	r2, [r7, #0]
 8004128:	429a      	cmp	r2, r3
 800412a:	d001      	beq.n	8004130 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e0b8      	b.n	80042a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0302 	and.w	r3, r3, #2
 8004138:	2b00      	cmp	r3, #0
 800413a:	d020      	beq.n	800417e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0304 	and.w	r3, r3, #4
 8004144:	2b00      	cmp	r3, #0
 8004146:	d005      	beq.n	8004154 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004148:	4b59      	ldr	r3, [pc, #356]	; (80042b0 <HAL_RCC_ClockConfig+0x1bc>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	4a58      	ldr	r2, [pc, #352]	; (80042b0 <HAL_RCC_ClockConfig+0x1bc>)
 800414e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004152:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0308 	and.w	r3, r3, #8
 800415c:	2b00      	cmp	r3, #0
 800415e:	d005      	beq.n	800416c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004160:	4b53      	ldr	r3, [pc, #332]	; (80042b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	4a52      	ldr	r2, [pc, #328]	; (80042b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004166:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800416a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800416c:	4b50      	ldr	r3, [pc, #320]	; (80042b0 <HAL_RCC_ClockConfig+0x1bc>)
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	494d      	ldr	r1, [pc, #308]	; (80042b0 <HAL_RCC_ClockConfig+0x1bc>)
 800417a:	4313      	orrs	r3, r2
 800417c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	2b00      	cmp	r3, #0
 8004188:	d044      	beq.n	8004214 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d107      	bne.n	80041a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004192:	4b47      	ldr	r3, [pc, #284]	; (80042b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d119      	bne.n	80041d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e07f      	b.n	80042a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d003      	beq.n	80041b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041ae:	2b03      	cmp	r3, #3
 80041b0:	d107      	bne.n	80041c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041b2:	4b3f      	ldr	r3, [pc, #252]	; (80042b0 <HAL_RCC_ClockConfig+0x1bc>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d109      	bne.n	80041d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e06f      	b.n	80042a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041c2:	4b3b      	ldr	r3, [pc, #236]	; (80042b0 <HAL_RCC_ClockConfig+0x1bc>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e067      	b.n	80042a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041d2:	4b37      	ldr	r3, [pc, #220]	; (80042b0 <HAL_RCC_ClockConfig+0x1bc>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f023 0203 	bic.w	r2, r3, #3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	4934      	ldr	r1, [pc, #208]	; (80042b0 <HAL_RCC_ClockConfig+0x1bc>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041e4:	f7fe f95c 	bl	80024a0 <HAL_GetTick>
 80041e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ea:	e00a      	b.n	8004202 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041ec:	f7fe f958 	bl	80024a0 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e04f      	b.n	80042a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004202:	4b2b      	ldr	r3, [pc, #172]	; (80042b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f003 020c 	and.w	r2, r3, #12
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	429a      	cmp	r2, r3
 8004212:	d1eb      	bne.n	80041ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004214:	4b25      	ldr	r3, [pc, #148]	; (80042ac <HAL_RCC_ClockConfig+0x1b8>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0307 	and.w	r3, r3, #7
 800421c:	683a      	ldr	r2, [r7, #0]
 800421e:	429a      	cmp	r2, r3
 8004220:	d20c      	bcs.n	800423c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004222:	4b22      	ldr	r3, [pc, #136]	; (80042ac <HAL_RCC_ClockConfig+0x1b8>)
 8004224:	683a      	ldr	r2, [r7, #0]
 8004226:	b2d2      	uxtb	r2, r2
 8004228:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800422a:	4b20      	ldr	r3, [pc, #128]	; (80042ac <HAL_RCC_ClockConfig+0x1b8>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0307 	and.w	r3, r3, #7
 8004232:	683a      	ldr	r2, [r7, #0]
 8004234:	429a      	cmp	r2, r3
 8004236:	d001      	beq.n	800423c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e032      	b.n	80042a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0304 	and.w	r3, r3, #4
 8004244:	2b00      	cmp	r3, #0
 8004246:	d008      	beq.n	800425a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004248:	4b19      	ldr	r3, [pc, #100]	; (80042b0 <HAL_RCC_ClockConfig+0x1bc>)
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	4916      	ldr	r1, [pc, #88]	; (80042b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004256:	4313      	orrs	r3, r2
 8004258:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0308 	and.w	r3, r3, #8
 8004262:	2b00      	cmp	r3, #0
 8004264:	d009      	beq.n	800427a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004266:	4b12      	ldr	r3, [pc, #72]	; (80042b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	00db      	lsls	r3, r3, #3
 8004274:	490e      	ldr	r1, [pc, #56]	; (80042b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004276:	4313      	orrs	r3, r2
 8004278:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800427a:	f000 f821 	bl	80042c0 <HAL_RCC_GetSysClockFreq>
 800427e:	4602      	mov	r2, r0
 8004280:	4b0b      	ldr	r3, [pc, #44]	; (80042b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	091b      	lsrs	r3, r3, #4
 8004286:	f003 030f 	and.w	r3, r3, #15
 800428a:	490a      	ldr	r1, [pc, #40]	; (80042b4 <HAL_RCC_ClockConfig+0x1c0>)
 800428c:	5ccb      	ldrb	r3, [r1, r3]
 800428e:	fa22 f303 	lsr.w	r3, r2, r3
 8004292:	4a09      	ldr	r2, [pc, #36]	; (80042b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004294:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004296:	4b09      	ldr	r3, [pc, #36]	; (80042bc <HAL_RCC_ClockConfig+0x1c8>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4618      	mov	r0, r3
 800429c:	f7fe f8bc 	bl	8002418 <HAL_InitTick>

  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3710      	adds	r7, #16
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	40023c00 	.word	0x40023c00
 80042b0:	40023800 	.word	0x40023800
 80042b4:	0800a0cc 	.word	0x0800a0cc
 80042b8:	2000000c 	.word	0x2000000c
 80042bc:	20000010 	.word	0x20000010

080042c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80042c4:	b084      	sub	sp, #16
 80042c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042c8:	2300      	movs	r3, #0
 80042ca:	607b      	str	r3, [r7, #4]
 80042cc:	2300      	movs	r3, #0
 80042ce:	60fb      	str	r3, [r7, #12]
 80042d0:	2300      	movs	r3, #0
 80042d2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80042d4:	2300      	movs	r3, #0
 80042d6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042d8:	4b67      	ldr	r3, [pc, #412]	; (8004478 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f003 030c 	and.w	r3, r3, #12
 80042e0:	2b08      	cmp	r3, #8
 80042e2:	d00d      	beq.n	8004300 <HAL_RCC_GetSysClockFreq+0x40>
 80042e4:	2b08      	cmp	r3, #8
 80042e6:	f200 80bd 	bhi.w	8004464 <HAL_RCC_GetSysClockFreq+0x1a4>
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d002      	beq.n	80042f4 <HAL_RCC_GetSysClockFreq+0x34>
 80042ee:	2b04      	cmp	r3, #4
 80042f0:	d003      	beq.n	80042fa <HAL_RCC_GetSysClockFreq+0x3a>
 80042f2:	e0b7      	b.n	8004464 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042f4:	4b61      	ldr	r3, [pc, #388]	; (800447c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80042f6:	60bb      	str	r3, [r7, #8]
       break;
 80042f8:	e0b7      	b.n	800446a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042fa:	4b61      	ldr	r3, [pc, #388]	; (8004480 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80042fc:	60bb      	str	r3, [r7, #8]
      break;
 80042fe:	e0b4      	b.n	800446a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004300:	4b5d      	ldr	r3, [pc, #372]	; (8004478 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004308:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800430a:	4b5b      	ldr	r3, [pc, #364]	; (8004478 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d04d      	beq.n	80043b2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004316:	4b58      	ldr	r3, [pc, #352]	; (8004478 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	099b      	lsrs	r3, r3, #6
 800431c:	461a      	mov	r2, r3
 800431e:	f04f 0300 	mov.w	r3, #0
 8004322:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004326:	f04f 0100 	mov.w	r1, #0
 800432a:	ea02 0800 	and.w	r8, r2, r0
 800432e:	ea03 0901 	and.w	r9, r3, r1
 8004332:	4640      	mov	r0, r8
 8004334:	4649      	mov	r1, r9
 8004336:	f04f 0200 	mov.w	r2, #0
 800433a:	f04f 0300 	mov.w	r3, #0
 800433e:	014b      	lsls	r3, r1, #5
 8004340:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004344:	0142      	lsls	r2, r0, #5
 8004346:	4610      	mov	r0, r2
 8004348:	4619      	mov	r1, r3
 800434a:	ebb0 0008 	subs.w	r0, r0, r8
 800434e:	eb61 0109 	sbc.w	r1, r1, r9
 8004352:	f04f 0200 	mov.w	r2, #0
 8004356:	f04f 0300 	mov.w	r3, #0
 800435a:	018b      	lsls	r3, r1, #6
 800435c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004360:	0182      	lsls	r2, r0, #6
 8004362:	1a12      	subs	r2, r2, r0
 8004364:	eb63 0301 	sbc.w	r3, r3, r1
 8004368:	f04f 0000 	mov.w	r0, #0
 800436c:	f04f 0100 	mov.w	r1, #0
 8004370:	00d9      	lsls	r1, r3, #3
 8004372:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004376:	00d0      	lsls	r0, r2, #3
 8004378:	4602      	mov	r2, r0
 800437a:	460b      	mov	r3, r1
 800437c:	eb12 0208 	adds.w	r2, r2, r8
 8004380:	eb43 0309 	adc.w	r3, r3, r9
 8004384:	f04f 0000 	mov.w	r0, #0
 8004388:	f04f 0100 	mov.w	r1, #0
 800438c:	0259      	lsls	r1, r3, #9
 800438e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004392:	0250      	lsls	r0, r2, #9
 8004394:	4602      	mov	r2, r0
 8004396:	460b      	mov	r3, r1
 8004398:	4610      	mov	r0, r2
 800439a:	4619      	mov	r1, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	461a      	mov	r2, r3
 80043a0:	f04f 0300 	mov.w	r3, #0
 80043a4:	f7fc fcc2 	bl	8000d2c <__aeabi_uldivmod>
 80043a8:	4602      	mov	r2, r0
 80043aa:	460b      	mov	r3, r1
 80043ac:	4613      	mov	r3, r2
 80043ae:	60fb      	str	r3, [r7, #12]
 80043b0:	e04a      	b.n	8004448 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043b2:	4b31      	ldr	r3, [pc, #196]	; (8004478 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	099b      	lsrs	r3, r3, #6
 80043b8:	461a      	mov	r2, r3
 80043ba:	f04f 0300 	mov.w	r3, #0
 80043be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80043c2:	f04f 0100 	mov.w	r1, #0
 80043c6:	ea02 0400 	and.w	r4, r2, r0
 80043ca:	ea03 0501 	and.w	r5, r3, r1
 80043ce:	4620      	mov	r0, r4
 80043d0:	4629      	mov	r1, r5
 80043d2:	f04f 0200 	mov.w	r2, #0
 80043d6:	f04f 0300 	mov.w	r3, #0
 80043da:	014b      	lsls	r3, r1, #5
 80043dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80043e0:	0142      	lsls	r2, r0, #5
 80043e2:	4610      	mov	r0, r2
 80043e4:	4619      	mov	r1, r3
 80043e6:	1b00      	subs	r0, r0, r4
 80043e8:	eb61 0105 	sbc.w	r1, r1, r5
 80043ec:	f04f 0200 	mov.w	r2, #0
 80043f0:	f04f 0300 	mov.w	r3, #0
 80043f4:	018b      	lsls	r3, r1, #6
 80043f6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80043fa:	0182      	lsls	r2, r0, #6
 80043fc:	1a12      	subs	r2, r2, r0
 80043fe:	eb63 0301 	sbc.w	r3, r3, r1
 8004402:	f04f 0000 	mov.w	r0, #0
 8004406:	f04f 0100 	mov.w	r1, #0
 800440a:	00d9      	lsls	r1, r3, #3
 800440c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004410:	00d0      	lsls	r0, r2, #3
 8004412:	4602      	mov	r2, r0
 8004414:	460b      	mov	r3, r1
 8004416:	1912      	adds	r2, r2, r4
 8004418:	eb45 0303 	adc.w	r3, r5, r3
 800441c:	f04f 0000 	mov.w	r0, #0
 8004420:	f04f 0100 	mov.w	r1, #0
 8004424:	0299      	lsls	r1, r3, #10
 8004426:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800442a:	0290      	lsls	r0, r2, #10
 800442c:	4602      	mov	r2, r0
 800442e:	460b      	mov	r3, r1
 8004430:	4610      	mov	r0, r2
 8004432:	4619      	mov	r1, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	461a      	mov	r2, r3
 8004438:	f04f 0300 	mov.w	r3, #0
 800443c:	f7fc fc76 	bl	8000d2c <__aeabi_uldivmod>
 8004440:	4602      	mov	r2, r0
 8004442:	460b      	mov	r3, r1
 8004444:	4613      	mov	r3, r2
 8004446:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004448:	4b0b      	ldr	r3, [pc, #44]	; (8004478 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	0c1b      	lsrs	r3, r3, #16
 800444e:	f003 0303 	and.w	r3, r3, #3
 8004452:	3301      	adds	r3, #1
 8004454:	005b      	lsls	r3, r3, #1
 8004456:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004458:	68fa      	ldr	r2, [r7, #12]
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004460:	60bb      	str	r3, [r7, #8]
      break;
 8004462:	e002      	b.n	800446a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004464:	4b05      	ldr	r3, [pc, #20]	; (800447c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004466:	60bb      	str	r3, [r7, #8]
      break;
 8004468:	bf00      	nop
    }
  }
  return sysclockfreq;
 800446a:	68bb      	ldr	r3, [r7, #8]
}
 800446c:	4618      	mov	r0, r3
 800446e:	3710      	adds	r7, #16
 8004470:	46bd      	mov	sp, r7
 8004472:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004476:	bf00      	nop
 8004478:	40023800 	.word	0x40023800
 800447c:	00f42400 	.word	0x00f42400
 8004480:	007a1200 	.word	0x007a1200

08004484 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004484:	b480      	push	{r7}
 8004486:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004488:	4b03      	ldr	r3, [pc, #12]	; (8004498 <HAL_RCC_GetHCLKFreq+0x14>)
 800448a:	681b      	ldr	r3, [r3, #0]
}
 800448c:	4618      	mov	r0, r3
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	2000000c 	.word	0x2000000c

0800449c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80044a0:	f7ff fff0 	bl	8004484 <HAL_RCC_GetHCLKFreq>
 80044a4:	4602      	mov	r2, r0
 80044a6:	4b05      	ldr	r3, [pc, #20]	; (80044bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	0a9b      	lsrs	r3, r3, #10
 80044ac:	f003 0307 	and.w	r3, r3, #7
 80044b0:	4903      	ldr	r1, [pc, #12]	; (80044c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044b2:	5ccb      	ldrb	r3, [r1, r3]
 80044b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	40023800 	.word	0x40023800
 80044c0:	0800a0dc 	.word	0x0800a0dc

080044c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80044c8:	f7ff ffdc 	bl	8004484 <HAL_RCC_GetHCLKFreq>
 80044cc:	4602      	mov	r2, r0
 80044ce:	4b05      	ldr	r3, [pc, #20]	; (80044e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	0b5b      	lsrs	r3, r3, #13
 80044d4:	f003 0307 	and.w	r3, r3, #7
 80044d8:	4903      	ldr	r1, [pc, #12]	; (80044e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044da:	5ccb      	ldrb	r3, [r1, r3]
 80044dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	40023800 	.word	0x40023800
 80044e8:	0800a0dc 	.word	0x0800a0dc

080044ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e041      	b.n	8004582 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d106      	bne.n	8004518 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f7fd fd0c 	bl	8001f30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2202      	movs	r2, #2
 800451c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	3304      	adds	r3, #4
 8004528:	4619      	mov	r1, r3
 800452a:	4610      	mov	r0, r2
 800452c:	f000 fd60 	bl	8004ff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3708      	adds	r7, #8
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800458a:	b580      	push	{r7, lr}
 800458c:	b082      	sub	sp, #8
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d101      	bne.n	800459c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e041      	b.n	8004620 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d106      	bne.n	80045b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 f839 	bl	8004628 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2202      	movs	r2, #2
 80045ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	3304      	adds	r3, #4
 80045c6:	4619      	mov	r1, r3
 80045c8:	4610      	mov	r0, r2
 80045ca:	f000 fd11 	bl	8004ff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2201      	movs	r2, #1
 80045d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2201      	movs	r2, #1
 80045da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2201      	movs	r2, #1
 80045e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2201      	movs	r2, #1
 80045ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2201      	movs	r2, #1
 80045f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2201      	movs	r2, #1
 80045fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2201      	movs	r2, #1
 8004602:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2201      	movs	r2, #1
 800460a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2201      	movs	r2, #1
 800461a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3708      	adds	r7, #8
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004630:	bf00      	nop
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b086      	sub	sp, #24
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
 8004648:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800464a:	2300      	movs	r3, #0
 800464c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d109      	bne.n	8004668 <HAL_TIM_PWM_Start_DMA+0x2c>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800465a:	b2db      	uxtb	r3, r3
 800465c:	2b02      	cmp	r3, #2
 800465e:	bf0c      	ite	eq
 8004660:	2301      	moveq	r3, #1
 8004662:	2300      	movne	r3, #0
 8004664:	b2db      	uxtb	r3, r3
 8004666:	e022      	b.n	80046ae <HAL_TIM_PWM_Start_DMA+0x72>
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	2b04      	cmp	r3, #4
 800466c:	d109      	bne.n	8004682 <HAL_TIM_PWM_Start_DMA+0x46>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b02      	cmp	r3, #2
 8004678:	bf0c      	ite	eq
 800467a:	2301      	moveq	r3, #1
 800467c:	2300      	movne	r3, #0
 800467e:	b2db      	uxtb	r3, r3
 8004680:	e015      	b.n	80046ae <HAL_TIM_PWM_Start_DMA+0x72>
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	2b08      	cmp	r3, #8
 8004686:	d109      	bne.n	800469c <HAL_TIM_PWM_Start_DMA+0x60>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800468e:	b2db      	uxtb	r3, r3
 8004690:	2b02      	cmp	r3, #2
 8004692:	bf0c      	ite	eq
 8004694:	2301      	moveq	r3, #1
 8004696:	2300      	movne	r3, #0
 8004698:	b2db      	uxtb	r3, r3
 800469a:	e008      	b.n	80046ae <HAL_TIM_PWM_Start_DMA+0x72>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	bf0c      	ite	eq
 80046a8:	2301      	moveq	r3, #1
 80046aa:	2300      	movne	r3, #0
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d001      	beq.n	80046b6 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80046b2:	2302      	movs	r3, #2
 80046b4:	e15d      	b.n	8004972 <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d109      	bne.n	80046d0 <HAL_TIM_PWM_Start_DMA+0x94>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	bf0c      	ite	eq
 80046c8:	2301      	moveq	r3, #1
 80046ca:	2300      	movne	r3, #0
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	e022      	b.n	8004716 <HAL_TIM_PWM_Start_DMA+0xda>
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	2b04      	cmp	r3, #4
 80046d4:	d109      	bne.n	80046ea <HAL_TIM_PWM_Start_DMA+0xae>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b01      	cmp	r3, #1
 80046e0:	bf0c      	ite	eq
 80046e2:	2301      	moveq	r3, #1
 80046e4:	2300      	movne	r3, #0
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	e015      	b.n	8004716 <HAL_TIM_PWM_Start_DMA+0xda>
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	2b08      	cmp	r3, #8
 80046ee:	d109      	bne.n	8004704 <HAL_TIM_PWM_Start_DMA+0xc8>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	bf0c      	ite	eq
 80046fc:	2301      	moveq	r3, #1
 80046fe:	2300      	movne	r3, #0
 8004700:	b2db      	uxtb	r3, r3
 8004702:	e008      	b.n	8004716 <HAL_TIM_PWM_Start_DMA+0xda>
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800470a:	b2db      	uxtb	r3, r3
 800470c:	2b01      	cmp	r3, #1
 800470e:	bf0c      	ite	eq
 8004710:	2301      	moveq	r3, #1
 8004712:	2300      	movne	r3, #0
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d024      	beq.n	8004764 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d104      	bne.n	800472a <HAL_TIM_PWM_Start_DMA+0xee>
 8004720:	887b      	ldrh	r3, [r7, #2]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d001      	beq.n	800472a <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e123      	b.n	8004972 <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d104      	bne.n	800473a <HAL_TIM_PWM_Start_DMA+0xfe>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2202      	movs	r2, #2
 8004734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004738:	e016      	b.n	8004768 <HAL_TIM_PWM_Start_DMA+0x12c>
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	2b04      	cmp	r3, #4
 800473e:	d104      	bne.n	800474a <HAL_TIM_PWM_Start_DMA+0x10e>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2202      	movs	r2, #2
 8004744:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004748:	e00e      	b.n	8004768 <HAL_TIM_PWM_Start_DMA+0x12c>
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	2b08      	cmp	r3, #8
 800474e:	d104      	bne.n	800475a <HAL_TIM_PWM_Start_DMA+0x11e>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2202      	movs	r2, #2
 8004754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004758:	e006      	b.n	8004768 <HAL_TIM_PWM_Start_DMA+0x12c>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2202      	movs	r2, #2
 800475e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004762:	e001      	b.n	8004768 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e104      	b.n	8004972 <HAL_TIM_PWM_Start_DMA+0x336>
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	2b0c      	cmp	r3, #12
 800476c:	f200 80ae 	bhi.w	80048cc <HAL_TIM_PWM_Start_DMA+0x290>
 8004770:	a201      	add	r2, pc, #4	; (adr r2, 8004778 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8004772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004776:	bf00      	nop
 8004778:	080047ad 	.word	0x080047ad
 800477c:	080048cd 	.word	0x080048cd
 8004780:	080048cd 	.word	0x080048cd
 8004784:	080048cd 	.word	0x080048cd
 8004788:	080047f5 	.word	0x080047f5
 800478c:	080048cd 	.word	0x080048cd
 8004790:	080048cd 	.word	0x080048cd
 8004794:	080048cd 	.word	0x080048cd
 8004798:	0800483d 	.word	0x0800483d
 800479c:	080048cd 	.word	0x080048cd
 80047a0:	080048cd 	.word	0x080048cd
 80047a4:	080048cd 	.word	0x080048cd
 80047a8:	08004885 	.word	0x08004885
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b0:	4a72      	ldr	r2, [pc, #456]	; (800497c <HAL_TIM_PWM_Start_DMA+0x340>)
 80047b2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b8:	4a71      	ldr	r2, [pc, #452]	; (8004980 <HAL_TIM_PWM_Start_DMA+0x344>)
 80047ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c0:	4a70      	ldr	r2, [pc, #448]	; (8004984 <HAL_TIM_PWM_Start_DMA+0x348>)
 80047c2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80047c8:	6879      	ldr	r1, [r7, #4]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	3334      	adds	r3, #52	; 0x34
 80047d0:	461a      	mov	r2, r3
 80047d2:	887b      	ldrh	r3, [r7, #2]
 80047d4:	f7fe fd7c 	bl	80032d0 <HAL_DMA_Start_IT>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e0c7      	b.n	8004972 <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68da      	ldr	r2, [r3, #12]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047f0:	60da      	str	r2, [r3, #12]
      break;
 80047f2:	e06e      	b.n	80048d2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f8:	4a60      	ldr	r2, [pc, #384]	; (800497c <HAL_TIM_PWM_Start_DMA+0x340>)
 80047fa:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004800:	4a5f      	ldr	r2, [pc, #380]	; (8004980 <HAL_TIM_PWM_Start_DMA+0x344>)
 8004802:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004808:	4a5e      	ldr	r2, [pc, #376]	; (8004984 <HAL_TIM_PWM_Start_DMA+0x348>)
 800480a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004810:	6879      	ldr	r1, [r7, #4]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	3338      	adds	r3, #56	; 0x38
 8004818:	461a      	mov	r2, r3
 800481a:	887b      	ldrh	r3, [r7, #2]
 800481c:	f7fe fd58 	bl	80032d0 <HAL_DMA_Start_IT>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d001      	beq.n	800482a <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e0a3      	b.n	8004972 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68da      	ldr	r2, [r3, #12]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004838:	60da      	str	r2, [r3, #12]
      break;
 800483a:	e04a      	b.n	80048d2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004840:	4a4e      	ldr	r2, [pc, #312]	; (800497c <HAL_TIM_PWM_Start_DMA+0x340>)
 8004842:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004848:	4a4d      	ldr	r2, [pc, #308]	; (8004980 <HAL_TIM_PWM_Start_DMA+0x344>)
 800484a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004850:	4a4c      	ldr	r2, [pc, #304]	; (8004984 <HAL_TIM_PWM_Start_DMA+0x348>)
 8004852:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004858:	6879      	ldr	r1, [r7, #4]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	333c      	adds	r3, #60	; 0x3c
 8004860:	461a      	mov	r2, r3
 8004862:	887b      	ldrh	r3, [r7, #2]
 8004864:	f7fe fd34 	bl	80032d0 <HAL_DMA_Start_IT>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d001      	beq.n	8004872 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e07f      	b.n	8004972 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68da      	ldr	r2, [r3, #12]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004880:	60da      	str	r2, [r3, #12]
      break;
 8004882:	e026      	b.n	80048d2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004888:	4a3c      	ldr	r2, [pc, #240]	; (800497c <HAL_TIM_PWM_Start_DMA+0x340>)
 800488a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004890:	4a3b      	ldr	r2, [pc, #236]	; (8004980 <HAL_TIM_PWM_Start_DMA+0x344>)
 8004892:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004898:	4a3a      	ldr	r2, [pc, #232]	; (8004984 <HAL_TIM_PWM_Start_DMA+0x348>)
 800489a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80048a0:	6879      	ldr	r1, [r7, #4]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	3340      	adds	r3, #64	; 0x40
 80048a8:	461a      	mov	r2, r3
 80048aa:	887b      	ldrh	r3, [r7, #2]
 80048ac:	f7fe fd10 	bl	80032d0 <HAL_DMA_Start_IT>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d001      	beq.n	80048ba <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e05b      	b.n	8004972 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68da      	ldr	r2, [r3, #12]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80048c8:	60da      	str	r2, [r3, #12]
      break;
 80048ca:	e002      	b.n	80048d2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	75fb      	strb	r3, [r7, #23]
      break;
 80048d0:	bf00      	nop
  }

  if (status == HAL_OK)
 80048d2:	7dfb      	ldrb	r3, [r7, #23]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d14b      	bne.n	8004970 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2201      	movs	r2, #1
 80048de:	68b9      	ldr	r1, [r7, #8]
 80048e0:	4618      	mov	r0, r3
 80048e2:	f000 fe2b 	bl	800553c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a27      	ldr	r2, [pc, #156]	; (8004988 <HAL_TIM_PWM_Start_DMA+0x34c>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d107      	bne.n	8004900 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048fe:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a20      	ldr	r2, [pc, #128]	; (8004988 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d018      	beq.n	800493c <HAL_TIM_PWM_Start_DMA+0x300>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004912:	d013      	beq.n	800493c <HAL_TIM_PWM_Start_DMA+0x300>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a1c      	ldr	r2, [pc, #112]	; (800498c <HAL_TIM_PWM_Start_DMA+0x350>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d00e      	beq.n	800493c <HAL_TIM_PWM_Start_DMA+0x300>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a1b      	ldr	r2, [pc, #108]	; (8004990 <HAL_TIM_PWM_Start_DMA+0x354>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d009      	beq.n	800493c <HAL_TIM_PWM_Start_DMA+0x300>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a19      	ldr	r2, [pc, #100]	; (8004994 <HAL_TIM_PWM_Start_DMA+0x358>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d004      	beq.n	800493c <HAL_TIM_PWM_Start_DMA+0x300>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a18      	ldr	r2, [pc, #96]	; (8004998 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d111      	bne.n	8004960 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f003 0307 	and.w	r3, r3, #7
 8004946:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	2b06      	cmp	r3, #6
 800494c:	d010      	beq.n	8004970 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f042 0201 	orr.w	r2, r2, #1
 800495c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800495e:	e007      	b.n	8004970 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f042 0201 	orr.w	r2, r2, #1
 800496e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004970:	7dfb      	ldrb	r3, [r7, #23]
}
 8004972:	4618      	mov	r0, r3
 8004974:	3718      	adds	r7, #24
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	08004ee1 	.word	0x08004ee1
 8004980:	08004f89 	.word	0x08004f89
 8004984:	08004e4f 	.word	0x08004e4f
 8004988:	40010000 	.word	0x40010000
 800498c:	40000400 	.word	0x40000400
 8004990:	40000800 	.word	0x40000800
 8004994:	40000c00 	.word	0x40000c00
 8004998:	40014000 	.word	0x40014000

0800499c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049a6:	2300      	movs	r3, #0
 80049a8:	73fb      	strb	r3, [r7, #15]
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	2b0c      	cmp	r3, #12
 80049ae:	d855      	bhi.n	8004a5c <HAL_TIM_PWM_Stop_DMA+0xc0>
 80049b0:	a201      	add	r2, pc, #4	; (adr r2, 80049b8 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80049b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b6:	bf00      	nop
 80049b8:	080049ed 	.word	0x080049ed
 80049bc:	08004a5d 	.word	0x08004a5d
 80049c0:	08004a5d 	.word	0x08004a5d
 80049c4:	08004a5d 	.word	0x08004a5d
 80049c8:	08004a09 	.word	0x08004a09
 80049cc:	08004a5d 	.word	0x08004a5d
 80049d0:	08004a5d 	.word	0x08004a5d
 80049d4:	08004a5d 	.word	0x08004a5d
 80049d8:	08004a25 	.word	0x08004a25
 80049dc:	08004a5d 	.word	0x08004a5d
 80049e0:	08004a5d 	.word	0x08004a5d
 80049e4:	08004a5d 	.word	0x08004a5d
 80049e8:	08004a41 	.word	0x08004a41
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68da      	ldr	r2, [r3, #12]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80049fa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a00:	4618      	mov	r0, r3
 8004a02:	f7fe fcbd 	bl	8003380 <HAL_DMA_Abort_IT>
      break;
 8004a06:	e02c      	b.n	8004a62 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68da      	ldr	r2, [r3, #12]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a16:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7fe fcaf 	bl	8003380 <HAL_DMA_Abort_IT>
      break;
 8004a22:	e01e      	b.n	8004a62 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68da      	ldr	r2, [r3, #12]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a32:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7fe fca1 	bl	8003380 <HAL_DMA_Abort_IT>
      break;
 8004a3e:	e010      	b.n	8004a62 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68da      	ldr	r2, [r3, #12]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a4e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a54:	4618      	mov	r0, r3
 8004a56:	f7fe fc93 	bl	8003380 <HAL_DMA_Abort_IT>
      break;
 8004a5a:	e002      	b.n	8004a62 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	73fb      	strb	r3, [r7, #15]
      break;
 8004a60:	bf00      	nop
  }

  if (status == HAL_OK)
 8004a62:	7bfb      	ldrb	r3, [r7, #15]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d157      	bne.n	8004b18 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	6839      	ldr	r1, [r7, #0]
 8004a70:	4618      	mov	r0, r3
 8004a72:	f000 fd63 	bl	800553c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a2a      	ldr	r2, [pc, #168]	; (8004b24 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d117      	bne.n	8004ab0 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	6a1a      	ldr	r2, [r3, #32]
 8004a86:	f241 1311 	movw	r3, #4369	; 0x1111
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d10f      	bne.n	8004ab0 <HAL_TIM_PWM_Stop_DMA+0x114>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	6a1a      	ldr	r2, [r3, #32]
 8004a96:	f240 4344 	movw	r3, #1092	; 0x444
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d107      	bne.n	8004ab0 <HAL_TIM_PWM_Stop_DMA+0x114>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004aae:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	6a1a      	ldr	r2, [r3, #32]
 8004ab6:	f241 1311 	movw	r3, #4369	; 0x1111
 8004aba:	4013      	ands	r3, r2
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d10f      	bne.n	8004ae0 <HAL_TIM_PWM_Stop_DMA+0x144>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	6a1a      	ldr	r2, [r3, #32]
 8004ac6:	f240 4344 	movw	r3, #1092	; 0x444
 8004aca:	4013      	ands	r3, r2
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d107      	bne.n	8004ae0 <HAL_TIM_PWM_Stop_DMA+0x144>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f022 0201 	bic.w	r2, r2, #1
 8004ade:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d104      	bne.n	8004af0 <HAL_TIM_PWM_Stop_DMA+0x154>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004aee:	e013      	b.n	8004b18 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	2b04      	cmp	r3, #4
 8004af4:	d104      	bne.n	8004b00 <HAL_TIM_PWM_Stop_DMA+0x164>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2201      	movs	r2, #1
 8004afa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004afe:	e00b      	b.n	8004b18 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	2b08      	cmp	r3, #8
 8004b04:	d104      	bne.n	8004b10 <HAL_TIM_PWM_Stop_DMA+0x174>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b0e:	e003      	b.n	8004b18 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8004b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	40010000 	.word	0x40010000

08004b28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b086      	sub	sp, #24
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b34:	2300      	movs	r3, #0
 8004b36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d101      	bne.n	8004b46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b42:	2302      	movs	r3, #2
 8004b44:	e0ae      	b.n	8004ca4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2b0c      	cmp	r3, #12
 8004b52:	f200 809f 	bhi.w	8004c94 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004b56:	a201      	add	r2, pc, #4	; (adr r2, 8004b5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b5c:	08004b91 	.word	0x08004b91
 8004b60:	08004c95 	.word	0x08004c95
 8004b64:	08004c95 	.word	0x08004c95
 8004b68:	08004c95 	.word	0x08004c95
 8004b6c:	08004bd1 	.word	0x08004bd1
 8004b70:	08004c95 	.word	0x08004c95
 8004b74:	08004c95 	.word	0x08004c95
 8004b78:	08004c95 	.word	0x08004c95
 8004b7c:	08004c13 	.word	0x08004c13
 8004b80:	08004c95 	.word	0x08004c95
 8004b84:	08004c95 	.word	0x08004c95
 8004b88:	08004c95 	.word	0x08004c95
 8004b8c:	08004c53 	.word	0x08004c53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68b9      	ldr	r1, [r7, #8]
 8004b96:	4618      	mov	r0, r3
 8004b98:	f000 faaa 	bl	80050f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	699a      	ldr	r2, [r3, #24]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f042 0208 	orr.w	r2, r2, #8
 8004baa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	699a      	ldr	r2, [r3, #24]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f022 0204 	bic.w	r2, r2, #4
 8004bba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	6999      	ldr	r1, [r3, #24]
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	691a      	ldr	r2, [r3, #16]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	619a      	str	r2, [r3, #24]
      break;
 8004bce:	e064      	b.n	8004c9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68b9      	ldr	r1, [r7, #8]
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f000 faf0 	bl	80051bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	699a      	ldr	r2, [r3, #24]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	699a      	ldr	r2, [r3, #24]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	6999      	ldr	r1, [r3, #24]
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	021a      	lsls	r2, r3, #8
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	619a      	str	r2, [r3, #24]
      break;
 8004c10:	e043      	b.n	8004c9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68b9      	ldr	r1, [r7, #8]
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f000 fb3b 	bl	8005294 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	69da      	ldr	r2, [r3, #28]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f042 0208 	orr.w	r2, r2, #8
 8004c2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	69da      	ldr	r2, [r3, #28]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f022 0204 	bic.w	r2, r2, #4
 8004c3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	69d9      	ldr	r1, [r3, #28]
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	691a      	ldr	r2, [r3, #16]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	61da      	str	r2, [r3, #28]
      break;
 8004c50:	e023      	b.n	8004c9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68b9      	ldr	r1, [r7, #8]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f000 fb85 	bl	8005368 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	69da      	ldr	r2, [r3, #28]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	69da      	ldr	r2, [r3, #28]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	69d9      	ldr	r1, [r3, #28]
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	021a      	lsls	r2, r3, #8
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	61da      	str	r2, [r3, #28]
      break;
 8004c92:	e002      	b.n	8004c9a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	75fb      	strb	r3, [r7, #23]
      break;
 8004c98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ca2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3718      	adds	r7, #24
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d101      	bne.n	8004cc8 <HAL_TIM_ConfigClockSource+0x1c>
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	e0b4      	b.n	8004e32 <HAL_TIM_ConfigClockSource+0x186>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2202      	movs	r2, #2
 8004cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ce6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68ba      	ldr	r2, [r7, #8]
 8004cf6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d00:	d03e      	beq.n	8004d80 <HAL_TIM_ConfigClockSource+0xd4>
 8004d02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d06:	f200 8087 	bhi.w	8004e18 <HAL_TIM_ConfigClockSource+0x16c>
 8004d0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d0e:	f000 8086 	beq.w	8004e1e <HAL_TIM_ConfigClockSource+0x172>
 8004d12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d16:	d87f      	bhi.n	8004e18 <HAL_TIM_ConfigClockSource+0x16c>
 8004d18:	2b70      	cmp	r3, #112	; 0x70
 8004d1a:	d01a      	beq.n	8004d52 <HAL_TIM_ConfigClockSource+0xa6>
 8004d1c:	2b70      	cmp	r3, #112	; 0x70
 8004d1e:	d87b      	bhi.n	8004e18 <HAL_TIM_ConfigClockSource+0x16c>
 8004d20:	2b60      	cmp	r3, #96	; 0x60
 8004d22:	d050      	beq.n	8004dc6 <HAL_TIM_ConfigClockSource+0x11a>
 8004d24:	2b60      	cmp	r3, #96	; 0x60
 8004d26:	d877      	bhi.n	8004e18 <HAL_TIM_ConfigClockSource+0x16c>
 8004d28:	2b50      	cmp	r3, #80	; 0x50
 8004d2a:	d03c      	beq.n	8004da6 <HAL_TIM_ConfigClockSource+0xfa>
 8004d2c:	2b50      	cmp	r3, #80	; 0x50
 8004d2e:	d873      	bhi.n	8004e18 <HAL_TIM_ConfigClockSource+0x16c>
 8004d30:	2b40      	cmp	r3, #64	; 0x40
 8004d32:	d058      	beq.n	8004de6 <HAL_TIM_ConfigClockSource+0x13a>
 8004d34:	2b40      	cmp	r3, #64	; 0x40
 8004d36:	d86f      	bhi.n	8004e18 <HAL_TIM_ConfigClockSource+0x16c>
 8004d38:	2b30      	cmp	r3, #48	; 0x30
 8004d3a:	d064      	beq.n	8004e06 <HAL_TIM_ConfigClockSource+0x15a>
 8004d3c:	2b30      	cmp	r3, #48	; 0x30
 8004d3e:	d86b      	bhi.n	8004e18 <HAL_TIM_ConfigClockSource+0x16c>
 8004d40:	2b20      	cmp	r3, #32
 8004d42:	d060      	beq.n	8004e06 <HAL_TIM_ConfigClockSource+0x15a>
 8004d44:	2b20      	cmp	r3, #32
 8004d46:	d867      	bhi.n	8004e18 <HAL_TIM_ConfigClockSource+0x16c>
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d05c      	beq.n	8004e06 <HAL_TIM_ConfigClockSource+0x15a>
 8004d4c:	2b10      	cmp	r3, #16
 8004d4e:	d05a      	beq.n	8004e06 <HAL_TIM_ConfigClockSource+0x15a>
 8004d50:	e062      	b.n	8004e18 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6818      	ldr	r0, [r3, #0]
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	6899      	ldr	r1, [r3, #8]
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	685a      	ldr	r2, [r3, #4]
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	f000 fbcb 	bl	80054fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68ba      	ldr	r2, [r7, #8]
 8004d7c:	609a      	str	r2, [r3, #8]
      break;
 8004d7e:	e04f      	b.n	8004e20 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6818      	ldr	r0, [r3, #0]
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	6899      	ldr	r1, [r3, #8]
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	685a      	ldr	r2, [r3, #4]
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	f000 fbb4 	bl	80054fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	689a      	ldr	r2, [r3, #8]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004da2:	609a      	str	r2, [r3, #8]
      break;
 8004da4:	e03c      	b.n	8004e20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6818      	ldr	r0, [r3, #0]
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	6859      	ldr	r1, [r3, #4]
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	461a      	mov	r2, r3
 8004db4:	f000 fb28 	bl	8005408 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2150      	movs	r1, #80	; 0x50
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f000 fb81 	bl	80054c6 <TIM_ITRx_SetConfig>
      break;
 8004dc4:	e02c      	b.n	8004e20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6818      	ldr	r0, [r3, #0]
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	6859      	ldr	r1, [r3, #4]
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	f000 fb47 	bl	8005466 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2160      	movs	r1, #96	; 0x60
 8004dde:	4618      	mov	r0, r3
 8004de0:	f000 fb71 	bl	80054c6 <TIM_ITRx_SetConfig>
      break;
 8004de4:	e01c      	b.n	8004e20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6818      	ldr	r0, [r3, #0]
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	6859      	ldr	r1, [r3, #4]
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	461a      	mov	r2, r3
 8004df4:	f000 fb08 	bl	8005408 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2140      	movs	r1, #64	; 0x40
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f000 fb61 	bl	80054c6 <TIM_ITRx_SetConfig>
      break;
 8004e04:	e00c      	b.n	8004e20 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4619      	mov	r1, r3
 8004e10:	4610      	mov	r0, r2
 8004e12:	f000 fb58 	bl	80054c6 <TIM_ITRx_SetConfig>
      break;
 8004e16:	e003      	b.n	8004e20 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e1c:	e000      	b.n	8004e20 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b083      	sub	sp, #12
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004e42:	bf00      	nop
 8004e44:	370c      	adds	r7, #12
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr

08004e4e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b084      	sub	sp, #16
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d107      	bne.n	8004e76 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e74:	e02a      	b.n	8004ecc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d107      	bne.n	8004e90 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2202      	movs	r2, #2
 8004e84:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e8e:	e01d      	b.n	8004ecc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d107      	bne.n	8004eaa <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2204      	movs	r2, #4
 8004e9e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ea8:	e010      	b.n	8004ecc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d107      	bne.n	8004ec4 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2208      	movs	r2, #8
 8004eb8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ec2:	e003      	b.n	8004ecc <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	f7ff ffb4 	bl	8004e3a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	771a      	strb	r2, [r3, #28]
}
 8004ed8:	bf00      	nop
 8004eda:	3710      	adds	r7, #16
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eec:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d10b      	bne.n	8004f10 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2201      	movs	r2, #1
 8004efc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	69db      	ldr	r3, [r3, #28]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d136      	bne.n	8004f74 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f0e:	e031      	b.n	8004f74 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d10b      	bne.n	8004f32 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2202      	movs	r2, #2
 8004f1e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	69db      	ldr	r3, [r3, #28]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d125      	bne.n	8004f74 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f30:	e020      	b.n	8004f74 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d10b      	bne.n	8004f54 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2204      	movs	r2, #4
 8004f40:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	69db      	ldr	r3, [r3, #28]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d114      	bne.n	8004f74 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f52:	e00f      	b.n	8004f74 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d10a      	bne.n	8004f74 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2208      	movs	r2, #8
 8004f62:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	69db      	ldr	r3, [r3, #28]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d103      	bne.n	8004f74 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f74:	68f8      	ldr	r0, [r7, #12]
 8004f76:	f7fc fc27 	bl	80017c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	771a      	strb	r2, [r3, #28]
}
 8004f80:	bf00      	nop
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f94:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d103      	bne.n	8004fa8 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	771a      	strb	r2, [r3, #28]
 8004fa6:	e019      	b.n	8004fdc <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d103      	bne.n	8004fba <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2202      	movs	r2, #2
 8004fb6:	771a      	strb	r2, [r3, #28]
 8004fb8:	e010      	b.n	8004fdc <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d103      	bne.n	8004fcc <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2204      	movs	r2, #4
 8004fc8:	771a      	strb	r2, [r3, #28]
 8004fca:	e007      	b.n	8004fdc <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d102      	bne.n	8004fdc <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2208      	movs	r2, #8
 8004fda:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004fdc:	68f8      	ldr	r0, [r7, #12]
 8004fde:	f7fc fb73 	bl	80016c8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	771a      	strb	r2, [r3, #28]
}
 8004fe8:	bf00      	nop
 8004fea:	3710      	adds	r7, #16
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b085      	sub	sp, #20
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a34      	ldr	r2, [pc, #208]	; (80050d4 <TIM_Base_SetConfig+0xe4>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d00f      	beq.n	8005028 <TIM_Base_SetConfig+0x38>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800500e:	d00b      	beq.n	8005028 <TIM_Base_SetConfig+0x38>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4a31      	ldr	r2, [pc, #196]	; (80050d8 <TIM_Base_SetConfig+0xe8>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d007      	beq.n	8005028 <TIM_Base_SetConfig+0x38>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4a30      	ldr	r2, [pc, #192]	; (80050dc <TIM_Base_SetConfig+0xec>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d003      	beq.n	8005028 <TIM_Base_SetConfig+0x38>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a2f      	ldr	r2, [pc, #188]	; (80050e0 <TIM_Base_SetConfig+0xf0>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d108      	bne.n	800503a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800502e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	4313      	orrs	r3, r2
 8005038:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a25      	ldr	r2, [pc, #148]	; (80050d4 <TIM_Base_SetConfig+0xe4>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d01b      	beq.n	800507a <TIM_Base_SetConfig+0x8a>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005048:	d017      	beq.n	800507a <TIM_Base_SetConfig+0x8a>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a22      	ldr	r2, [pc, #136]	; (80050d8 <TIM_Base_SetConfig+0xe8>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d013      	beq.n	800507a <TIM_Base_SetConfig+0x8a>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a21      	ldr	r2, [pc, #132]	; (80050dc <TIM_Base_SetConfig+0xec>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d00f      	beq.n	800507a <TIM_Base_SetConfig+0x8a>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a20      	ldr	r2, [pc, #128]	; (80050e0 <TIM_Base_SetConfig+0xf0>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d00b      	beq.n	800507a <TIM_Base_SetConfig+0x8a>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a1f      	ldr	r2, [pc, #124]	; (80050e4 <TIM_Base_SetConfig+0xf4>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d007      	beq.n	800507a <TIM_Base_SetConfig+0x8a>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a1e      	ldr	r2, [pc, #120]	; (80050e8 <TIM_Base_SetConfig+0xf8>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d003      	beq.n	800507a <TIM_Base_SetConfig+0x8a>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a1d      	ldr	r2, [pc, #116]	; (80050ec <TIM_Base_SetConfig+0xfc>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d108      	bne.n	800508c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005080:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	4313      	orrs	r3, r2
 800508a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	4313      	orrs	r3, r2
 8005098:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	689a      	ldr	r2, [r3, #8]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a08      	ldr	r2, [pc, #32]	; (80050d4 <TIM_Base_SetConfig+0xe4>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d103      	bne.n	80050c0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	691a      	ldr	r2, [r3, #16]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	615a      	str	r2, [r3, #20]
}
 80050c6:	bf00      	nop
 80050c8:	3714      	adds	r7, #20
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	40010000 	.word	0x40010000
 80050d8:	40000400 	.word	0x40000400
 80050dc:	40000800 	.word	0x40000800
 80050e0:	40000c00 	.word	0x40000c00
 80050e4:	40014000 	.word	0x40014000
 80050e8:	40014400 	.word	0x40014400
 80050ec:	40014800 	.word	0x40014800

080050f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b087      	sub	sp, #28
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	f023 0201 	bic.w	r2, r3, #1
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800511e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f023 0303 	bic.w	r3, r3, #3
 8005126:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	4313      	orrs	r3, r2
 8005130:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	f023 0302 	bic.w	r3, r3, #2
 8005138:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	4313      	orrs	r3, r2
 8005142:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a1c      	ldr	r2, [pc, #112]	; (80051b8 <TIM_OC1_SetConfig+0xc8>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d10c      	bne.n	8005166 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	f023 0308 	bic.w	r3, r3, #8
 8005152:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	697a      	ldr	r2, [r7, #20]
 800515a:	4313      	orrs	r3, r2
 800515c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	f023 0304 	bic.w	r3, r3, #4
 8005164:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a13      	ldr	r2, [pc, #76]	; (80051b8 <TIM_OC1_SetConfig+0xc8>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d111      	bne.n	8005192 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005174:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800517c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	4313      	orrs	r3, r2
 8005186:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	699b      	ldr	r3, [r3, #24]
 800518c:	693a      	ldr	r2, [r7, #16]
 800518e:	4313      	orrs	r3, r2
 8005190:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	685a      	ldr	r2, [r3, #4]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	697a      	ldr	r2, [r7, #20]
 80051aa:	621a      	str	r2, [r3, #32]
}
 80051ac:	bf00      	nop
 80051ae:	371c      	adds	r7, #28
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr
 80051b8:	40010000 	.word	0x40010000

080051bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051bc:	b480      	push	{r7}
 80051be:	b087      	sub	sp, #28
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a1b      	ldr	r3, [r3, #32]
 80051ca:	f023 0210 	bic.w	r2, r3, #16
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	021b      	lsls	r3, r3, #8
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	f023 0320 	bic.w	r3, r3, #32
 8005206:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	011b      	lsls	r3, r3, #4
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	4313      	orrs	r3, r2
 8005212:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a1e      	ldr	r2, [pc, #120]	; (8005290 <TIM_OC2_SetConfig+0xd4>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d10d      	bne.n	8005238 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005222:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	011b      	lsls	r3, r3, #4
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	4313      	orrs	r3, r2
 800522e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005236:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a15      	ldr	r2, [pc, #84]	; (8005290 <TIM_OC2_SetConfig+0xd4>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d113      	bne.n	8005268 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005246:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800524e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	695b      	ldr	r3, [r3, #20]
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	4313      	orrs	r3, r2
 800525a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	699b      	ldr	r3, [r3, #24]
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	693a      	ldr	r2, [r7, #16]
 8005264:	4313      	orrs	r3, r2
 8005266:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	685a      	ldr	r2, [r3, #4]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	621a      	str	r2, [r3, #32]
}
 8005282:	bf00      	nop
 8005284:	371c      	adds	r7, #28
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	40010000 	.word	0x40010000

08005294 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005294:	b480      	push	{r7}
 8005296:	b087      	sub	sp, #28
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a1b      	ldr	r3, [r3, #32]
 80052ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	69db      	ldr	r3, [r3, #28]
 80052ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f023 0303 	bic.w	r3, r3, #3
 80052ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	021b      	lsls	r3, r3, #8
 80052e4:	697a      	ldr	r2, [r7, #20]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a1d      	ldr	r2, [pc, #116]	; (8005364 <TIM_OC3_SetConfig+0xd0>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d10d      	bne.n	800530e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	021b      	lsls	r3, r3, #8
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	4313      	orrs	r3, r2
 8005304:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800530c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a14      	ldr	r2, [pc, #80]	; (8005364 <TIM_OC3_SetConfig+0xd0>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d113      	bne.n	800533e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800531c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005324:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	695b      	ldr	r3, [r3, #20]
 800532a:	011b      	lsls	r3, r3, #4
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	4313      	orrs	r3, r2
 8005330:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	011b      	lsls	r3, r3, #4
 8005338:	693a      	ldr	r2, [r7, #16]
 800533a:	4313      	orrs	r3, r2
 800533c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	693a      	ldr	r2, [r7, #16]
 8005342:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	685a      	ldr	r2, [r3, #4]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	697a      	ldr	r2, [r7, #20]
 8005356:	621a      	str	r2, [r3, #32]
}
 8005358:	bf00      	nop
 800535a:	371c      	adds	r7, #28
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr
 8005364:	40010000 	.word	0x40010000

08005368 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005368:	b480      	push	{r7}
 800536a:	b087      	sub	sp, #28
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a1b      	ldr	r3, [r3, #32]
 8005376:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	69db      	ldr	r3, [r3, #28]
 800538e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800539e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	021b      	lsls	r3, r3, #8
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	031b      	lsls	r3, r3, #12
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	4313      	orrs	r3, r2
 80053be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a10      	ldr	r2, [pc, #64]	; (8005404 <TIM_OC4_SetConfig+0x9c>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d109      	bne.n	80053dc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	695b      	ldr	r3, [r3, #20]
 80053d4:	019b      	lsls	r3, r3, #6
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	4313      	orrs	r3, r2
 80053da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	685a      	ldr	r2, [r3, #4]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	693a      	ldr	r2, [r7, #16]
 80053f4:	621a      	str	r2, [r3, #32]
}
 80053f6:	bf00      	nop
 80053f8:	371c      	adds	r7, #28
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	40010000 	.word	0x40010000

08005408 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005408:	b480      	push	{r7}
 800540a:	b087      	sub	sp, #28
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6a1b      	ldr	r3, [r3, #32]
 8005418:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	f023 0201 	bic.w	r2, r3, #1
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005432:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	011b      	lsls	r3, r3, #4
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	4313      	orrs	r3, r2
 800543c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	f023 030a 	bic.w	r3, r3, #10
 8005444:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	4313      	orrs	r3, r2
 800544c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	693a      	ldr	r2, [r7, #16]
 8005452:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	621a      	str	r2, [r3, #32]
}
 800545a:	bf00      	nop
 800545c:	371c      	adds	r7, #28
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr

08005466 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005466:	b480      	push	{r7}
 8005468:	b087      	sub	sp, #28
 800546a:	af00      	add	r7, sp, #0
 800546c:	60f8      	str	r0, [r7, #12]
 800546e:	60b9      	str	r1, [r7, #8]
 8005470:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	f023 0210 	bic.w	r2, r3, #16
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6a1b      	ldr	r3, [r3, #32]
 8005488:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005490:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	031b      	lsls	r3, r3, #12
 8005496:	697a      	ldr	r2, [r7, #20]
 8005498:	4313      	orrs	r3, r2
 800549a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80054a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	011b      	lsls	r3, r3, #4
 80054a8:	693a      	ldr	r2, [r7, #16]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	697a      	ldr	r2, [r7, #20]
 80054b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	621a      	str	r2, [r3, #32]
}
 80054ba:	bf00      	nop
 80054bc:	371c      	adds	r7, #28
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr

080054c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054c6:	b480      	push	{r7}
 80054c8:	b085      	sub	sp, #20
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
 80054ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054de:	683a      	ldr	r2, [r7, #0]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	f043 0307 	orr.w	r3, r3, #7
 80054e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	609a      	str	r2, [r3, #8]
}
 80054f0:	bf00      	nop
 80054f2:	3714      	adds	r7, #20
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b087      	sub	sp, #28
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	607a      	str	r2, [r7, #4]
 8005508:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005516:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	021a      	lsls	r2, r3, #8
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	431a      	orrs	r2, r3
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	4313      	orrs	r3, r2
 8005524:	697a      	ldr	r2, [r7, #20]
 8005526:	4313      	orrs	r3, r2
 8005528:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	697a      	ldr	r2, [r7, #20]
 800552e:	609a      	str	r2, [r3, #8]
}
 8005530:	bf00      	nop
 8005532:	371c      	adds	r7, #28
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800553c:	b480      	push	{r7}
 800553e:	b087      	sub	sp, #28
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	f003 031f 	and.w	r3, r3, #31
 800554e:	2201      	movs	r2, #1
 8005550:	fa02 f303 	lsl.w	r3, r2, r3
 8005554:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6a1a      	ldr	r2, [r3, #32]
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	43db      	mvns	r3, r3
 800555e:	401a      	ands	r2, r3
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6a1a      	ldr	r2, [r3, #32]
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	f003 031f 	and.w	r3, r3, #31
 800556e:	6879      	ldr	r1, [r7, #4]
 8005570:	fa01 f303 	lsl.w	r3, r1, r3
 8005574:	431a      	orrs	r2, r3
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	621a      	str	r2, [r3, #32]
}
 800557a:	bf00      	nop
 800557c:	371c      	adds	r7, #28
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr
	...

08005588 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005588:	b480      	push	{r7}
 800558a:	b085      	sub	sp, #20
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005598:	2b01      	cmp	r3, #1
 800559a:	d101      	bne.n	80055a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800559c:	2302      	movs	r3, #2
 800559e:	e050      	b.n	8005642 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2202      	movs	r2, #2
 80055ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a1c      	ldr	r2, [pc, #112]	; (8005650 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d018      	beq.n	8005616 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055ec:	d013      	beq.n	8005616 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a18      	ldr	r2, [pc, #96]	; (8005654 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d00e      	beq.n	8005616 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a16      	ldr	r2, [pc, #88]	; (8005658 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d009      	beq.n	8005616 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a15      	ldr	r2, [pc, #84]	; (800565c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d004      	beq.n	8005616 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a13      	ldr	r2, [pc, #76]	; (8005660 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d10c      	bne.n	8005630 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800561c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	68ba      	ldr	r2, [r7, #8]
 8005624:	4313      	orrs	r3, r2
 8005626:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68ba      	ldr	r2, [r7, #8]
 800562e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3714      	adds	r7, #20
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	40010000 	.word	0x40010000
 8005654:	40000400 	.word	0x40000400
 8005658:	40000800 	.word	0x40000800
 800565c:	40000c00 	.word	0x40000c00
 8005660:	40014000 	.word	0x40014000

08005664 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005664:	b480      	push	{r7}
 8005666:	b085      	sub	sp, #20
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800566e:	2300      	movs	r3, #0
 8005670:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005678:	2b01      	cmp	r3, #1
 800567a:	d101      	bne.n	8005680 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800567c:	2302      	movs	r3, #2
 800567e:	e03d      	b.n	80056fc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	4313      	orrs	r3, r2
 8005694:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4313      	orrs	r3, r2
 80056be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	695b      	ldr	r3, [r3, #20]
 80056d8:	4313      	orrs	r3, r2
 80056da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	69db      	ldr	r3, [r3, #28]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3714      	adds	r7, #20
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d101      	bne.n	800571a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e03f      	b.n	800579a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005720:	b2db      	uxtb	r3, r3
 8005722:	2b00      	cmp	r3, #0
 8005724:	d106      	bne.n	8005734 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f7fc fc8c 	bl	800204c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2224      	movs	r2, #36	; 0x24
 8005738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68da      	ldr	r2, [r3, #12]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800574a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 f929 	bl	80059a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	691a      	ldr	r2, [r3, #16]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005760:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	695a      	ldr	r2, [r3, #20]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005770:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68da      	ldr	r2, [r3, #12]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005780:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2220      	movs	r2, #32
 800578c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2220      	movs	r2, #32
 8005794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3708      	adds	r7, #8
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b08a      	sub	sp, #40	; 0x28
 80057a6:	af02      	add	r7, sp, #8
 80057a8:	60f8      	str	r0, [r7, #12]
 80057aa:	60b9      	str	r1, [r7, #8]
 80057ac:	603b      	str	r3, [r7, #0]
 80057ae:	4613      	mov	r3, r2
 80057b0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80057b2:	2300      	movs	r3, #0
 80057b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	2b20      	cmp	r3, #32
 80057c0:	d17c      	bne.n	80058bc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d002      	beq.n	80057ce <HAL_UART_Transmit+0x2c>
 80057c8:	88fb      	ldrh	r3, [r7, #6]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d101      	bne.n	80057d2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e075      	b.n	80058be <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d101      	bne.n	80057e0 <HAL_UART_Transmit+0x3e>
 80057dc:	2302      	movs	r3, #2
 80057de:	e06e      	b.n	80058be <HAL_UART_Transmit+0x11c>
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2221      	movs	r2, #33	; 0x21
 80057f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057f6:	f7fc fe53 	bl	80024a0 <HAL_GetTick>
 80057fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	88fa      	ldrh	r2, [r7, #6]
 8005800:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	88fa      	ldrh	r2, [r7, #6]
 8005806:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005810:	d108      	bne.n	8005824 <HAL_UART_Transmit+0x82>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d104      	bne.n	8005824 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800581a:	2300      	movs	r3, #0
 800581c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	61bb      	str	r3, [r7, #24]
 8005822:	e003      	b.n	800582c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005828:	2300      	movs	r3, #0
 800582a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005834:	e02a      	b.n	800588c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	9300      	str	r3, [sp, #0]
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	2200      	movs	r2, #0
 800583e:	2180      	movs	r1, #128	; 0x80
 8005840:	68f8      	ldr	r0, [r7, #12]
 8005842:	f000 f840 	bl	80058c6 <UART_WaitOnFlagUntilTimeout>
 8005846:	4603      	mov	r3, r0
 8005848:	2b00      	cmp	r3, #0
 800584a:	d001      	beq.n	8005850 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e036      	b.n	80058be <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d10b      	bne.n	800586e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	881b      	ldrh	r3, [r3, #0]
 800585a:	461a      	mov	r2, r3
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005864:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	3302      	adds	r3, #2
 800586a:	61bb      	str	r3, [r7, #24]
 800586c:	e007      	b.n	800587e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	781a      	ldrb	r2, [r3, #0]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	3301      	adds	r3, #1
 800587c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005882:	b29b      	uxth	r3, r3
 8005884:	3b01      	subs	r3, #1
 8005886:	b29a      	uxth	r2, r3
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005890:	b29b      	uxth	r3, r3
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1cf      	bne.n	8005836 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	9300      	str	r3, [sp, #0]
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	2200      	movs	r2, #0
 800589e:	2140      	movs	r1, #64	; 0x40
 80058a0:	68f8      	ldr	r0, [r7, #12]
 80058a2:	f000 f810 	bl	80058c6 <UART_WaitOnFlagUntilTimeout>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d001      	beq.n	80058b0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80058ac:	2303      	movs	r3, #3
 80058ae:	e006      	b.n	80058be <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2220      	movs	r2, #32
 80058b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80058b8:	2300      	movs	r3, #0
 80058ba:	e000      	b.n	80058be <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80058bc:	2302      	movs	r3, #2
  }
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3720      	adds	r7, #32
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80058c6:	b580      	push	{r7, lr}
 80058c8:	b090      	sub	sp, #64	; 0x40
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	60f8      	str	r0, [r7, #12]
 80058ce:	60b9      	str	r1, [r7, #8]
 80058d0:	603b      	str	r3, [r7, #0]
 80058d2:	4613      	mov	r3, r2
 80058d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058d6:	e050      	b.n	800597a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058de:	d04c      	beq.n	800597a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80058e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d007      	beq.n	80058f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80058e6:	f7fc fddb 	bl	80024a0 <HAL_GetTick>
 80058ea:	4602      	mov	r2, r0
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d241      	bcs.n	800597a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	330c      	adds	r3, #12
 80058fc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005900:	e853 3f00 	ldrex	r3, [r3]
 8005904:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005908:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800590c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	330c      	adds	r3, #12
 8005914:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005916:	637a      	str	r2, [r7, #52]	; 0x34
 8005918:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800591a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800591c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800591e:	e841 2300 	strex	r3, r2, [r1]
 8005922:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005926:	2b00      	cmp	r3, #0
 8005928:	d1e5      	bne.n	80058f6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	3314      	adds	r3, #20
 8005930:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	e853 3f00 	ldrex	r3, [r3]
 8005938:	613b      	str	r3, [r7, #16]
   return(result);
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	f023 0301 	bic.w	r3, r3, #1
 8005940:	63bb      	str	r3, [r7, #56]	; 0x38
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	3314      	adds	r3, #20
 8005948:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800594a:	623a      	str	r2, [r7, #32]
 800594c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594e:	69f9      	ldr	r1, [r7, #28]
 8005950:	6a3a      	ldr	r2, [r7, #32]
 8005952:	e841 2300 	strex	r3, r2, [r1]
 8005956:	61bb      	str	r3, [r7, #24]
   return(result);
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d1e5      	bne.n	800592a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2220      	movs	r2, #32
 8005962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2220      	movs	r2, #32
 800596a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e00f      	b.n	800599a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	4013      	ands	r3, r2
 8005984:	68ba      	ldr	r2, [r7, #8]
 8005986:	429a      	cmp	r2, r3
 8005988:	bf0c      	ite	eq
 800598a:	2301      	moveq	r3, #1
 800598c:	2300      	movne	r3, #0
 800598e:	b2db      	uxtb	r3, r3
 8005990:	461a      	mov	r2, r3
 8005992:	79fb      	ldrb	r3, [r7, #7]
 8005994:	429a      	cmp	r2, r3
 8005996:	d09f      	beq.n	80058d8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3740      	adds	r7, #64	; 0x40
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
	...

080059a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059a8:	b09f      	sub	sp, #124	; 0x7c
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80059b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059ba:	68d9      	ldr	r1, [r3, #12]
 80059bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	ea40 0301 	orr.w	r3, r0, r1
 80059c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80059c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059c8:	689a      	ldr	r2, [r3, #8]
 80059ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	431a      	orrs	r2, r3
 80059d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059d2:	695b      	ldr	r3, [r3, #20]
 80059d4:	431a      	orrs	r2, r3
 80059d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059d8:	69db      	ldr	r3, [r3, #28]
 80059da:	4313      	orrs	r3, r2
 80059dc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80059de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80059e8:	f021 010c 	bic.w	r1, r1, #12
 80059ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059f2:	430b      	orrs	r3, r1
 80059f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	695b      	ldr	r3, [r3, #20]
 80059fc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005a00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a02:	6999      	ldr	r1, [r3, #24]
 8005a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	ea40 0301 	orr.w	r3, r0, r1
 8005a0c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	4bc5      	ldr	r3, [pc, #788]	; (8005d28 <UART_SetConfig+0x384>)
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d004      	beq.n	8005a22 <UART_SetConfig+0x7e>
 8005a18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	4bc3      	ldr	r3, [pc, #780]	; (8005d2c <UART_SetConfig+0x388>)
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d103      	bne.n	8005a2a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a22:	f7fe fd4f 	bl	80044c4 <HAL_RCC_GetPCLK2Freq>
 8005a26:	6778      	str	r0, [r7, #116]	; 0x74
 8005a28:	e002      	b.n	8005a30 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a2a:	f7fe fd37 	bl	800449c <HAL_RCC_GetPCLK1Freq>
 8005a2e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a32:	69db      	ldr	r3, [r3, #28]
 8005a34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a38:	f040 80b6 	bne.w	8005ba8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a3e:	461c      	mov	r4, r3
 8005a40:	f04f 0500 	mov.w	r5, #0
 8005a44:	4622      	mov	r2, r4
 8005a46:	462b      	mov	r3, r5
 8005a48:	1891      	adds	r1, r2, r2
 8005a4a:	6439      	str	r1, [r7, #64]	; 0x40
 8005a4c:	415b      	adcs	r3, r3
 8005a4e:	647b      	str	r3, [r7, #68]	; 0x44
 8005a50:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005a54:	1912      	adds	r2, r2, r4
 8005a56:	eb45 0303 	adc.w	r3, r5, r3
 8005a5a:	f04f 0000 	mov.w	r0, #0
 8005a5e:	f04f 0100 	mov.w	r1, #0
 8005a62:	00d9      	lsls	r1, r3, #3
 8005a64:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a68:	00d0      	lsls	r0, r2, #3
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	1911      	adds	r1, r2, r4
 8005a70:	6639      	str	r1, [r7, #96]	; 0x60
 8005a72:	416b      	adcs	r3, r5
 8005a74:	667b      	str	r3, [r7, #100]	; 0x64
 8005a76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	f04f 0300 	mov.w	r3, #0
 8005a80:	1891      	adds	r1, r2, r2
 8005a82:	63b9      	str	r1, [r7, #56]	; 0x38
 8005a84:	415b      	adcs	r3, r3
 8005a86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005a8c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005a90:	f7fb f94c 	bl	8000d2c <__aeabi_uldivmod>
 8005a94:	4602      	mov	r2, r0
 8005a96:	460b      	mov	r3, r1
 8005a98:	4ba5      	ldr	r3, [pc, #660]	; (8005d30 <UART_SetConfig+0x38c>)
 8005a9a:	fba3 2302 	umull	r2, r3, r3, r2
 8005a9e:	095b      	lsrs	r3, r3, #5
 8005aa0:	011e      	lsls	r6, r3, #4
 8005aa2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005aa4:	461c      	mov	r4, r3
 8005aa6:	f04f 0500 	mov.w	r5, #0
 8005aaa:	4622      	mov	r2, r4
 8005aac:	462b      	mov	r3, r5
 8005aae:	1891      	adds	r1, r2, r2
 8005ab0:	6339      	str	r1, [r7, #48]	; 0x30
 8005ab2:	415b      	adcs	r3, r3
 8005ab4:	637b      	str	r3, [r7, #52]	; 0x34
 8005ab6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005aba:	1912      	adds	r2, r2, r4
 8005abc:	eb45 0303 	adc.w	r3, r5, r3
 8005ac0:	f04f 0000 	mov.w	r0, #0
 8005ac4:	f04f 0100 	mov.w	r1, #0
 8005ac8:	00d9      	lsls	r1, r3, #3
 8005aca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ace:	00d0      	lsls	r0, r2, #3
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	460b      	mov	r3, r1
 8005ad4:	1911      	adds	r1, r2, r4
 8005ad6:	65b9      	str	r1, [r7, #88]	; 0x58
 8005ad8:	416b      	adcs	r3, r5
 8005ada:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005adc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	f04f 0300 	mov.w	r3, #0
 8005ae6:	1891      	adds	r1, r2, r2
 8005ae8:	62b9      	str	r1, [r7, #40]	; 0x28
 8005aea:	415b      	adcs	r3, r3
 8005aec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005aee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005af2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005af6:	f7fb f919 	bl	8000d2c <__aeabi_uldivmod>
 8005afa:	4602      	mov	r2, r0
 8005afc:	460b      	mov	r3, r1
 8005afe:	4b8c      	ldr	r3, [pc, #560]	; (8005d30 <UART_SetConfig+0x38c>)
 8005b00:	fba3 1302 	umull	r1, r3, r3, r2
 8005b04:	095b      	lsrs	r3, r3, #5
 8005b06:	2164      	movs	r1, #100	; 0x64
 8005b08:	fb01 f303 	mul.w	r3, r1, r3
 8005b0c:	1ad3      	subs	r3, r2, r3
 8005b0e:	00db      	lsls	r3, r3, #3
 8005b10:	3332      	adds	r3, #50	; 0x32
 8005b12:	4a87      	ldr	r2, [pc, #540]	; (8005d30 <UART_SetConfig+0x38c>)
 8005b14:	fba2 2303 	umull	r2, r3, r2, r3
 8005b18:	095b      	lsrs	r3, r3, #5
 8005b1a:	005b      	lsls	r3, r3, #1
 8005b1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005b20:	441e      	add	r6, r3
 8005b22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b24:	4618      	mov	r0, r3
 8005b26:	f04f 0100 	mov.w	r1, #0
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	1894      	adds	r4, r2, r2
 8005b30:	623c      	str	r4, [r7, #32]
 8005b32:	415b      	adcs	r3, r3
 8005b34:	627b      	str	r3, [r7, #36]	; 0x24
 8005b36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b3a:	1812      	adds	r2, r2, r0
 8005b3c:	eb41 0303 	adc.w	r3, r1, r3
 8005b40:	f04f 0400 	mov.w	r4, #0
 8005b44:	f04f 0500 	mov.w	r5, #0
 8005b48:	00dd      	lsls	r5, r3, #3
 8005b4a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005b4e:	00d4      	lsls	r4, r2, #3
 8005b50:	4622      	mov	r2, r4
 8005b52:	462b      	mov	r3, r5
 8005b54:	1814      	adds	r4, r2, r0
 8005b56:	653c      	str	r4, [r7, #80]	; 0x50
 8005b58:	414b      	adcs	r3, r1
 8005b5a:	657b      	str	r3, [r7, #84]	; 0x54
 8005b5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	461a      	mov	r2, r3
 8005b62:	f04f 0300 	mov.w	r3, #0
 8005b66:	1891      	adds	r1, r2, r2
 8005b68:	61b9      	str	r1, [r7, #24]
 8005b6a:	415b      	adcs	r3, r3
 8005b6c:	61fb      	str	r3, [r7, #28]
 8005b6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b72:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005b76:	f7fb f8d9 	bl	8000d2c <__aeabi_uldivmod>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	460b      	mov	r3, r1
 8005b7e:	4b6c      	ldr	r3, [pc, #432]	; (8005d30 <UART_SetConfig+0x38c>)
 8005b80:	fba3 1302 	umull	r1, r3, r3, r2
 8005b84:	095b      	lsrs	r3, r3, #5
 8005b86:	2164      	movs	r1, #100	; 0x64
 8005b88:	fb01 f303 	mul.w	r3, r1, r3
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	00db      	lsls	r3, r3, #3
 8005b90:	3332      	adds	r3, #50	; 0x32
 8005b92:	4a67      	ldr	r2, [pc, #412]	; (8005d30 <UART_SetConfig+0x38c>)
 8005b94:	fba2 2303 	umull	r2, r3, r2, r3
 8005b98:	095b      	lsrs	r3, r3, #5
 8005b9a:	f003 0207 	and.w	r2, r3, #7
 8005b9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4432      	add	r2, r6
 8005ba4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ba6:	e0b9      	b.n	8005d1c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ba8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005baa:	461c      	mov	r4, r3
 8005bac:	f04f 0500 	mov.w	r5, #0
 8005bb0:	4622      	mov	r2, r4
 8005bb2:	462b      	mov	r3, r5
 8005bb4:	1891      	adds	r1, r2, r2
 8005bb6:	6139      	str	r1, [r7, #16]
 8005bb8:	415b      	adcs	r3, r3
 8005bba:	617b      	str	r3, [r7, #20]
 8005bbc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005bc0:	1912      	adds	r2, r2, r4
 8005bc2:	eb45 0303 	adc.w	r3, r5, r3
 8005bc6:	f04f 0000 	mov.w	r0, #0
 8005bca:	f04f 0100 	mov.w	r1, #0
 8005bce:	00d9      	lsls	r1, r3, #3
 8005bd0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005bd4:	00d0      	lsls	r0, r2, #3
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	460b      	mov	r3, r1
 8005bda:	eb12 0804 	adds.w	r8, r2, r4
 8005bde:	eb43 0905 	adc.w	r9, r3, r5
 8005be2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	4618      	mov	r0, r3
 8005be8:	f04f 0100 	mov.w	r1, #0
 8005bec:	f04f 0200 	mov.w	r2, #0
 8005bf0:	f04f 0300 	mov.w	r3, #0
 8005bf4:	008b      	lsls	r3, r1, #2
 8005bf6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005bfa:	0082      	lsls	r2, r0, #2
 8005bfc:	4640      	mov	r0, r8
 8005bfe:	4649      	mov	r1, r9
 8005c00:	f7fb f894 	bl	8000d2c <__aeabi_uldivmod>
 8005c04:	4602      	mov	r2, r0
 8005c06:	460b      	mov	r3, r1
 8005c08:	4b49      	ldr	r3, [pc, #292]	; (8005d30 <UART_SetConfig+0x38c>)
 8005c0a:	fba3 2302 	umull	r2, r3, r3, r2
 8005c0e:	095b      	lsrs	r3, r3, #5
 8005c10:	011e      	lsls	r6, r3, #4
 8005c12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c14:	4618      	mov	r0, r3
 8005c16:	f04f 0100 	mov.w	r1, #0
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	1894      	adds	r4, r2, r2
 8005c20:	60bc      	str	r4, [r7, #8]
 8005c22:	415b      	adcs	r3, r3
 8005c24:	60fb      	str	r3, [r7, #12]
 8005c26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c2a:	1812      	adds	r2, r2, r0
 8005c2c:	eb41 0303 	adc.w	r3, r1, r3
 8005c30:	f04f 0400 	mov.w	r4, #0
 8005c34:	f04f 0500 	mov.w	r5, #0
 8005c38:	00dd      	lsls	r5, r3, #3
 8005c3a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005c3e:	00d4      	lsls	r4, r2, #3
 8005c40:	4622      	mov	r2, r4
 8005c42:	462b      	mov	r3, r5
 8005c44:	1814      	adds	r4, r2, r0
 8005c46:	64bc      	str	r4, [r7, #72]	; 0x48
 8005c48:	414b      	adcs	r3, r1
 8005c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	4618      	mov	r0, r3
 8005c52:	f04f 0100 	mov.w	r1, #0
 8005c56:	f04f 0200 	mov.w	r2, #0
 8005c5a:	f04f 0300 	mov.w	r3, #0
 8005c5e:	008b      	lsls	r3, r1, #2
 8005c60:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005c64:	0082      	lsls	r2, r0, #2
 8005c66:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005c6a:	f7fb f85f 	bl	8000d2c <__aeabi_uldivmod>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	460b      	mov	r3, r1
 8005c72:	4b2f      	ldr	r3, [pc, #188]	; (8005d30 <UART_SetConfig+0x38c>)
 8005c74:	fba3 1302 	umull	r1, r3, r3, r2
 8005c78:	095b      	lsrs	r3, r3, #5
 8005c7a:	2164      	movs	r1, #100	; 0x64
 8005c7c:	fb01 f303 	mul.w	r3, r1, r3
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	011b      	lsls	r3, r3, #4
 8005c84:	3332      	adds	r3, #50	; 0x32
 8005c86:	4a2a      	ldr	r2, [pc, #168]	; (8005d30 <UART_SetConfig+0x38c>)
 8005c88:	fba2 2303 	umull	r2, r3, r2, r3
 8005c8c:	095b      	lsrs	r3, r3, #5
 8005c8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c92:	441e      	add	r6, r3
 8005c94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c96:	4618      	mov	r0, r3
 8005c98:	f04f 0100 	mov.w	r1, #0
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	460b      	mov	r3, r1
 8005ca0:	1894      	adds	r4, r2, r2
 8005ca2:	603c      	str	r4, [r7, #0]
 8005ca4:	415b      	adcs	r3, r3
 8005ca6:	607b      	str	r3, [r7, #4]
 8005ca8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cac:	1812      	adds	r2, r2, r0
 8005cae:	eb41 0303 	adc.w	r3, r1, r3
 8005cb2:	f04f 0400 	mov.w	r4, #0
 8005cb6:	f04f 0500 	mov.w	r5, #0
 8005cba:	00dd      	lsls	r5, r3, #3
 8005cbc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005cc0:	00d4      	lsls	r4, r2, #3
 8005cc2:	4622      	mov	r2, r4
 8005cc4:	462b      	mov	r3, r5
 8005cc6:	eb12 0a00 	adds.w	sl, r2, r0
 8005cca:	eb43 0b01 	adc.w	fp, r3, r1
 8005cce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f04f 0100 	mov.w	r1, #0
 8005cd8:	f04f 0200 	mov.w	r2, #0
 8005cdc:	f04f 0300 	mov.w	r3, #0
 8005ce0:	008b      	lsls	r3, r1, #2
 8005ce2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005ce6:	0082      	lsls	r2, r0, #2
 8005ce8:	4650      	mov	r0, sl
 8005cea:	4659      	mov	r1, fp
 8005cec:	f7fb f81e 	bl	8000d2c <__aeabi_uldivmod>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	460b      	mov	r3, r1
 8005cf4:	4b0e      	ldr	r3, [pc, #56]	; (8005d30 <UART_SetConfig+0x38c>)
 8005cf6:	fba3 1302 	umull	r1, r3, r3, r2
 8005cfa:	095b      	lsrs	r3, r3, #5
 8005cfc:	2164      	movs	r1, #100	; 0x64
 8005cfe:	fb01 f303 	mul.w	r3, r1, r3
 8005d02:	1ad3      	subs	r3, r2, r3
 8005d04:	011b      	lsls	r3, r3, #4
 8005d06:	3332      	adds	r3, #50	; 0x32
 8005d08:	4a09      	ldr	r2, [pc, #36]	; (8005d30 <UART_SetConfig+0x38c>)
 8005d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d0e:	095b      	lsrs	r3, r3, #5
 8005d10:	f003 020f 	and.w	r2, r3, #15
 8005d14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4432      	add	r2, r6
 8005d1a:	609a      	str	r2, [r3, #8]
}
 8005d1c:	bf00      	nop
 8005d1e:	377c      	adds	r7, #124	; 0x7c
 8005d20:	46bd      	mov	sp, r7
 8005d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d26:	bf00      	nop
 8005d28:	40011000 	.word	0x40011000
 8005d2c:	40011400 	.word	0x40011400
 8005d30:	51eb851f 	.word	0x51eb851f

08005d34 <__errno>:
 8005d34:	4b01      	ldr	r3, [pc, #4]	; (8005d3c <__errno+0x8>)
 8005d36:	6818      	ldr	r0, [r3, #0]
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	20000018 	.word	0x20000018

08005d40 <__sflush_r>:
 8005d40:	898a      	ldrh	r2, [r1, #12]
 8005d42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d46:	4605      	mov	r5, r0
 8005d48:	0710      	lsls	r0, r2, #28
 8005d4a:	460c      	mov	r4, r1
 8005d4c:	d458      	bmi.n	8005e00 <__sflush_r+0xc0>
 8005d4e:	684b      	ldr	r3, [r1, #4]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	dc05      	bgt.n	8005d60 <__sflush_r+0x20>
 8005d54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	dc02      	bgt.n	8005d60 <__sflush_r+0x20>
 8005d5a:	2000      	movs	r0, #0
 8005d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d62:	2e00      	cmp	r6, #0
 8005d64:	d0f9      	beq.n	8005d5a <__sflush_r+0x1a>
 8005d66:	2300      	movs	r3, #0
 8005d68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005d6c:	682f      	ldr	r7, [r5, #0]
 8005d6e:	602b      	str	r3, [r5, #0]
 8005d70:	d032      	beq.n	8005dd8 <__sflush_r+0x98>
 8005d72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005d74:	89a3      	ldrh	r3, [r4, #12]
 8005d76:	075a      	lsls	r2, r3, #29
 8005d78:	d505      	bpl.n	8005d86 <__sflush_r+0x46>
 8005d7a:	6863      	ldr	r3, [r4, #4]
 8005d7c:	1ac0      	subs	r0, r0, r3
 8005d7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005d80:	b10b      	cbz	r3, 8005d86 <__sflush_r+0x46>
 8005d82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d84:	1ac0      	subs	r0, r0, r3
 8005d86:	2300      	movs	r3, #0
 8005d88:	4602      	mov	r2, r0
 8005d8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d8c:	6a21      	ldr	r1, [r4, #32]
 8005d8e:	4628      	mov	r0, r5
 8005d90:	47b0      	blx	r6
 8005d92:	1c43      	adds	r3, r0, #1
 8005d94:	89a3      	ldrh	r3, [r4, #12]
 8005d96:	d106      	bne.n	8005da6 <__sflush_r+0x66>
 8005d98:	6829      	ldr	r1, [r5, #0]
 8005d9a:	291d      	cmp	r1, #29
 8005d9c:	d82c      	bhi.n	8005df8 <__sflush_r+0xb8>
 8005d9e:	4a2a      	ldr	r2, [pc, #168]	; (8005e48 <__sflush_r+0x108>)
 8005da0:	40ca      	lsrs	r2, r1
 8005da2:	07d6      	lsls	r6, r2, #31
 8005da4:	d528      	bpl.n	8005df8 <__sflush_r+0xb8>
 8005da6:	2200      	movs	r2, #0
 8005da8:	6062      	str	r2, [r4, #4]
 8005daa:	04d9      	lsls	r1, r3, #19
 8005dac:	6922      	ldr	r2, [r4, #16]
 8005dae:	6022      	str	r2, [r4, #0]
 8005db0:	d504      	bpl.n	8005dbc <__sflush_r+0x7c>
 8005db2:	1c42      	adds	r2, r0, #1
 8005db4:	d101      	bne.n	8005dba <__sflush_r+0x7a>
 8005db6:	682b      	ldr	r3, [r5, #0]
 8005db8:	b903      	cbnz	r3, 8005dbc <__sflush_r+0x7c>
 8005dba:	6560      	str	r0, [r4, #84]	; 0x54
 8005dbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005dbe:	602f      	str	r7, [r5, #0]
 8005dc0:	2900      	cmp	r1, #0
 8005dc2:	d0ca      	beq.n	8005d5a <__sflush_r+0x1a>
 8005dc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005dc8:	4299      	cmp	r1, r3
 8005dca:	d002      	beq.n	8005dd2 <__sflush_r+0x92>
 8005dcc:	4628      	mov	r0, r5
 8005dce:	f000 fad7 	bl	8006380 <_free_r>
 8005dd2:	2000      	movs	r0, #0
 8005dd4:	6360      	str	r0, [r4, #52]	; 0x34
 8005dd6:	e7c1      	b.n	8005d5c <__sflush_r+0x1c>
 8005dd8:	6a21      	ldr	r1, [r4, #32]
 8005dda:	2301      	movs	r3, #1
 8005ddc:	4628      	mov	r0, r5
 8005dde:	47b0      	blx	r6
 8005de0:	1c41      	adds	r1, r0, #1
 8005de2:	d1c7      	bne.n	8005d74 <__sflush_r+0x34>
 8005de4:	682b      	ldr	r3, [r5, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d0c4      	beq.n	8005d74 <__sflush_r+0x34>
 8005dea:	2b1d      	cmp	r3, #29
 8005dec:	d001      	beq.n	8005df2 <__sflush_r+0xb2>
 8005dee:	2b16      	cmp	r3, #22
 8005df0:	d101      	bne.n	8005df6 <__sflush_r+0xb6>
 8005df2:	602f      	str	r7, [r5, #0]
 8005df4:	e7b1      	b.n	8005d5a <__sflush_r+0x1a>
 8005df6:	89a3      	ldrh	r3, [r4, #12]
 8005df8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dfc:	81a3      	strh	r3, [r4, #12]
 8005dfe:	e7ad      	b.n	8005d5c <__sflush_r+0x1c>
 8005e00:	690f      	ldr	r7, [r1, #16]
 8005e02:	2f00      	cmp	r7, #0
 8005e04:	d0a9      	beq.n	8005d5a <__sflush_r+0x1a>
 8005e06:	0793      	lsls	r3, r2, #30
 8005e08:	680e      	ldr	r6, [r1, #0]
 8005e0a:	bf08      	it	eq
 8005e0c:	694b      	ldreq	r3, [r1, #20]
 8005e0e:	600f      	str	r7, [r1, #0]
 8005e10:	bf18      	it	ne
 8005e12:	2300      	movne	r3, #0
 8005e14:	eba6 0807 	sub.w	r8, r6, r7
 8005e18:	608b      	str	r3, [r1, #8]
 8005e1a:	f1b8 0f00 	cmp.w	r8, #0
 8005e1e:	dd9c      	ble.n	8005d5a <__sflush_r+0x1a>
 8005e20:	6a21      	ldr	r1, [r4, #32]
 8005e22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005e24:	4643      	mov	r3, r8
 8005e26:	463a      	mov	r2, r7
 8005e28:	4628      	mov	r0, r5
 8005e2a:	47b0      	blx	r6
 8005e2c:	2800      	cmp	r0, #0
 8005e2e:	dc06      	bgt.n	8005e3e <__sflush_r+0xfe>
 8005e30:	89a3      	ldrh	r3, [r4, #12]
 8005e32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e36:	81a3      	strh	r3, [r4, #12]
 8005e38:	f04f 30ff 	mov.w	r0, #4294967295
 8005e3c:	e78e      	b.n	8005d5c <__sflush_r+0x1c>
 8005e3e:	4407      	add	r7, r0
 8005e40:	eba8 0800 	sub.w	r8, r8, r0
 8005e44:	e7e9      	b.n	8005e1a <__sflush_r+0xda>
 8005e46:	bf00      	nop
 8005e48:	20400001 	.word	0x20400001

08005e4c <_fflush_r>:
 8005e4c:	b538      	push	{r3, r4, r5, lr}
 8005e4e:	690b      	ldr	r3, [r1, #16]
 8005e50:	4605      	mov	r5, r0
 8005e52:	460c      	mov	r4, r1
 8005e54:	b913      	cbnz	r3, 8005e5c <_fflush_r+0x10>
 8005e56:	2500      	movs	r5, #0
 8005e58:	4628      	mov	r0, r5
 8005e5a:	bd38      	pop	{r3, r4, r5, pc}
 8005e5c:	b118      	cbz	r0, 8005e66 <_fflush_r+0x1a>
 8005e5e:	6983      	ldr	r3, [r0, #24]
 8005e60:	b90b      	cbnz	r3, 8005e66 <_fflush_r+0x1a>
 8005e62:	f000 f899 	bl	8005f98 <__sinit>
 8005e66:	4b14      	ldr	r3, [pc, #80]	; (8005eb8 <_fflush_r+0x6c>)
 8005e68:	429c      	cmp	r4, r3
 8005e6a:	d11b      	bne.n	8005ea4 <_fflush_r+0x58>
 8005e6c:	686c      	ldr	r4, [r5, #4]
 8005e6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d0ef      	beq.n	8005e56 <_fflush_r+0xa>
 8005e76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005e78:	07d0      	lsls	r0, r2, #31
 8005e7a:	d404      	bmi.n	8005e86 <_fflush_r+0x3a>
 8005e7c:	0599      	lsls	r1, r3, #22
 8005e7e:	d402      	bmi.n	8005e86 <_fflush_r+0x3a>
 8005e80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e82:	f000 fa61 	bl	8006348 <__retarget_lock_acquire_recursive>
 8005e86:	4628      	mov	r0, r5
 8005e88:	4621      	mov	r1, r4
 8005e8a:	f7ff ff59 	bl	8005d40 <__sflush_r>
 8005e8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e90:	07da      	lsls	r2, r3, #31
 8005e92:	4605      	mov	r5, r0
 8005e94:	d4e0      	bmi.n	8005e58 <_fflush_r+0xc>
 8005e96:	89a3      	ldrh	r3, [r4, #12]
 8005e98:	059b      	lsls	r3, r3, #22
 8005e9a:	d4dd      	bmi.n	8005e58 <_fflush_r+0xc>
 8005e9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e9e:	f000 fa55 	bl	800634c <__retarget_lock_release_recursive>
 8005ea2:	e7d9      	b.n	8005e58 <_fflush_r+0xc>
 8005ea4:	4b05      	ldr	r3, [pc, #20]	; (8005ebc <_fflush_r+0x70>)
 8005ea6:	429c      	cmp	r4, r3
 8005ea8:	d101      	bne.n	8005eae <_fflush_r+0x62>
 8005eaa:	68ac      	ldr	r4, [r5, #8]
 8005eac:	e7df      	b.n	8005e6e <_fflush_r+0x22>
 8005eae:	4b04      	ldr	r3, [pc, #16]	; (8005ec0 <_fflush_r+0x74>)
 8005eb0:	429c      	cmp	r4, r3
 8005eb2:	bf08      	it	eq
 8005eb4:	68ec      	ldreq	r4, [r5, #12]
 8005eb6:	e7da      	b.n	8005e6e <_fflush_r+0x22>
 8005eb8:	0800a10c 	.word	0x0800a10c
 8005ebc:	0800a12c 	.word	0x0800a12c
 8005ec0:	0800a0ec 	.word	0x0800a0ec

08005ec4 <fflush>:
 8005ec4:	4601      	mov	r1, r0
 8005ec6:	b920      	cbnz	r0, 8005ed2 <fflush+0xe>
 8005ec8:	4b04      	ldr	r3, [pc, #16]	; (8005edc <fflush+0x18>)
 8005eca:	4905      	ldr	r1, [pc, #20]	; (8005ee0 <fflush+0x1c>)
 8005ecc:	6818      	ldr	r0, [r3, #0]
 8005ece:	f000 b8e1 	b.w	8006094 <_fwalk_reent>
 8005ed2:	4b04      	ldr	r3, [pc, #16]	; (8005ee4 <fflush+0x20>)
 8005ed4:	6818      	ldr	r0, [r3, #0]
 8005ed6:	f7ff bfb9 	b.w	8005e4c <_fflush_r>
 8005eda:	bf00      	nop
 8005edc:	0800a14c 	.word	0x0800a14c
 8005ee0:	08005e4d 	.word	0x08005e4d
 8005ee4:	20000018 	.word	0x20000018

08005ee8 <std>:
 8005ee8:	2300      	movs	r3, #0
 8005eea:	b510      	push	{r4, lr}
 8005eec:	4604      	mov	r4, r0
 8005eee:	e9c0 3300 	strd	r3, r3, [r0]
 8005ef2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ef6:	6083      	str	r3, [r0, #8]
 8005ef8:	8181      	strh	r1, [r0, #12]
 8005efa:	6643      	str	r3, [r0, #100]	; 0x64
 8005efc:	81c2      	strh	r2, [r0, #14]
 8005efe:	6183      	str	r3, [r0, #24]
 8005f00:	4619      	mov	r1, r3
 8005f02:	2208      	movs	r2, #8
 8005f04:	305c      	adds	r0, #92	; 0x5c
 8005f06:	f000 fa33 	bl	8006370 <memset>
 8005f0a:	4b05      	ldr	r3, [pc, #20]	; (8005f20 <std+0x38>)
 8005f0c:	6263      	str	r3, [r4, #36]	; 0x24
 8005f0e:	4b05      	ldr	r3, [pc, #20]	; (8005f24 <std+0x3c>)
 8005f10:	62a3      	str	r3, [r4, #40]	; 0x28
 8005f12:	4b05      	ldr	r3, [pc, #20]	; (8005f28 <std+0x40>)
 8005f14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005f16:	4b05      	ldr	r3, [pc, #20]	; (8005f2c <std+0x44>)
 8005f18:	6224      	str	r4, [r4, #32]
 8005f1a:	6323      	str	r3, [r4, #48]	; 0x30
 8005f1c:	bd10      	pop	{r4, pc}
 8005f1e:	bf00      	nop
 8005f20:	08006521 	.word	0x08006521
 8005f24:	08006547 	.word	0x08006547
 8005f28:	0800657f 	.word	0x0800657f
 8005f2c:	080065a3 	.word	0x080065a3

08005f30 <_cleanup_r>:
 8005f30:	4901      	ldr	r1, [pc, #4]	; (8005f38 <_cleanup_r+0x8>)
 8005f32:	f000 b8af 	b.w	8006094 <_fwalk_reent>
 8005f36:	bf00      	nop
 8005f38:	08005e4d 	.word	0x08005e4d

08005f3c <__sfmoreglue>:
 8005f3c:	b570      	push	{r4, r5, r6, lr}
 8005f3e:	1e4a      	subs	r2, r1, #1
 8005f40:	2568      	movs	r5, #104	; 0x68
 8005f42:	4355      	muls	r5, r2
 8005f44:	460e      	mov	r6, r1
 8005f46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005f4a:	f000 fa69 	bl	8006420 <_malloc_r>
 8005f4e:	4604      	mov	r4, r0
 8005f50:	b140      	cbz	r0, 8005f64 <__sfmoreglue+0x28>
 8005f52:	2100      	movs	r1, #0
 8005f54:	e9c0 1600 	strd	r1, r6, [r0]
 8005f58:	300c      	adds	r0, #12
 8005f5a:	60a0      	str	r0, [r4, #8]
 8005f5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005f60:	f000 fa06 	bl	8006370 <memset>
 8005f64:	4620      	mov	r0, r4
 8005f66:	bd70      	pop	{r4, r5, r6, pc}

08005f68 <__sfp_lock_acquire>:
 8005f68:	4801      	ldr	r0, [pc, #4]	; (8005f70 <__sfp_lock_acquire+0x8>)
 8005f6a:	f000 b9ed 	b.w	8006348 <__retarget_lock_acquire_recursive>
 8005f6e:	bf00      	nop
 8005f70:	200004b0 	.word	0x200004b0

08005f74 <__sfp_lock_release>:
 8005f74:	4801      	ldr	r0, [pc, #4]	; (8005f7c <__sfp_lock_release+0x8>)
 8005f76:	f000 b9e9 	b.w	800634c <__retarget_lock_release_recursive>
 8005f7a:	bf00      	nop
 8005f7c:	200004b0 	.word	0x200004b0

08005f80 <__sinit_lock_acquire>:
 8005f80:	4801      	ldr	r0, [pc, #4]	; (8005f88 <__sinit_lock_acquire+0x8>)
 8005f82:	f000 b9e1 	b.w	8006348 <__retarget_lock_acquire_recursive>
 8005f86:	bf00      	nop
 8005f88:	200004ab 	.word	0x200004ab

08005f8c <__sinit_lock_release>:
 8005f8c:	4801      	ldr	r0, [pc, #4]	; (8005f94 <__sinit_lock_release+0x8>)
 8005f8e:	f000 b9dd 	b.w	800634c <__retarget_lock_release_recursive>
 8005f92:	bf00      	nop
 8005f94:	200004ab 	.word	0x200004ab

08005f98 <__sinit>:
 8005f98:	b510      	push	{r4, lr}
 8005f9a:	4604      	mov	r4, r0
 8005f9c:	f7ff fff0 	bl	8005f80 <__sinit_lock_acquire>
 8005fa0:	69a3      	ldr	r3, [r4, #24]
 8005fa2:	b11b      	cbz	r3, 8005fac <__sinit+0x14>
 8005fa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fa8:	f7ff bff0 	b.w	8005f8c <__sinit_lock_release>
 8005fac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005fb0:	6523      	str	r3, [r4, #80]	; 0x50
 8005fb2:	4b13      	ldr	r3, [pc, #76]	; (8006000 <__sinit+0x68>)
 8005fb4:	4a13      	ldr	r2, [pc, #76]	; (8006004 <__sinit+0x6c>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	62a2      	str	r2, [r4, #40]	; 0x28
 8005fba:	42a3      	cmp	r3, r4
 8005fbc:	bf04      	itt	eq
 8005fbe:	2301      	moveq	r3, #1
 8005fc0:	61a3      	streq	r3, [r4, #24]
 8005fc2:	4620      	mov	r0, r4
 8005fc4:	f000 f820 	bl	8006008 <__sfp>
 8005fc8:	6060      	str	r0, [r4, #4]
 8005fca:	4620      	mov	r0, r4
 8005fcc:	f000 f81c 	bl	8006008 <__sfp>
 8005fd0:	60a0      	str	r0, [r4, #8]
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	f000 f818 	bl	8006008 <__sfp>
 8005fd8:	2200      	movs	r2, #0
 8005fda:	60e0      	str	r0, [r4, #12]
 8005fdc:	2104      	movs	r1, #4
 8005fde:	6860      	ldr	r0, [r4, #4]
 8005fe0:	f7ff ff82 	bl	8005ee8 <std>
 8005fe4:	68a0      	ldr	r0, [r4, #8]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	2109      	movs	r1, #9
 8005fea:	f7ff ff7d 	bl	8005ee8 <std>
 8005fee:	68e0      	ldr	r0, [r4, #12]
 8005ff0:	2202      	movs	r2, #2
 8005ff2:	2112      	movs	r1, #18
 8005ff4:	f7ff ff78 	bl	8005ee8 <std>
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	61a3      	str	r3, [r4, #24]
 8005ffc:	e7d2      	b.n	8005fa4 <__sinit+0xc>
 8005ffe:	bf00      	nop
 8006000:	0800a14c 	.word	0x0800a14c
 8006004:	08005f31 	.word	0x08005f31

08006008 <__sfp>:
 8006008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800600a:	4607      	mov	r7, r0
 800600c:	f7ff ffac 	bl	8005f68 <__sfp_lock_acquire>
 8006010:	4b1e      	ldr	r3, [pc, #120]	; (800608c <__sfp+0x84>)
 8006012:	681e      	ldr	r6, [r3, #0]
 8006014:	69b3      	ldr	r3, [r6, #24]
 8006016:	b913      	cbnz	r3, 800601e <__sfp+0x16>
 8006018:	4630      	mov	r0, r6
 800601a:	f7ff ffbd 	bl	8005f98 <__sinit>
 800601e:	3648      	adds	r6, #72	; 0x48
 8006020:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006024:	3b01      	subs	r3, #1
 8006026:	d503      	bpl.n	8006030 <__sfp+0x28>
 8006028:	6833      	ldr	r3, [r6, #0]
 800602a:	b30b      	cbz	r3, 8006070 <__sfp+0x68>
 800602c:	6836      	ldr	r6, [r6, #0]
 800602e:	e7f7      	b.n	8006020 <__sfp+0x18>
 8006030:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006034:	b9d5      	cbnz	r5, 800606c <__sfp+0x64>
 8006036:	4b16      	ldr	r3, [pc, #88]	; (8006090 <__sfp+0x88>)
 8006038:	60e3      	str	r3, [r4, #12]
 800603a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800603e:	6665      	str	r5, [r4, #100]	; 0x64
 8006040:	f000 f980 	bl	8006344 <__retarget_lock_init_recursive>
 8006044:	f7ff ff96 	bl	8005f74 <__sfp_lock_release>
 8006048:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800604c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006050:	6025      	str	r5, [r4, #0]
 8006052:	61a5      	str	r5, [r4, #24]
 8006054:	2208      	movs	r2, #8
 8006056:	4629      	mov	r1, r5
 8006058:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800605c:	f000 f988 	bl	8006370 <memset>
 8006060:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006064:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006068:	4620      	mov	r0, r4
 800606a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800606c:	3468      	adds	r4, #104	; 0x68
 800606e:	e7d9      	b.n	8006024 <__sfp+0x1c>
 8006070:	2104      	movs	r1, #4
 8006072:	4638      	mov	r0, r7
 8006074:	f7ff ff62 	bl	8005f3c <__sfmoreglue>
 8006078:	4604      	mov	r4, r0
 800607a:	6030      	str	r0, [r6, #0]
 800607c:	2800      	cmp	r0, #0
 800607e:	d1d5      	bne.n	800602c <__sfp+0x24>
 8006080:	f7ff ff78 	bl	8005f74 <__sfp_lock_release>
 8006084:	230c      	movs	r3, #12
 8006086:	603b      	str	r3, [r7, #0]
 8006088:	e7ee      	b.n	8006068 <__sfp+0x60>
 800608a:	bf00      	nop
 800608c:	0800a14c 	.word	0x0800a14c
 8006090:	ffff0001 	.word	0xffff0001

08006094 <_fwalk_reent>:
 8006094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006098:	4606      	mov	r6, r0
 800609a:	4688      	mov	r8, r1
 800609c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80060a0:	2700      	movs	r7, #0
 80060a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80060a6:	f1b9 0901 	subs.w	r9, r9, #1
 80060aa:	d505      	bpl.n	80060b8 <_fwalk_reent+0x24>
 80060ac:	6824      	ldr	r4, [r4, #0]
 80060ae:	2c00      	cmp	r4, #0
 80060b0:	d1f7      	bne.n	80060a2 <_fwalk_reent+0xe>
 80060b2:	4638      	mov	r0, r7
 80060b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060b8:	89ab      	ldrh	r3, [r5, #12]
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d907      	bls.n	80060ce <_fwalk_reent+0x3a>
 80060be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80060c2:	3301      	adds	r3, #1
 80060c4:	d003      	beq.n	80060ce <_fwalk_reent+0x3a>
 80060c6:	4629      	mov	r1, r5
 80060c8:	4630      	mov	r0, r6
 80060ca:	47c0      	blx	r8
 80060cc:	4307      	orrs	r7, r0
 80060ce:	3568      	adds	r5, #104	; 0x68
 80060d0:	e7e9      	b.n	80060a6 <_fwalk_reent+0x12>
	...

080060d4 <__libc_init_array>:
 80060d4:	b570      	push	{r4, r5, r6, lr}
 80060d6:	4d0d      	ldr	r5, [pc, #52]	; (800610c <__libc_init_array+0x38>)
 80060d8:	4c0d      	ldr	r4, [pc, #52]	; (8006110 <__libc_init_array+0x3c>)
 80060da:	1b64      	subs	r4, r4, r5
 80060dc:	10a4      	asrs	r4, r4, #2
 80060de:	2600      	movs	r6, #0
 80060e0:	42a6      	cmp	r6, r4
 80060e2:	d109      	bne.n	80060f8 <__libc_init_array+0x24>
 80060e4:	4d0b      	ldr	r5, [pc, #44]	; (8006114 <__libc_init_array+0x40>)
 80060e6:	4c0c      	ldr	r4, [pc, #48]	; (8006118 <__libc_init_array+0x44>)
 80060e8:	f003 ffb4 	bl	800a054 <_init>
 80060ec:	1b64      	subs	r4, r4, r5
 80060ee:	10a4      	asrs	r4, r4, #2
 80060f0:	2600      	movs	r6, #0
 80060f2:	42a6      	cmp	r6, r4
 80060f4:	d105      	bne.n	8006102 <__libc_init_array+0x2e>
 80060f6:	bd70      	pop	{r4, r5, r6, pc}
 80060f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80060fc:	4798      	blx	r3
 80060fe:	3601      	adds	r6, #1
 8006100:	e7ee      	b.n	80060e0 <__libc_init_array+0xc>
 8006102:	f855 3b04 	ldr.w	r3, [r5], #4
 8006106:	4798      	blx	r3
 8006108:	3601      	adds	r6, #1
 800610a:	e7f2      	b.n	80060f2 <__libc_init_array+0x1e>
 800610c:	0800a860 	.word	0x0800a860
 8006110:	0800a860 	.word	0x0800a860
 8006114:	0800a860 	.word	0x0800a860
 8006118:	0800a864 	.word	0x0800a864

0800611c <localtime>:
 800611c:	b538      	push	{r3, r4, r5, lr}
 800611e:	4b0b      	ldr	r3, [pc, #44]	; (800614c <localtime+0x30>)
 8006120:	681d      	ldr	r5, [r3, #0]
 8006122:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8006124:	4604      	mov	r4, r0
 8006126:	b953      	cbnz	r3, 800613e <localtime+0x22>
 8006128:	2024      	movs	r0, #36	; 0x24
 800612a:	f000 f911 	bl	8006350 <malloc>
 800612e:	4602      	mov	r2, r0
 8006130:	63e8      	str	r0, [r5, #60]	; 0x3c
 8006132:	b920      	cbnz	r0, 800613e <localtime+0x22>
 8006134:	4b06      	ldr	r3, [pc, #24]	; (8006150 <localtime+0x34>)
 8006136:	4807      	ldr	r0, [pc, #28]	; (8006154 <localtime+0x38>)
 8006138:	2132      	movs	r1, #50	; 0x32
 800613a:	f001 fa87 	bl	800764c <__assert_func>
 800613e:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8006140:	4620      	mov	r0, r4
 8006142:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006146:	f000 b807 	b.w	8006158 <localtime_r>
 800614a:	bf00      	nop
 800614c:	20000018 	.word	0x20000018
 8006150:	0800a150 	.word	0x0800a150
 8006154:	0800a167 	.word	0x0800a167

08006158 <localtime_r>:
 8006158:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800615c:	4607      	mov	r7, r0
 800615e:	9101      	str	r1, [sp, #4]
 8006160:	f001 faf6 	bl	8007750 <__gettzinfo>
 8006164:	9901      	ldr	r1, [sp, #4]
 8006166:	4680      	mov	r8, r0
 8006168:	4638      	mov	r0, r7
 800616a:	f001 faf5 	bl	8007758 <gmtime_r>
 800616e:	6943      	ldr	r3, [r0, #20]
 8006170:	079a      	lsls	r2, r3, #30
 8006172:	4604      	mov	r4, r0
 8006174:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 8006178:	d105      	bne.n	8006186 <localtime_r+0x2e>
 800617a:	2264      	movs	r2, #100	; 0x64
 800617c:	fb96 f3f2 	sdiv	r3, r6, r2
 8006180:	fb02 6313 	mls	r3, r2, r3, r6
 8006184:	bb7b      	cbnz	r3, 80061e6 <localtime_r+0x8e>
 8006186:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800618a:	fb96 f5f3 	sdiv	r5, r6, r3
 800618e:	fb03 6515 	mls	r5, r3, r5, r6
 8006192:	fab5 f585 	clz	r5, r5
 8006196:	096d      	lsrs	r5, r5, #5
 8006198:	4b68      	ldr	r3, [pc, #416]	; (800633c <localtime_r+0x1e4>)
 800619a:	2230      	movs	r2, #48	; 0x30
 800619c:	fb02 3505 	mla	r5, r2, r5, r3
 80061a0:	f001 f890 	bl	80072c4 <__tz_lock>
 80061a4:	f001 f89a 	bl	80072dc <_tzset_unlocked>
 80061a8:	4b65      	ldr	r3, [pc, #404]	; (8006340 <localtime_r+0x1e8>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	b353      	cbz	r3, 8006204 <localtime_r+0xac>
 80061ae:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80061b2:	42b3      	cmp	r3, r6
 80061b4:	d119      	bne.n	80061ea <localtime_r+0x92>
 80061b6:	f8d8 1000 	ldr.w	r1, [r8]
 80061ba:	e9d7 6700 	ldrd	r6, r7, [r7]
 80061be:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 80061c2:	b9d1      	cbnz	r1, 80061fa <localtime_r+0xa2>
 80061c4:	4296      	cmp	r6, r2
 80061c6:	eb77 0303 	sbcs.w	r3, r7, r3
 80061ca:	da23      	bge.n	8006214 <localtime_r+0xbc>
 80061cc:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 80061d0:	4296      	cmp	r6, r2
 80061d2:	eb77 0303 	sbcs.w	r3, r7, r3
 80061d6:	bfb4      	ite	lt
 80061d8:	2301      	movlt	r3, #1
 80061da:	2300      	movge	r3, #0
 80061dc:	6223      	str	r3, [r4, #32]
 80061de:	db1b      	blt.n	8006218 <localtime_r+0xc0>
 80061e0:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 80061e4:	e01a      	b.n	800621c <localtime_r+0xc4>
 80061e6:	2501      	movs	r5, #1
 80061e8:	e7d6      	b.n	8006198 <localtime_r+0x40>
 80061ea:	4630      	mov	r0, r6
 80061ec:	f000 ffc2 	bl	8007174 <__tzcalc_limits>
 80061f0:	2800      	cmp	r0, #0
 80061f2:	d1e0      	bne.n	80061b6 <localtime_r+0x5e>
 80061f4:	f04f 33ff 	mov.w	r3, #4294967295
 80061f8:	e004      	b.n	8006204 <localtime_r+0xac>
 80061fa:	4296      	cmp	r6, r2
 80061fc:	eb77 0303 	sbcs.w	r3, r7, r3
 8006200:	da02      	bge.n	8006208 <localtime_r+0xb0>
 8006202:	2300      	movs	r3, #0
 8006204:	6223      	str	r3, [r4, #32]
 8006206:	e7eb      	b.n	80061e0 <localtime_r+0x88>
 8006208:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 800620c:	4296      	cmp	r6, r2
 800620e:	eb77 0303 	sbcs.w	r3, r7, r3
 8006212:	daf6      	bge.n	8006202 <localtime_r+0xaa>
 8006214:	2301      	movs	r3, #1
 8006216:	6223      	str	r3, [r4, #32]
 8006218:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 800621c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8006220:	203c      	movs	r0, #60	; 0x3c
 8006222:	fb91 f6f3 	sdiv	r6, r1, r3
 8006226:	fb03 1316 	mls	r3, r3, r6, r1
 800622a:	6861      	ldr	r1, [r4, #4]
 800622c:	fb93 f2f0 	sdiv	r2, r3, r0
 8006230:	fb00 3012 	mls	r0, r0, r2, r3
 8006234:	6823      	ldr	r3, [r4, #0]
 8006236:	1a89      	subs	r1, r1, r2
 8006238:	68a2      	ldr	r2, [r4, #8]
 800623a:	6061      	str	r1, [r4, #4]
 800623c:	1a1b      	subs	r3, r3, r0
 800623e:	1b92      	subs	r2, r2, r6
 8006240:	2b3b      	cmp	r3, #59	; 0x3b
 8006242:	6023      	str	r3, [r4, #0]
 8006244:	60a2      	str	r2, [r4, #8]
 8006246:	dd35      	ble.n	80062b4 <localtime_r+0x15c>
 8006248:	3101      	adds	r1, #1
 800624a:	6061      	str	r1, [r4, #4]
 800624c:	3b3c      	subs	r3, #60	; 0x3c
 800624e:	6023      	str	r3, [r4, #0]
 8006250:	6863      	ldr	r3, [r4, #4]
 8006252:	2b3b      	cmp	r3, #59	; 0x3b
 8006254:	dd34      	ble.n	80062c0 <localtime_r+0x168>
 8006256:	3201      	adds	r2, #1
 8006258:	60a2      	str	r2, [r4, #8]
 800625a:	3b3c      	subs	r3, #60	; 0x3c
 800625c:	6063      	str	r3, [r4, #4]
 800625e:	68a3      	ldr	r3, [r4, #8]
 8006260:	2b17      	cmp	r3, #23
 8006262:	dd33      	ble.n	80062cc <localtime_r+0x174>
 8006264:	69e2      	ldr	r2, [r4, #28]
 8006266:	3201      	adds	r2, #1
 8006268:	61e2      	str	r2, [r4, #28]
 800626a:	69a2      	ldr	r2, [r4, #24]
 800626c:	3201      	adds	r2, #1
 800626e:	2a06      	cmp	r2, #6
 8006270:	bfc8      	it	gt
 8006272:	2200      	movgt	r2, #0
 8006274:	61a2      	str	r2, [r4, #24]
 8006276:	68e2      	ldr	r2, [r4, #12]
 8006278:	3b18      	subs	r3, #24
 800627a:	3201      	adds	r2, #1
 800627c:	60a3      	str	r3, [r4, #8]
 800627e:	6923      	ldr	r3, [r4, #16]
 8006280:	60e2      	str	r2, [r4, #12]
 8006282:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8006286:	428a      	cmp	r2, r1
 8006288:	dd0e      	ble.n	80062a8 <localtime_r+0x150>
 800628a:	2b0b      	cmp	r3, #11
 800628c:	eba2 0201 	sub.w	r2, r2, r1
 8006290:	60e2      	str	r2, [r4, #12]
 8006292:	f103 0201 	add.w	r2, r3, #1
 8006296:	bf09      	itett	eq
 8006298:	6963      	ldreq	r3, [r4, #20]
 800629a:	6122      	strne	r2, [r4, #16]
 800629c:	2200      	moveq	r2, #0
 800629e:	3301      	addeq	r3, #1
 80062a0:	bf02      	ittt	eq
 80062a2:	6122      	streq	r2, [r4, #16]
 80062a4:	6163      	streq	r3, [r4, #20]
 80062a6:	61e2      	streq	r2, [r4, #28]
 80062a8:	f001 f812 	bl	80072d0 <__tz_unlock>
 80062ac:	4620      	mov	r0, r4
 80062ae:	b002      	add	sp, #8
 80062b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	dacb      	bge.n	8006250 <localtime_r+0xf8>
 80062b8:	3901      	subs	r1, #1
 80062ba:	6061      	str	r1, [r4, #4]
 80062bc:	333c      	adds	r3, #60	; 0x3c
 80062be:	e7c6      	b.n	800624e <localtime_r+0xf6>
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	dacc      	bge.n	800625e <localtime_r+0x106>
 80062c4:	3a01      	subs	r2, #1
 80062c6:	60a2      	str	r2, [r4, #8]
 80062c8:	333c      	adds	r3, #60	; 0x3c
 80062ca:	e7c7      	b.n	800625c <localtime_r+0x104>
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	daeb      	bge.n	80062a8 <localtime_r+0x150>
 80062d0:	69e2      	ldr	r2, [r4, #28]
 80062d2:	3a01      	subs	r2, #1
 80062d4:	61e2      	str	r2, [r4, #28]
 80062d6:	69a2      	ldr	r2, [r4, #24]
 80062d8:	3a01      	subs	r2, #1
 80062da:	bf48      	it	mi
 80062dc:	2206      	movmi	r2, #6
 80062de:	61a2      	str	r2, [r4, #24]
 80062e0:	68e2      	ldr	r2, [r4, #12]
 80062e2:	3318      	adds	r3, #24
 80062e4:	3a01      	subs	r2, #1
 80062e6:	60e2      	str	r2, [r4, #12]
 80062e8:	60a3      	str	r3, [r4, #8]
 80062ea:	2a00      	cmp	r2, #0
 80062ec:	d1dc      	bne.n	80062a8 <localtime_r+0x150>
 80062ee:	6923      	ldr	r3, [r4, #16]
 80062f0:	3b01      	subs	r3, #1
 80062f2:	d405      	bmi.n	8006300 <localtime_r+0x1a8>
 80062f4:	6123      	str	r3, [r4, #16]
 80062f6:	6923      	ldr	r3, [r4, #16]
 80062f8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80062fc:	60e3      	str	r3, [r4, #12]
 80062fe:	e7d3      	b.n	80062a8 <localtime_r+0x150>
 8006300:	230b      	movs	r3, #11
 8006302:	6123      	str	r3, [r4, #16]
 8006304:	6963      	ldr	r3, [r4, #20]
 8006306:	1e5a      	subs	r2, r3, #1
 8006308:	6162      	str	r2, [r4, #20]
 800630a:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 800630e:	0793      	lsls	r3, r2, #30
 8006310:	d105      	bne.n	800631e <localtime_r+0x1c6>
 8006312:	2164      	movs	r1, #100	; 0x64
 8006314:	fb92 f3f1 	sdiv	r3, r2, r1
 8006318:	fb01 2313 	mls	r3, r1, r3, r2
 800631c:	b963      	cbnz	r3, 8006338 <localtime_r+0x1e0>
 800631e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006322:	fb92 f3f1 	sdiv	r3, r2, r1
 8006326:	fb01 2313 	mls	r3, r1, r3, r2
 800632a:	fab3 f383 	clz	r3, r3
 800632e:	095b      	lsrs	r3, r3, #5
 8006330:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8006334:	61e3      	str	r3, [r4, #28]
 8006336:	e7de      	b.n	80062f6 <localtime_r+0x19e>
 8006338:	2301      	movs	r3, #1
 800633a:	e7f9      	b.n	8006330 <localtime_r+0x1d8>
 800633c:	0800a1c8 	.word	0x0800a1c8
 8006340:	2000031c 	.word	0x2000031c

08006344 <__retarget_lock_init_recursive>:
 8006344:	4770      	bx	lr

08006346 <__retarget_lock_acquire>:
 8006346:	4770      	bx	lr

08006348 <__retarget_lock_acquire_recursive>:
 8006348:	4770      	bx	lr

0800634a <__retarget_lock_release>:
 800634a:	4770      	bx	lr

0800634c <__retarget_lock_release_recursive>:
 800634c:	4770      	bx	lr
	...

08006350 <malloc>:
 8006350:	4b02      	ldr	r3, [pc, #8]	; (800635c <malloc+0xc>)
 8006352:	4601      	mov	r1, r0
 8006354:	6818      	ldr	r0, [r3, #0]
 8006356:	f000 b863 	b.w	8006420 <_malloc_r>
 800635a:	bf00      	nop
 800635c:	20000018 	.word	0x20000018

08006360 <free>:
 8006360:	4b02      	ldr	r3, [pc, #8]	; (800636c <free+0xc>)
 8006362:	4601      	mov	r1, r0
 8006364:	6818      	ldr	r0, [r3, #0]
 8006366:	f000 b80b 	b.w	8006380 <_free_r>
 800636a:	bf00      	nop
 800636c:	20000018 	.word	0x20000018

08006370 <memset>:
 8006370:	4402      	add	r2, r0
 8006372:	4603      	mov	r3, r0
 8006374:	4293      	cmp	r3, r2
 8006376:	d100      	bne.n	800637a <memset+0xa>
 8006378:	4770      	bx	lr
 800637a:	f803 1b01 	strb.w	r1, [r3], #1
 800637e:	e7f9      	b.n	8006374 <memset+0x4>

08006380 <_free_r>:
 8006380:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006382:	2900      	cmp	r1, #0
 8006384:	d048      	beq.n	8006418 <_free_r+0x98>
 8006386:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800638a:	9001      	str	r0, [sp, #4]
 800638c:	2b00      	cmp	r3, #0
 800638e:	f1a1 0404 	sub.w	r4, r1, #4
 8006392:	bfb8      	it	lt
 8006394:	18e4      	addlt	r4, r4, r3
 8006396:	f001 fab7 	bl	8007908 <__malloc_lock>
 800639a:	4a20      	ldr	r2, [pc, #128]	; (800641c <_free_r+0x9c>)
 800639c:	9801      	ldr	r0, [sp, #4]
 800639e:	6813      	ldr	r3, [r2, #0]
 80063a0:	4615      	mov	r5, r2
 80063a2:	b933      	cbnz	r3, 80063b2 <_free_r+0x32>
 80063a4:	6063      	str	r3, [r4, #4]
 80063a6:	6014      	str	r4, [r2, #0]
 80063a8:	b003      	add	sp, #12
 80063aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80063ae:	f001 bab1 	b.w	8007914 <__malloc_unlock>
 80063b2:	42a3      	cmp	r3, r4
 80063b4:	d90b      	bls.n	80063ce <_free_r+0x4e>
 80063b6:	6821      	ldr	r1, [r4, #0]
 80063b8:	1862      	adds	r2, r4, r1
 80063ba:	4293      	cmp	r3, r2
 80063bc:	bf04      	itt	eq
 80063be:	681a      	ldreq	r2, [r3, #0]
 80063c0:	685b      	ldreq	r3, [r3, #4]
 80063c2:	6063      	str	r3, [r4, #4]
 80063c4:	bf04      	itt	eq
 80063c6:	1852      	addeq	r2, r2, r1
 80063c8:	6022      	streq	r2, [r4, #0]
 80063ca:	602c      	str	r4, [r5, #0]
 80063cc:	e7ec      	b.n	80063a8 <_free_r+0x28>
 80063ce:	461a      	mov	r2, r3
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	b10b      	cbz	r3, 80063d8 <_free_r+0x58>
 80063d4:	42a3      	cmp	r3, r4
 80063d6:	d9fa      	bls.n	80063ce <_free_r+0x4e>
 80063d8:	6811      	ldr	r1, [r2, #0]
 80063da:	1855      	adds	r5, r2, r1
 80063dc:	42a5      	cmp	r5, r4
 80063de:	d10b      	bne.n	80063f8 <_free_r+0x78>
 80063e0:	6824      	ldr	r4, [r4, #0]
 80063e2:	4421      	add	r1, r4
 80063e4:	1854      	adds	r4, r2, r1
 80063e6:	42a3      	cmp	r3, r4
 80063e8:	6011      	str	r1, [r2, #0]
 80063ea:	d1dd      	bne.n	80063a8 <_free_r+0x28>
 80063ec:	681c      	ldr	r4, [r3, #0]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	6053      	str	r3, [r2, #4]
 80063f2:	4421      	add	r1, r4
 80063f4:	6011      	str	r1, [r2, #0]
 80063f6:	e7d7      	b.n	80063a8 <_free_r+0x28>
 80063f8:	d902      	bls.n	8006400 <_free_r+0x80>
 80063fa:	230c      	movs	r3, #12
 80063fc:	6003      	str	r3, [r0, #0]
 80063fe:	e7d3      	b.n	80063a8 <_free_r+0x28>
 8006400:	6825      	ldr	r5, [r4, #0]
 8006402:	1961      	adds	r1, r4, r5
 8006404:	428b      	cmp	r3, r1
 8006406:	bf04      	itt	eq
 8006408:	6819      	ldreq	r1, [r3, #0]
 800640a:	685b      	ldreq	r3, [r3, #4]
 800640c:	6063      	str	r3, [r4, #4]
 800640e:	bf04      	itt	eq
 8006410:	1949      	addeq	r1, r1, r5
 8006412:	6021      	streq	r1, [r4, #0]
 8006414:	6054      	str	r4, [r2, #4]
 8006416:	e7c7      	b.n	80063a8 <_free_r+0x28>
 8006418:	b003      	add	sp, #12
 800641a:	bd30      	pop	{r4, r5, pc}
 800641c:	200002f8 	.word	0x200002f8

08006420 <_malloc_r>:
 8006420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006422:	1ccd      	adds	r5, r1, #3
 8006424:	f025 0503 	bic.w	r5, r5, #3
 8006428:	3508      	adds	r5, #8
 800642a:	2d0c      	cmp	r5, #12
 800642c:	bf38      	it	cc
 800642e:	250c      	movcc	r5, #12
 8006430:	2d00      	cmp	r5, #0
 8006432:	4606      	mov	r6, r0
 8006434:	db01      	blt.n	800643a <_malloc_r+0x1a>
 8006436:	42a9      	cmp	r1, r5
 8006438:	d903      	bls.n	8006442 <_malloc_r+0x22>
 800643a:	230c      	movs	r3, #12
 800643c:	6033      	str	r3, [r6, #0]
 800643e:	2000      	movs	r0, #0
 8006440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006442:	f001 fa61 	bl	8007908 <__malloc_lock>
 8006446:	4921      	ldr	r1, [pc, #132]	; (80064cc <_malloc_r+0xac>)
 8006448:	680a      	ldr	r2, [r1, #0]
 800644a:	4614      	mov	r4, r2
 800644c:	b99c      	cbnz	r4, 8006476 <_malloc_r+0x56>
 800644e:	4f20      	ldr	r7, [pc, #128]	; (80064d0 <_malloc_r+0xb0>)
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	b923      	cbnz	r3, 800645e <_malloc_r+0x3e>
 8006454:	4621      	mov	r1, r4
 8006456:	4630      	mov	r0, r6
 8006458:	f000 f852 	bl	8006500 <_sbrk_r>
 800645c:	6038      	str	r0, [r7, #0]
 800645e:	4629      	mov	r1, r5
 8006460:	4630      	mov	r0, r6
 8006462:	f000 f84d 	bl	8006500 <_sbrk_r>
 8006466:	1c43      	adds	r3, r0, #1
 8006468:	d123      	bne.n	80064b2 <_malloc_r+0x92>
 800646a:	230c      	movs	r3, #12
 800646c:	6033      	str	r3, [r6, #0]
 800646e:	4630      	mov	r0, r6
 8006470:	f001 fa50 	bl	8007914 <__malloc_unlock>
 8006474:	e7e3      	b.n	800643e <_malloc_r+0x1e>
 8006476:	6823      	ldr	r3, [r4, #0]
 8006478:	1b5b      	subs	r3, r3, r5
 800647a:	d417      	bmi.n	80064ac <_malloc_r+0x8c>
 800647c:	2b0b      	cmp	r3, #11
 800647e:	d903      	bls.n	8006488 <_malloc_r+0x68>
 8006480:	6023      	str	r3, [r4, #0]
 8006482:	441c      	add	r4, r3
 8006484:	6025      	str	r5, [r4, #0]
 8006486:	e004      	b.n	8006492 <_malloc_r+0x72>
 8006488:	6863      	ldr	r3, [r4, #4]
 800648a:	42a2      	cmp	r2, r4
 800648c:	bf0c      	ite	eq
 800648e:	600b      	streq	r3, [r1, #0]
 8006490:	6053      	strne	r3, [r2, #4]
 8006492:	4630      	mov	r0, r6
 8006494:	f001 fa3e 	bl	8007914 <__malloc_unlock>
 8006498:	f104 000b 	add.w	r0, r4, #11
 800649c:	1d23      	adds	r3, r4, #4
 800649e:	f020 0007 	bic.w	r0, r0, #7
 80064a2:	1ac2      	subs	r2, r0, r3
 80064a4:	d0cc      	beq.n	8006440 <_malloc_r+0x20>
 80064a6:	1a1b      	subs	r3, r3, r0
 80064a8:	50a3      	str	r3, [r4, r2]
 80064aa:	e7c9      	b.n	8006440 <_malloc_r+0x20>
 80064ac:	4622      	mov	r2, r4
 80064ae:	6864      	ldr	r4, [r4, #4]
 80064b0:	e7cc      	b.n	800644c <_malloc_r+0x2c>
 80064b2:	1cc4      	adds	r4, r0, #3
 80064b4:	f024 0403 	bic.w	r4, r4, #3
 80064b8:	42a0      	cmp	r0, r4
 80064ba:	d0e3      	beq.n	8006484 <_malloc_r+0x64>
 80064bc:	1a21      	subs	r1, r4, r0
 80064be:	4630      	mov	r0, r6
 80064c0:	f000 f81e 	bl	8006500 <_sbrk_r>
 80064c4:	3001      	adds	r0, #1
 80064c6:	d1dd      	bne.n	8006484 <_malloc_r+0x64>
 80064c8:	e7cf      	b.n	800646a <_malloc_r+0x4a>
 80064ca:	bf00      	nop
 80064cc:	200002f8 	.word	0x200002f8
 80064d0:	200002fc 	.word	0x200002fc

080064d4 <putchar>:
 80064d4:	4b09      	ldr	r3, [pc, #36]	; (80064fc <putchar+0x28>)
 80064d6:	b513      	push	{r0, r1, r4, lr}
 80064d8:	681c      	ldr	r4, [r3, #0]
 80064da:	4601      	mov	r1, r0
 80064dc:	b134      	cbz	r4, 80064ec <putchar+0x18>
 80064de:	69a3      	ldr	r3, [r4, #24]
 80064e0:	b923      	cbnz	r3, 80064ec <putchar+0x18>
 80064e2:	9001      	str	r0, [sp, #4]
 80064e4:	4620      	mov	r0, r4
 80064e6:	f7ff fd57 	bl	8005f98 <__sinit>
 80064ea:	9901      	ldr	r1, [sp, #4]
 80064ec:	68a2      	ldr	r2, [r4, #8]
 80064ee:	4620      	mov	r0, r4
 80064f0:	b002      	add	sp, #8
 80064f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064f6:	f001 be5d 	b.w	80081b4 <_putc_r>
 80064fa:	bf00      	nop
 80064fc:	20000018 	.word	0x20000018

08006500 <_sbrk_r>:
 8006500:	b538      	push	{r3, r4, r5, lr}
 8006502:	4d06      	ldr	r5, [pc, #24]	; (800651c <_sbrk_r+0x1c>)
 8006504:	2300      	movs	r3, #0
 8006506:	4604      	mov	r4, r0
 8006508:	4608      	mov	r0, r1
 800650a:	602b      	str	r3, [r5, #0]
 800650c:	f7fb febc 	bl	8002288 <_sbrk>
 8006510:	1c43      	adds	r3, r0, #1
 8006512:	d102      	bne.n	800651a <_sbrk_r+0x1a>
 8006514:	682b      	ldr	r3, [r5, #0]
 8006516:	b103      	cbz	r3, 800651a <_sbrk_r+0x1a>
 8006518:	6023      	str	r3, [r4, #0]
 800651a:	bd38      	pop	{r3, r4, r5, pc}
 800651c:	200004b4 	.word	0x200004b4

08006520 <__sread>:
 8006520:	b510      	push	{r4, lr}
 8006522:	460c      	mov	r4, r1
 8006524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006528:	f001 fe8c 	bl	8008244 <_read_r>
 800652c:	2800      	cmp	r0, #0
 800652e:	bfab      	itete	ge
 8006530:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006532:	89a3      	ldrhlt	r3, [r4, #12]
 8006534:	181b      	addge	r3, r3, r0
 8006536:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800653a:	bfac      	ite	ge
 800653c:	6563      	strge	r3, [r4, #84]	; 0x54
 800653e:	81a3      	strhlt	r3, [r4, #12]
 8006540:	bd10      	pop	{r4, pc}

08006542 <__seofread>:
 8006542:	2000      	movs	r0, #0
 8006544:	4770      	bx	lr

08006546 <__swrite>:
 8006546:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800654a:	461f      	mov	r7, r3
 800654c:	898b      	ldrh	r3, [r1, #12]
 800654e:	05db      	lsls	r3, r3, #23
 8006550:	4605      	mov	r5, r0
 8006552:	460c      	mov	r4, r1
 8006554:	4616      	mov	r6, r2
 8006556:	d505      	bpl.n	8006564 <__swrite+0x1e>
 8006558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800655c:	2302      	movs	r3, #2
 800655e:	2200      	movs	r2, #0
 8006560:	f001 f9ae 	bl	80078c0 <_lseek_r>
 8006564:	89a3      	ldrh	r3, [r4, #12]
 8006566:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800656a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800656e:	81a3      	strh	r3, [r4, #12]
 8006570:	4632      	mov	r2, r6
 8006572:	463b      	mov	r3, r7
 8006574:	4628      	mov	r0, r5
 8006576:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800657a:	f001 b851 	b.w	8007620 <_write_r>

0800657e <__sseek>:
 800657e:	b510      	push	{r4, lr}
 8006580:	460c      	mov	r4, r1
 8006582:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006586:	f001 f99b 	bl	80078c0 <_lseek_r>
 800658a:	1c43      	adds	r3, r0, #1
 800658c:	89a3      	ldrh	r3, [r4, #12]
 800658e:	bf15      	itete	ne
 8006590:	6560      	strne	r0, [r4, #84]	; 0x54
 8006592:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006596:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800659a:	81a3      	strheq	r3, [r4, #12]
 800659c:	bf18      	it	ne
 800659e:	81a3      	strhne	r3, [r4, #12]
 80065a0:	bd10      	pop	{r4, pc}

080065a2 <__sclose>:
 80065a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065a6:	f001 b86f 	b.w	8007688 <_close_r>
	...

080065ac <iso_year_adjust>:
 80065ac:	6941      	ldr	r1, [r0, #20]
 80065ae:	2900      	cmp	r1, #0
 80065b0:	f240 736c 	movw	r3, #1900	; 0x76c
 80065b4:	bfa8      	it	ge
 80065b6:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 80065ba:	18ca      	adds	r2, r1, r3
 80065bc:	078b      	lsls	r3, r1, #30
 80065be:	d105      	bne.n	80065cc <iso_year_adjust+0x20>
 80065c0:	2164      	movs	r1, #100	; 0x64
 80065c2:	fb92 f3f1 	sdiv	r3, r2, r1
 80065c6:	fb01 2313 	mls	r3, r1, r3, r2
 80065ca:	b9db      	cbnz	r3, 8006604 <iso_year_adjust+0x58>
 80065cc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80065d0:	fb92 f3f1 	sdiv	r3, r2, r1
 80065d4:	fb01 2313 	mls	r3, r1, r3, r2
 80065d8:	fab3 f383 	clz	r3, r3
 80065dc:	095b      	lsrs	r3, r3, #5
 80065de:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 80065e2:	0040      	lsls	r0, r0, #1
 80065e4:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 80065e8:	4418      	add	r0, r3
 80065ea:	f241 63a2 	movw	r3, #5794	; 0x16a2
 80065ee:	4298      	cmp	r0, r3
 80065f0:	d03a      	beq.n	8006668 <iso_year_adjust+0xbc>
 80065f2:	dc21      	bgt.n	8006638 <iso_year_adjust+0x8c>
 80065f4:	2801      	cmp	r0, #1
 80065f6:	dc1a      	bgt.n	800662e <iso_year_adjust+0x82>
 80065f8:	2800      	cmp	r0, #0
 80065fa:	bfb4      	ite	lt
 80065fc:	2000      	movlt	r0, #0
 80065fe:	f04f 30ff 	movge.w	r0, #4294967295
 8006602:	4770      	bx	lr
 8006604:	2301      	movs	r3, #1
 8006606:	e7ea      	b.n	80065de <iso_year_adjust+0x32>
 8006608:	2817      	cmp	r0, #23
 800660a:	d813      	bhi.n	8006634 <iso_year_adjust+0x88>
 800660c:	e8df f000 	tbb	[pc, r0]
 8006610:	0c0c0c0c 	.word	0x0c0c0c0c
 8006614:	0c0c1212 	.word	0x0c0c1212
 8006618:	12121212 	.word	0x12121212
 800661c:	12121212 	.word	0x12121212
 8006620:	0c0c1212 	.word	0x0c0c1212
 8006624:	0c0c1212 	.word	0x0c0c1212
 8006628:	f04f 30ff 	mov.w	r0, #4294967295
 800662c:	4770      	bx	lr
 800662e:	380a      	subs	r0, #10
 8006630:	2817      	cmp	r0, #23
 8006632:	d9e9      	bls.n	8006608 <iso_year_adjust+0x5c>
 8006634:	2000      	movs	r0, #0
 8006636:	4770      	bx	lr
 8006638:	f241 63b4 	movw	r3, #5812	; 0x16b4
 800663c:	4298      	cmp	r0, r3
 800663e:	dc06      	bgt.n	800664e <iso_year_adjust+0xa2>
 8006640:	f241 63b1 	movw	r3, #5809	; 0x16b1
 8006644:	4298      	cmp	r0, r3
 8006646:	bfd4      	ite	le
 8006648:	2000      	movle	r0, #0
 800664a:	2001      	movgt	r0, #1
 800664c:	4770      	bx	lr
 800664e:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 8006652:	3802      	subs	r0, #2
 8006654:	2815      	cmp	r0, #21
 8006656:	d8ed      	bhi.n	8006634 <iso_year_adjust+0x88>
 8006658:	2301      	movs	r3, #1
 800665a:	4083      	lsls	r3, r0
 800665c:	4803      	ldr	r0, [pc, #12]	; (800666c <iso_year_adjust+0xc0>)
 800665e:	4018      	ands	r0, r3
 8006660:	3800      	subs	r0, #0
 8006662:	bf18      	it	ne
 8006664:	2001      	movne	r0, #1
 8006666:	4770      	bx	lr
 8006668:	2001      	movs	r0, #1
 800666a:	4770      	bx	lr
 800666c:	002a001f 	.word	0x002a001f

08006670 <__strftime>:
 8006670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006674:	b091      	sub	sp, #68	; 0x44
 8006676:	461d      	mov	r5, r3
 8006678:	2300      	movs	r3, #0
 800667a:	4681      	mov	r9, r0
 800667c:	4688      	mov	r8, r1
 800667e:	9304      	str	r3, [sp, #16]
 8006680:	461c      	mov	r4, r3
 8006682:	7813      	ldrb	r3, [r2, #0]
 8006684:	2b00      	cmp	r3, #0
 8006686:	f000 84d1 	beq.w	800702c <__strftime+0x9bc>
 800668a:	2b25      	cmp	r3, #37	; 0x25
 800668c:	d11b      	bne.n	80066c6 <__strftime+0x56>
 800668e:	7857      	ldrb	r7, [r2, #1]
 8006690:	2f30      	cmp	r7, #48	; 0x30
 8006692:	d024      	beq.n	80066de <__strftime+0x6e>
 8006694:	2f2b      	cmp	r7, #43	; 0x2b
 8006696:	d022      	beq.n	80066de <__strftime+0x6e>
 8006698:	f102 0b01 	add.w	fp, r2, #1
 800669c:	2700      	movs	r7, #0
 800669e:	f89b 3000 	ldrb.w	r3, [fp]
 80066a2:	3b31      	subs	r3, #49	; 0x31
 80066a4:	2b08      	cmp	r3, #8
 80066a6:	d81d      	bhi.n	80066e4 <__strftime+0x74>
 80066a8:	4658      	mov	r0, fp
 80066aa:	220a      	movs	r2, #10
 80066ac:	a908      	add	r1, sp, #32
 80066ae:	f000 fd57 	bl	8007160 <strtoul>
 80066b2:	f8dd b020 	ldr.w	fp, [sp, #32]
 80066b6:	4606      	mov	r6, r0
 80066b8:	f89b 3000 	ldrb.w	r3, [fp]
 80066bc:	2b45      	cmp	r3, #69	; 0x45
 80066be:	d113      	bne.n	80066e8 <__strftime+0x78>
 80066c0:	f10b 0b01 	add.w	fp, fp, #1
 80066c4:	e012      	b.n	80066ec <__strftime+0x7c>
 80066c6:	f108 31ff 	add.w	r1, r8, #4294967295
 80066ca:	42a1      	cmp	r1, r4
 80066cc:	d802      	bhi.n	80066d4 <__strftime+0x64>
 80066ce:	2400      	movs	r4, #0
 80066d0:	f000 bcb2 	b.w	8007038 <__strftime+0x9c8>
 80066d4:	f809 3004 	strb.w	r3, [r9, r4]
 80066d8:	3201      	adds	r2, #1
 80066da:	3401      	adds	r4, #1
 80066dc:	e7d1      	b.n	8006682 <__strftime+0x12>
 80066de:	f102 0b02 	add.w	fp, r2, #2
 80066e2:	e7dc      	b.n	800669e <__strftime+0x2e>
 80066e4:	2600      	movs	r6, #0
 80066e6:	e7e7      	b.n	80066b8 <__strftime+0x48>
 80066e8:	2b4f      	cmp	r3, #79	; 0x4f
 80066ea:	d0e9      	beq.n	80066c0 <__strftime+0x50>
 80066ec:	f89b 0000 	ldrb.w	r0, [fp]
 80066f0:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 80066f4:	2b55      	cmp	r3, #85	; 0x55
 80066f6:	d8ea      	bhi.n	80066ce <__strftime+0x5e>
 80066f8:	a201      	add	r2, pc, #4	; (adr r2, 8006700 <__strftime+0x90>)
 80066fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066fe:	bf00      	nop
 8006700:	0800701f 	.word	0x0800701f
 8006704:	080066cf 	.word	0x080066cf
 8006708:	080066cf 	.word	0x080066cf
 800670c:	080066cf 	.word	0x080066cf
 8006710:	080066cf 	.word	0x080066cf
 8006714:	080066cf 	.word	0x080066cf
 8006718:	080066cf 	.word	0x080066cf
 800671c:	080066cf 	.word	0x080066cf
 8006720:	080066cf 	.word	0x080066cf
 8006724:	080066cf 	.word	0x080066cf
 8006728:	080066cf 	.word	0x080066cf
 800672c:	080066cf 	.word	0x080066cf
 8006730:	080066cf 	.word	0x080066cf
 8006734:	080066cf 	.word	0x080066cf
 8006738:	080066cf 	.word	0x080066cf
 800673c:	080066cf 	.word	0x080066cf
 8006740:	080066cf 	.word	0x080066cf
 8006744:	080066cf 	.word	0x080066cf
 8006748:	080066cf 	.word	0x080066cf
 800674c:	080066cf 	.word	0x080066cf
 8006750:	080066cf 	.word	0x080066cf
 8006754:	080066cf 	.word	0x080066cf
 8006758:	080066cf 	.word	0x080066cf
 800675c:	080066cf 	.word	0x080066cf
 8006760:	080066cf 	.word	0x080066cf
 8006764:	080066cf 	.word	0x080066cf
 8006768:	080066cf 	.word	0x080066cf
 800676c:	080066cf 	.word	0x080066cf
 8006770:	08006897 	.word	0x08006897
 8006774:	080068f1 	.word	0x080068f1
 8006778:	08006967 	.word	0x08006967
 800677c:	08006a01 	.word	0x08006a01
 8006780:	080066cf 	.word	0x080066cf
 8006784:	08006a4d 	.word	0x08006a4d
 8006788:	08006b2d 	.word	0x08006b2d
 800678c:	08006c2f 	.word	0x08006c2f
 8006790:	08006c3d 	.word	0x08006c3d
 8006794:	080066cf 	.word	0x080066cf
 8006798:	080066cf 	.word	0x080066cf
 800679c:	080066cf 	.word	0x080066cf
 80067a0:	08006c6d 	.word	0x08006c6d
 80067a4:	080066cf 	.word	0x080066cf
 80067a8:	080066cf 	.word	0x080066cf
 80067ac:	08006c85 	.word	0x08006c85
 80067b0:	080066cf 	.word	0x080066cf
 80067b4:	08006cd3 	.word	0x08006cd3
 80067b8:	08006de9 	.word	0x08006de9
 80067bc:	08006dfb 	.word	0x08006dfb
 80067c0:	08006e53 	.word	0x08006e53
 80067c4:	08006e63 	.word	0x08006e63
 80067c8:	08006ed9 	.word	0x08006ed9
 80067cc:	0800695f 	.word	0x0800695f
 80067d0:	08006f0d 	.word	0x08006f0d
 80067d4:	08006fcb 	.word	0x08006fcb
 80067d8:	080066cf 	.word	0x080066cf
 80067dc:	080066cf 	.word	0x080066cf
 80067e0:	080066cf 	.word	0x080066cf
 80067e4:	080066cf 	.word	0x080066cf
 80067e8:	080066cf 	.word	0x080066cf
 80067ec:	080066cf 	.word	0x080066cf
 80067f0:	08006859 	.word	0x08006859
 80067f4:	080068c5 	.word	0x080068c5
 80067f8:	0800691f 	.word	0x0800691f
 80067fc:	080069d9 	.word	0x080069d9
 8006800:	080069d9 	.word	0x080069d9
 8006804:	080066cf 	.word	0x080066cf
 8006808:	08006a95 	.word	0x08006a95
 800680c:	080068c5 	.word	0x080068c5
 8006810:	080066cf 	.word	0x080066cf
 8006814:	08006c5f 	.word	0x08006c5f
 8006818:	08006c2f 	.word	0x08006c2f
 800681c:	08006c3d 	.word	0x08006c3d
 8006820:	08006c67 	.word	0x08006c67
 8006824:	08006c71 	.word	0x08006c71
 8006828:	080066cf 	.word	0x080066cf
 800682c:	08006c85 	.word	0x08006c85
 8006830:	080066cf 	.word	0x080066cf
 8006834:	0800694f 	.word	0x0800694f
 8006838:	08006ce9 	.word	0x08006ce9
 800683c:	08006ded 	.word	0x08006ded
 8006840:	08006e35 	.word	0x08006e35
 8006844:	080066cf 	.word	0x080066cf
 8006848:	08006ec9 	.word	0x08006ec9
 800684c:	08006957 	.word	0x08006957
 8006850:	08006ef1 	.word	0x08006ef1
 8006854:	08006f5d 	.word	0x08006f5d
 8006858:	69ab      	ldr	r3, [r5, #24]
 800685a:	4aa7      	ldr	r2, [pc, #668]	; (8006af8 <__strftime+0x488>)
 800685c:	3318      	adds	r3, #24
 800685e:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8006862:	4630      	mov	r0, r6
 8006864:	f7f9 fcbc 	bl	80001e0 <strlen>
 8006868:	3e01      	subs	r6, #1
 800686a:	4420      	add	r0, r4
 800686c:	f108 33ff 	add.w	r3, r8, #4294967295
 8006870:	42a0      	cmp	r0, r4
 8006872:	d107      	bne.n	8006884 <__strftime+0x214>
 8006874:	f89b 3000 	ldrb.w	r3, [fp]
 8006878:	2b00      	cmp	r3, #0
 800687a:	f000 83d7 	beq.w	800702c <__strftime+0x9bc>
 800687e:	f10b 0201 	add.w	r2, fp, #1
 8006882:	e6fe      	b.n	8006682 <__strftime+0x12>
 8006884:	42a3      	cmp	r3, r4
 8006886:	f67f af22 	bls.w	80066ce <__strftime+0x5e>
 800688a:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 800688e:	f809 2004 	strb.w	r2, [r9, r4]
 8006892:	3401      	adds	r4, #1
 8006894:	e7ec      	b.n	8006870 <__strftime+0x200>
 8006896:	69aa      	ldr	r2, [r5, #24]
 8006898:	4b97      	ldr	r3, [pc, #604]	; (8006af8 <__strftime+0x488>)
 800689a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800689e:	6fde      	ldr	r6, [r3, #124]	; 0x7c
 80068a0:	4630      	mov	r0, r6
 80068a2:	f7f9 fc9d 	bl	80001e0 <strlen>
 80068a6:	3e01      	subs	r6, #1
 80068a8:	4420      	add	r0, r4
 80068aa:	f108 33ff 	add.w	r3, r8, #4294967295
 80068ae:	42a0      	cmp	r0, r4
 80068b0:	d0e0      	beq.n	8006874 <__strftime+0x204>
 80068b2:	42a3      	cmp	r3, r4
 80068b4:	f67f af0b 	bls.w	80066ce <__strftime+0x5e>
 80068b8:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 80068bc:	f809 2004 	strb.w	r2, [r9, r4]
 80068c0:	3401      	adds	r4, #1
 80068c2:	e7f4      	b.n	80068ae <__strftime+0x23e>
 80068c4:	4b8c      	ldr	r3, [pc, #560]	; (8006af8 <__strftime+0x488>)
 80068c6:	692a      	ldr	r2, [r5, #16]
 80068c8:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80068cc:	4630      	mov	r0, r6
 80068ce:	f7f9 fc87 	bl	80001e0 <strlen>
 80068d2:	3e01      	subs	r6, #1
 80068d4:	4420      	add	r0, r4
 80068d6:	f108 33ff 	add.w	r3, r8, #4294967295
 80068da:	42a0      	cmp	r0, r4
 80068dc:	d0ca      	beq.n	8006874 <__strftime+0x204>
 80068de:	42a3      	cmp	r3, r4
 80068e0:	f67f aef5 	bls.w	80066ce <__strftime+0x5e>
 80068e4:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 80068e8:	f809 2004 	strb.w	r2, [r9, r4]
 80068ec:	3401      	adds	r4, #1
 80068ee:	e7f4      	b.n	80068da <__strftime+0x26a>
 80068f0:	692b      	ldr	r3, [r5, #16]
 80068f2:	4a81      	ldr	r2, [pc, #516]	; (8006af8 <__strftime+0x488>)
 80068f4:	330c      	adds	r3, #12
 80068f6:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 80068fa:	4630      	mov	r0, r6
 80068fc:	f7f9 fc70 	bl	80001e0 <strlen>
 8006900:	3e01      	subs	r6, #1
 8006902:	4420      	add	r0, r4
 8006904:	f108 33ff 	add.w	r3, r8, #4294967295
 8006908:	42a0      	cmp	r0, r4
 800690a:	d0b3      	beq.n	8006874 <__strftime+0x204>
 800690c:	42a3      	cmp	r3, r4
 800690e:	f67f aede 	bls.w	80066ce <__strftime+0x5e>
 8006912:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8006916:	f809 2004 	strb.w	r2, [r9, r4]
 800691a:	3401      	adds	r4, #1
 800691c:	e7f4      	b.n	8006908 <__strftime+0x298>
 800691e:	4b76      	ldr	r3, [pc, #472]	; (8006af8 <__strftime+0x488>)
 8006920:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 8006924:	4630      	mov	r0, r6
 8006926:	f7f9 fc5b 	bl	80001e0 <strlen>
 800692a:	7833      	ldrb	r3, [r6, #0]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d0a1      	beq.n	8006874 <__strftime+0x204>
 8006930:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006932:	9300      	str	r3, [sp, #0]
 8006934:	4632      	mov	r2, r6
 8006936:	462b      	mov	r3, r5
 8006938:	eba8 0104 	sub.w	r1, r8, r4
 800693c:	eb09 0004 	add.w	r0, r9, r4
 8006940:	f7ff fe96 	bl	8006670 <__strftime>
 8006944:	2800      	cmp	r0, #0
 8006946:	f77f aec2 	ble.w	80066ce <__strftime+0x5e>
 800694a:	4404      	add	r4, r0
 800694c:	e792      	b.n	8006874 <__strftime+0x204>
 800694e:	4b6a      	ldr	r3, [pc, #424]	; (8006af8 <__strftime+0x488>)
 8006950:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
 8006954:	e7e6      	b.n	8006924 <__strftime+0x2b4>
 8006956:	4b68      	ldr	r3, [pc, #416]	; (8006af8 <__strftime+0x488>)
 8006958:	f8d3 609c 	ldr.w	r6, [r3, #156]	; 0x9c
 800695c:	e7e2      	b.n	8006924 <__strftime+0x2b4>
 800695e:	4b66      	ldr	r3, [pc, #408]	; (8006af8 <__strftime+0x488>)
 8006960:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 8006964:	e7de      	b.n	8006924 <__strftime+0x2b4>
 8006966:	4965      	ldr	r1, [pc, #404]	; (8006afc <__strftime+0x48c>)
 8006968:	f8d5 a014 	ldr.w	sl, [r5, #20]
 800696c:	458a      	cmp	sl, r1
 800696e:	bfac      	ite	ge
 8006970:	2100      	movge	r1, #0
 8006972:	2101      	movlt	r1, #1
 8006974:	f1ba 0f00 	cmp.w	sl, #0
 8006978:	db0e      	blt.n	8006998 <__strftime+0x328>
 800697a:	2064      	movs	r0, #100	; 0x64
 800697c:	fb9a f0f0 	sdiv	r0, sl, r0
 8006980:	3013      	adds	r0, #19
 8006982:	b19f      	cbz	r7, 80069ac <__strftime+0x33c>
 8006984:	2863      	cmp	r0, #99	; 0x63
 8006986:	dd25      	ble.n	80069d4 <__strftime+0x364>
 8006988:	4a5d      	ldr	r2, [pc, #372]	; (8006b00 <__strftime+0x490>)
 800698a:	4b5e      	ldr	r3, [pc, #376]	; (8006b04 <__strftime+0x494>)
 800698c:	2f2b      	cmp	r7, #43	; 0x2b
 800698e:	bf14      	ite	ne
 8006990:	4617      	movne	r7, r2
 8006992:	461f      	moveq	r7, r3
 8006994:	4a5c      	ldr	r2, [pc, #368]	; (8006b08 <__strftime+0x498>)
 8006996:	e00b      	b.n	80069b0 <__strftime+0x340>
 8006998:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 800699c:	9105      	str	r1, [sp, #20]
 800699e:	f000 fe51 	bl	8007644 <abs>
 80069a2:	2364      	movs	r3, #100	; 0x64
 80069a4:	9905      	ldr	r1, [sp, #20]
 80069a6:	fb90 f0f3 	sdiv	r0, r0, r3
 80069aa:	e7ea      	b.n	8006982 <__strftime+0x312>
 80069ac:	4f54      	ldr	r7, [pc, #336]	; (8006b00 <__strftime+0x490>)
 80069ae:	4a57      	ldr	r2, [pc, #348]	; (8006b0c <__strftime+0x49c>)
 80069b0:	4b57      	ldr	r3, [pc, #348]	; (8006b10 <__strftime+0x4a0>)
 80069b2:	9001      	str	r0, [sp, #4]
 80069b4:	2e02      	cmp	r6, #2
 80069b6:	bf2c      	ite	cs
 80069b8:	ebc1 0606 	rsbcs	r6, r1, r6
 80069bc:	f1c1 0602 	rsbcc	r6, r1, #2
 80069c0:	494e      	ldr	r1, [pc, #312]	; (8006afc <__strftime+0x48c>)
 80069c2:	9600      	str	r6, [sp, #0]
 80069c4:	458a      	cmp	sl, r1
 80069c6:	bfa8      	it	ge
 80069c8:	463b      	movge	r3, r7
 80069ca:	eba8 0104 	sub.w	r1, r8, r4
 80069ce:	eb09 0004 	add.w	r0, r9, r4
 80069d2:	e02a      	b.n	8006a2a <__strftime+0x3ba>
 80069d4:	4f4a      	ldr	r7, [pc, #296]	; (8006b00 <__strftime+0x490>)
 80069d6:	e7dd      	b.n	8006994 <__strftime+0x324>
 80069d8:	494e      	ldr	r1, [pc, #312]	; (8006b14 <__strftime+0x4a4>)
 80069da:	4a4f      	ldr	r2, [pc, #316]	; (8006b18 <__strftime+0x4a8>)
 80069dc:	68eb      	ldr	r3, [r5, #12]
 80069de:	2864      	cmp	r0, #100	; 0x64
 80069e0:	bf08      	it	eq
 80069e2:	460a      	moveq	r2, r1
 80069e4:	eba8 0104 	sub.w	r1, r8, r4
 80069e8:	eb09 0004 	add.w	r0, r9, r4
 80069ec:	f001 fc3c 	bl	8008268 <sniprintf>
 80069f0:	2800      	cmp	r0, #0
 80069f2:	f6ff ae6c 	blt.w	80066ce <__strftime+0x5e>
 80069f6:	4404      	add	r4, r0
 80069f8:	45a0      	cmp	r8, r4
 80069fa:	f63f af3b 	bhi.w	8006874 <__strftime+0x204>
 80069fe:	e666      	b.n	80066ce <__strftime+0x5e>
 8006a00:	6968      	ldr	r0, [r5, #20]
 8006a02:	692b      	ldr	r3, [r5, #16]
 8006a04:	68ef      	ldr	r7, [r5, #12]
 8006a06:	2800      	cmp	r0, #0
 8006a08:	eb09 0604 	add.w	r6, r9, r4
 8006a0c:	eba8 0104 	sub.w	r1, r8, r4
 8006a10:	f103 0301 	add.w	r3, r3, #1
 8006a14:	db0c      	blt.n	8006a30 <__strftime+0x3c0>
 8006a16:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8006a1a:	fb90 f2fc 	sdiv	r2, r0, ip
 8006a1e:	fb0c 0212 	mls	r2, ip, r2, r0
 8006a22:	e9cd 7200 	strd	r7, r2, [sp]
 8006a26:	4a3d      	ldr	r2, [pc, #244]	; (8006b1c <__strftime+0x4ac>)
 8006a28:	4630      	mov	r0, r6
 8006a2a:	f001 fc1d 	bl	8008268 <sniprintf>
 8006a2e:	e7df      	b.n	80069f0 <__strftime+0x380>
 8006a30:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8006a34:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8006a38:	f000 fe04 	bl	8007644 <abs>
 8006a3c:	2264      	movs	r2, #100	; 0x64
 8006a3e:	e9dd 1305 	ldrd	r1, r3, [sp, #20]
 8006a42:	fb90 fcf2 	sdiv	ip, r0, r2
 8006a46:	fb0c 0212 	mls	r2, ip, r2, r0
 8006a4a:	e7ea      	b.n	8006a22 <__strftime+0x3b2>
 8006a4c:	2325      	movs	r3, #37	; 0x25
 8006a4e:	f88d 3020 	strb.w	r3, [sp, #32]
 8006a52:	b187      	cbz	r7, 8006a76 <__strftime+0x406>
 8006a54:	2e06      	cmp	r6, #6
 8006a56:	bf38      	it	cc
 8006a58:	2606      	movcc	r6, #6
 8006a5a:	1fb3      	subs	r3, r6, #6
 8006a5c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 8006a60:	d10c      	bne.n	8006a7c <__strftime+0x40c>
 8006a62:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 8006a66:	492e      	ldr	r1, [pc, #184]	; (8006b20 <__strftime+0x4b0>)
 8006a68:	f001 fc5e 	bl	8008328 <strcpy>
 8006a6c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006a6e:	9300      	str	r3, [sp, #0]
 8006a70:	aa08      	add	r2, sp, #32
 8006a72:	462b      	mov	r3, r5
 8006a74:	e760      	b.n	8006938 <__strftime+0x2c8>
 8006a76:	272b      	movs	r7, #43	; 0x2b
 8006a78:	260a      	movs	r6, #10
 8006a7a:	e7ee      	b.n	8006a5a <__strftime+0x3ea>
 8006a7c:	4a29      	ldr	r2, [pc, #164]	; (8006b24 <__strftime+0x4b4>)
 8006a7e:	211e      	movs	r1, #30
 8006a80:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 8006a84:	f001 fbf0 	bl	8008268 <sniprintf>
 8006a88:	2800      	cmp	r0, #0
 8006a8a:	ddea      	ble.n	8006a62 <__strftime+0x3f2>
 8006a8c:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 8006a90:	4418      	add	r0, r3
 8006a92:	e7e8      	b.n	8006a66 <__strftime+0x3f6>
 8006a94:	4628      	mov	r0, r5
 8006a96:	f7ff fd89 	bl	80065ac <iso_year_adjust>
 8006a9a:	4606      	mov	r6, r0
 8006a9c:	6968      	ldr	r0, [r5, #20]
 8006a9e:	2800      	cmp	r0, #0
 8006aa0:	db11      	blt.n	8006ac6 <__strftime+0x456>
 8006aa2:	2264      	movs	r2, #100	; 0x64
 8006aa4:	fb90 f3f2 	sdiv	r3, r0, r2
 8006aa8:	fb02 0313 	mls	r3, r2, r3, r0
 8006aac:	441e      	add	r6, r3
 8006aae:	2364      	movs	r3, #100	; 0x64
 8006ab0:	fb96 f0f3 	sdiv	r0, r6, r3
 8006ab4:	fb03 6610 	mls	r6, r3, r0, r6
 8006ab8:	441e      	add	r6, r3
 8006aba:	fbb6 f2f3 	udiv	r2, r6, r3
 8006abe:	fb03 6312 	mls	r3, r3, r2, r6
 8006ac2:	4a14      	ldr	r2, [pc, #80]	; (8006b14 <__strftime+0x4a4>)
 8006ac4:	e78e      	b.n	80069e4 <__strftime+0x374>
 8006ac6:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8006aca:	f000 fdbb 	bl	8007644 <abs>
 8006ace:	2364      	movs	r3, #100	; 0x64
 8006ad0:	2e00      	cmp	r6, #0
 8006ad2:	fb90 f2f3 	sdiv	r2, r0, r3
 8006ad6:	fb02 0313 	mls	r3, r2, r3, r0
 8006ada:	da05      	bge.n	8006ae8 <__strftime+0x478>
 8006adc:	6969      	ldr	r1, [r5, #20]
 8006ade:	4a12      	ldr	r2, [pc, #72]	; (8006b28 <__strftime+0x4b8>)
 8006ae0:	4291      	cmp	r1, r2
 8006ae2:	bfb8      	it	lt
 8006ae4:	2601      	movlt	r6, #1
 8006ae6:	e7e1      	b.n	8006aac <__strftime+0x43c>
 8006ae8:	d0e0      	beq.n	8006aac <__strftime+0x43c>
 8006aea:	6969      	ldr	r1, [r5, #20]
 8006aec:	4a03      	ldr	r2, [pc, #12]	; (8006afc <__strftime+0x48c>)
 8006aee:	4291      	cmp	r1, r2
 8006af0:	bfb8      	it	lt
 8006af2:	f04f 36ff 	movlt.w	r6, #4294967295
 8006af6:	e7d9      	b.n	8006aac <__strftime+0x43c>
 8006af8:	0800a3ac 	.word	0x0800a3ac
 8006afc:	fffff894 	.word	0xfffff894
 8006b00:	0800a51f 	.word	0x0800a51f
 8006b04:	0800a237 	.word	0x0800a237
 8006b08:	0800a22f 	.word	0x0800a22f
 8006b0c:	0800a228 	.word	0x0800a228
 8006b10:	0800a65f 	.word	0x0800a65f
 8006b14:	0800a247 	.word	0x0800a247
 8006b18:	0800a239 	.word	0x0800a239
 8006b1c:	0800a23d 	.word	0x0800a23d
 8006b20:	0800a250 	.word	0x0800a250
 8006b24:	0800a24c 	.word	0x0800a24c
 8006b28:	fffff895 	.word	0xfffff895
 8006b2c:	4bb6      	ldr	r3, [pc, #728]	; (8006e08 <__strftime+0x798>)
 8006b2e:	6969      	ldr	r1, [r5, #20]
 8006b30:	4299      	cmp	r1, r3
 8006b32:	bfac      	ite	ge
 8006b34:	2300      	movge	r3, #0
 8006b36:	2301      	movlt	r3, #1
 8006b38:	4628      	mov	r0, r5
 8006b3a:	e9cd 3105 	strd	r3, r1, [sp, #20]
 8006b3e:	f7ff fd35 	bl	80065ac <iso_year_adjust>
 8006b42:	9906      	ldr	r1, [sp, #24]
 8006b44:	2900      	cmp	r1, #0
 8006b46:	4682      	mov	sl, r0
 8006b48:	db27      	blt.n	8006b9a <__strftime+0x52a>
 8006b4a:	2264      	movs	r2, #100	; 0x64
 8006b4c:	fb91 f2f2 	sdiv	r2, r1, r2
 8006b50:	3213      	adds	r2, #19
 8006b52:	6968      	ldr	r0, [r5, #20]
 8006b54:	2800      	cmp	r0, #0
 8006b56:	db2b      	blt.n	8006bb0 <__strftime+0x540>
 8006b58:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8006b5c:	fb90 fefc 	sdiv	lr, r0, ip
 8006b60:	fb0c 001e 	mls	r0, ip, lr, r0
 8006b64:	f1ba 0f00 	cmp.w	sl, #0
 8006b68:	da31      	bge.n	8006bce <__strftime+0x55e>
 8006b6a:	6969      	ldr	r1, [r5, #20]
 8006b6c:	4ba7      	ldr	r3, [pc, #668]	; (8006e0c <__strftime+0x79c>)
 8006b6e:	4299      	cmp	r1, r3
 8006b70:	db38      	blt.n	8006be4 <__strftime+0x574>
 8006b72:	eb0a 0300 	add.w	r3, sl, r0
 8006b76:	1c59      	adds	r1, r3, #1
 8006b78:	d139      	bne.n	8006bee <__strftime+0x57e>
 8006b7a:	3a01      	subs	r2, #1
 8006b7c:	2363      	movs	r3, #99	; 0x63
 8006b7e:	2064      	movs	r0, #100	; 0x64
 8006b80:	fb00 3202 	mla	r2, r0, r2, r3
 8006b84:	9b05      	ldr	r3, [sp, #20]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d036      	beq.n	8006bf8 <__strftime+0x588>
 8006b8a:	232d      	movs	r3, #45	; 0x2d
 8006b8c:	f88d 3020 	strb.w	r3, [sp, #32]
 8006b90:	b106      	cbz	r6, 8006b94 <__strftime+0x524>
 8006b92:	3e01      	subs	r6, #1
 8006b94:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 8006b98:	e038      	b.n	8006c0c <__strftime+0x59c>
 8006b9a:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 8006b9e:	9106      	str	r1, [sp, #24]
 8006ba0:	f000 fd50 	bl	8007644 <abs>
 8006ba4:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8006ba8:	9906      	ldr	r1, [sp, #24]
 8006baa:	fb90 f2fc 	sdiv	r2, r0, ip
 8006bae:	e7d0      	b.n	8006b52 <__strftime+0x4e2>
 8006bb0:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8006bb4:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8006bb8:	f000 fd44 	bl	8007644 <abs>
 8006bbc:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8006bc0:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8006bc4:	fb90 fefc 	sdiv	lr, r0, ip
 8006bc8:	fb0e 001c 	mls	r0, lr, ip, r0
 8006bcc:	e7ca      	b.n	8006b64 <__strftime+0x4f4>
 8006bce:	d0d0      	beq.n	8006b72 <__strftime+0x502>
 8006bd0:	4b8d      	ldr	r3, [pc, #564]	; (8006e08 <__strftime+0x798>)
 8006bd2:	4299      	cmp	r1, r3
 8006bd4:	bfb4      	ite	lt
 8006bd6:	2301      	movlt	r3, #1
 8006bd8:	2300      	movge	r3, #0
 8006bda:	9305      	str	r3, [sp, #20]
 8006bdc:	bfb8      	it	lt
 8006bde:	f04f 3aff 	movlt.w	sl, #4294967295
 8006be2:	e7c6      	b.n	8006b72 <__strftime+0x502>
 8006be4:	f04f 0a01 	mov.w	sl, #1
 8006be8:	f8cd a014 	str.w	sl, [sp, #20]
 8006bec:	e7c1      	b.n	8006b72 <__strftime+0x502>
 8006bee:	2b64      	cmp	r3, #100	; 0x64
 8006bf0:	bf04      	itt	eq
 8006bf2:	3201      	addeq	r2, #1
 8006bf4:	2300      	moveq	r3, #0
 8006bf6:	e7c2      	b.n	8006b7e <__strftime+0x50e>
 8006bf8:	2f2b      	cmp	r7, #43	; 0x2b
 8006bfa:	d106      	bne.n	8006c0a <__strftime+0x59a>
 8006bfc:	f242 730f 	movw	r3, #9999	; 0x270f
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d902      	bls.n	8006c0a <__strftime+0x59a>
 8006c04:	f88d 7020 	strb.w	r7, [sp, #32]
 8006c08:	e7c2      	b.n	8006b90 <__strftime+0x520>
 8006c0a:	ab08      	add	r3, sp, #32
 8006c0c:	2125      	movs	r1, #37	; 0x25
 8006c0e:	7019      	strb	r1, [r3, #0]
 8006c10:	b94f      	cbnz	r7, 8006c26 <__strftime+0x5b6>
 8006c12:	1c58      	adds	r0, r3, #1
 8006c14:	497e      	ldr	r1, [pc, #504]	; (8006e10 <__strftime+0x7a0>)
 8006c16:	9205      	str	r2, [sp, #20]
 8006c18:	f001 fb86 	bl	8008328 <strcpy>
 8006c1c:	9a05      	ldr	r2, [sp, #20]
 8006c1e:	9200      	str	r2, [sp, #0]
 8006c20:	4633      	mov	r3, r6
 8006c22:	aa08      	add	r2, sp, #32
 8006c24:	e059      	b.n	8006cda <__strftime+0x66a>
 8006c26:	2130      	movs	r1, #48	; 0x30
 8006c28:	1c98      	adds	r0, r3, #2
 8006c2a:	7059      	strb	r1, [r3, #1]
 8006c2c:	e7f2      	b.n	8006c14 <__strftime+0x5a4>
 8006c2e:	4979      	ldr	r1, [pc, #484]	; (8006e14 <__strftime+0x7a4>)
 8006c30:	4a79      	ldr	r2, [pc, #484]	; (8006e18 <__strftime+0x7a8>)
 8006c32:	68ab      	ldr	r3, [r5, #8]
 8006c34:	286b      	cmp	r0, #107	; 0x6b
 8006c36:	bf08      	it	eq
 8006c38:	460a      	moveq	r2, r1
 8006c3a:	e6d3      	b.n	80069e4 <__strftime+0x374>
 8006c3c:	68ab      	ldr	r3, [r5, #8]
 8006c3e:	b163      	cbz	r3, 8006c5a <__strftime+0x5ea>
 8006c40:	2b0c      	cmp	r3, #12
 8006c42:	d004      	beq.n	8006c4e <__strftime+0x5de>
 8006c44:	210c      	movs	r1, #12
 8006c46:	fb93 f2f1 	sdiv	r2, r3, r1
 8006c4a:	fb01 3312 	mls	r3, r1, r2, r3
 8006c4e:	4972      	ldr	r1, [pc, #456]	; (8006e18 <__strftime+0x7a8>)
 8006c50:	4a70      	ldr	r2, [pc, #448]	; (8006e14 <__strftime+0x7a4>)
 8006c52:	2849      	cmp	r0, #73	; 0x49
 8006c54:	bf08      	it	eq
 8006c56:	460a      	moveq	r2, r1
 8006c58:	e6c4      	b.n	80069e4 <__strftime+0x374>
 8006c5a:	230c      	movs	r3, #12
 8006c5c:	e7f7      	b.n	8006c4e <__strftime+0x5de>
 8006c5e:	69eb      	ldr	r3, [r5, #28]
 8006c60:	4a6e      	ldr	r2, [pc, #440]	; (8006e1c <__strftime+0x7ac>)
 8006c62:	3301      	adds	r3, #1
 8006c64:	e6be      	b.n	80069e4 <__strftime+0x374>
 8006c66:	692b      	ldr	r3, [r5, #16]
 8006c68:	3301      	adds	r3, #1
 8006c6a:	e72a      	b.n	8006ac2 <__strftime+0x452>
 8006c6c:	686b      	ldr	r3, [r5, #4]
 8006c6e:	e728      	b.n	8006ac2 <__strftime+0x452>
 8006c70:	f108 33ff 	add.w	r3, r8, #4294967295
 8006c74:	42a3      	cmp	r3, r4
 8006c76:	f67f ad2a 	bls.w	80066ce <__strftime+0x5e>
 8006c7a:	230a      	movs	r3, #10
 8006c7c:	f809 3004 	strb.w	r3, [r9, r4]
 8006c80:	3401      	adds	r4, #1
 8006c82:	e5f7      	b.n	8006874 <__strftime+0x204>
 8006c84:	68ab      	ldr	r3, [r5, #8]
 8006c86:	2b0b      	cmp	r3, #11
 8006c88:	bfcc      	ite	gt
 8006c8a:	22a4      	movgt	r2, #164	; 0xa4
 8006c8c:	22a0      	movle	r2, #160	; 0xa0
 8006c8e:	4b64      	ldr	r3, [pc, #400]	; (8006e20 <__strftime+0x7b0>)
 8006c90:	4413      	add	r3, r2
 8006c92:	685e      	ldr	r6, [r3, #4]
 8006c94:	4630      	mov	r0, r6
 8006c96:	f7f9 faa3 	bl	80001e0 <strlen>
 8006c9a:	1e72      	subs	r2, r6, #1
 8006c9c:	4420      	add	r0, r4
 8006c9e:	f108 36ff 	add.w	r6, r8, #4294967295
 8006ca2:	42a0      	cmp	r0, r4
 8006ca4:	f43f ade6 	beq.w	8006874 <__strftime+0x204>
 8006ca8:	42a6      	cmp	r6, r4
 8006caa:	f67f ad10 	bls.w	80066ce <__strftime+0x5e>
 8006cae:	f89b 1000 	ldrb.w	r1, [fp]
 8006cb2:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8006cb6:	2950      	cmp	r1, #80	; 0x50
 8006cb8:	d107      	bne.n	8006cca <__strftime+0x65a>
 8006cba:	495a      	ldr	r1, [pc, #360]	; (8006e24 <__strftime+0x7b4>)
 8006cbc:	5cc9      	ldrb	r1, [r1, r3]
 8006cbe:	f001 0103 	and.w	r1, r1, #3
 8006cc2:	2901      	cmp	r1, #1
 8006cc4:	bf08      	it	eq
 8006cc6:	3320      	addeq	r3, #32
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	f809 3004 	strb.w	r3, [r9, r4]
 8006cce:	3401      	adds	r4, #1
 8006cd0:	e7e7      	b.n	8006ca2 <__strftime+0x632>
 8006cd2:	686b      	ldr	r3, [r5, #4]
 8006cd4:	9300      	str	r3, [sp, #0]
 8006cd6:	4a54      	ldr	r2, [pc, #336]	; (8006e28 <__strftime+0x7b8>)
 8006cd8:	68ab      	ldr	r3, [r5, #8]
 8006cda:	eba8 0104 	sub.w	r1, r8, r4
 8006cde:	eb09 0004 	add.w	r0, r9, r4
 8006ce2:	f001 fac1 	bl	8008268 <sniprintf>
 8006ce6:	e683      	b.n	80069f0 <__strftime+0x380>
 8006ce8:	6a2b      	ldr	r3, [r5, #32]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	db79      	blt.n	8006de2 <__strftime+0x772>
 8006cee:	f000 fae9 	bl	80072c4 <__tz_lock>
 8006cf2:	9b04      	ldr	r3, [sp, #16]
 8006cf4:	b90b      	cbnz	r3, 8006cfa <__strftime+0x68a>
 8006cf6:	f000 faf1 	bl	80072dc <_tzset_unlocked>
 8006cfa:	f000 fd29 	bl	8007750 <__gettzinfo>
 8006cfe:	6a2b      	ldr	r3, [r5, #32]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	bfcc      	ite	gt
 8006d04:	2350      	movgt	r3, #80	; 0x50
 8006d06:	2328      	movle	r3, #40	; 0x28
 8006d08:	58c3      	ldr	r3, [r0, r3]
 8006d0a:	f1c3 0a00 	rsb	sl, r3, #0
 8006d0e:	f000 fadf 	bl	80072d0 <__tz_unlock>
 8006d12:	2301      	movs	r3, #1
 8006d14:	9304      	str	r3, [sp, #16]
 8006d16:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8006d1a:	4662      	mov	r2, ip
 8006d1c:	f1bc 0645 	subs.w	r6, ip, #69	; 0x45
 8006d20:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8006d24:	9602      	str	r6, [sp, #8]
 8006d26:	f143 36ff 	adc.w	r6, r3, #4294967295
 8006d2a:	9603      	str	r6, [sp, #12]
 8006d2c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006d30:	2e00      	cmp	r6, #0
 8006d32:	f177 0600 	sbcs.w	r6, r7, #0
 8006d36:	eba8 0104 	sub.w	r1, r8, r4
 8006d3a:	eb09 0004 	add.w	r0, r9, r4
 8006d3e:	da05      	bge.n	8006d4c <__strftime+0x6dc>
 8006d40:	f1bc 0642 	subs.w	r6, ip, #66	; 0x42
 8006d44:	f143 33ff 	adc.w	r3, r3, #4294967295
 8006d48:	9602      	str	r6, [sp, #8]
 8006d4a:	9303      	str	r3, [sp, #12]
 8006d4c:	9b02      	ldr	r3, [sp, #8]
 8006d4e:	089e      	lsrs	r6, r3, #2
 8006d50:	9b03      	ldr	r3, [sp, #12]
 8006d52:	ea46 7683 	orr.w	r6, r6, r3, lsl #30
 8006d56:	f10c 32ff 	add.w	r2, ip, #4294967295
 8006d5a:	109f      	asrs	r7, r3, #2
 8006d5c:	2364      	movs	r3, #100	; 0x64
 8006d5e:	fb92 f3f3 	sdiv	r3, r2, r3
 8006d62:	1af6      	subs	r6, r6, r3
 8006d64:	eb67 77e3 	sbc.w	r7, r7, r3, asr #31
 8006d68:	f20c 122b 	addw	r2, ip, #299	; 0x12b
 8006d6c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006d70:	fb92 f3f3 	sdiv	r3, r2, r3
 8006d74:	18f6      	adds	r6, r6, r3
 8006d76:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 8006d7a:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 8006d7e:	f240 136d 	movw	r3, #365	; 0x16d
 8006d82:	fb03 fc0c 	mul.w	ip, r3, ip
 8006d86:	69eb      	ldr	r3, [r5, #28]
 8006d88:	eb16 060c 	adds.w	r6, r6, ip
 8006d8c:	eb47 77ec 	adc.w	r7, r7, ip, asr #31
 8006d90:	18f6      	adds	r6, r6, r3
 8006d92:	f04f 0c18 	mov.w	ip, #24
 8006d96:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 8006d9a:	fba6 230c 	umull	r2, r3, r6, ip
 8006d9e:	68ae      	ldr	r6, [r5, #8]
 8006da0:	fb0c 3307 	mla	r3, ip, r7, r3
 8006da4:	1992      	adds	r2, r2, r6
 8006da6:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 8006daa:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 8006dae:	fba2 670c 	umull	r6, r7, r2, ip
 8006db2:	fb0c 7703 	mla	r7, ip, r3, r7
 8006db6:	686b      	ldr	r3, [r5, #4]
 8006db8:	18f6      	adds	r6, r6, r3
 8006dba:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 8006dbe:	fba6 230c 	umull	r2, r3, r6, ip
 8006dc2:	682e      	ldr	r6, [r5, #0]
 8006dc4:	fb0c 3307 	mla	r3, ip, r7, r3
 8006dc8:	1992      	adds	r2, r2, r6
 8006dca:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 8006dce:	ebb2 020a 	subs.w	r2, r2, sl
 8006dd2:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 8006dd6:	e9cd 2300 	strd	r2, r3, [sp]
 8006dda:	4a14      	ldr	r2, [pc, #80]	; (8006e2c <__strftime+0x7bc>)
 8006ddc:	f001 fa44 	bl	8008268 <sniprintf>
 8006de0:	e606      	b.n	80069f0 <__strftime+0x380>
 8006de2:	f04f 0a00 	mov.w	sl, #0
 8006de6:	e796      	b.n	8006d16 <__strftime+0x6a6>
 8006de8:	682b      	ldr	r3, [r5, #0]
 8006dea:	e66a      	b.n	8006ac2 <__strftime+0x452>
 8006dec:	f108 33ff 	add.w	r3, r8, #4294967295
 8006df0:	42a3      	cmp	r3, r4
 8006df2:	f67f ac6c 	bls.w	80066ce <__strftime+0x5e>
 8006df6:	2309      	movs	r3, #9
 8006df8:	e740      	b.n	8006c7c <__strftime+0x60c>
 8006dfa:	682b      	ldr	r3, [r5, #0]
 8006dfc:	9301      	str	r3, [sp, #4]
 8006dfe:	686b      	ldr	r3, [r5, #4]
 8006e00:	9300      	str	r3, [sp, #0]
 8006e02:	4a0b      	ldr	r2, [pc, #44]	; (8006e30 <__strftime+0x7c0>)
 8006e04:	68ab      	ldr	r3, [r5, #8]
 8006e06:	e5e0      	b.n	80069ca <__strftime+0x35a>
 8006e08:	fffff894 	.word	0xfffff894
 8006e0c:	fffff895 	.word	0xfffff895
 8006e10:	0800a258 	.word	0x0800a258
 8006e14:	0800a239 	.word	0x0800a239
 8006e18:	0800a247 	.word	0x0800a247
 8006e1c:	0800a25c 	.word	0x0800a25c
 8006e20:	0800a3ac 	.word	0x0800a3ac
 8006e24:	0800a521 	.word	0x0800a521
 8006e28:	0800a26b 	.word	0x0800a26b
 8006e2c:	0800a261 	.word	0x0800a261
 8006e30:	0800a266 	.word	0x0800a266
 8006e34:	f108 33ff 	add.w	r3, r8, #4294967295
 8006e38:	42a3      	cmp	r3, r4
 8006e3a:	f67f ac48 	bls.w	80066ce <__strftime+0x5e>
 8006e3e:	69ab      	ldr	r3, [r5, #24]
 8006e40:	eb09 0204 	add.w	r2, r9, r4
 8006e44:	3401      	adds	r4, #1
 8006e46:	b913      	cbnz	r3, 8006e4e <__strftime+0x7de>
 8006e48:	2337      	movs	r3, #55	; 0x37
 8006e4a:	7013      	strb	r3, [r2, #0]
 8006e4c:	e512      	b.n	8006874 <__strftime+0x204>
 8006e4e:	3330      	adds	r3, #48	; 0x30
 8006e50:	e7fb      	b.n	8006e4a <__strftime+0x7da>
 8006e52:	69eb      	ldr	r3, [r5, #28]
 8006e54:	69aa      	ldr	r2, [r5, #24]
 8006e56:	3307      	adds	r3, #7
 8006e58:	1a9b      	subs	r3, r3, r2
 8006e5a:	2207      	movs	r2, #7
 8006e5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e60:	e62f      	b.n	8006ac2 <__strftime+0x452>
 8006e62:	4628      	mov	r0, r5
 8006e64:	f7ff fba2 	bl	80065ac <iso_year_adjust>
 8006e68:	69aa      	ldr	r2, [r5, #24]
 8006e6a:	b132      	cbz	r2, 8006e7a <__strftime+0x80a>
 8006e6c:	3a01      	subs	r2, #1
 8006e6e:	2800      	cmp	r0, #0
 8006e70:	dc28      	bgt.n	8006ec4 <__strftime+0x854>
 8006e72:	69eb      	ldr	r3, [r5, #28]
 8006e74:	d103      	bne.n	8006e7e <__strftime+0x80e>
 8006e76:	330a      	adds	r3, #10
 8006e78:	e7ee      	b.n	8006e58 <__strftime+0x7e8>
 8006e7a:	2206      	movs	r2, #6
 8006e7c:	e7f7      	b.n	8006e6e <__strftime+0x7fe>
 8006e7e:	6968      	ldr	r0, [r5, #20]
 8006e80:	2800      	cmp	r0, #0
 8006e82:	eba2 0303 	sub.w	r3, r2, r3
 8006e86:	f240 726b 	movw	r2, #1899	; 0x76b
 8006e8a:	bfa8      	it	ge
 8006e8c:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 8006e90:	4410      	add	r0, r2
 8006e92:	0782      	lsls	r2, r0, #30
 8006e94:	d105      	bne.n	8006ea2 <__strftime+0x832>
 8006e96:	2264      	movs	r2, #100	; 0x64
 8006e98:	fb90 f1f2 	sdiv	r1, r0, r2
 8006e9c:	fb02 0111 	mls	r1, r2, r1, r0
 8006ea0:	b971      	cbnz	r1, 8006ec0 <__strftime+0x850>
 8006ea2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006ea6:	fb90 f2f1 	sdiv	r2, r0, r1
 8006eaa:	fb01 0212 	mls	r2, r1, r2, r0
 8006eae:	fab2 f282 	clz	r2, r2
 8006eb2:	0952      	lsrs	r2, r2, #5
 8006eb4:	1a9a      	subs	r2, r3, r2
 8006eb6:	2a05      	cmp	r2, #5
 8006eb8:	bfb4      	ite	lt
 8006eba:	2335      	movlt	r3, #53	; 0x35
 8006ebc:	2334      	movge	r3, #52	; 0x34
 8006ebe:	e600      	b.n	8006ac2 <__strftime+0x452>
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	e7f7      	b.n	8006eb4 <__strftime+0x844>
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e5fc      	b.n	8006ac2 <__strftime+0x452>
 8006ec8:	f108 33ff 	add.w	r3, r8, #4294967295
 8006ecc:	42a3      	cmp	r3, r4
 8006ece:	f67f abfe 	bls.w	80066ce <__strftime+0x5e>
 8006ed2:	69ab      	ldr	r3, [r5, #24]
 8006ed4:	3330      	adds	r3, #48	; 0x30
 8006ed6:	e6d1      	b.n	8006c7c <__strftime+0x60c>
 8006ed8:	69ab      	ldr	r3, [r5, #24]
 8006eda:	b13b      	cbz	r3, 8006eec <__strftime+0x87c>
 8006edc:	3b01      	subs	r3, #1
 8006ede:	69ea      	ldr	r2, [r5, #28]
 8006ee0:	3207      	adds	r2, #7
 8006ee2:	1ad2      	subs	r2, r2, r3
 8006ee4:	2307      	movs	r3, #7
 8006ee6:	fb92 f3f3 	sdiv	r3, r2, r3
 8006eea:	e5ea      	b.n	8006ac2 <__strftime+0x452>
 8006eec:	2306      	movs	r3, #6
 8006eee:	e7f6      	b.n	8006ede <__strftime+0x86e>
 8006ef0:	6968      	ldr	r0, [r5, #20]
 8006ef2:	2800      	cmp	r0, #0
 8006ef4:	db05      	blt.n	8006f02 <__strftime+0x892>
 8006ef6:	2264      	movs	r2, #100	; 0x64
 8006ef8:	fb90 f3f2 	sdiv	r3, r0, r2
 8006efc:	fb03 0312 	mls	r3, r3, r2, r0
 8006f00:	e5df      	b.n	8006ac2 <__strftime+0x452>
 8006f02:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8006f06:	f000 fb9d 	bl	8007644 <abs>
 8006f0a:	e7f4      	b.n	8006ef6 <__strftime+0x886>
 8006f0c:	696b      	ldr	r3, [r5, #20]
 8006f0e:	4a4c      	ldr	r2, [pc, #304]	; (8007040 <__strftime+0x9d0>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	da09      	bge.n	8006f28 <__strftime+0x8b8>
 8006f14:	212d      	movs	r1, #45	; 0x2d
 8006f16:	f88d 1020 	strb.w	r1, [sp, #32]
 8006f1a:	eba2 0a03 	sub.w	sl, r2, r3
 8006f1e:	b106      	cbz	r6, 8006f22 <__strftime+0x8b2>
 8006f20:	3e01      	subs	r6, #1
 8006f22:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 8006f26:	e00b      	b.n	8006f40 <__strftime+0x8d0>
 8006f28:	2f2b      	cmp	r7, #43	; 0x2b
 8006f2a:	f203 7a6c 	addw	sl, r3, #1900	; 0x76c
 8006f2e:	d106      	bne.n	8006f3e <__strftime+0x8ce>
 8006f30:	f242 730f 	movw	r3, #9999	; 0x270f
 8006f34:	459a      	cmp	sl, r3
 8006f36:	d902      	bls.n	8006f3e <__strftime+0x8ce>
 8006f38:	f88d 7020 	strb.w	r7, [sp, #32]
 8006f3c:	e7ef      	b.n	8006f1e <__strftime+0x8ae>
 8006f3e:	ab08      	add	r3, sp, #32
 8006f40:	2225      	movs	r2, #37	; 0x25
 8006f42:	701a      	strb	r2, [r3, #0]
 8006f44:	b937      	cbnz	r7, 8006f54 <__strftime+0x8e4>
 8006f46:	1c58      	adds	r0, r3, #1
 8006f48:	493e      	ldr	r1, [pc, #248]	; (8007044 <__strftime+0x9d4>)
 8006f4a:	f001 f9ed 	bl	8008328 <strcpy>
 8006f4e:	f8cd a000 	str.w	sl, [sp]
 8006f52:	e665      	b.n	8006c20 <__strftime+0x5b0>
 8006f54:	2230      	movs	r2, #48	; 0x30
 8006f56:	1c98      	adds	r0, r3, #2
 8006f58:	705a      	strb	r2, [r3, #1]
 8006f5a:	e7f5      	b.n	8006f48 <__strftime+0x8d8>
 8006f5c:	6a2b      	ldr	r3, [r5, #32]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	f6ff ac88 	blt.w	8006874 <__strftime+0x204>
 8006f64:	f000 f9ae 	bl	80072c4 <__tz_lock>
 8006f68:	9b04      	ldr	r3, [sp, #16]
 8006f6a:	b90b      	cbnz	r3, 8006f70 <__strftime+0x900>
 8006f6c:	f000 f9b6 	bl	80072dc <_tzset_unlocked>
 8006f70:	f000 fbee 	bl	8007750 <__gettzinfo>
 8006f74:	6a2b      	ldr	r3, [r5, #32]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	bfcc      	ite	gt
 8006f7a:	2350      	movgt	r3, #80	; 0x50
 8006f7c:	2328      	movle	r3, #40	; 0x28
 8006f7e:	eb09 0704 	add.w	r7, r9, r4
 8006f82:	58c6      	ldr	r6, [r0, r3]
 8006f84:	f000 f9a4 	bl	80072d0 <__tz_unlock>
 8006f88:	4276      	negs	r6, r6
 8006f8a:	233c      	movs	r3, #60	; 0x3c
 8006f8c:	fb96 f0f3 	sdiv	r0, r6, r3
 8006f90:	f000 fc92 	bl	80078b8 <labs>
 8006f94:	233c      	movs	r3, #60	; 0x3c
 8006f96:	eba8 0a04 	sub.w	sl, r8, r4
 8006f9a:	fb90 f2f3 	sdiv	r2, r0, r3
 8006f9e:	fb02 0013 	mls	r0, r2, r3, r0
 8006fa2:	9000      	str	r0, [sp, #0]
 8006fa4:	4a28      	ldr	r2, [pc, #160]	; (8007048 <__strftime+0x9d8>)
 8006fa6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8006faa:	4651      	mov	r1, sl
 8006fac:	4638      	mov	r0, r7
 8006fae:	fb96 f3f3 	sdiv	r3, r6, r3
 8006fb2:	f001 f959 	bl	8008268 <sniprintf>
 8006fb6:	2800      	cmp	r0, #0
 8006fb8:	f6ff ab89 	blt.w	80066ce <__strftime+0x5e>
 8006fbc:	4404      	add	r4, r0
 8006fbe:	45a0      	cmp	r8, r4
 8006fc0:	f67f ab85 	bls.w	80066ce <__strftime+0x5e>
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	9304      	str	r3, [sp, #16]
 8006fc8:	e454      	b.n	8006874 <__strftime+0x204>
 8006fca:	6a2b      	ldr	r3, [r5, #32]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	f6ff ac51 	blt.w	8006874 <__strftime+0x204>
 8006fd2:	f000 f977 	bl	80072c4 <__tz_lock>
 8006fd6:	9b04      	ldr	r3, [sp, #16]
 8006fd8:	b90b      	cbnz	r3, 8006fde <__strftime+0x96e>
 8006fda:	f000 f97f 	bl	80072dc <_tzset_unlocked>
 8006fde:	6a2b      	ldr	r3, [r5, #32]
 8006fe0:	4a1a      	ldr	r2, [pc, #104]	; (800704c <__strftime+0x9dc>)
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	bfd4      	ite	le
 8006fe6:	2300      	movle	r3, #0
 8006fe8:	2301      	movgt	r3, #1
 8006fea:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8006fee:	4630      	mov	r0, r6
 8006ff0:	f7f9 f8f6 	bl	80001e0 <strlen>
 8006ff4:	3e01      	subs	r6, #1
 8006ff6:	4420      	add	r0, r4
 8006ff8:	f108 33ff 	add.w	r3, r8, #4294967295
 8006ffc:	42a0      	cmp	r0, r4
 8006ffe:	d102      	bne.n	8007006 <__strftime+0x996>
 8007000:	f000 f966 	bl	80072d0 <__tz_unlock>
 8007004:	e7de      	b.n	8006fc4 <__strftime+0x954>
 8007006:	42a3      	cmp	r3, r4
 8007008:	d905      	bls.n	8007016 <__strftime+0x9a6>
 800700a:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 800700e:	f809 2004 	strb.w	r2, [r9, r4]
 8007012:	3401      	adds	r4, #1
 8007014:	e7f2      	b.n	8006ffc <__strftime+0x98c>
 8007016:	f000 f95b 	bl	80072d0 <__tz_unlock>
 800701a:	f7ff bb58 	b.w	80066ce <__strftime+0x5e>
 800701e:	f108 33ff 	add.w	r3, r8, #4294967295
 8007022:	42a3      	cmp	r3, r4
 8007024:	f67f ab53 	bls.w	80066ce <__strftime+0x5e>
 8007028:	2325      	movs	r3, #37	; 0x25
 800702a:	e627      	b.n	8006c7c <__strftime+0x60c>
 800702c:	f1b8 0f00 	cmp.w	r8, #0
 8007030:	d002      	beq.n	8007038 <__strftime+0x9c8>
 8007032:	2300      	movs	r3, #0
 8007034:	f809 3004 	strb.w	r3, [r9, r4]
 8007038:	4620      	mov	r0, r4
 800703a:	b011      	add	sp, #68	; 0x44
 800703c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007040:	fffff894 	.word	0xfffff894
 8007044:	0800a258 	.word	0x0800a258
 8007048:	0800a275 	.word	0x0800a275
 800704c:	2000007c 	.word	0x2000007c

08007050 <strftime>:
 8007050:	b513      	push	{r0, r1, r4, lr}
 8007052:	4c03      	ldr	r4, [pc, #12]	; (8007060 <strftime+0x10>)
 8007054:	9400      	str	r4, [sp, #0]
 8007056:	f7ff fb0b 	bl	8006670 <__strftime>
 800705a:	b002      	add	sp, #8
 800705c:	bd10      	pop	{r4, pc}
 800705e:	bf00      	nop
 8007060:	200000e0 	.word	0x200000e0

08007064 <_strtoul_l.isra.0>:
 8007064:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007068:	4e3b      	ldr	r6, [pc, #236]	; (8007158 <_strtoul_l.isra.0+0xf4>)
 800706a:	4686      	mov	lr, r0
 800706c:	468c      	mov	ip, r1
 800706e:	4660      	mov	r0, ip
 8007070:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8007074:	5da5      	ldrb	r5, [r4, r6]
 8007076:	f015 0508 	ands.w	r5, r5, #8
 800707a:	d1f8      	bne.n	800706e <_strtoul_l.isra.0+0xa>
 800707c:	2c2d      	cmp	r4, #45	; 0x2d
 800707e:	d134      	bne.n	80070ea <_strtoul_l.isra.0+0x86>
 8007080:	f89c 4000 	ldrb.w	r4, [ip]
 8007084:	f04f 0801 	mov.w	r8, #1
 8007088:	f100 0c02 	add.w	ip, r0, #2
 800708c:	2b00      	cmp	r3, #0
 800708e:	d05e      	beq.n	800714e <_strtoul_l.isra.0+0xea>
 8007090:	2b10      	cmp	r3, #16
 8007092:	d10c      	bne.n	80070ae <_strtoul_l.isra.0+0x4a>
 8007094:	2c30      	cmp	r4, #48	; 0x30
 8007096:	d10a      	bne.n	80070ae <_strtoul_l.isra.0+0x4a>
 8007098:	f89c 0000 	ldrb.w	r0, [ip]
 800709c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80070a0:	2858      	cmp	r0, #88	; 0x58
 80070a2:	d14f      	bne.n	8007144 <_strtoul_l.isra.0+0xe0>
 80070a4:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80070a8:	2310      	movs	r3, #16
 80070aa:	f10c 0c02 	add.w	ip, ip, #2
 80070ae:	f04f 37ff 	mov.w	r7, #4294967295
 80070b2:	2500      	movs	r5, #0
 80070b4:	fbb7 f7f3 	udiv	r7, r7, r3
 80070b8:	fb03 f907 	mul.w	r9, r3, r7
 80070bc:	ea6f 0909 	mvn.w	r9, r9
 80070c0:	4628      	mov	r0, r5
 80070c2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80070c6:	2e09      	cmp	r6, #9
 80070c8:	d818      	bhi.n	80070fc <_strtoul_l.isra.0+0x98>
 80070ca:	4634      	mov	r4, r6
 80070cc:	42a3      	cmp	r3, r4
 80070ce:	dd24      	ble.n	800711a <_strtoul_l.isra.0+0xb6>
 80070d0:	2d00      	cmp	r5, #0
 80070d2:	db1f      	blt.n	8007114 <_strtoul_l.isra.0+0xb0>
 80070d4:	4287      	cmp	r7, r0
 80070d6:	d31d      	bcc.n	8007114 <_strtoul_l.isra.0+0xb0>
 80070d8:	d101      	bne.n	80070de <_strtoul_l.isra.0+0x7a>
 80070da:	45a1      	cmp	r9, r4
 80070dc:	db1a      	blt.n	8007114 <_strtoul_l.isra.0+0xb0>
 80070de:	fb00 4003 	mla	r0, r0, r3, r4
 80070e2:	2501      	movs	r5, #1
 80070e4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80070e8:	e7eb      	b.n	80070c2 <_strtoul_l.isra.0+0x5e>
 80070ea:	2c2b      	cmp	r4, #43	; 0x2b
 80070ec:	bf08      	it	eq
 80070ee:	f89c 4000 	ldrbeq.w	r4, [ip]
 80070f2:	46a8      	mov	r8, r5
 80070f4:	bf08      	it	eq
 80070f6:	f100 0c02 	addeq.w	ip, r0, #2
 80070fa:	e7c7      	b.n	800708c <_strtoul_l.isra.0+0x28>
 80070fc:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8007100:	2e19      	cmp	r6, #25
 8007102:	d801      	bhi.n	8007108 <_strtoul_l.isra.0+0xa4>
 8007104:	3c37      	subs	r4, #55	; 0x37
 8007106:	e7e1      	b.n	80070cc <_strtoul_l.isra.0+0x68>
 8007108:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800710c:	2e19      	cmp	r6, #25
 800710e:	d804      	bhi.n	800711a <_strtoul_l.isra.0+0xb6>
 8007110:	3c57      	subs	r4, #87	; 0x57
 8007112:	e7db      	b.n	80070cc <_strtoul_l.isra.0+0x68>
 8007114:	f04f 35ff 	mov.w	r5, #4294967295
 8007118:	e7e4      	b.n	80070e4 <_strtoul_l.isra.0+0x80>
 800711a:	2d00      	cmp	r5, #0
 800711c:	da07      	bge.n	800712e <_strtoul_l.isra.0+0xca>
 800711e:	2322      	movs	r3, #34	; 0x22
 8007120:	f8ce 3000 	str.w	r3, [lr]
 8007124:	f04f 30ff 	mov.w	r0, #4294967295
 8007128:	b942      	cbnz	r2, 800713c <_strtoul_l.isra.0+0xd8>
 800712a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800712e:	f1b8 0f00 	cmp.w	r8, #0
 8007132:	d000      	beq.n	8007136 <_strtoul_l.isra.0+0xd2>
 8007134:	4240      	negs	r0, r0
 8007136:	2a00      	cmp	r2, #0
 8007138:	d0f7      	beq.n	800712a <_strtoul_l.isra.0+0xc6>
 800713a:	b10d      	cbz	r5, 8007140 <_strtoul_l.isra.0+0xdc>
 800713c:	f10c 31ff 	add.w	r1, ip, #4294967295
 8007140:	6011      	str	r1, [r2, #0]
 8007142:	e7f2      	b.n	800712a <_strtoul_l.isra.0+0xc6>
 8007144:	2430      	movs	r4, #48	; 0x30
 8007146:	2b00      	cmp	r3, #0
 8007148:	d1b1      	bne.n	80070ae <_strtoul_l.isra.0+0x4a>
 800714a:	2308      	movs	r3, #8
 800714c:	e7af      	b.n	80070ae <_strtoul_l.isra.0+0x4a>
 800714e:	2c30      	cmp	r4, #48	; 0x30
 8007150:	d0a2      	beq.n	8007098 <_strtoul_l.isra.0+0x34>
 8007152:	230a      	movs	r3, #10
 8007154:	e7ab      	b.n	80070ae <_strtoul_l.isra.0+0x4a>
 8007156:	bf00      	nop
 8007158:	0800a521 	.word	0x0800a521

0800715c <_strtoul_r>:
 800715c:	f7ff bf82 	b.w	8007064 <_strtoul_l.isra.0>

08007160 <strtoul>:
 8007160:	4613      	mov	r3, r2
 8007162:	460a      	mov	r2, r1
 8007164:	4601      	mov	r1, r0
 8007166:	4802      	ldr	r0, [pc, #8]	; (8007170 <strtoul+0x10>)
 8007168:	6800      	ldr	r0, [r0, #0]
 800716a:	f7ff bf7b 	b.w	8007064 <_strtoul_l.isra.0>
 800716e:	bf00      	nop
 8007170:	20000018 	.word	0x20000018

08007174 <__tzcalc_limits>:
 8007174:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007178:	4680      	mov	r8, r0
 800717a:	f000 fae9 	bl	8007750 <__gettzinfo>
 800717e:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8007182:	4598      	cmp	r8, r3
 8007184:	f340 8098 	ble.w	80072b8 <__tzcalc_limits+0x144>
 8007188:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 800718c:	4443      	add	r3, r8
 800718e:	109b      	asrs	r3, r3, #2
 8007190:	f240 126d 	movw	r2, #365	; 0x16d
 8007194:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 8007198:	fb02 3505 	mla	r5, r2, r5, r3
 800719c:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80071a0:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 80071a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80071a8:	441d      	add	r5, r3
 80071aa:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80071ae:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80071b2:	fb98 f7f3 	sdiv	r7, r8, r3
 80071b6:	fb03 8717 	mls	r7, r3, r7, r8
 80071ba:	4442      	add	r2, r8
 80071bc:	fab7 fc87 	clz	ip, r7
 80071c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80071c4:	f008 0303 	and.w	r3, r8, #3
 80071c8:	4415      	add	r5, r2
 80071ca:	2264      	movs	r2, #100	; 0x64
 80071cc:	f8c0 8004 	str.w	r8, [r0, #4]
 80071d0:	fb98 f6f2 	sdiv	r6, r8, r2
 80071d4:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80071d8:	fb02 8616 	mls	r6, r2, r6, r8
 80071dc:	4604      	mov	r4, r0
 80071de:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 80071e2:	9300      	str	r3, [sp, #0]
 80071e4:	f04f 0e07 	mov.w	lr, #7
 80071e8:	7a22      	ldrb	r2, [r4, #8]
 80071ea:	6963      	ldr	r3, [r4, #20]
 80071ec:	2a4a      	cmp	r2, #74	; 0x4a
 80071ee:	d128      	bne.n	8007242 <__tzcalc_limits+0xce>
 80071f0:	9900      	ldr	r1, [sp, #0]
 80071f2:	18ea      	adds	r2, r5, r3
 80071f4:	b901      	cbnz	r1, 80071f8 <__tzcalc_limits+0x84>
 80071f6:	b906      	cbnz	r6, 80071fa <__tzcalc_limits+0x86>
 80071f8:	bb0f      	cbnz	r7, 800723e <__tzcalc_limits+0xca>
 80071fa:	2b3b      	cmp	r3, #59	; 0x3b
 80071fc:	bfd4      	ite	le
 80071fe:	2300      	movle	r3, #0
 8007200:	2301      	movgt	r3, #1
 8007202:	4413      	add	r3, r2
 8007204:	1e5a      	subs	r2, r3, #1
 8007206:	69a3      	ldr	r3, [r4, #24]
 8007208:	492c      	ldr	r1, [pc, #176]	; (80072bc <__tzcalc_limits+0x148>)
 800720a:	fb01 3202 	mla	r2, r1, r2, r3
 800720e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007210:	4413      	add	r3, r2
 8007212:	461a      	mov	r2, r3
 8007214:	17db      	asrs	r3, r3, #31
 8007216:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800721a:	3428      	adds	r4, #40	; 0x28
 800721c:	45a3      	cmp	fp, r4
 800721e:	d1e3      	bne.n	80071e8 <__tzcalc_limits+0x74>
 8007220:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 8007224:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 8007228:	4294      	cmp	r4, r2
 800722a:	eb75 0303 	sbcs.w	r3, r5, r3
 800722e:	bfb4      	ite	lt
 8007230:	2301      	movlt	r3, #1
 8007232:	2300      	movge	r3, #0
 8007234:	6003      	str	r3, [r0, #0]
 8007236:	2001      	movs	r0, #1
 8007238:	b003      	add	sp, #12
 800723a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800723e:	2300      	movs	r3, #0
 8007240:	e7df      	b.n	8007202 <__tzcalc_limits+0x8e>
 8007242:	2a44      	cmp	r2, #68	; 0x44
 8007244:	d101      	bne.n	800724a <__tzcalc_limits+0xd6>
 8007246:	18ea      	adds	r2, r5, r3
 8007248:	e7dd      	b.n	8007206 <__tzcalc_limits+0x92>
 800724a:	9a00      	ldr	r2, [sp, #0]
 800724c:	bb72      	cbnz	r2, 80072ac <__tzcalc_limits+0x138>
 800724e:	2e00      	cmp	r6, #0
 8007250:	bf0c      	ite	eq
 8007252:	46e0      	moveq	r8, ip
 8007254:	f04f 0801 	movne.w	r8, #1
 8007258:	4919      	ldr	r1, [pc, #100]	; (80072c0 <__tzcalc_limits+0x14c>)
 800725a:	68e2      	ldr	r2, [r4, #12]
 800725c:	9201      	str	r2, [sp, #4]
 800725e:	f04f 0a30 	mov.w	sl, #48	; 0x30
 8007262:	fb0a 1808 	mla	r8, sl, r8, r1
 8007266:	462a      	mov	r2, r5
 8007268:	f04f 0900 	mov.w	r9, #0
 800726c:	f1a8 0804 	sub.w	r8, r8, #4
 8007270:	9901      	ldr	r1, [sp, #4]
 8007272:	f109 0901 	add.w	r9, r9, #1
 8007276:	4549      	cmp	r1, r9
 8007278:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 800727c:	dc18      	bgt.n	80072b0 <__tzcalc_limits+0x13c>
 800727e:	f102 0804 	add.w	r8, r2, #4
 8007282:	fb98 f9fe 	sdiv	r9, r8, lr
 8007286:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 800728a:	eba8 0909 	sub.w	r9, r8, r9
 800728e:	ebb3 0909 	subs.w	r9, r3, r9
 8007292:	6923      	ldr	r3, [r4, #16]
 8007294:	f103 33ff 	add.w	r3, r3, #4294967295
 8007298:	bf48      	it	mi
 800729a:	f109 0907 	addmi.w	r9, r9, #7
 800729e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80072a2:	444b      	add	r3, r9
 80072a4:	4553      	cmp	r3, sl
 80072a6:	da05      	bge.n	80072b4 <__tzcalc_limits+0x140>
 80072a8:	441a      	add	r2, r3
 80072aa:	e7ac      	b.n	8007206 <__tzcalc_limits+0x92>
 80072ac:	46e0      	mov	r8, ip
 80072ae:	e7d3      	b.n	8007258 <__tzcalc_limits+0xe4>
 80072b0:	4452      	add	r2, sl
 80072b2:	e7dd      	b.n	8007270 <__tzcalc_limits+0xfc>
 80072b4:	3b07      	subs	r3, #7
 80072b6:	e7f5      	b.n	80072a4 <__tzcalc_limits+0x130>
 80072b8:	2000      	movs	r0, #0
 80072ba:	e7bd      	b.n	8007238 <__tzcalc_limits+0xc4>
 80072bc:	00015180 	.word	0x00015180
 80072c0:	0800a1c8 	.word	0x0800a1c8

080072c4 <__tz_lock>:
 80072c4:	4801      	ldr	r0, [pc, #4]	; (80072cc <__tz_lock+0x8>)
 80072c6:	f7ff b83e 	b.w	8006346 <__retarget_lock_acquire>
 80072ca:	bf00      	nop
 80072cc:	200004af 	.word	0x200004af

080072d0 <__tz_unlock>:
 80072d0:	4801      	ldr	r0, [pc, #4]	; (80072d8 <__tz_unlock+0x8>)
 80072d2:	f7ff b83a 	b.w	800634a <__retarget_lock_release>
 80072d6:	bf00      	nop
 80072d8:	200004af 	.word	0x200004af

080072dc <_tzset_unlocked>:
 80072dc:	4b01      	ldr	r3, [pc, #4]	; (80072e4 <_tzset_unlocked+0x8>)
 80072de:	6818      	ldr	r0, [r3, #0]
 80072e0:	f000 b802 	b.w	80072e8 <_tzset_unlocked_r>
 80072e4:	20000018 	.word	0x20000018

080072e8 <_tzset_unlocked_r>:
 80072e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ec:	b08d      	sub	sp, #52	; 0x34
 80072ee:	4607      	mov	r7, r0
 80072f0:	f000 fa2e 	bl	8007750 <__gettzinfo>
 80072f4:	49ae      	ldr	r1, [pc, #696]	; (80075b0 <_tzset_unlocked_r+0x2c8>)
 80072f6:	4eaf      	ldr	r6, [pc, #700]	; (80075b4 <_tzset_unlocked_r+0x2cc>)
 80072f8:	4605      	mov	r5, r0
 80072fa:	4638      	mov	r0, r7
 80072fc:	f000 fa20 	bl	8007740 <_getenv_r>
 8007300:	4604      	mov	r4, r0
 8007302:	b970      	cbnz	r0, 8007322 <_tzset_unlocked_r+0x3a>
 8007304:	4bac      	ldr	r3, [pc, #688]	; (80075b8 <_tzset_unlocked_r+0x2d0>)
 8007306:	4aad      	ldr	r2, [pc, #692]	; (80075bc <_tzset_unlocked_r+0x2d4>)
 8007308:	6018      	str	r0, [r3, #0]
 800730a:	4bad      	ldr	r3, [pc, #692]	; (80075c0 <_tzset_unlocked_r+0x2d8>)
 800730c:	6018      	str	r0, [r3, #0]
 800730e:	4bad      	ldr	r3, [pc, #692]	; (80075c4 <_tzset_unlocked_r+0x2dc>)
 8007310:	6830      	ldr	r0, [r6, #0]
 8007312:	e9c3 2200 	strd	r2, r2, [r3]
 8007316:	f7ff f823 	bl	8006360 <free>
 800731a:	6034      	str	r4, [r6, #0]
 800731c:	b00d      	add	sp, #52	; 0x34
 800731e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007322:	6831      	ldr	r1, [r6, #0]
 8007324:	2900      	cmp	r1, #0
 8007326:	d15f      	bne.n	80073e8 <_tzset_unlocked_r+0x100>
 8007328:	6830      	ldr	r0, [r6, #0]
 800732a:	f7ff f819 	bl	8006360 <free>
 800732e:	4620      	mov	r0, r4
 8007330:	f7f8 ff56 	bl	80001e0 <strlen>
 8007334:	1c41      	adds	r1, r0, #1
 8007336:	4638      	mov	r0, r7
 8007338:	f7ff f872 	bl	8006420 <_malloc_r>
 800733c:	6030      	str	r0, [r6, #0]
 800733e:	2800      	cmp	r0, #0
 8007340:	d157      	bne.n	80073f2 <_tzset_unlocked_r+0x10a>
 8007342:	7823      	ldrb	r3, [r4, #0]
 8007344:	4aa0      	ldr	r2, [pc, #640]	; (80075c8 <_tzset_unlocked_r+0x2e0>)
 8007346:	49a1      	ldr	r1, [pc, #644]	; (80075cc <_tzset_unlocked_r+0x2e4>)
 8007348:	2b3a      	cmp	r3, #58	; 0x3a
 800734a:	bf08      	it	eq
 800734c:	3401      	addeq	r4, #1
 800734e:	ae0a      	add	r6, sp, #40	; 0x28
 8007350:	4633      	mov	r3, r6
 8007352:	4620      	mov	r0, r4
 8007354:	f000 ffbc 	bl	80082d0 <siscanf>
 8007358:	2800      	cmp	r0, #0
 800735a:	dddf      	ble.n	800731c <_tzset_unlocked_r+0x34>
 800735c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800735e:	18e7      	adds	r7, r4, r3
 8007360:	5ce3      	ldrb	r3, [r4, r3]
 8007362:	2b2d      	cmp	r3, #45	; 0x2d
 8007364:	d149      	bne.n	80073fa <_tzset_unlocked_r+0x112>
 8007366:	3701      	adds	r7, #1
 8007368:	f04f 34ff 	mov.w	r4, #4294967295
 800736c:	f10d 0a20 	add.w	sl, sp, #32
 8007370:	f10d 0b1e 	add.w	fp, sp, #30
 8007374:	f04f 0800 	mov.w	r8, #0
 8007378:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 800737c:	4994      	ldr	r1, [pc, #592]	; (80075d0 <_tzset_unlocked_r+0x2e8>)
 800737e:	9603      	str	r6, [sp, #12]
 8007380:	f8cd b000 	str.w	fp, [sp]
 8007384:	4633      	mov	r3, r6
 8007386:	aa07      	add	r2, sp, #28
 8007388:	4638      	mov	r0, r7
 800738a:	f8ad 801e 	strh.w	r8, [sp, #30]
 800738e:	f8ad 8020 	strh.w	r8, [sp, #32]
 8007392:	f000 ff9d 	bl	80082d0 <siscanf>
 8007396:	4540      	cmp	r0, r8
 8007398:	ddc0      	ble.n	800731c <_tzset_unlocked_r+0x34>
 800739a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800739e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80073a2:	f8df 9238 	ldr.w	r9, [pc, #568]	; 80075dc <_tzset_unlocked_r+0x2f4>
 80073a6:	213c      	movs	r1, #60	; 0x3c
 80073a8:	fb01 2203 	mla	r2, r1, r3, r2
 80073ac:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80073b0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80073b4:	fb01 2303 	mla	r3, r1, r3, r2
 80073b8:	435c      	muls	r4, r3
 80073ba:	62ac      	str	r4, [r5, #40]	; 0x28
 80073bc:	4c81      	ldr	r4, [pc, #516]	; (80075c4 <_tzset_unlocked_r+0x2dc>)
 80073be:	4b82      	ldr	r3, [pc, #520]	; (80075c8 <_tzset_unlocked_r+0x2e0>)
 80073c0:	6023      	str	r3, [r4, #0]
 80073c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073c4:	4981      	ldr	r1, [pc, #516]	; (80075cc <_tzset_unlocked_r+0x2e4>)
 80073c6:	441f      	add	r7, r3
 80073c8:	464a      	mov	r2, r9
 80073ca:	4633      	mov	r3, r6
 80073cc:	4638      	mov	r0, r7
 80073ce:	f000 ff7f 	bl	80082d0 <siscanf>
 80073d2:	4540      	cmp	r0, r8
 80073d4:	dc16      	bgt.n	8007404 <_tzset_unlocked_r+0x11c>
 80073d6:	6823      	ldr	r3, [r4, #0]
 80073d8:	6063      	str	r3, [r4, #4]
 80073da:	4b77      	ldr	r3, [pc, #476]	; (80075b8 <_tzset_unlocked_r+0x2d0>)
 80073dc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80073de:	601a      	str	r2, [r3, #0]
 80073e0:	4b77      	ldr	r3, [pc, #476]	; (80075c0 <_tzset_unlocked_r+0x2d8>)
 80073e2:	f8c3 8000 	str.w	r8, [r3]
 80073e6:	e799      	b.n	800731c <_tzset_unlocked_r+0x34>
 80073e8:	f7f8 ff02 	bl	80001f0 <strcmp>
 80073ec:	2800      	cmp	r0, #0
 80073ee:	d19b      	bne.n	8007328 <_tzset_unlocked_r+0x40>
 80073f0:	e794      	b.n	800731c <_tzset_unlocked_r+0x34>
 80073f2:	4621      	mov	r1, r4
 80073f4:	f000 ff98 	bl	8008328 <strcpy>
 80073f8:	e7a3      	b.n	8007342 <_tzset_unlocked_r+0x5a>
 80073fa:	2b2b      	cmp	r3, #43	; 0x2b
 80073fc:	bf08      	it	eq
 80073fe:	3701      	addeq	r7, #1
 8007400:	2401      	movs	r4, #1
 8007402:	e7b3      	b.n	800736c <_tzset_unlocked_r+0x84>
 8007404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007406:	f8c4 9004 	str.w	r9, [r4, #4]
 800740a:	18fc      	adds	r4, r7, r3
 800740c:	5cfb      	ldrb	r3, [r7, r3]
 800740e:	2b2d      	cmp	r3, #45	; 0x2d
 8007410:	f040 808b 	bne.w	800752a <_tzset_unlocked_r+0x242>
 8007414:	3401      	adds	r4, #1
 8007416:	f04f 37ff 	mov.w	r7, #4294967295
 800741a:	2300      	movs	r3, #0
 800741c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8007420:	f8ad 301e 	strh.w	r3, [sp, #30]
 8007424:	f8ad 3020 	strh.w	r3, [sp, #32]
 8007428:	930a      	str	r3, [sp, #40]	; 0x28
 800742a:	e9cd a602 	strd	sl, r6, [sp, #8]
 800742e:	e9cd b600 	strd	fp, r6, [sp]
 8007432:	4967      	ldr	r1, [pc, #412]	; (80075d0 <_tzset_unlocked_r+0x2e8>)
 8007434:	4633      	mov	r3, r6
 8007436:	aa07      	add	r2, sp, #28
 8007438:	4620      	mov	r0, r4
 800743a:	f000 ff49 	bl	80082d0 <siscanf>
 800743e:	2800      	cmp	r0, #0
 8007440:	dc78      	bgt.n	8007534 <_tzset_unlocked_r+0x24c>
 8007442:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 8007444:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 8007448:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800744a:	652f      	str	r7, [r5, #80]	; 0x50
 800744c:	441c      	add	r4, r3
 800744e:	462f      	mov	r7, r5
 8007450:	f04f 0900 	mov.w	r9, #0
 8007454:	7823      	ldrb	r3, [r4, #0]
 8007456:	2b2c      	cmp	r3, #44	; 0x2c
 8007458:	bf08      	it	eq
 800745a:	3401      	addeq	r4, #1
 800745c:	f894 8000 	ldrb.w	r8, [r4]
 8007460:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8007464:	d178      	bne.n	8007558 <_tzset_unlocked_r+0x270>
 8007466:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800746a:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800746e:	ab09      	add	r3, sp, #36	; 0x24
 8007470:	9300      	str	r3, [sp, #0]
 8007472:	4958      	ldr	r1, [pc, #352]	; (80075d4 <_tzset_unlocked_r+0x2ec>)
 8007474:	9603      	str	r6, [sp, #12]
 8007476:	4633      	mov	r3, r6
 8007478:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800747c:	4620      	mov	r0, r4
 800747e:	f000 ff27 	bl	80082d0 <siscanf>
 8007482:	2803      	cmp	r0, #3
 8007484:	f47f af4a 	bne.w	800731c <_tzset_unlocked_r+0x34>
 8007488:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800748c:	1e4b      	subs	r3, r1, #1
 800748e:	2b0b      	cmp	r3, #11
 8007490:	f63f af44 	bhi.w	800731c <_tzset_unlocked_r+0x34>
 8007494:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8007498:	1e53      	subs	r3, r2, #1
 800749a:	2b04      	cmp	r3, #4
 800749c:	f63f af3e 	bhi.w	800731c <_tzset_unlocked_r+0x34>
 80074a0:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80074a4:	2b06      	cmp	r3, #6
 80074a6:	f63f af39 	bhi.w	800731c <_tzset_unlocked_r+0x34>
 80074aa:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80074ae:	f887 8008 	strb.w	r8, [r7, #8]
 80074b2:	617b      	str	r3, [r7, #20]
 80074b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074b6:	eb04 0803 	add.w	r8, r4, r3
 80074ba:	2302      	movs	r3, #2
 80074bc:	f8ad 301c 	strh.w	r3, [sp, #28]
 80074c0:	2300      	movs	r3, #0
 80074c2:	f8ad 301e 	strh.w	r3, [sp, #30]
 80074c6:	f8ad 3020 	strh.w	r3, [sp, #32]
 80074ca:	930a      	str	r3, [sp, #40]	; 0x28
 80074cc:	f898 3000 	ldrb.w	r3, [r8]
 80074d0:	2b2f      	cmp	r3, #47	; 0x2f
 80074d2:	d109      	bne.n	80074e8 <_tzset_unlocked_r+0x200>
 80074d4:	e9cd a602 	strd	sl, r6, [sp, #8]
 80074d8:	e9cd b600 	strd	fp, r6, [sp]
 80074dc:	493e      	ldr	r1, [pc, #248]	; (80075d8 <_tzset_unlocked_r+0x2f0>)
 80074de:	4633      	mov	r3, r6
 80074e0:	aa07      	add	r2, sp, #28
 80074e2:	4640      	mov	r0, r8
 80074e4:	f000 fef4 	bl	80082d0 <siscanf>
 80074e8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80074ec:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80074f0:	213c      	movs	r1, #60	; 0x3c
 80074f2:	fb01 2203 	mla	r2, r1, r3, r2
 80074f6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80074fa:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80074fe:	fb01 2303 	mla	r3, r1, r3, r2
 8007502:	61bb      	str	r3, [r7, #24]
 8007504:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007506:	3728      	adds	r7, #40	; 0x28
 8007508:	4444      	add	r4, r8
 800750a:	f1b9 0f00 	cmp.w	r9, #0
 800750e:	d020      	beq.n	8007552 <_tzset_unlocked_r+0x26a>
 8007510:	6868      	ldr	r0, [r5, #4]
 8007512:	f7ff fe2f 	bl	8007174 <__tzcalc_limits>
 8007516:	4b28      	ldr	r3, [pc, #160]	; (80075b8 <_tzset_unlocked_r+0x2d0>)
 8007518:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800751a:	601a      	str	r2, [r3, #0]
 800751c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800751e:	1a9b      	subs	r3, r3, r2
 8007520:	4a27      	ldr	r2, [pc, #156]	; (80075c0 <_tzset_unlocked_r+0x2d8>)
 8007522:	bf18      	it	ne
 8007524:	2301      	movne	r3, #1
 8007526:	6013      	str	r3, [r2, #0]
 8007528:	e6f8      	b.n	800731c <_tzset_unlocked_r+0x34>
 800752a:	2b2b      	cmp	r3, #43	; 0x2b
 800752c:	bf08      	it	eq
 800752e:	3401      	addeq	r4, #1
 8007530:	2701      	movs	r7, #1
 8007532:	e772      	b.n	800741a <_tzset_unlocked_r+0x132>
 8007534:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8007538:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800753c:	213c      	movs	r1, #60	; 0x3c
 800753e:	fb01 2203 	mla	r2, r1, r3, r2
 8007542:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8007546:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800754a:	fb01 2303 	mla	r3, r1, r3, r2
 800754e:	435f      	muls	r7, r3
 8007550:	e77a      	b.n	8007448 <_tzset_unlocked_r+0x160>
 8007552:	f04f 0901 	mov.w	r9, #1
 8007556:	e77d      	b.n	8007454 <_tzset_unlocked_r+0x16c>
 8007558:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800755c:	bf06      	itte	eq
 800755e:	3401      	addeq	r4, #1
 8007560:	4643      	moveq	r3, r8
 8007562:	2344      	movne	r3, #68	; 0x44
 8007564:	220a      	movs	r2, #10
 8007566:	a90b      	add	r1, sp, #44	; 0x2c
 8007568:	4620      	mov	r0, r4
 800756a:	9305      	str	r3, [sp, #20]
 800756c:	f7ff fdf8 	bl	8007160 <strtoul>
 8007570:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8007574:	9b05      	ldr	r3, [sp, #20]
 8007576:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800757a:	45a0      	cmp	r8, r4
 800757c:	d114      	bne.n	80075a8 <_tzset_unlocked_r+0x2c0>
 800757e:	234d      	movs	r3, #77	; 0x4d
 8007580:	f1b9 0f00 	cmp.w	r9, #0
 8007584:	d107      	bne.n	8007596 <_tzset_unlocked_r+0x2ae>
 8007586:	722b      	strb	r3, [r5, #8]
 8007588:	2103      	movs	r1, #3
 800758a:	2302      	movs	r3, #2
 800758c:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8007590:	f8c5 9014 	str.w	r9, [r5, #20]
 8007594:	e791      	b.n	80074ba <_tzset_unlocked_r+0x1d2>
 8007596:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800759a:	220b      	movs	r2, #11
 800759c:	2301      	movs	r3, #1
 800759e:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 80075a2:	2300      	movs	r3, #0
 80075a4:	63eb      	str	r3, [r5, #60]	; 0x3c
 80075a6:	e788      	b.n	80074ba <_tzset_unlocked_r+0x1d2>
 80075a8:	b280      	uxth	r0, r0
 80075aa:	723b      	strb	r3, [r7, #8]
 80075ac:	6178      	str	r0, [r7, #20]
 80075ae:	e784      	b.n	80074ba <_tzset_unlocked_r+0x1d2>
 80075b0:	0800a4a8 	.word	0x0800a4a8
 80075b4:	20000318 	.word	0x20000318
 80075b8:	20000320 	.word	0x20000320
 80075bc:	0800a4ab 	.word	0x0800a4ab
 80075c0:	2000031c 	.word	0x2000031c
 80075c4:	2000007c 	.word	0x2000007c
 80075c8:	2000030b 	.word	0x2000030b
 80075cc:	0800a4af 	.word	0x0800a4af
 80075d0:	0800a4d2 	.word	0x0800a4d2
 80075d4:	0800a4be 	.word	0x0800a4be
 80075d8:	0800a4d1 	.word	0x0800a4d1
 80075dc:	20000300 	.word	0x20000300

080075e0 <_vsiprintf_r>:
 80075e0:	b500      	push	{lr}
 80075e2:	b09b      	sub	sp, #108	; 0x6c
 80075e4:	9100      	str	r1, [sp, #0]
 80075e6:	9104      	str	r1, [sp, #16]
 80075e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80075ec:	9105      	str	r1, [sp, #20]
 80075ee:	9102      	str	r1, [sp, #8]
 80075f0:	4905      	ldr	r1, [pc, #20]	; (8007608 <_vsiprintf_r+0x28>)
 80075f2:	9103      	str	r1, [sp, #12]
 80075f4:	4669      	mov	r1, sp
 80075f6:	f000 f9ef 	bl	80079d8 <_svfiprintf_r>
 80075fa:	9b00      	ldr	r3, [sp, #0]
 80075fc:	2200      	movs	r2, #0
 80075fe:	701a      	strb	r2, [r3, #0]
 8007600:	b01b      	add	sp, #108	; 0x6c
 8007602:	f85d fb04 	ldr.w	pc, [sp], #4
 8007606:	bf00      	nop
 8007608:	ffff0208 	.word	0xffff0208

0800760c <vsiprintf>:
 800760c:	4613      	mov	r3, r2
 800760e:	460a      	mov	r2, r1
 8007610:	4601      	mov	r1, r0
 8007612:	4802      	ldr	r0, [pc, #8]	; (800761c <vsiprintf+0x10>)
 8007614:	6800      	ldr	r0, [r0, #0]
 8007616:	f7ff bfe3 	b.w	80075e0 <_vsiprintf_r>
 800761a:	bf00      	nop
 800761c:	20000018 	.word	0x20000018

08007620 <_write_r>:
 8007620:	b538      	push	{r3, r4, r5, lr}
 8007622:	4d07      	ldr	r5, [pc, #28]	; (8007640 <_write_r+0x20>)
 8007624:	4604      	mov	r4, r0
 8007626:	4608      	mov	r0, r1
 8007628:	4611      	mov	r1, r2
 800762a:	2200      	movs	r2, #0
 800762c:	602a      	str	r2, [r5, #0]
 800762e:	461a      	mov	r2, r3
 8007630:	f7fa fdd9 	bl	80021e6 <_write>
 8007634:	1c43      	adds	r3, r0, #1
 8007636:	d102      	bne.n	800763e <_write_r+0x1e>
 8007638:	682b      	ldr	r3, [r5, #0]
 800763a:	b103      	cbz	r3, 800763e <_write_r+0x1e>
 800763c:	6023      	str	r3, [r4, #0]
 800763e:	bd38      	pop	{r3, r4, r5, pc}
 8007640:	200004b4 	.word	0x200004b4

08007644 <abs>:
 8007644:	2800      	cmp	r0, #0
 8007646:	bfb8      	it	lt
 8007648:	4240      	neglt	r0, r0
 800764a:	4770      	bx	lr

0800764c <__assert_func>:
 800764c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800764e:	4614      	mov	r4, r2
 8007650:	461a      	mov	r2, r3
 8007652:	4b09      	ldr	r3, [pc, #36]	; (8007678 <__assert_func+0x2c>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4605      	mov	r5, r0
 8007658:	68d8      	ldr	r0, [r3, #12]
 800765a:	b14c      	cbz	r4, 8007670 <__assert_func+0x24>
 800765c:	4b07      	ldr	r3, [pc, #28]	; (800767c <__assert_func+0x30>)
 800765e:	9100      	str	r1, [sp, #0]
 8007660:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007664:	4906      	ldr	r1, [pc, #24]	; (8007680 <__assert_func+0x34>)
 8007666:	462b      	mov	r3, r5
 8007668:	f000 f81e 	bl	80076a8 <fiprintf>
 800766c:	f000 ff44 	bl	80084f8 <abort>
 8007670:	4b04      	ldr	r3, [pc, #16]	; (8007684 <__assert_func+0x38>)
 8007672:	461c      	mov	r4, r3
 8007674:	e7f3      	b.n	800765e <__assert_func+0x12>
 8007676:	bf00      	nop
 8007678:	20000018 	.word	0x20000018
 800767c:	0800a4e4 	.word	0x0800a4e4
 8007680:	0800a4f1 	.word	0x0800a4f1
 8007684:	0800a51f 	.word	0x0800a51f

08007688 <_close_r>:
 8007688:	b538      	push	{r3, r4, r5, lr}
 800768a:	4d06      	ldr	r5, [pc, #24]	; (80076a4 <_close_r+0x1c>)
 800768c:	2300      	movs	r3, #0
 800768e:	4604      	mov	r4, r0
 8007690:	4608      	mov	r0, r1
 8007692:	602b      	str	r3, [r5, #0]
 8007694:	f7fa fdc3 	bl	800221e <_close>
 8007698:	1c43      	adds	r3, r0, #1
 800769a:	d102      	bne.n	80076a2 <_close_r+0x1a>
 800769c:	682b      	ldr	r3, [r5, #0]
 800769e:	b103      	cbz	r3, 80076a2 <_close_r+0x1a>
 80076a0:	6023      	str	r3, [r4, #0]
 80076a2:	bd38      	pop	{r3, r4, r5, pc}
 80076a4:	200004b4 	.word	0x200004b4

080076a8 <fiprintf>:
 80076a8:	b40e      	push	{r1, r2, r3}
 80076aa:	b503      	push	{r0, r1, lr}
 80076ac:	4601      	mov	r1, r0
 80076ae:	ab03      	add	r3, sp, #12
 80076b0:	4805      	ldr	r0, [pc, #20]	; (80076c8 <fiprintf+0x20>)
 80076b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80076b6:	6800      	ldr	r0, [r0, #0]
 80076b8:	9301      	str	r3, [sp, #4]
 80076ba:	f000 fab7 	bl	8007c2c <_vfiprintf_r>
 80076be:	b002      	add	sp, #8
 80076c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80076c4:	b003      	add	sp, #12
 80076c6:	4770      	bx	lr
 80076c8:	20000018 	.word	0x20000018

080076cc <_findenv_r>:
 80076cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076d0:	4607      	mov	r7, r0
 80076d2:	4689      	mov	r9, r1
 80076d4:	4616      	mov	r6, r2
 80076d6:	f000 ff17 	bl	8008508 <__env_lock>
 80076da:	4b18      	ldr	r3, [pc, #96]	; (800773c <_findenv_r+0x70>)
 80076dc:	681c      	ldr	r4, [r3, #0]
 80076de:	469a      	mov	sl, r3
 80076e0:	b134      	cbz	r4, 80076f0 <_findenv_r+0x24>
 80076e2:	464b      	mov	r3, r9
 80076e4:	4698      	mov	r8, r3
 80076e6:	f813 1b01 	ldrb.w	r1, [r3], #1
 80076ea:	b139      	cbz	r1, 80076fc <_findenv_r+0x30>
 80076ec:	293d      	cmp	r1, #61	; 0x3d
 80076ee:	d1f9      	bne.n	80076e4 <_findenv_r+0x18>
 80076f0:	4638      	mov	r0, r7
 80076f2:	f000 ff0f 	bl	8008514 <__env_unlock>
 80076f6:	2000      	movs	r0, #0
 80076f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076fc:	eba8 0809 	sub.w	r8, r8, r9
 8007700:	46a3      	mov	fp, r4
 8007702:	f854 0b04 	ldr.w	r0, [r4], #4
 8007706:	2800      	cmp	r0, #0
 8007708:	d0f2      	beq.n	80076f0 <_findenv_r+0x24>
 800770a:	4642      	mov	r2, r8
 800770c:	4649      	mov	r1, r9
 800770e:	f000 fe13 	bl	8008338 <strncmp>
 8007712:	2800      	cmp	r0, #0
 8007714:	d1f4      	bne.n	8007700 <_findenv_r+0x34>
 8007716:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800771a:	eb03 0508 	add.w	r5, r3, r8
 800771e:	f813 3008 	ldrb.w	r3, [r3, r8]
 8007722:	2b3d      	cmp	r3, #61	; 0x3d
 8007724:	d1ec      	bne.n	8007700 <_findenv_r+0x34>
 8007726:	f8da 3000 	ldr.w	r3, [sl]
 800772a:	ebab 0303 	sub.w	r3, fp, r3
 800772e:	109b      	asrs	r3, r3, #2
 8007730:	4638      	mov	r0, r7
 8007732:	6033      	str	r3, [r6, #0]
 8007734:	f000 feee 	bl	8008514 <__env_unlock>
 8007738:	1c68      	adds	r0, r5, #1
 800773a:	e7dd      	b.n	80076f8 <_findenv_r+0x2c>
 800773c:	20000008 	.word	0x20000008

08007740 <_getenv_r>:
 8007740:	b507      	push	{r0, r1, r2, lr}
 8007742:	aa01      	add	r2, sp, #4
 8007744:	f7ff ffc2 	bl	80076cc <_findenv_r>
 8007748:	b003      	add	sp, #12
 800774a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08007750 <__gettzinfo>:
 8007750:	4800      	ldr	r0, [pc, #0]	; (8007754 <__gettzinfo+0x4>)
 8007752:	4770      	bx	lr
 8007754:	20000088 	.word	0x20000088

08007758 <gmtime_r>:
 8007758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800775c:	e9d0 6700 	ldrd	r6, r7, [r0]
 8007760:	460c      	mov	r4, r1
 8007762:	4a51      	ldr	r2, [pc, #324]	; (80078a8 <gmtime_r+0x150>)
 8007764:	2300      	movs	r3, #0
 8007766:	4630      	mov	r0, r6
 8007768:	4639      	mov	r1, r7
 800776a:	f7f9 fa8f 	bl	8000c8c <__aeabi_ldivmod>
 800776e:	4639      	mov	r1, r7
 8007770:	4605      	mov	r5, r0
 8007772:	4a4d      	ldr	r2, [pc, #308]	; (80078a8 <gmtime_r+0x150>)
 8007774:	4630      	mov	r0, r6
 8007776:	2300      	movs	r3, #0
 8007778:	f7f9 fa88 	bl	8000c8c <__aeabi_ldivmod>
 800777c:	2a00      	cmp	r2, #0
 800777e:	bfbc      	itt	lt
 8007780:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8007784:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8007788:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800778c:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8007790:	fbb2 f3f1 	udiv	r3, r2, r1
 8007794:	fb01 2213 	mls	r2, r1, r3, r2
 8007798:	f04f 013c 	mov.w	r1, #60	; 0x3c
 800779c:	bfac      	ite	ge
 800779e:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 80077a2:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 80077a6:	60a3      	str	r3, [r4, #8]
 80077a8:	fbb2 f3f1 	udiv	r3, r2, r1
 80077ac:	fb01 2213 	mls	r2, r1, r3, r2
 80077b0:	6063      	str	r3, [r4, #4]
 80077b2:	6022      	str	r2, [r4, #0]
 80077b4:	1cc3      	adds	r3, r0, #3
 80077b6:	2207      	movs	r2, #7
 80077b8:	fb93 f2f2 	sdiv	r2, r3, r2
 80077bc:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80077c0:	1a9b      	subs	r3, r3, r2
 80077c2:	bf48      	it	mi
 80077c4:	3307      	addmi	r3, #7
 80077c6:	2800      	cmp	r0, #0
 80077c8:	61a3      	str	r3, [r4, #24]
 80077ca:	bfb8      	it	lt
 80077cc:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 80077d0:	4936      	ldr	r1, [pc, #216]	; (80078ac <gmtime_r+0x154>)
 80077d2:	bfae      	itee	ge
 80077d4:	fb90 f1f1 	sdivge	r1, r0, r1
 80077d8:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 80077dc:	fb93 f1f1 	sdivlt	r1, r3, r1
 80077e0:	4b33      	ldr	r3, [pc, #204]	; (80078b0 <gmtime_r+0x158>)
 80077e2:	fb03 0001 	mla	r0, r3, r1, r0
 80077e6:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80077ea:	fbb0 f2f2 	udiv	r2, r0, r2
 80077ee:	4402      	add	r2, r0
 80077f0:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 80077f4:	fbb0 f3fc 	udiv	r3, r0, ip
 80077f8:	1ad2      	subs	r2, r2, r3
 80077fa:	f240 176d 	movw	r7, #365	; 0x16d
 80077fe:	4b2d      	ldr	r3, [pc, #180]	; (80078b4 <gmtime_r+0x15c>)
 8007800:	fbb0 f3f3 	udiv	r3, r0, r3
 8007804:	2664      	movs	r6, #100	; 0x64
 8007806:	1ad3      	subs	r3, r2, r3
 8007808:	fbb3 f5f7 	udiv	r5, r3, r7
 800780c:	fbb3 f3fc 	udiv	r3, r3, ip
 8007810:	fbb5 f2f6 	udiv	r2, r5, r6
 8007814:	1ad3      	subs	r3, r2, r3
 8007816:	4403      	add	r3, r0
 8007818:	fb07 3315 	mls	r3, r7, r5, r3
 800781c:	2099      	movs	r0, #153	; 0x99
 800781e:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8007822:	f10c 0c02 	add.w	ip, ip, #2
 8007826:	f103 0e01 	add.w	lr, r3, #1
 800782a:	fbbc f7f0 	udiv	r7, ip, r0
 800782e:	4378      	muls	r0, r7
 8007830:	3002      	adds	r0, #2
 8007832:	f04f 0805 	mov.w	r8, #5
 8007836:	fbb0 f0f8 	udiv	r0, r0, r8
 800783a:	ebae 0000 	sub.w	r0, lr, r0
 800783e:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 8007842:	45f4      	cmp	ip, lr
 8007844:	bf94      	ite	ls
 8007846:	f04f 0c02 	movls.w	ip, #2
 800784a:	f06f 0c09 	mvnhi.w	ip, #9
 800784e:	4467      	add	r7, ip
 8007850:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 8007854:	fb0c 5101 	mla	r1, ip, r1, r5
 8007858:	2f01      	cmp	r7, #1
 800785a:	bf98      	it	ls
 800785c:	3101      	addls	r1, #1
 800785e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8007862:	d30c      	bcc.n	800787e <gmtime_r+0x126>
 8007864:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8007868:	61e3      	str	r3, [r4, #28]
 800786a:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 800786e:	2300      	movs	r3, #0
 8007870:	60e0      	str	r0, [r4, #12]
 8007872:	e9c4 7104 	strd	r7, r1, [r4, #16]
 8007876:	6223      	str	r3, [r4, #32]
 8007878:	4620      	mov	r0, r4
 800787a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800787e:	f015 0f03 	tst.w	r5, #3
 8007882:	d102      	bne.n	800788a <gmtime_r+0x132>
 8007884:	fb06 5212 	mls	r2, r6, r2, r5
 8007888:	b95a      	cbnz	r2, 80078a2 <gmtime_r+0x14a>
 800788a:	f44f 76c8 	mov.w	r6, #400	; 0x190
 800788e:	fbb5 f2f6 	udiv	r2, r5, r6
 8007892:	fb06 5212 	mls	r2, r6, r2, r5
 8007896:	fab2 f282 	clz	r2, r2
 800789a:	0952      	lsrs	r2, r2, #5
 800789c:	333b      	adds	r3, #59	; 0x3b
 800789e:	4413      	add	r3, r2
 80078a0:	e7e2      	b.n	8007868 <gmtime_r+0x110>
 80078a2:	2201      	movs	r2, #1
 80078a4:	e7fa      	b.n	800789c <gmtime_r+0x144>
 80078a6:	bf00      	nop
 80078a8:	00015180 	.word	0x00015180
 80078ac:	00023ab1 	.word	0x00023ab1
 80078b0:	fffdc54f 	.word	0xfffdc54f
 80078b4:	00023ab0 	.word	0x00023ab0

080078b8 <labs>:
 80078b8:	2800      	cmp	r0, #0
 80078ba:	bfb8      	it	lt
 80078bc:	4240      	neglt	r0, r0
 80078be:	4770      	bx	lr

080078c0 <_lseek_r>:
 80078c0:	b538      	push	{r3, r4, r5, lr}
 80078c2:	4d07      	ldr	r5, [pc, #28]	; (80078e0 <_lseek_r+0x20>)
 80078c4:	4604      	mov	r4, r0
 80078c6:	4608      	mov	r0, r1
 80078c8:	4611      	mov	r1, r2
 80078ca:	2200      	movs	r2, #0
 80078cc:	602a      	str	r2, [r5, #0]
 80078ce:	461a      	mov	r2, r3
 80078d0:	f7fa fccc 	bl	800226c <_lseek>
 80078d4:	1c43      	adds	r3, r0, #1
 80078d6:	d102      	bne.n	80078de <_lseek_r+0x1e>
 80078d8:	682b      	ldr	r3, [r5, #0]
 80078da:	b103      	cbz	r3, 80078de <_lseek_r+0x1e>
 80078dc:	6023      	str	r3, [r4, #0]
 80078de:	bd38      	pop	{r3, r4, r5, pc}
 80078e0:	200004b4 	.word	0x200004b4

080078e4 <__ascii_mbtowc>:
 80078e4:	b082      	sub	sp, #8
 80078e6:	b901      	cbnz	r1, 80078ea <__ascii_mbtowc+0x6>
 80078e8:	a901      	add	r1, sp, #4
 80078ea:	b142      	cbz	r2, 80078fe <__ascii_mbtowc+0x1a>
 80078ec:	b14b      	cbz	r3, 8007902 <__ascii_mbtowc+0x1e>
 80078ee:	7813      	ldrb	r3, [r2, #0]
 80078f0:	600b      	str	r3, [r1, #0]
 80078f2:	7812      	ldrb	r2, [r2, #0]
 80078f4:	1e10      	subs	r0, r2, #0
 80078f6:	bf18      	it	ne
 80078f8:	2001      	movne	r0, #1
 80078fa:	b002      	add	sp, #8
 80078fc:	4770      	bx	lr
 80078fe:	4610      	mov	r0, r2
 8007900:	e7fb      	b.n	80078fa <__ascii_mbtowc+0x16>
 8007902:	f06f 0001 	mvn.w	r0, #1
 8007906:	e7f8      	b.n	80078fa <__ascii_mbtowc+0x16>

08007908 <__malloc_lock>:
 8007908:	4801      	ldr	r0, [pc, #4]	; (8007910 <__malloc_lock+0x8>)
 800790a:	f7fe bd1d 	b.w	8006348 <__retarget_lock_acquire_recursive>
 800790e:	bf00      	nop
 8007910:	200004ac 	.word	0x200004ac

08007914 <__malloc_unlock>:
 8007914:	4801      	ldr	r0, [pc, #4]	; (800791c <__malloc_unlock+0x8>)
 8007916:	f7fe bd19 	b.w	800634c <__retarget_lock_release_recursive>
 800791a:	bf00      	nop
 800791c:	200004ac 	.word	0x200004ac

08007920 <__ssputs_r>:
 8007920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007924:	688e      	ldr	r6, [r1, #8]
 8007926:	429e      	cmp	r6, r3
 8007928:	4682      	mov	sl, r0
 800792a:	460c      	mov	r4, r1
 800792c:	4690      	mov	r8, r2
 800792e:	461f      	mov	r7, r3
 8007930:	d838      	bhi.n	80079a4 <__ssputs_r+0x84>
 8007932:	898a      	ldrh	r2, [r1, #12]
 8007934:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007938:	d032      	beq.n	80079a0 <__ssputs_r+0x80>
 800793a:	6825      	ldr	r5, [r4, #0]
 800793c:	6909      	ldr	r1, [r1, #16]
 800793e:	eba5 0901 	sub.w	r9, r5, r1
 8007942:	6965      	ldr	r5, [r4, #20]
 8007944:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007948:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800794c:	3301      	adds	r3, #1
 800794e:	444b      	add	r3, r9
 8007950:	106d      	asrs	r5, r5, #1
 8007952:	429d      	cmp	r5, r3
 8007954:	bf38      	it	cc
 8007956:	461d      	movcc	r5, r3
 8007958:	0553      	lsls	r3, r2, #21
 800795a:	d531      	bpl.n	80079c0 <__ssputs_r+0xa0>
 800795c:	4629      	mov	r1, r5
 800795e:	f7fe fd5f 	bl	8006420 <_malloc_r>
 8007962:	4606      	mov	r6, r0
 8007964:	b950      	cbnz	r0, 800797c <__ssputs_r+0x5c>
 8007966:	230c      	movs	r3, #12
 8007968:	f8ca 3000 	str.w	r3, [sl]
 800796c:	89a3      	ldrh	r3, [r4, #12]
 800796e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007972:	81a3      	strh	r3, [r4, #12]
 8007974:	f04f 30ff 	mov.w	r0, #4294967295
 8007978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800797c:	6921      	ldr	r1, [r4, #16]
 800797e:	464a      	mov	r2, r9
 8007980:	f000 fe32 	bl	80085e8 <memcpy>
 8007984:	89a3      	ldrh	r3, [r4, #12]
 8007986:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800798a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800798e:	81a3      	strh	r3, [r4, #12]
 8007990:	6126      	str	r6, [r4, #16]
 8007992:	6165      	str	r5, [r4, #20]
 8007994:	444e      	add	r6, r9
 8007996:	eba5 0509 	sub.w	r5, r5, r9
 800799a:	6026      	str	r6, [r4, #0]
 800799c:	60a5      	str	r5, [r4, #8]
 800799e:	463e      	mov	r6, r7
 80079a0:	42be      	cmp	r6, r7
 80079a2:	d900      	bls.n	80079a6 <__ssputs_r+0x86>
 80079a4:	463e      	mov	r6, r7
 80079a6:	4632      	mov	r2, r6
 80079a8:	6820      	ldr	r0, [r4, #0]
 80079aa:	4641      	mov	r1, r8
 80079ac:	f000 fe2a 	bl	8008604 <memmove>
 80079b0:	68a3      	ldr	r3, [r4, #8]
 80079b2:	6822      	ldr	r2, [r4, #0]
 80079b4:	1b9b      	subs	r3, r3, r6
 80079b6:	4432      	add	r2, r6
 80079b8:	60a3      	str	r3, [r4, #8]
 80079ba:	6022      	str	r2, [r4, #0]
 80079bc:	2000      	movs	r0, #0
 80079be:	e7db      	b.n	8007978 <__ssputs_r+0x58>
 80079c0:	462a      	mov	r2, r5
 80079c2:	f000 fe39 	bl	8008638 <_realloc_r>
 80079c6:	4606      	mov	r6, r0
 80079c8:	2800      	cmp	r0, #0
 80079ca:	d1e1      	bne.n	8007990 <__ssputs_r+0x70>
 80079cc:	6921      	ldr	r1, [r4, #16]
 80079ce:	4650      	mov	r0, sl
 80079d0:	f7fe fcd6 	bl	8006380 <_free_r>
 80079d4:	e7c7      	b.n	8007966 <__ssputs_r+0x46>
	...

080079d8 <_svfiprintf_r>:
 80079d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079dc:	4698      	mov	r8, r3
 80079de:	898b      	ldrh	r3, [r1, #12]
 80079e0:	061b      	lsls	r3, r3, #24
 80079e2:	b09d      	sub	sp, #116	; 0x74
 80079e4:	4607      	mov	r7, r0
 80079e6:	460d      	mov	r5, r1
 80079e8:	4614      	mov	r4, r2
 80079ea:	d50e      	bpl.n	8007a0a <_svfiprintf_r+0x32>
 80079ec:	690b      	ldr	r3, [r1, #16]
 80079ee:	b963      	cbnz	r3, 8007a0a <_svfiprintf_r+0x32>
 80079f0:	2140      	movs	r1, #64	; 0x40
 80079f2:	f7fe fd15 	bl	8006420 <_malloc_r>
 80079f6:	6028      	str	r0, [r5, #0]
 80079f8:	6128      	str	r0, [r5, #16]
 80079fa:	b920      	cbnz	r0, 8007a06 <_svfiprintf_r+0x2e>
 80079fc:	230c      	movs	r3, #12
 80079fe:	603b      	str	r3, [r7, #0]
 8007a00:	f04f 30ff 	mov.w	r0, #4294967295
 8007a04:	e0d1      	b.n	8007baa <_svfiprintf_r+0x1d2>
 8007a06:	2340      	movs	r3, #64	; 0x40
 8007a08:	616b      	str	r3, [r5, #20]
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	9309      	str	r3, [sp, #36]	; 0x24
 8007a0e:	2320      	movs	r3, #32
 8007a10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a14:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a18:	2330      	movs	r3, #48	; 0x30
 8007a1a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007bc4 <_svfiprintf_r+0x1ec>
 8007a1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a22:	f04f 0901 	mov.w	r9, #1
 8007a26:	4623      	mov	r3, r4
 8007a28:	469a      	mov	sl, r3
 8007a2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a2e:	b10a      	cbz	r2, 8007a34 <_svfiprintf_r+0x5c>
 8007a30:	2a25      	cmp	r2, #37	; 0x25
 8007a32:	d1f9      	bne.n	8007a28 <_svfiprintf_r+0x50>
 8007a34:	ebba 0b04 	subs.w	fp, sl, r4
 8007a38:	d00b      	beq.n	8007a52 <_svfiprintf_r+0x7a>
 8007a3a:	465b      	mov	r3, fp
 8007a3c:	4622      	mov	r2, r4
 8007a3e:	4629      	mov	r1, r5
 8007a40:	4638      	mov	r0, r7
 8007a42:	f7ff ff6d 	bl	8007920 <__ssputs_r>
 8007a46:	3001      	adds	r0, #1
 8007a48:	f000 80aa 	beq.w	8007ba0 <_svfiprintf_r+0x1c8>
 8007a4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a4e:	445a      	add	r2, fp
 8007a50:	9209      	str	r2, [sp, #36]	; 0x24
 8007a52:	f89a 3000 	ldrb.w	r3, [sl]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	f000 80a2 	beq.w	8007ba0 <_svfiprintf_r+0x1c8>
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	f04f 32ff 	mov.w	r2, #4294967295
 8007a62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a66:	f10a 0a01 	add.w	sl, sl, #1
 8007a6a:	9304      	str	r3, [sp, #16]
 8007a6c:	9307      	str	r3, [sp, #28]
 8007a6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a72:	931a      	str	r3, [sp, #104]	; 0x68
 8007a74:	4654      	mov	r4, sl
 8007a76:	2205      	movs	r2, #5
 8007a78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a7c:	4851      	ldr	r0, [pc, #324]	; (8007bc4 <_svfiprintf_r+0x1ec>)
 8007a7e:	f7f8 fbc7 	bl	8000210 <memchr>
 8007a82:	9a04      	ldr	r2, [sp, #16]
 8007a84:	b9d8      	cbnz	r0, 8007abe <_svfiprintf_r+0xe6>
 8007a86:	06d0      	lsls	r0, r2, #27
 8007a88:	bf44      	itt	mi
 8007a8a:	2320      	movmi	r3, #32
 8007a8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a90:	0711      	lsls	r1, r2, #28
 8007a92:	bf44      	itt	mi
 8007a94:	232b      	movmi	r3, #43	; 0x2b
 8007a96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a9a:	f89a 3000 	ldrb.w	r3, [sl]
 8007a9e:	2b2a      	cmp	r3, #42	; 0x2a
 8007aa0:	d015      	beq.n	8007ace <_svfiprintf_r+0xf6>
 8007aa2:	9a07      	ldr	r2, [sp, #28]
 8007aa4:	4654      	mov	r4, sl
 8007aa6:	2000      	movs	r0, #0
 8007aa8:	f04f 0c0a 	mov.w	ip, #10
 8007aac:	4621      	mov	r1, r4
 8007aae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ab2:	3b30      	subs	r3, #48	; 0x30
 8007ab4:	2b09      	cmp	r3, #9
 8007ab6:	d94e      	bls.n	8007b56 <_svfiprintf_r+0x17e>
 8007ab8:	b1b0      	cbz	r0, 8007ae8 <_svfiprintf_r+0x110>
 8007aba:	9207      	str	r2, [sp, #28]
 8007abc:	e014      	b.n	8007ae8 <_svfiprintf_r+0x110>
 8007abe:	eba0 0308 	sub.w	r3, r0, r8
 8007ac2:	fa09 f303 	lsl.w	r3, r9, r3
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	9304      	str	r3, [sp, #16]
 8007aca:	46a2      	mov	sl, r4
 8007acc:	e7d2      	b.n	8007a74 <_svfiprintf_r+0x9c>
 8007ace:	9b03      	ldr	r3, [sp, #12]
 8007ad0:	1d19      	adds	r1, r3, #4
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	9103      	str	r1, [sp, #12]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	bfbb      	ittet	lt
 8007ada:	425b      	neglt	r3, r3
 8007adc:	f042 0202 	orrlt.w	r2, r2, #2
 8007ae0:	9307      	strge	r3, [sp, #28]
 8007ae2:	9307      	strlt	r3, [sp, #28]
 8007ae4:	bfb8      	it	lt
 8007ae6:	9204      	strlt	r2, [sp, #16]
 8007ae8:	7823      	ldrb	r3, [r4, #0]
 8007aea:	2b2e      	cmp	r3, #46	; 0x2e
 8007aec:	d10c      	bne.n	8007b08 <_svfiprintf_r+0x130>
 8007aee:	7863      	ldrb	r3, [r4, #1]
 8007af0:	2b2a      	cmp	r3, #42	; 0x2a
 8007af2:	d135      	bne.n	8007b60 <_svfiprintf_r+0x188>
 8007af4:	9b03      	ldr	r3, [sp, #12]
 8007af6:	1d1a      	adds	r2, r3, #4
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	9203      	str	r2, [sp, #12]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	bfb8      	it	lt
 8007b00:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b04:	3402      	adds	r4, #2
 8007b06:	9305      	str	r3, [sp, #20]
 8007b08:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007bd4 <_svfiprintf_r+0x1fc>
 8007b0c:	7821      	ldrb	r1, [r4, #0]
 8007b0e:	2203      	movs	r2, #3
 8007b10:	4650      	mov	r0, sl
 8007b12:	f7f8 fb7d 	bl	8000210 <memchr>
 8007b16:	b140      	cbz	r0, 8007b2a <_svfiprintf_r+0x152>
 8007b18:	2340      	movs	r3, #64	; 0x40
 8007b1a:	eba0 000a 	sub.w	r0, r0, sl
 8007b1e:	fa03 f000 	lsl.w	r0, r3, r0
 8007b22:	9b04      	ldr	r3, [sp, #16]
 8007b24:	4303      	orrs	r3, r0
 8007b26:	3401      	adds	r4, #1
 8007b28:	9304      	str	r3, [sp, #16]
 8007b2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b2e:	4826      	ldr	r0, [pc, #152]	; (8007bc8 <_svfiprintf_r+0x1f0>)
 8007b30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b34:	2206      	movs	r2, #6
 8007b36:	f7f8 fb6b 	bl	8000210 <memchr>
 8007b3a:	2800      	cmp	r0, #0
 8007b3c:	d038      	beq.n	8007bb0 <_svfiprintf_r+0x1d8>
 8007b3e:	4b23      	ldr	r3, [pc, #140]	; (8007bcc <_svfiprintf_r+0x1f4>)
 8007b40:	bb1b      	cbnz	r3, 8007b8a <_svfiprintf_r+0x1b2>
 8007b42:	9b03      	ldr	r3, [sp, #12]
 8007b44:	3307      	adds	r3, #7
 8007b46:	f023 0307 	bic.w	r3, r3, #7
 8007b4a:	3308      	adds	r3, #8
 8007b4c:	9303      	str	r3, [sp, #12]
 8007b4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b50:	4433      	add	r3, r6
 8007b52:	9309      	str	r3, [sp, #36]	; 0x24
 8007b54:	e767      	b.n	8007a26 <_svfiprintf_r+0x4e>
 8007b56:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b5a:	460c      	mov	r4, r1
 8007b5c:	2001      	movs	r0, #1
 8007b5e:	e7a5      	b.n	8007aac <_svfiprintf_r+0xd4>
 8007b60:	2300      	movs	r3, #0
 8007b62:	3401      	adds	r4, #1
 8007b64:	9305      	str	r3, [sp, #20]
 8007b66:	4619      	mov	r1, r3
 8007b68:	f04f 0c0a 	mov.w	ip, #10
 8007b6c:	4620      	mov	r0, r4
 8007b6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b72:	3a30      	subs	r2, #48	; 0x30
 8007b74:	2a09      	cmp	r2, #9
 8007b76:	d903      	bls.n	8007b80 <_svfiprintf_r+0x1a8>
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d0c5      	beq.n	8007b08 <_svfiprintf_r+0x130>
 8007b7c:	9105      	str	r1, [sp, #20]
 8007b7e:	e7c3      	b.n	8007b08 <_svfiprintf_r+0x130>
 8007b80:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b84:	4604      	mov	r4, r0
 8007b86:	2301      	movs	r3, #1
 8007b88:	e7f0      	b.n	8007b6c <_svfiprintf_r+0x194>
 8007b8a:	ab03      	add	r3, sp, #12
 8007b8c:	9300      	str	r3, [sp, #0]
 8007b8e:	462a      	mov	r2, r5
 8007b90:	4b0f      	ldr	r3, [pc, #60]	; (8007bd0 <_svfiprintf_r+0x1f8>)
 8007b92:	a904      	add	r1, sp, #16
 8007b94:	4638      	mov	r0, r7
 8007b96:	f3af 8000 	nop.w
 8007b9a:	1c42      	adds	r2, r0, #1
 8007b9c:	4606      	mov	r6, r0
 8007b9e:	d1d6      	bne.n	8007b4e <_svfiprintf_r+0x176>
 8007ba0:	89ab      	ldrh	r3, [r5, #12]
 8007ba2:	065b      	lsls	r3, r3, #25
 8007ba4:	f53f af2c 	bmi.w	8007a00 <_svfiprintf_r+0x28>
 8007ba8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007baa:	b01d      	add	sp, #116	; 0x74
 8007bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bb0:	ab03      	add	r3, sp, #12
 8007bb2:	9300      	str	r3, [sp, #0]
 8007bb4:	462a      	mov	r2, r5
 8007bb6:	4b06      	ldr	r3, [pc, #24]	; (8007bd0 <_svfiprintf_r+0x1f8>)
 8007bb8:	a904      	add	r1, sp, #16
 8007bba:	4638      	mov	r0, r7
 8007bbc:	f000 f9d4 	bl	8007f68 <_printf_i>
 8007bc0:	e7eb      	b.n	8007b9a <_svfiprintf_r+0x1c2>
 8007bc2:	bf00      	nop
 8007bc4:	0800a62b 	.word	0x0800a62b
 8007bc8:	0800a635 	.word	0x0800a635
 8007bcc:	00000000 	.word	0x00000000
 8007bd0:	08007921 	.word	0x08007921
 8007bd4:	0800a631 	.word	0x0800a631

08007bd8 <__sfputc_r>:
 8007bd8:	6893      	ldr	r3, [r2, #8]
 8007bda:	3b01      	subs	r3, #1
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	b410      	push	{r4}
 8007be0:	6093      	str	r3, [r2, #8]
 8007be2:	da08      	bge.n	8007bf6 <__sfputc_r+0x1e>
 8007be4:	6994      	ldr	r4, [r2, #24]
 8007be6:	42a3      	cmp	r3, r4
 8007be8:	db01      	blt.n	8007bee <__sfputc_r+0x16>
 8007bea:	290a      	cmp	r1, #10
 8007bec:	d103      	bne.n	8007bf6 <__sfputc_r+0x1e>
 8007bee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bf2:	f000 bbb3 	b.w	800835c <__swbuf_r>
 8007bf6:	6813      	ldr	r3, [r2, #0]
 8007bf8:	1c58      	adds	r0, r3, #1
 8007bfa:	6010      	str	r0, [r2, #0]
 8007bfc:	7019      	strb	r1, [r3, #0]
 8007bfe:	4608      	mov	r0, r1
 8007c00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c04:	4770      	bx	lr

08007c06 <__sfputs_r>:
 8007c06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c08:	4606      	mov	r6, r0
 8007c0a:	460f      	mov	r7, r1
 8007c0c:	4614      	mov	r4, r2
 8007c0e:	18d5      	adds	r5, r2, r3
 8007c10:	42ac      	cmp	r4, r5
 8007c12:	d101      	bne.n	8007c18 <__sfputs_r+0x12>
 8007c14:	2000      	movs	r0, #0
 8007c16:	e007      	b.n	8007c28 <__sfputs_r+0x22>
 8007c18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c1c:	463a      	mov	r2, r7
 8007c1e:	4630      	mov	r0, r6
 8007c20:	f7ff ffda 	bl	8007bd8 <__sfputc_r>
 8007c24:	1c43      	adds	r3, r0, #1
 8007c26:	d1f3      	bne.n	8007c10 <__sfputs_r+0xa>
 8007c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007c2c <_vfiprintf_r>:
 8007c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c30:	460d      	mov	r5, r1
 8007c32:	b09d      	sub	sp, #116	; 0x74
 8007c34:	4614      	mov	r4, r2
 8007c36:	4698      	mov	r8, r3
 8007c38:	4606      	mov	r6, r0
 8007c3a:	b118      	cbz	r0, 8007c44 <_vfiprintf_r+0x18>
 8007c3c:	6983      	ldr	r3, [r0, #24]
 8007c3e:	b90b      	cbnz	r3, 8007c44 <_vfiprintf_r+0x18>
 8007c40:	f7fe f9aa 	bl	8005f98 <__sinit>
 8007c44:	4b89      	ldr	r3, [pc, #548]	; (8007e6c <_vfiprintf_r+0x240>)
 8007c46:	429d      	cmp	r5, r3
 8007c48:	d11b      	bne.n	8007c82 <_vfiprintf_r+0x56>
 8007c4a:	6875      	ldr	r5, [r6, #4]
 8007c4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c4e:	07d9      	lsls	r1, r3, #31
 8007c50:	d405      	bmi.n	8007c5e <_vfiprintf_r+0x32>
 8007c52:	89ab      	ldrh	r3, [r5, #12]
 8007c54:	059a      	lsls	r2, r3, #22
 8007c56:	d402      	bmi.n	8007c5e <_vfiprintf_r+0x32>
 8007c58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c5a:	f7fe fb75 	bl	8006348 <__retarget_lock_acquire_recursive>
 8007c5e:	89ab      	ldrh	r3, [r5, #12]
 8007c60:	071b      	lsls	r3, r3, #28
 8007c62:	d501      	bpl.n	8007c68 <_vfiprintf_r+0x3c>
 8007c64:	692b      	ldr	r3, [r5, #16]
 8007c66:	b9eb      	cbnz	r3, 8007ca4 <_vfiprintf_r+0x78>
 8007c68:	4629      	mov	r1, r5
 8007c6a:	4630      	mov	r0, r6
 8007c6c:	f000 fbd6 	bl	800841c <__swsetup_r>
 8007c70:	b1c0      	cbz	r0, 8007ca4 <_vfiprintf_r+0x78>
 8007c72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c74:	07dc      	lsls	r4, r3, #31
 8007c76:	d50e      	bpl.n	8007c96 <_vfiprintf_r+0x6a>
 8007c78:	f04f 30ff 	mov.w	r0, #4294967295
 8007c7c:	b01d      	add	sp, #116	; 0x74
 8007c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c82:	4b7b      	ldr	r3, [pc, #492]	; (8007e70 <_vfiprintf_r+0x244>)
 8007c84:	429d      	cmp	r5, r3
 8007c86:	d101      	bne.n	8007c8c <_vfiprintf_r+0x60>
 8007c88:	68b5      	ldr	r5, [r6, #8]
 8007c8a:	e7df      	b.n	8007c4c <_vfiprintf_r+0x20>
 8007c8c:	4b79      	ldr	r3, [pc, #484]	; (8007e74 <_vfiprintf_r+0x248>)
 8007c8e:	429d      	cmp	r5, r3
 8007c90:	bf08      	it	eq
 8007c92:	68f5      	ldreq	r5, [r6, #12]
 8007c94:	e7da      	b.n	8007c4c <_vfiprintf_r+0x20>
 8007c96:	89ab      	ldrh	r3, [r5, #12]
 8007c98:	0598      	lsls	r0, r3, #22
 8007c9a:	d4ed      	bmi.n	8007c78 <_vfiprintf_r+0x4c>
 8007c9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c9e:	f7fe fb55 	bl	800634c <__retarget_lock_release_recursive>
 8007ca2:	e7e9      	b.n	8007c78 <_vfiprintf_r+0x4c>
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	9309      	str	r3, [sp, #36]	; 0x24
 8007ca8:	2320      	movs	r3, #32
 8007caa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007cae:	f8cd 800c 	str.w	r8, [sp, #12]
 8007cb2:	2330      	movs	r3, #48	; 0x30
 8007cb4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007e78 <_vfiprintf_r+0x24c>
 8007cb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007cbc:	f04f 0901 	mov.w	r9, #1
 8007cc0:	4623      	mov	r3, r4
 8007cc2:	469a      	mov	sl, r3
 8007cc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007cc8:	b10a      	cbz	r2, 8007cce <_vfiprintf_r+0xa2>
 8007cca:	2a25      	cmp	r2, #37	; 0x25
 8007ccc:	d1f9      	bne.n	8007cc2 <_vfiprintf_r+0x96>
 8007cce:	ebba 0b04 	subs.w	fp, sl, r4
 8007cd2:	d00b      	beq.n	8007cec <_vfiprintf_r+0xc0>
 8007cd4:	465b      	mov	r3, fp
 8007cd6:	4622      	mov	r2, r4
 8007cd8:	4629      	mov	r1, r5
 8007cda:	4630      	mov	r0, r6
 8007cdc:	f7ff ff93 	bl	8007c06 <__sfputs_r>
 8007ce0:	3001      	adds	r0, #1
 8007ce2:	f000 80aa 	beq.w	8007e3a <_vfiprintf_r+0x20e>
 8007ce6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ce8:	445a      	add	r2, fp
 8007cea:	9209      	str	r2, [sp, #36]	; 0x24
 8007cec:	f89a 3000 	ldrb.w	r3, [sl]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	f000 80a2 	beq.w	8007e3a <_vfiprintf_r+0x20e>
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8007cfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d00:	f10a 0a01 	add.w	sl, sl, #1
 8007d04:	9304      	str	r3, [sp, #16]
 8007d06:	9307      	str	r3, [sp, #28]
 8007d08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d0c:	931a      	str	r3, [sp, #104]	; 0x68
 8007d0e:	4654      	mov	r4, sl
 8007d10:	2205      	movs	r2, #5
 8007d12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d16:	4858      	ldr	r0, [pc, #352]	; (8007e78 <_vfiprintf_r+0x24c>)
 8007d18:	f7f8 fa7a 	bl	8000210 <memchr>
 8007d1c:	9a04      	ldr	r2, [sp, #16]
 8007d1e:	b9d8      	cbnz	r0, 8007d58 <_vfiprintf_r+0x12c>
 8007d20:	06d1      	lsls	r1, r2, #27
 8007d22:	bf44      	itt	mi
 8007d24:	2320      	movmi	r3, #32
 8007d26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d2a:	0713      	lsls	r3, r2, #28
 8007d2c:	bf44      	itt	mi
 8007d2e:	232b      	movmi	r3, #43	; 0x2b
 8007d30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d34:	f89a 3000 	ldrb.w	r3, [sl]
 8007d38:	2b2a      	cmp	r3, #42	; 0x2a
 8007d3a:	d015      	beq.n	8007d68 <_vfiprintf_r+0x13c>
 8007d3c:	9a07      	ldr	r2, [sp, #28]
 8007d3e:	4654      	mov	r4, sl
 8007d40:	2000      	movs	r0, #0
 8007d42:	f04f 0c0a 	mov.w	ip, #10
 8007d46:	4621      	mov	r1, r4
 8007d48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d4c:	3b30      	subs	r3, #48	; 0x30
 8007d4e:	2b09      	cmp	r3, #9
 8007d50:	d94e      	bls.n	8007df0 <_vfiprintf_r+0x1c4>
 8007d52:	b1b0      	cbz	r0, 8007d82 <_vfiprintf_r+0x156>
 8007d54:	9207      	str	r2, [sp, #28]
 8007d56:	e014      	b.n	8007d82 <_vfiprintf_r+0x156>
 8007d58:	eba0 0308 	sub.w	r3, r0, r8
 8007d5c:	fa09 f303 	lsl.w	r3, r9, r3
 8007d60:	4313      	orrs	r3, r2
 8007d62:	9304      	str	r3, [sp, #16]
 8007d64:	46a2      	mov	sl, r4
 8007d66:	e7d2      	b.n	8007d0e <_vfiprintf_r+0xe2>
 8007d68:	9b03      	ldr	r3, [sp, #12]
 8007d6a:	1d19      	adds	r1, r3, #4
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	9103      	str	r1, [sp, #12]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	bfbb      	ittet	lt
 8007d74:	425b      	neglt	r3, r3
 8007d76:	f042 0202 	orrlt.w	r2, r2, #2
 8007d7a:	9307      	strge	r3, [sp, #28]
 8007d7c:	9307      	strlt	r3, [sp, #28]
 8007d7e:	bfb8      	it	lt
 8007d80:	9204      	strlt	r2, [sp, #16]
 8007d82:	7823      	ldrb	r3, [r4, #0]
 8007d84:	2b2e      	cmp	r3, #46	; 0x2e
 8007d86:	d10c      	bne.n	8007da2 <_vfiprintf_r+0x176>
 8007d88:	7863      	ldrb	r3, [r4, #1]
 8007d8a:	2b2a      	cmp	r3, #42	; 0x2a
 8007d8c:	d135      	bne.n	8007dfa <_vfiprintf_r+0x1ce>
 8007d8e:	9b03      	ldr	r3, [sp, #12]
 8007d90:	1d1a      	adds	r2, r3, #4
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	9203      	str	r2, [sp, #12]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	bfb8      	it	lt
 8007d9a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d9e:	3402      	adds	r4, #2
 8007da0:	9305      	str	r3, [sp, #20]
 8007da2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007e88 <_vfiprintf_r+0x25c>
 8007da6:	7821      	ldrb	r1, [r4, #0]
 8007da8:	2203      	movs	r2, #3
 8007daa:	4650      	mov	r0, sl
 8007dac:	f7f8 fa30 	bl	8000210 <memchr>
 8007db0:	b140      	cbz	r0, 8007dc4 <_vfiprintf_r+0x198>
 8007db2:	2340      	movs	r3, #64	; 0x40
 8007db4:	eba0 000a 	sub.w	r0, r0, sl
 8007db8:	fa03 f000 	lsl.w	r0, r3, r0
 8007dbc:	9b04      	ldr	r3, [sp, #16]
 8007dbe:	4303      	orrs	r3, r0
 8007dc0:	3401      	adds	r4, #1
 8007dc2:	9304      	str	r3, [sp, #16]
 8007dc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dc8:	482c      	ldr	r0, [pc, #176]	; (8007e7c <_vfiprintf_r+0x250>)
 8007dca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007dce:	2206      	movs	r2, #6
 8007dd0:	f7f8 fa1e 	bl	8000210 <memchr>
 8007dd4:	2800      	cmp	r0, #0
 8007dd6:	d03f      	beq.n	8007e58 <_vfiprintf_r+0x22c>
 8007dd8:	4b29      	ldr	r3, [pc, #164]	; (8007e80 <_vfiprintf_r+0x254>)
 8007dda:	bb1b      	cbnz	r3, 8007e24 <_vfiprintf_r+0x1f8>
 8007ddc:	9b03      	ldr	r3, [sp, #12]
 8007dde:	3307      	adds	r3, #7
 8007de0:	f023 0307 	bic.w	r3, r3, #7
 8007de4:	3308      	adds	r3, #8
 8007de6:	9303      	str	r3, [sp, #12]
 8007de8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dea:	443b      	add	r3, r7
 8007dec:	9309      	str	r3, [sp, #36]	; 0x24
 8007dee:	e767      	b.n	8007cc0 <_vfiprintf_r+0x94>
 8007df0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007df4:	460c      	mov	r4, r1
 8007df6:	2001      	movs	r0, #1
 8007df8:	e7a5      	b.n	8007d46 <_vfiprintf_r+0x11a>
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	3401      	adds	r4, #1
 8007dfe:	9305      	str	r3, [sp, #20]
 8007e00:	4619      	mov	r1, r3
 8007e02:	f04f 0c0a 	mov.w	ip, #10
 8007e06:	4620      	mov	r0, r4
 8007e08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e0c:	3a30      	subs	r2, #48	; 0x30
 8007e0e:	2a09      	cmp	r2, #9
 8007e10:	d903      	bls.n	8007e1a <_vfiprintf_r+0x1ee>
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d0c5      	beq.n	8007da2 <_vfiprintf_r+0x176>
 8007e16:	9105      	str	r1, [sp, #20]
 8007e18:	e7c3      	b.n	8007da2 <_vfiprintf_r+0x176>
 8007e1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e1e:	4604      	mov	r4, r0
 8007e20:	2301      	movs	r3, #1
 8007e22:	e7f0      	b.n	8007e06 <_vfiprintf_r+0x1da>
 8007e24:	ab03      	add	r3, sp, #12
 8007e26:	9300      	str	r3, [sp, #0]
 8007e28:	462a      	mov	r2, r5
 8007e2a:	4b16      	ldr	r3, [pc, #88]	; (8007e84 <_vfiprintf_r+0x258>)
 8007e2c:	a904      	add	r1, sp, #16
 8007e2e:	4630      	mov	r0, r6
 8007e30:	f3af 8000 	nop.w
 8007e34:	4607      	mov	r7, r0
 8007e36:	1c78      	adds	r0, r7, #1
 8007e38:	d1d6      	bne.n	8007de8 <_vfiprintf_r+0x1bc>
 8007e3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e3c:	07d9      	lsls	r1, r3, #31
 8007e3e:	d405      	bmi.n	8007e4c <_vfiprintf_r+0x220>
 8007e40:	89ab      	ldrh	r3, [r5, #12]
 8007e42:	059a      	lsls	r2, r3, #22
 8007e44:	d402      	bmi.n	8007e4c <_vfiprintf_r+0x220>
 8007e46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e48:	f7fe fa80 	bl	800634c <__retarget_lock_release_recursive>
 8007e4c:	89ab      	ldrh	r3, [r5, #12]
 8007e4e:	065b      	lsls	r3, r3, #25
 8007e50:	f53f af12 	bmi.w	8007c78 <_vfiprintf_r+0x4c>
 8007e54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e56:	e711      	b.n	8007c7c <_vfiprintf_r+0x50>
 8007e58:	ab03      	add	r3, sp, #12
 8007e5a:	9300      	str	r3, [sp, #0]
 8007e5c:	462a      	mov	r2, r5
 8007e5e:	4b09      	ldr	r3, [pc, #36]	; (8007e84 <_vfiprintf_r+0x258>)
 8007e60:	a904      	add	r1, sp, #16
 8007e62:	4630      	mov	r0, r6
 8007e64:	f000 f880 	bl	8007f68 <_printf_i>
 8007e68:	e7e4      	b.n	8007e34 <_vfiprintf_r+0x208>
 8007e6a:	bf00      	nop
 8007e6c:	0800a10c 	.word	0x0800a10c
 8007e70:	0800a12c 	.word	0x0800a12c
 8007e74:	0800a0ec 	.word	0x0800a0ec
 8007e78:	0800a62b 	.word	0x0800a62b
 8007e7c:	0800a635 	.word	0x0800a635
 8007e80:	00000000 	.word	0x00000000
 8007e84:	08007c07 	.word	0x08007c07
 8007e88:	0800a631 	.word	0x0800a631

08007e8c <_printf_common>:
 8007e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e90:	4616      	mov	r6, r2
 8007e92:	4699      	mov	r9, r3
 8007e94:	688a      	ldr	r2, [r1, #8]
 8007e96:	690b      	ldr	r3, [r1, #16]
 8007e98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	bfb8      	it	lt
 8007ea0:	4613      	movlt	r3, r2
 8007ea2:	6033      	str	r3, [r6, #0]
 8007ea4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ea8:	4607      	mov	r7, r0
 8007eaa:	460c      	mov	r4, r1
 8007eac:	b10a      	cbz	r2, 8007eb2 <_printf_common+0x26>
 8007eae:	3301      	adds	r3, #1
 8007eb0:	6033      	str	r3, [r6, #0]
 8007eb2:	6823      	ldr	r3, [r4, #0]
 8007eb4:	0699      	lsls	r1, r3, #26
 8007eb6:	bf42      	ittt	mi
 8007eb8:	6833      	ldrmi	r3, [r6, #0]
 8007eba:	3302      	addmi	r3, #2
 8007ebc:	6033      	strmi	r3, [r6, #0]
 8007ebe:	6825      	ldr	r5, [r4, #0]
 8007ec0:	f015 0506 	ands.w	r5, r5, #6
 8007ec4:	d106      	bne.n	8007ed4 <_printf_common+0x48>
 8007ec6:	f104 0a19 	add.w	sl, r4, #25
 8007eca:	68e3      	ldr	r3, [r4, #12]
 8007ecc:	6832      	ldr	r2, [r6, #0]
 8007ece:	1a9b      	subs	r3, r3, r2
 8007ed0:	42ab      	cmp	r3, r5
 8007ed2:	dc26      	bgt.n	8007f22 <_printf_common+0x96>
 8007ed4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ed8:	1e13      	subs	r3, r2, #0
 8007eda:	6822      	ldr	r2, [r4, #0]
 8007edc:	bf18      	it	ne
 8007ede:	2301      	movne	r3, #1
 8007ee0:	0692      	lsls	r2, r2, #26
 8007ee2:	d42b      	bmi.n	8007f3c <_printf_common+0xb0>
 8007ee4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ee8:	4649      	mov	r1, r9
 8007eea:	4638      	mov	r0, r7
 8007eec:	47c0      	blx	r8
 8007eee:	3001      	adds	r0, #1
 8007ef0:	d01e      	beq.n	8007f30 <_printf_common+0xa4>
 8007ef2:	6823      	ldr	r3, [r4, #0]
 8007ef4:	68e5      	ldr	r5, [r4, #12]
 8007ef6:	6832      	ldr	r2, [r6, #0]
 8007ef8:	f003 0306 	and.w	r3, r3, #6
 8007efc:	2b04      	cmp	r3, #4
 8007efe:	bf08      	it	eq
 8007f00:	1aad      	subeq	r5, r5, r2
 8007f02:	68a3      	ldr	r3, [r4, #8]
 8007f04:	6922      	ldr	r2, [r4, #16]
 8007f06:	bf0c      	ite	eq
 8007f08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f0c:	2500      	movne	r5, #0
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	bfc4      	itt	gt
 8007f12:	1a9b      	subgt	r3, r3, r2
 8007f14:	18ed      	addgt	r5, r5, r3
 8007f16:	2600      	movs	r6, #0
 8007f18:	341a      	adds	r4, #26
 8007f1a:	42b5      	cmp	r5, r6
 8007f1c:	d11a      	bne.n	8007f54 <_printf_common+0xc8>
 8007f1e:	2000      	movs	r0, #0
 8007f20:	e008      	b.n	8007f34 <_printf_common+0xa8>
 8007f22:	2301      	movs	r3, #1
 8007f24:	4652      	mov	r2, sl
 8007f26:	4649      	mov	r1, r9
 8007f28:	4638      	mov	r0, r7
 8007f2a:	47c0      	blx	r8
 8007f2c:	3001      	adds	r0, #1
 8007f2e:	d103      	bne.n	8007f38 <_printf_common+0xac>
 8007f30:	f04f 30ff 	mov.w	r0, #4294967295
 8007f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f38:	3501      	adds	r5, #1
 8007f3a:	e7c6      	b.n	8007eca <_printf_common+0x3e>
 8007f3c:	18e1      	adds	r1, r4, r3
 8007f3e:	1c5a      	adds	r2, r3, #1
 8007f40:	2030      	movs	r0, #48	; 0x30
 8007f42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f46:	4422      	add	r2, r4
 8007f48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f50:	3302      	adds	r3, #2
 8007f52:	e7c7      	b.n	8007ee4 <_printf_common+0x58>
 8007f54:	2301      	movs	r3, #1
 8007f56:	4622      	mov	r2, r4
 8007f58:	4649      	mov	r1, r9
 8007f5a:	4638      	mov	r0, r7
 8007f5c:	47c0      	blx	r8
 8007f5e:	3001      	adds	r0, #1
 8007f60:	d0e6      	beq.n	8007f30 <_printf_common+0xa4>
 8007f62:	3601      	adds	r6, #1
 8007f64:	e7d9      	b.n	8007f1a <_printf_common+0x8e>
	...

08007f68 <_printf_i>:
 8007f68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f6c:	460c      	mov	r4, r1
 8007f6e:	4691      	mov	r9, r2
 8007f70:	7e27      	ldrb	r7, [r4, #24]
 8007f72:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007f74:	2f78      	cmp	r7, #120	; 0x78
 8007f76:	4680      	mov	r8, r0
 8007f78:	469a      	mov	sl, r3
 8007f7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f7e:	d807      	bhi.n	8007f90 <_printf_i+0x28>
 8007f80:	2f62      	cmp	r7, #98	; 0x62
 8007f82:	d80a      	bhi.n	8007f9a <_printf_i+0x32>
 8007f84:	2f00      	cmp	r7, #0
 8007f86:	f000 80d8 	beq.w	800813a <_printf_i+0x1d2>
 8007f8a:	2f58      	cmp	r7, #88	; 0x58
 8007f8c:	f000 80a3 	beq.w	80080d6 <_printf_i+0x16e>
 8007f90:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007f94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f98:	e03a      	b.n	8008010 <_printf_i+0xa8>
 8007f9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f9e:	2b15      	cmp	r3, #21
 8007fa0:	d8f6      	bhi.n	8007f90 <_printf_i+0x28>
 8007fa2:	a001      	add	r0, pc, #4	; (adr r0, 8007fa8 <_printf_i+0x40>)
 8007fa4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007fa8:	08008001 	.word	0x08008001
 8007fac:	08008015 	.word	0x08008015
 8007fb0:	08007f91 	.word	0x08007f91
 8007fb4:	08007f91 	.word	0x08007f91
 8007fb8:	08007f91 	.word	0x08007f91
 8007fbc:	08007f91 	.word	0x08007f91
 8007fc0:	08008015 	.word	0x08008015
 8007fc4:	08007f91 	.word	0x08007f91
 8007fc8:	08007f91 	.word	0x08007f91
 8007fcc:	08007f91 	.word	0x08007f91
 8007fd0:	08007f91 	.word	0x08007f91
 8007fd4:	08008121 	.word	0x08008121
 8007fd8:	08008045 	.word	0x08008045
 8007fdc:	08008103 	.word	0x08008103
 8007fe0:	08007f91 	.word	0x08007f91
 8007fe4:	08007f91 	.word	0x08007f91
 8007fe8:	08008143 	.word	0x08008143
 8007fec:	08007f91 	.word	0x08007f91
 8007ff0:	08008045 	.word	0x08008045
 8007ff4:	08007f91 	.word	0x08007f91
 8007ff8:	08007f91 	.word	0x08007f91
 8007ffc:	0800810b 	.word	0x0800810b
 8008000:	680b      	ldr	r3, [r1, #0]
 8008002:	1d1a      	adds	r2, r3, #4
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	600a      	str	r2, [r1, #0]
 8008008:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800800c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008010:	2301      	movs	r3, #1
 8008012:	e0a3      	b.n	800815c <_printf_i+0x1f4>
 8008014:	6825      	ldr	r5, [r4, #0]
 8008016:	6808      	ldr	r0, [r1, #0]
 8008018:	062e      	lsls	r6, r5, #24
 800801a:	f100 0304 	add.w	r3, r0, #4
 800801e:	d50a      	bpl.n	8008036 <_printf_i+0xce>
 8008020:	6805      	ldr	r5, [r0, #0]
 8008022:	600b      	str	r3, [r1, #0]
 8008024:	2d00      	cmp	r5, #0
 8008026:	da03      	bge.n	8008030 <_printf_i+0xc8>
 8008028:	232d      	movs	r3, #45	; 0x2d
 800802a:	426d      	negs	r5, r5
 800802c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008030:	485e      	ldr	r0, [pc, #376]	; (80081ac <_printf_i+0x244>)
 8008032:	230a      	movs	r3, #10
 8008034:	e019      	b.n	800806a <_printf_i+0x102>
 8008036:	f015 0f40 	tst.w	r5, #64	; 0x40
 800803a:	6805      	ldr	r5, [r0, #0]
 800803c:	600b      	str	r3, [r1, #0]
 800803e:	bf18      	it	ne
 8008040:	b22d      	sxthne	r5, r5
 8008042:	e7ef      	b.n	8008024 <_printf_i+0xbc>
 8008044:	680b      	ldr	r3, [r1, #0]
 8008046:	6825      	ldr	r5, [r4, #0]
 8008048:	1d18      	adds	r0, r3, #4
 800804a:	6008      	str	r0, [r1, #0]
 800804c:	0628      	lsls	r0, r5, #24
 800804e:	d501      	bpl.n	8008054 <_printf_i+0xec>
 8008050:	681d      	ldr	r5, [r3, #0]
 8008052:	e002      	b.n	800805a <_printf_i+0xf2>
 8008054:	0669      	lsls	r1, r5, #25
 8008056:	d5fb      	bpl.n	8008050 <_printf_i+0xe8>
 8008058:	881d      	ldrh	r5, [r3, #0]
 800805a:	4854      	ldr	r0, [pc, #336]	; (80081ac <_printf_i+0x244>)
 800805c:	2f6f      	cmp	r7, #111	; 0x6f
 800805e:	bf0c      	ite	eq
 8008060:	2308      	moveq	r3, #8
 8008062:	230a      	movne	r3, #10
 8008064:	2100      	movs	r1, #0
 8008066:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800806a:	6866      	ldr	r6, [r4, #4]
 800806c:	60a6      	str	r6, [r4, #8]
 800806e:	2e00      	cmp	r6, #0
 8008070:	bfa2      	ittt	ge
 8008072:	6821      	ldrge	r1, [r4, #0]
 8008074:	f021 0104 	bicge.w	r1, r1, #4
 8008078:	6021      	strge	r1, [r4, #0]
 800807a:	b90d      	cbnz	r5, 8008080 <_printf_i+0x118>
 800807c:	2e00      	cmp	r6, #0
 800807e:	d04d      	beq.n	800811c <_printf_i+0x1b4>
 8008080:	4616      	mov	r6, r2
 8008082:	fbb5 f1f3 	udiv	r1, r5, r3
 8008086:	fb03 5711 	mls	r7, r3, r1, r5
 800808a:	5dc7      	ldrb	r7, [r0, r7]
 800808c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008090:	462f      	mov	r7, r5
 8008092:	42bb      	cmp	r3, r7
 8008094:	460d      	mov	r5, r1
 8008096:	d9f4      	bls.n	8008082 <_printf_i+0x11a>
 8008098:	2b08      	cmp	r3, #8
 800809a:	d10b      	bne.n	80080b4 <_printf_i+0x14c>
 800809c:	6823      	ldr	r3, [r4, #0]
 800809e:	07df      	lsls	r7, r3, #31
 80080a0:	d508      	bpl.n	80080b4 <_printf_i+0x14c>
 80080a2:	6923      	ldr	r3, [r4, #16]
 80080a4:	6861      	ldr	r1, [r4, #4]
 80080a6:	4299      	cmp	r1, r3
 80080a8:	bfde      	ittt	le
 80080aa:	2330      	movle	r3, #48	; 0x30
 80080ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80080b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80080b4:	1b92      	subs	r2, r2, r6
 80080b6:	6122      	str	r2, [r4, #16]
 80080b8:	f8cd a000 	str.w	sl, [sp]
 80080bc:	464b      	mov	r3, r9
 80080be:	aa03      	add	r2, sp, #12
 80080c0:	4621      	mov	r1, r4
 80080c2:	4640      	mov	r0, r8
 80080c4:	f7ff fee2 	bl	8007e8c <_printf_common>
 80080c8:	3001      	adds	r0, #1
 80080ca:	d14c      	bne.n	8008166 <_printf_i+0x1fe>
 80080cc:	f04f 30ff 	mov.w	r0, #4294967295
 80080d0:	b004      	add	sp, #16
 80080d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080d6:	4835      	ldr	r0, [pc, #212]	; (80081ac <_printf_i+0x244>)
 80080d8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80080dc:	6823      	ldr	r3, [r4, #0]
 80080de:	680e      	ldr	r6, [r1, #0]
 80080e0:	061f      	lsls	r7, r3, #24
 80080e2:	f856 5b04 	ldr.w	r5, [r6], #4
 80080e6:	600e      	str	r6, [r1, #0]
 80080e8:	d514      	bpl.n	8008114 <_printf_i+0x1ac>
 80080ea:	07d9      	lsls	r1, r3, #31
 80080ec:	bf44      	itt	mi
 80080ee:	f043 0320 	orrmi.w	r3, r3, #32
 80080f2:	6023      	strmi	r3, [r4, #0]
 80080f4:	b91d      	cbnz	r5, 80080fe <_printf_i+0x196>
 80080f6:	6823      	ldr	r3, [r4, #0]
 80080f8:	f023 0320 	bic.w	r3, r3, #32
 80080fc:	6023      	str	r3, [r4, #0]
 80080fe:	2310      	movs	r3, #16
 8008100:	e7b0      	b.n	8008064 <_printf_i+0xfc>
 8008102:	6823      	ldr	r3, [r4, #0]
 8008104:	f043 0320 	orr.w	r3, r3, #32
 8008108:	6023      	str	r3, [r4, #0]
 800810a:	2378      	movs	r3, #120	; 0x78
 800810c:	4828      	ldr	r0, [pc, #160]	; (80081b0 <_printf_i+0x248>)
 800810e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008112:	e7e3      	b.n	80080dc <_printf_i+0x174>
 8008114:	065e      	lsls	r6, r3, #25
 8008116:	bf48      	it	mi
 8008118:	b2ad      	uxthmi	r5, r5
 800811a:	e7e6      	b.n	80080ea <_printf_i+0x182>
 800811c:	4616      	mov	r6, r2
 800811e:	e7bb      	b.n	8008098 <_printf_i+0x130>
 8008120:	680b      	ldr	r3, [r1, #0]
 8008122:	6826      	ldr	r6, [r4, #0]
 8008124:	6960      	ldr	r0, [r4, #20]
 8008126:	1d1d      	adds	r5, r3, #4
 8008128:	600d      	str	r5, [r1, #0]
 800812a:	0635      	lsls	r5, r6, #24
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	d501      	bpl.n	8008134 <_printf_i+0x1cc>
 8008130:	6018      	str	r0, [r3, #0]
 8008132:	e002      	b.n	800813a <_printf_i+0x1d2>
 8008134:	0671      	lsls	r1, r6, #25
 8008136:	d5fb      	bpl.n	8008130 <_printf_i+0x1c8>
 8008138:	8018      	strh	r0, [r3, #0]
 800813a:	2300      	movs	r3, #0
 800813c:	6123      	str	r3, [r4, #16]
 800813e:	4616      	mov	r6, r2
 8008140:	e7ba      	b.n	80080b8 <_printf_i+0x150>
 8008142:	680b      	ldr	r3, [r1, #0]
 8008144:	1d1a      	adds	r2, r3, #4
 8008146:	600a      	str	r2, [r1, #0]
 8008148:	681e      	ldr	r6, [r3, #0]
 800814a:	6862      	ldr	r2, [r4, #4]
 800814c:	2100      	movs	r1, #0
 800814e:	4630      	mov	r0, r6
 8008150:	f7f8 f85e 	bl	8000210 <memchr>
 8008154:	b108      	cbz	r0, 800815a <_printf_i+0x1f2>
 8008156:	1b80      	subs	r0, r0, r6
 8008158:	6060      	str	r0, [r4, #4]
 800815a:	6863      	ldr	r3, [r4, #4]
 800815c:	6123      	str	r3, [r4, #16]
 800815e:	2300      	movs	r3, #0
 8008160:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008164:	e7a8      	b.n	80080b8 <_printf_i+0x150>
 8008166:	6923      	ldr	r3, [r4, #16]
 8008168:	4632      	mov	r2, r6
 800816a:	4649      	mov	r1, r9
 800816c:	4640      	mov	r0, r8
 800816e:	47d0      	blx	sl
 8008170:	3001      	adds	r0, #1
 8008172:	d0ab      	beq.n	80080cc <_printf_i+0x164>
 8008174:	6823      	ldr	r3, [r4, #0]
 8008176:	079b      	lsls	r3, r3, #30
 8008178:	d413      	bmi.n	80081a2 <_printf_i+0x23a>
 800817a:	68e0      	ldr	r0, [r4, #12]
 800817c:	9b03      	ldr	r3, [sp, #12]
 800817e:	4298      	cmp	r0, r3
 8008180:	bfb8      	it	lt
 8008182:	4618      	movlt	r0, r3
 8008184:	e7a4      	b.n	80080d0 <_printf_i+0x168>
 8008186:	2301      	movs	r3, #1
 8008188:	4632      	mov	r2, r6
 800818a:	4649      	mov	r1, r9
 800818c:	4640      	mov	r0, r8
 800818e:	47d0      	blx	sl
 8008190:	3001      	adds	r0, #1
 8008192:	d09b      	beq.n	80080cc <_printf_i+0x164>
 8008194:	3501      	adds	r5, #1
 8008196:	68e3      	ldr	r3, [r4, #12]
 8008198:	9903      	ldr	r1, [sp, #12]
 800819a:	1a5b      	subs	r3, r3, r1
 800819c:	42ab      	cmp	r3, r5
 800819e:	dcf2      	bgt.n	8008186 <_printf_i+0x21e>
 80081a0:	e7eb      	b.n	800817a <_printf_i+0x212>
 80081a2:	2500      	movs	r5, #0
 80081a4:	f104 0619 	add.w	r6, r4, #25
 80081a8:	e7f5      	b.n	8008196 <_printf_i+0x22e>
 80081aa:	bf00      	nop
 80081ac:	0800a63c 	.word	0x0800a63c
 80081b0:	0800a64d 	.word	0x0800a64d

080081b4 <_putc_r>:
 80081b4:	b570      	push	{r4, r5, r6, lr}
 80081b6:	460d      	mov	r5, r1
 80081b8:	4614      	mov	r4, r2
 80081ba:	4606      	mov	r6, r0
 80081bc:	b118      	cbz	r0, 80081c6 <_putc_r+0x12>
 80081be:	6983      	ldr	r3, [r0, #24]
 80081c0:	b90b      	cbnz	r3, 80081c6 <_putc_r+0x12>
 80081c2:	f7fd fee9 	bl	8005f98 <__sinit>
 80081c6:	4b1c      	ldr	r3, [pc, #112]	; (8008238 <_putc_r+0x84>)
 80081c8:	429c      	cmp	r4, r3
 80081ca:	d124      	bne.n	8008216 <_putc_r+0x62>
 80081cc:	6874      	ldr	r4, [r6, #4]
 80081ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80081d0:	07d8      	lsls	r0, r3, #31
 80081d2:	d405      	bmi.n	80081e0 <_putc_r+0x2c>
 80081d4:	89a3      	ldrh	r3, [r4, #12]
 80081d6:	0599      	lsls	r1, r3, #22
 80081d8:	d402      	bmi.n	80081e0 <_putc_r+0x2c>
 80081da:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081dc:	f7fe f8b4 	bl	8006348 <__retarget_lock_acquire_recursive>
 80081e0:	68a3      	ldr	r3, [r4, #8]
 80081e2:	3b01      	subs	r3, #1
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	60a3      	str	r3, [r4, #8]
 80081e8:	da05      	bge.n	80081f6 <_putc_r+0x42>
 80081ea:	69a2      	ldr	r2, [r4, #24]
 80081ec:	4293      	cmp	r3, r2
 80081ee:	db1c      	blt.n	800822a <_putc_r+0x76>
 80081f0:	b2eb      	uxtb	r3, r5
 80081f2:	2b0a      	cmp	r3, #10
 80081f4:	d019      	beq.n	800822a <_putc_r+0x76>
 80081f6:	6823      	ldr	r3, [r4, #0]
 80081f8:	1c5a      	adds	r2, r3, #1
 80081fa:	6022      	str	r2, [r4, #0]
 80081fc:	701d      	strb	r5, [r3, #0]
 80081fe:	b2ed      	uxtb	r5, r5
 8008200:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008202:	07da      	lsls	r2, r3, #31
 8008204:	d405      	bmi.n	8008212 <_putc_r+0x5e>
 8008206:	89a3      	ldrh	r3, [r4, #12]
 8008208:	059b      	lsls	r3, r3, #22
 800820a:	d402      	bmi.n	8008212 <_putc_r+0x5e>
 800820c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800820e:	f7fe f89d 	bl	800634c <__retarget_lock_release_recursive>
 8008212:	4628      	mov	r0, r5
 8008214:	bd70      	pop	{r4, r5, r6, pc}
 8008216:	4b09      	ldr	r3, [pc, #36]	; (800823c <_putc_r+0x88>)
 8008218:	429c      	cmp	r4, r3
 800821a:	d101      	bne.n	8008220 <_putc_r+0x6c>
 800821c:	68b4      	ldr	r4, [r6, #8]
 800821e:	e7d6      	b.n	80081ce <_putc_r+0x1a>
 8008220:	4b07      	ldr	r3, [pc, #28]	; (8008240 <_putc_r+0x8c>)
 8008222:	429c      	cmp	r4, r3
 8008224:	bf08      	it	eq
 8008226:	68f4      	ldreq	r4, [r6, #12]
 8008228:	e7d1      	b.n	80081ce <_putc_r+0x1a>
 800822a:	4629      	mov	r1, r5
 800822c:	4622      	mov	r2, r4
 800822e:	4630      	mov	r0, r6
 8008230:	f000 f894 	bl	800835c <__swbuf_r>
 8008234:	4605      	mov	r5, r0
 8008236:	e7e3      	b.n	8008200 <_putc_r+0x4c>
 8008238:	0800a10c 	.word	0x0800a10c
 800823c:	0800a12c 	.word	0x0800a12c
 8008240:	0800a0ec 	.word	0x0800a0ec

08008244 <_read_r>:
 8008244:	b538      	push	{r3, r4, r5, lr}
 8008246:	4d07      	ldr	r5, [pc, #28]	; (8008264 <_read_r+0x20>)
 8008248:	4604      	mov	r4, r0
 800824a:	4608      	mov	r0, r1
 800824c:	4611      	mov	r1, r2
 800824e:	2200      	movs	r2, #0
 8008250:	602a      	str	r2, [r5, #0]
 8008252:	461a      	mov	r2, r3
 8008254:	f7f9 ffaa 	bl	80021ac <_read>
 8008258:	1c43      	adds	r3, r0, #1
 800825a:	d102      	bne.n	8008262 <_read_r+0x1e>
 800825c:	682b      	ldr	r3, [r5, #0]
 800825e:	b103      	cbz	r3, 8008262 <_read_r+0x1e>
 8008260:	6023      	str	r3, [r4, #0]
 8008262:	bd38      	pop	{r3, r4, r5, pc}
 8008264:	200004b4 	.word	0x200004b4

08008268 <sniprintf>:
 8008268:	b40c      	push	{r2, r3}
 800826a:	b530      	push	{r4, r5, lr}
 800826c:	4b17      	ldr	r3, [pc, #92]	; (80082cc <sniprintf+0x64>)
 800826e:	1e0c      	subs	r4, r1, #0
 8008270:	681d      	ldr	r5, [r3, #0]
 8008272:	b09d      	sub	sp, #116	; 0x74
 8008274:	da08      	bge.n	8008288 <sniprintf+0x20>
 8008276:	238b      	movs	r3, #139	; 0x8b
 8008278:	602b      	str	r3, [r5, #0]
 800827a:	f04f 30ff 	mov.w	r0, #4294967295
 800827e:	b01d      	add	sp, #116	; 0x74
 8008280:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008284:	b002      	add	sp, #8
 8008286:	4770      	bx	lr
 8008288:	f44f 7302 	mov.w	r3, #520	; 0x208
 800828c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008290:	bf14      	ite	ne
 8008292:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008296:	4623      	moveq	r3, r4
 8008298:	9304      	str	r3, [sp, #16]
 800829a:	9307      	str	r3, [sp, #28]
 800829c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80082a0:	9002      	str	r0, [sp, #8]
 80082a2:	9006      	str	r0, [sp, #24]
 80082a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80082a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80082aa:	ab21      	add	r3, sp, #132	; 0x84
 80082ac:	a902      	add	r1, sp, #8
 80082ae:	4628      	mov	r0, r5
 80082b0:	9301      	str	r3, [sp, #4]
 80082b2:	f7ff fb91 	bl	80079d8 <_svfiprintf_r>
 80082b6:	1c43      	adds	r3, r0, #1
 80082b8:	bfbc      	itt	lt
 80082ba:	238b      	movlt	r3, #139	; 0x8b
 80082bc:	602b      	strlt	r3, [r5, #0]
 80082be:	2c00      	cmp	r4, #0
 80082c0:	d0dd      	beq.n	800827e <sniprintf+0x16>
 80082c2:	9b02      	ldr	r3, [sp, #8]
 80082c4:	2200      	movs	r2, #0
 80082c6:	701a      	strb	r2, [r3, #0]
 80082c8:	e7d9      	b.n	800827e <sniprintf+0x16>
 80082ca:	bf00      	nop
 80082cc:	20000018 	.word	0x20000018

080082d0 <siscanf>:
 80082d0:	b40e      	push	{r1, r2, r3}
 80082d2:	b510      	push	{r4, lr}
 80082d4:	b09f      	sub	sp, #124	; 0x7c
 80082d6:	ac21      	add	r4, sp, #132	; 0x84
 80082d8:	f44f 7101 	mov.w	r1, #516	; 0x204
 80082dc:	f854 2b04 	ldr.w	r2, [r4], #4
 80082e0:	9201      	str	r2, [sp, #4]
 80082e2:	f8ad 101c 	strh.w	r1, [sp, #28]
 80082e6:	9004      	str	r0, [sp, #16]
 80082e8:	9008      	str	r0, [sp, #32]
 80082ea:	f7f7 ff79 	bl	80001e0 <strlen>
 80082ee:	4b0c      	ldr	r3, [pc, #48]	; (8008320 <siscanf+0x50>)
 80082f0:	9005      	str	r0, [sp, #20]
 80082f2:	9009      	str	r0, [sp, #36]	; 0x24
 80082f4:	930d      	str	r3, [sp, #52]	; 0x34
 80082f6:	480b      	ldr	r0, [pc, #44]	; (8008324 <siscanf+0x54>)
 80082f8:	9a01      	ldr	r2, [sp, #4]
 80082fa:	6800      	ldr	r0, [r0, #0]
 80082fc:	9403      	str	r4, [sp, #12]
 80082fe:	2300      	movs	r3, #0
 8008300:	9311      	str	r3, [sp, #68]	; 0x44
 8008302:	9316      	str	r3, [sp, #88]	; 0x58
 8008304:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008308:	f8ad 301e 	strh.w	r3, [sp, #30]
 800830c:	a904      	add	r1, sp, #16
 800830e:	4623      	mov	r3, r4
 8008310:	f000 fa12 	bl	8008738 <__ssvfiscanf_r>
 8008314:	b01f      	add	sp, #124	; 0x7c
 8008316:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800831a:	b003      	add	sp, #12
 800831c:	4770      	bx	lr
 800831e:	bf00      	nop
 8008320:	08006543 	.word	0x08006543
 8008324:	20000018 	.word	0x20000018

08008328 <strcpy>:
 8008328:	4603      	mov	r3, r0
 800832a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800832e:	f803 2b01 	strb.w	r2, [r3], #1
 8008332:	2a00      	cmp	r2, #0
 8008334:	d1f9      	bne.n	800832a <strcpy+0x2>
 8008336:	4770      	bx	lr

08008338 <strncmp>:
 8008338:	b510      	push	{r4, lr}
 800833a:	b16a      	cbz	r2, 8008358 <strncmp+0x20>
 800833c:	3901      	subs	r1, #1
 800833e:	1884      	adds	r4, r0, r2
 8008340:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008344:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008348:	4293      	cmp	r3, r2
 800834a:	d103      	bne.n	8008354 <strncmp+0x1c>
 800834c:	42a0      	cmp	r0, r4
 800834e:	d001      	beq.n	8008354 <strncmp+0x1c>
 8008350:	2b00      	cmp	r3, #0
 8008352:	d1f5      	bne.n	8008340 <strncmp+0x8>
 8008354:	1a98      	subs	r0, r3, r2
 8008356:	bd10      	pop	{r4, pc}
 8008358:	4610      	mov	r0, r2
 800835a:	e7fc      	b.n	8008356 <strncmp+0x1e>

0800835c <__swbuf_r>:
 800835c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800835e:	460e      	mov	r6, r1
 8008360:	4614      	mov	r4, r2
 8008362:	4605      	mov	r5, r0
 8008364:	b118      	cbz	r0, 800836e <__swbuf_r+0x12>
 8008366:	6983      	ldr	r3, [r0, #24]
 8008368:	b90b      	cbnz	r3, 800836e <__swbuf_r+0x12>
 800836a:	f7fd fe15 	bl	8005f98 <__sinit>
 800836e:	4b21      	ldr	r3, [pc, #132]	; (80083f4 <__swbuf_r+0x98>)
 8008370:	429c      	cmp	r4, r3
 8008372:	d12b      	bne.n	80083cc <__swbuf_r+0x70>
 8008374:	686c      	ldr	r4, [r5, #4]
 8008376:	69a3      	ldr	r3, [r4, #24]
 8008378:	60a3      	str	r3, [r4, #8]
 800837a:	89a3      	ldrh	r3, [r4, #12]
 800837c:	071a      	lsls	r2, r3, #28
 800837e:	d52f      	bpl.n	80083e0 <__swbuf_r+0x84>
 8008380:	6923      	ldr	r3, [r4, #16]
 8008382:	b36b      	cbz	r3, 80083e0 <__swbuf_r+0x84>
 8008384:	6923      	ldr	r3, [r4, #16]
 8008386:	6820      	ldr	r0, [r4, #0]
 8008388:	1ac0      	subs	r0, r0, r3
 800838a:	6963      	ldr	r3, [r4, #20]
 800838c:	b2f6      	uxtb	r6, r6
 800838e:	4283      	cmp	r3, r0
 8008390:	4637      	mov	r7, r6
 8008392:	dc04      	bgt.n	800839e <__swbuf_r+0x42>
 8008394:	4621      	mov	r1, r4
 8008396:	4628      	mov	r0, r5
 8008398:	f7fd fd58 	bl	8005e4c <_fflush_r>
 800839c:	bb30      	cbnz	r0, 80083ec <__swbuf_r+0x90>
 800839e:	68a3      	ldr	r3, [r4, #8]
 80083a0:	3b01      	subs	r3, #1
 80083a2:	60a3      	str	r3, [r4, #8]
 80083a4:	6823      	ldr	r3, [r4, #0]
 80083a6:	1c5a      	adds	r2, r3, #1
 80083a8:	6022      	str	r2, [r4, #0]
 80083aa:	701e      	strb	r6, [r3, #0]
 80083ac:	6963      	ldr	r3, [r4, #20]
 80083ae:	3001      	adds	r0, #1
 80083b0:	4283      	cmp	r3, r0
 80083b2:	d004      	beq.n	80083be <__swbuf_r+0x62>
 80083b4:	89a3      	ldrh	r3, [r4, #12]
 80083b6:	07db      	lsls	r3, r3, #31
 80083b8:	d506      	bpl.n	80083c8 <__swbuf_r+0x6c>
 80083ba:	2e0a      	cmp	r6, #10
 80083bc:	d104      	bne.n	80083c8 <__swbuf_r+0x6c>
 80083be:	4621      	mov	r1, r4
 80083c0:	4628      	mov	r0, r5
 80083c2:	f7fd fd43 	bl	8005e4c <_fflush_r>
 80083c6:	b988      	cbnz	r0, 80083ec <__swbuf_r+0x90>
 80083c8:	4638      	mov	r0, r7
 80083ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083cc:	4b0a      	ldr	r3, [pc, #40]	; (80083f8 <__swbuf_r+0x9c>)
 80083ce:	429c      	cmp	r4, r3
 80083d0:	d101      	bne.n	80083d6 <__swbuf_r+0x7a>
 80083d2:	68ac      	ldr	r4, [r5, #8]
 80083d4:	e7cf      	b.n	8008376 <__swbuf_r+0x1a>
 80083d6:	4b09      	ldr	r3, [pc, #36]	; (80083fc <__swbuf_r+0xa0>)
 80083d8:	429c      	cmp	r4, r3
 80083da:	bf08      	it	eq
 80083dc:	68ec      	ldreq	r4, [r5, #12]
 80083de:	e7ca      	b.n	8008376 <__swbuf_r+0x1a>
 80083e0:	4621      	mov	r1, r4
 80083e2:	4628      	mov	r0, r5
 80083e4:	f000 f81a 	bl	800841c <__swsetup_r>
 80083e8:	2800      	cmp	r0, #0
 80083ea:	d0cb      	beq.n	8008384 <__swbuf_r+0x28>
 80083ec:	f04f 37ff 	mov.w	r7, #4294967295
 80083f0:	e7ea      	b.n	80083c8 <__swbuf_r+0x6c>
 80083f2:	bf00      	nop
 80083f4:	0800a10c 	.word	0x0800a10c
 80083f8:	0800a12c 	.word	0x0800a12c
 80083fc:	0800a0ec 	.word	0x0800a0ec

08008400 <__ascii_wctomb>:
 8008400:	b149      	cbz	r1, 8008416 <__ascii_wctomb+0x16>
 8008402:	2aff      	cmp	r2, #255	; 0xff
 8008404:	bf85      	ittet	hi
 8008406:	238a      	movhi	r3, #138	; 0x8a
 8008408:	6003      	strhi	r3, [r0, #0]
 800840a:	700a      	strbls	r2, [r1, #0]
 800840c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008410:	bf98      	it	ls
 8008412:	2001      	movls	r0, #1
 8008414:	4770      	bx	lr
 8008416:	4608      	mov	r0, r1
 8008418:	4770      	bx	lr
	...

0800841c <__swsetup_r>:
 800841c:	4b32      	ldr	r3, [pc, #200]	; (80084e8 <__swsetup_r+0xcc>)
 800841e:	b570      	push	{r4, r5, r6, lr}
 8008420:	681d      	ldr	r5, [r3, #0]
 8008422:	4606      	mov	r6, r0
 8008424:	460c      	mov	r4, r1
 8008426:	b125      	cbz	r5, 8008432 <__swsetup_r+0x16>
 8008428:	69ab      	ldr	r3, [r5, #24]
 800842a:	b913      	cbnz	r3, 8008432 <__swsetup_r+0x16>
 800842c:	4628      	mov	r0, r5
 800842e:	f7fd fdb3 	bl	8005f98 <__sinit>
 8008432:	4b2e      	ldr	r3, [pc, #184]	; (80084ec <__swsetup_r+0xd0>)
 8008434:	429c      	cmp	r4, r3
 8008436:	d10f      	bne.n	8008458 <__swsetup_r+0x3c>
 8008438:	686c      	ldr	r4, [r5, #4]
 800843a:	89a3      	ldrh	r3, [r4, #12]
 800843c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008440:	0719      	lsls	r1, r3, #28
 8008442:	d42c      	bmi.n	800849e <__swsetup_r+0x82>
 8008444:	06dd      	lsls	r5, r3, #27
 8008446:	d411      	bmi.n	800846c <__swsetup_r+0x50>
 8008448:	2309      	movs	r3, #9
 800844a:	6033      	str	r3, [r6, #0]
 800844c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008450:	81a3      	strh	r3, [r4, #12]
 8008452:	f04f 30ff 	mov.w	r0, #4294967295
 8008456:	e03e      	b.n	80084d6 <__swsetup_r+0xba>
 8008458:	4b25      	ldr	r3, [pc, #148]	; (80084f0 <__swsetup_r+0xd4>)
 800845a:	429c      	cmp	r4, r3
 800845c:	d101      	bne.n	8008462 <__swsetup_r+0x46>
 800845e:	68ac      	ldr	r4, [r5, #8]
 8008460:	e7eb      	b.n	800843a <__swsetup_r+0x1e>
 8008462:	4b24      	ldr	r3, [pc, #144]	; (80084f4 <__swsetup_r+0xd8>)
 8008464:	429c      	cmp	r4, r3
 8008466:	bf08      	it	eq
 8008468:	68ec      	ldreq	r4, [r5, #12]
 800846a:	e7e6      	b.n	800843a <__swsetup_r+0x1e>
 800846c:	0758      	lsls	r0, r3, #29
 800846e:	d512      	bpl.n	8008496 <__swsetup_r+0x7a>
 8008470:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008472:	b141      	cbz	r1, 8008486 <__swsetup_r+0x6a>
 8008474:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008478:	4299      	cmp	r1, r3
 800847a:	d002      	beq.n	8008482 <__swsetup_r+0x66>
 800847c:	4630      	mov	r0, r6
 800847e:	f7fd ff7f 	bl	8006380 <_free_r>
 8008482:	2300      	movs	r3, #0
 8008484:	6363      	str	r3, [r4, #52]	; 0x34
 8008486:	89a3      	ldrh	r3, [r4, #12]
 8008488:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800848c:	81a3      	strh	r3, [r4, #12]
 800848e:	2300      	movs	r3, #0
 8008490:	6063      	str	r3, [r4, #4]
 8008492:	6923      	ldr	r3, [r4, #16]
 8008494:	6023      	str	r3, [r4, #0]
 8008496:	89a3      	ldrh	r3, [r4, #12]
 8008498:	f043 0308 	orr.w	r3, r3, #8
 800849c:	81a3      	strh	r3, [r4, #12]
 800849e:	6923      	ldr	r3, [r4, #16]
 80084a0:	b94b      	cbnz	r3, 80084b6 <__swsetup_r+0x9a>
 80084a2:	89a3      	ldrh	r3, [r4, #12]
 80084a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80084a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084ac:	d003      	beq.n	80084b6 <__swsetup_r+0x9a>
 80084ae:	4621      	mov	r1, r4
 80084b0:	4630      	mov	r0, r6
 80084b2:	f000 f859 	bl	8008568 <__smakebuf_r>
 80084b6:	89a0      	ldrh	r0, [r4, #12]
 80084b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80084bc:	f010 0301 	ands.w	r3, r0, #1
 80084c0:	d00a      	beq.n	80084d8 <__swsetup_r+0xbc>
 80084c2:	2300      	movs	r3, #0
 80084c4:	60a3      	str	r3, [r4, #8]
 80084c6:	6963      	ldr	r3, [r4, #20]
 80084c8:	425b      	negs	r3, r3
 80084ca:	61a3      	str	r3, [r4, #24]
 80084cc:	6923      	ldr	r3, [r4, #16]
 80084ce:	b943      	cbnz	r3, 80084e2 <__swsetup_r+0xc6>
 80084d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80084d4:	d1ba      	bne.n	800844c <__swsetup_r+0x30>
 80084d6:	bd70      	pop	{r4, r5, r6, pc}
 80084d8:	0781      	lsls	r1, r0, #30
 80084da:	bf58      	it	pl
 80084dc:	6963      	ldrpl	r3, [r4, #20]
 80084de:	60a3      	str	r3, [r4, #8]
 80084e0:	e7f4      	b.n	80084cc <__swsetup_r+0xb0>
 80084e2:	2000      	movs	r0, #0
 80084e4:	e7f7      	b.n	80084d6 <__swsetup_r+0xba>
 80084e6:	bf00      	nop
 80084e8:	20000018 	.word	0x20000018
 80084ec:	0800a10c 	.word	0x0800a10c
 80084f0:	0800a12c 	.word	0x0800a12c
 80084f4:	0800a0ec 	.word	0x0800a0ec

080084f8 <abort>:
 80084f8:	b508      	push	{r3, lr}
 80084fa:	2006      	movs	r0, #6
 80084fc:	f000 fc42 	bl	8008d84 <raise>
 8008500:	2001      	movs	r0, #1
 8008502:	f7f9 fe49 	bl	8002198 <_exit>
	...

08008508 <__env_lock>:
 8008508:	4801      	ldr	r0, [pc, #4]	; (8008510 <__env_lock+0x8>)
 800850a:	f7fd bf1d 	b.w	8006348 <__retarget_lock_acquire_recursive>
 800850e:	bf00      	nop
 8008510:	200004aa 	.word	0x200004aa

08008514 <__env_unlock>:
 8008514:	4801      	ldr	r0, [pc, #4]	; (800851c <__env_unlock+0x8>)
 8008516:	f7fd bf19 	b.w	800634c <__retarget_lock_release_recursive>
 800851a:	bf00      	nop
 800851c:	200004aa 	.word	0x200004aa

08008520 <__swhatbuf_r>:
 8008520:	b570      	push	{r4, r5, r6, lr}
 8008522:	460e      	mov	r6, r1
 8008524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008528:	2900      	cmp	r1, #0
 800852a:	b096      	sub	sp, #88	; 0x58
 800852c:	4614      	mov	r4, r2
 800852e:	461d      	mov	r5, r3
 8008530:	da07      	bge.n	8008542 <__swhatbuf_r+0x22>
 8008532:	2300      	movs	r3, #0
 8008534:	602b      	str	r3, [r5, #0]
 8008536:	89b3      	ldrh	r3, [r6, #12]
 8008538:	061a      	lsls	r2, r3, #24
 800853a:	d410      	bmi.n	800855e <__swhatbuf_r+0x3e>
 800853c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008540:	e00e      	b.n	8008560 <__swhatbuf_r+0x40>
 8008542:	466a      	mov	r2, sp
 8008544:	f000 fcfa 	bl	8008f3c <_fstat_r>
 8008548:	2800      	cmp	r0, #0
 800854a:	dbf2      	blt.n	8008532 <__swhatbuf_r+0x12>
 800854c:	9a01      	ldr	r2, [sp, #4]
 800854e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008552:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008556:	425a      	negs	r2, r3
 8008558:	415a      	adcs	r2, r3
 800855a:	602a      	str	r2, [r5, #0]
 800855c:	e7ee      	b.n	800853c <__swhatbuf_r+0x1c>
 800855e:	2340      	movs	r3, #64	; 0x40
 8008560:	2000      	movs	r0, #0
 8008562:	6023      	str	r3, [r4, #0]
 8008564:	b016      	add	sp, #88	; 0x58
 8008566:	bd70      	pop	{r4, r5, r6, pc}

08008568 <__smakebuf_r>:
 8008568:	898b      	ldrh	r3, [r1, #12]
 800856a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800856c:	079d      	lsls	r5, r3, #30
 800856e:	4606      	mov	r6, r0
 8008570:	460c      	mov	r4, r1
 8008572:	d507      	bpl.n	8008584 <__smakebuf_r+0x1c>
 8008574:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008578:	6023      	str	r3, [r4, #0]
 800857a:	6123      	str	r3, [r4, #16]
 800857c:	2301      	movs	r3, #1
 800857e:	6163      	str	r3, [r4, #20]
 8008580:	b002      	add	sp, #8
 8008582:	bd70      	pop	{r4, r5, r6, pc}
 8008584:	ab01      	add	r3, sp, #4
 8008586:	466a      	mov	r2, sp
 8008588:	f7ff ffca 	bl	8008520 <__swhatbuf_r>
 800858c:	9900      	ldr	r1, [sp, #0]
 800858e:	4605      	mov	r5, r0
 8008590:	4630      	mov	r0, r6
 8008592:	f7fd ff45 	bl	8006420 <_malloc_r>
 8008596:	b948      	cbnz	r0, 80085ac <__smakebuf_r+0x44>
 8008598:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800859c:	059a      	lsls	r2, r3, #22
 800859e:	d4ef      	bmi.n	8008580 <__smakebuf_r+0x18>
 80085a0:	f023 0303 	bic.w	r3, r3, #3
 80085a4:	f043 0302 	orr.w	r3, r3, #2
 80085a8:	81a3      	strh	r3, [r4, #12]
 80085aa:	e7e3      	b.n	8008574 <__smakebuf_r+0xc>
 80085ac:	4b0d      	ldr	r3, [pc, #52]	; (80085e4 <__smakebuf_r+0x7c>)
 80085ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80085b0:	89a3      	ldrh	r3, [r4, #12]
 80085b2:	6020      	str	r0, [r4, #0]
 80085b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085b8:	81a3      	strh	r3, [r4, #12]
 80085ba:	9b00      	ldr	r3, [sp, #0]
 80085bc:	6163      	str	r3, [r4, #20]
 80085be:	9b01      	ldr	r3, [sp, #4]
 80085c0:	6120      	str	r0, [r4, #16]
 80085c2:	b15b      	cbz	r3, 80085dc <__smakebuf_r+0x74>
 80085c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085c8:	4630      	mov	r0, r6
 80085ca:	f000 fcc9 	bl	8008f60 <_isatty_r>
 80085ce:	b128      	cbz	r0, 80085dc <__smakebuf_r+0x74>
 80085d0:	89a3      	ldrh	r3, [r4, #12]
 80085d2:	f023 0303 	bic.w	r3, r3, #3
 80085d6:	f043 0301 	orr.w	r3, r3, #1
 80085da:	81a3      	strh	r3, [r4, #12]
 80085dc:	89a0      	ldrh	r0, [r4, #12]
 80085de:	4305      	orrs	r5, r0
 80085e0:	81a5      	strh	r5, [r4, #12]
 80085e2:	e7cd      	b.n	8008580 <__smakebuf_r+0x18>
 80085e4:	08005f31 	.word	0x08005f31

080085e8 <memcpy>:
 80085e8:	440a      	add	r2, r1
 80085ea:	4291      	cmp	r1, r2
 80085ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80085f0:	d100      	bne.n	80085f4 <memcpy+0xc>
 80085f2:	4770      	bx	lr
 80085f4:	b510      	push	{r4, lr}
 80085f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085fe:	4291      	cmp	r1, r2
 8008600:	d1f9      	bne.n	80085f6 <memcpy+0xe>
 8008602:	bd10      	pop	{r4, pc}

08008604 <memmove>:
 8008604:	4288      	cmp	r0, r1
 8008606:	b510      	push	{r4, lr}
 8008608:	eb01 0402 	add.w	r4, r1, r2
 800860c:	d902      	bls.n	8008614 <memmove+0x10>
 800860e:	4284      	cmp	r4, r0
 8008610:	4623      	mov	r3, r4
 8008612:	d807      	bhi.n	8008624 <memmove+0x20>
 8008614:	1e43      	subs	r3, r0, #1
 8008616:	42a1      	cmp	r1, r4
 8008618:	d008      	beq.n	800862c <memmove+0x28>
 800861a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800861e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008622:	e7f8      	b.n	8008616 <memmove+0x12>
 8008624:	4402      	add	r2, r0
 8008626:	4601      	mov	r1, r0
 8008628:	428a      	cmp	r2, r1
 800862a:	d100      	bne.n	800862e <memmove+0x2a>
 800862c:	bd10      	pop	{r4, pc}
 800862e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008632:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008636:	e7f7      	b.n	8008628 <memmove+0x24>

08008638 <_realloc_r>:
 8008638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800863a:	4607      	mov	r7, r0
 800863c:	4614      	mov	r4, r2
 800863e:	460e      	mov	r6, r1
 8008640:	b921      	cbnz	r1, 800864c <_realloc_r+0x14>
 8008642:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008646:	4611      	mov	r1, r2
 8008648:	f7fd beea 	b.w	8006420 <_malloc_r>
 800864c:	b922      	cbnz	r2, 8008658 <_realloc_r+0x20>
 800864e:	f7fd fe97 	bl	8006380 <_free_r>
 8008652:	4625      	mov	r5, r4
 8008654:	4628      	mov	r0, r5
 8008656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008658:	f000 fc92 	bl	8008f80 <_malloc_usable_size_r>
 800865c:	42a0      	cmp	r0, r4
 800865e:	d20f      	bcs.n	8008680 <_realloc_r+0x48>
 8008660:	4621      	mov	r1, r4
 8008662:	4638      	mov	r0, r7
 8008664:	f7fd fedc 	bl	8006420 <_malloc_r>
 8008668:	4605      	mov	r5, r0
 800866a:	2800      	cmp	r0, #0
 800866c:	d0f2      	beq.n	8008654 <_realloc_r+0x1c>
 800866e:	4631      	mov	r1, r6
 8008670:	4622      	mov	r2, r4
 8008672:	f7ff ffb9 	bl	80085e8 <memcpy>
 8008676:	4631      	mov	r1, r6
 8008678:	4638      	mov	r0, r7
 800867a:	f7fd fe81 	bl	8006380 <_free_r>
 800867e:	e7e9      	b.n	8008654 <_realloc_r+0x1c>
 8008680:	4635      	mov	r5, r6
 8008682:	e7e7      	b.n	8008654 <_realloc_r+0x1c>

08008684 <_sungetc_r>:
 8008684:	b538      	push	{r3, r4, r5, lr}
 8008686:	1c4b      	adds	r3, r1, #1
 8008688:	4614      	mov	r4, r2
 800868a:	d103      	bne.n	8008694 <_sungetc_r+0x10>
 800868c:	f04f 35ff 	mov.w	r5, #4294967295
 8008690:	4628      	mov	r0, r5
 8008692:	bd38      	pop	{r3, r4, r5, pc}
 8008694:	8993      	ldrh	r3, [r2, #12]
 8008696:	f023 0320 	bic.w	r3, r3, #32
 800869a:	8193      	strh	r3, [r2, #12]
 800869c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800869e:	6852      	ldr	r2, [r2, #4]
 80086a0:	b2cd      	uxtb	r5, r1
 80086a2:	b18b      	cbz	r3, 80086c8 <_sungetc_r+0x44>
 80086a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80086a6:	4293      	cmp	r3, r2
 80086a8:	dd08      	ble.n	80086bc <_sungetc_r+0x38>
 80086aa:	6823      	ldr	r3, [r4, #0]
 80086ac:	1e5a      	subs	r2, r3, #1
 80086ae:	6022      	str	r2, [r4, #0]
 80086b0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80086b4:	6863      	ldr	r3, [r4, #4]
 80086b6:	3301      	adds	r3, #1
 80086b8:	6063      	str	r3, [r4, #4]
 80086ba:	e7e9      	b.n	8008690 <_sungetc_r+0xc>
 80086bc:	4621      	mov	r1, r4
 80086be:	f000 fc03 	bl	8008ec8 <__submore>
 80086c2:	2800      	cmp	r0, #0
 80086c4:	d0f1      	beq.n	80086aa <_sungetc_r+0x26>
 80086c6:	e7e1      	b.n	800868c <_sungetc_r+0x8>
 80086c8:	6921      	ldr	r1, [r4, #16]
 80086ca:	6823      	ldr	r3, [r4, #0]
 80086cc:	b151      	cbz	r1, 80086e4 <_sungetc_r+0x60>
 80086ce:	4299      	cmp	r1, r3
 80086d0:	d208      	bcs.n	80086e4 <_sungetc_r+0x60>
 80086d2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80086d6:	42a9      	cmp	r1, r5
 80086d8:	d104      	bne.n	80086e4 <_sungetc_r+0x60>
 80086da:	3b01      	subs	r3, #1
 80086dc:	3201      	adds	r2, #1
 80086de:	6023      	str	r3, [r4, #0]
 80086e0:	6062      	str	r2, [r4, #4]
 80086e2:	e7d5      	b.n	8008690 <_sungetc_r+0xc>
 80086e4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80086e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80086ec:	6363      	str	r3, [r4, #52]	; 0x34
 80086ee:	2303      	movs	r3, #3
 80086f0:	63a3      	str	r3, [r4, #56]	; 0x38
 80086f2:	4623      	mov	r3, r4
 80086f4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80086f8:	6023      	str	r3, [r4, #0]
 80086fa:	2301      	movs	r3, #1
 80086fc:	e7dc      	b.n	80086b8 <_sungetc_r+0x34>

080086fe <__ssrefill_r>:
 80086fe:	b510      	push	{r4, lr}
 8008700:	460c      	mov	r4, r1
 8008702:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008704:	b169      	cbz	r1, 8008722 <__ssrefill_r+0x24>
 8008706:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800870a:	4299      	cmp	r1, r3
 800870c:	d001      	beq.n	8008712 <__ssrefill_r+0x14>
 800870e:	f7fd fe37 	bl	8006380 <_free_r>
 8008712:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008714:	6063      	str	r3, [r4, #4]
 8008716:	2000      	movs	r0, #0
 8008718:	6360      	str	r0, [r4, #52]	; 0x34
 800871a:	b113      	cbz	r3, 8008722 <__ssrefill_r+0x24>
 800871c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800871e:	6023      	str	r3, [r4, #0]
 8008720:	bd10      	pop	{r4, pc}
 8008722:	6923      	ldr	r3, [r4, #16]
 8008724:	6023      	str	r3, [r4, #0]
 8008726:	2300      	movs	r3, #0
 8008728:	6063      	str	r3, [r4, #4]
 800872a:	89a3      	ldrh	r3, [r4, #12]
 800872c:	f043 0320 	orr.w	r3, r3, #32
 8008730:	81a3      	strh	r3, [r4, #12]
 8008732:	f04f 30ff 	mov.w	r0, #4294967295
 8008736:	e7f3      	b.n	8008720 <__ssrefill_r+0x22>

08008738 <__ssvfiscanf_r>:
 8008738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800873c:	460c      	mov	r4, r1
 800873e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8008742:	2100      	movs	r1, #0
 8008744:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8008748:	49b2      	ldr	r1, [pc, #712]	; (8008a14 <__ssvfiscanf_r+0x2dc>)
 800874a:	91a0      	str	r1, [sp, #640]	; 0x280
 800874c:	f10d 0804 	add.w	r8, sp, #4
 8008750:	49b1      	ldr	r1, [pc, #708]	; (8008a18 <__ssvfiscanf_r+0x2e0>)
 8008752:	4fb2      	ldr	r7, [pc, #712]	; (8008a1c <__ssvfiscanf_r+0x2e4>)
 8008754:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8008a20 <__ssvfiscanf_r+0x2e8>
 8008758:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800875c:	4606      	mov	r6, r0
 800875e:	91a1      	str	r1, [sp, #644]	; 0x284
 8008760:	9300      	str	r3, [sp, #0]
 8008762:	f892 a000 	ldrb.w	sl, [r2]
 8008766:	f1ba 0f00 	cmp.w	sl, #0
 800876a:	f000 8151 	beq.w	8008a10 <__ssvfiscanf_r+0x2d8>
 800876e:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8008772:	f013 0308 	ands.w	r3, r3, #8
 8008776:	f102 0501 	add.w	r5, r2, #1
 800877a:	d019      	beq.n	80087b0 <__ssvfiscanf_r+0x78>
 800877c:	6863      	ldr	r3, [r4, #4]
 800877e:	2b00      	cmp	r3, #0
 8008780:	dd0f      	ble.n	80087a2 <__ssvfiscanf_r+0x6a>
 8008782:	6823      	ldr	r3, [r4, #0]
 8008784:	781a      	ldrb	r2, [r3, #0]
 8008786:	5cba      	ldrb	r2, [r7, r2]
 8008788:	0712      	lsls	r2, r2, #28
 800878a:	d401      	bmi.n	8008790 <__ssvfiscanf_r+0x58>
 800878c:	462a      	mov	r2, r5
 800878e:	e7e8      	b.n	8008762 <__ssvfiscanf_r+0x2a>
 8008790:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008792:	3201      	adds	r2, #1
 8008794:	9245      	str	r2, [sp, #276]	; 0x114
 8008796:	6862      	ldr	r2, [r4, #4]
 8008798:	3301      	adds	r3, #1
 800879a:	3a01      	subs	r2, #1
 800879c:	6062      	str	r2, [r4, #4]
 800879e:	6023      	str	r3, [r4, #0]
 80087a0:	e7ec      	b.n	800877c <__ssvfiscanf_r+0x44>
 80087a2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80087a4:	4621      	mov	r1, r4
 80087a6:	4630      	mov	r0, r6
 80087a8:	4798      	blx	r3
 80087aa:	2800      	cmp	r0, #0
 80087ac:	d0e9      	beq.n	8008782 <__ssvfiscanf_r+0x4a>
 80087ae:	e7ed      	b.n	800878c <__ssvfiscanf_r+0x54>
 80087b0:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 80087b4:	f040 8083 	bne.w	80088be <__ssvfiscanf_r+0x186>
 80087b8:	9341      	str	r3, [sp, #260]	; 0x104
 80087ba:	9343      	str	r3, [sp, #268]	; 0x10c
 80087bc:	7853      	ldrb	r3, [r2, #1]
 80087be:	2b2a      	cmp	r3, #42	; 0x2a
 80087c0:	bf02      	ittt	eq
 80087c2:	2310      	moveq	r3, #16
 80087c4:	1c95      	addeq	r5, r2, #2
 80087c6:	9341      	streq	r3, [sp, #260]	; 0x104
 80087c8:	220a      	movs	r2, #10
 80087ca:	46ab      	mov	fp, r5
 80087cc:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80087d0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80087d4:	2b09      	cmp	r3, #9
 80087d6:	d91d      	bls.n	8008814 <__ssvfiscanf_r+0xdc>
 80087d8:	4891      	ldr	r0, [pc, #580]	; (8008a20 <__ssvfiscanf_r+0x2e8>)
 80087da:	2203      	movs	r2, #3
 80087dc:	f7f7 fd18 	bl	8000210 <memchr>
 80087e0:	b140      	cbz	r0, 80087f4 <__ssvfiscanf_r+0xbc>
 80087e2:	2301      	movs	r3, #1
 80087e4:	eba0 0009 	sub.w	r0, r0, r9
 80087e8:	fa03 f000 	lsl.w	r0, r3, r0
 80087ec:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80087ee:	4318      	orrs	r0, r3
 80087f0:	9041      	str	r0, [sp, #260]	; 0x104
 80087f2:	465d      	mov	r5, fp
 80087f4:	f815 3b01 	ldrb.w	r3, [r5], #1
 80087f8:	2b78      	cmp	r3, #120	; 0x78
 80087fa:	d806      	bhi.n	800880a <__ssvfiscanf_r+0xd2>
 80087fc:	2b57      	cmp	r3, #87	; 0x57
 80087fe:	d810      	bhi.n	8008822 <__ssvfiscanf_r+0xea>
 8008800:	2b25      	cmp	r3, #37	; 0x25
 8008802:	d05c      	beq.n	80088be <__ssvfiscanf_r+0x186>
 8008804:	d856      	bhi.n	80088b4 <__ssvfiscanf_r+0x17c>
 8008806:	2b00      	cmp	r3, #0
 8008808:	d074      	beq.n	80088f4 <__ssvfiscanf_r+0x1bc>
 800880a:	2303      	movs	r3, #3
 800880c:	9347      	str	r3, [sp, #284]	; 0x11c
 800880e:	230a      	movs	r3, #10
 8008810:	9342      	str	r3, [sp, #264]	; 0x108
 8008812:	e081      	b.n	8008918 <__ssvfiscanf_r+0x1e0>
 8008814:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8008816:	fb02 1303 	mla	r3, r2, r3, r1
 800881a:	3b30      	subs	r3, #48	; 0x30
 800881c:	9343      	str	r3, [sp, #268]	; 0x10c
 800881e:	465d      	mov	r5, fp
 8008820:	e7d3      	b.n	80087ca <__ssvfiscanf_r+0x92>
 8008822:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8008826:	2a20      	cmp	r2, #32
 8008828:	d8ef      	bhi.n	800880a <__ssvfiscanf_r+0xd2>
 800882a:	a101      	add	r1, pc, #4	; (adr r1, 8008830 <__ssvfiscanf_r+0xf8>)
 800882c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008830:	08008903 	.word	0x08008903
 8008834:	0800880b 	.word	0x0800880b
 8008838:	0800880b 	.word	0x0800880b
 800883c:	08008961 	.word	0x08008961
 8008840:	0800880b 	.word	0x0800880b
 8008844:	0800880b 	.word	0x0800880b
 8008848:	0800880b 	.word	0x0800880b
 800884c:	0800880b 	.word	0x0800880b
 8008850:	0800880b 	.word	0x0800880b
 8008854:	0800880b 	.word	0x0800880b
 8008858:	0800880b 	.word	0x0800880b
 800885c:	08008977 	.word	0x08008977
 8008860:	0800894d 	.word	0x0800894d
 8008864:	080088bb 	.word	0x080088bb
 8008868:	080088bb 	.word	0x080088bb
 800886c:	080088bb 	.word	0x080088bb
 8008870:	0800880b 	.word	0x0800880b
 8008874:	08008951 	.word	0x08008951
 8008878:	0800880b 	.word	0x0800880b
 800887c:	0800880b 	.word	0x0800880b
 8008880:	0800880b 	.word	0x0800880b
 8008884:	0800880b 	.word	0x0800880b
 8008888:	08008987 	.word	0x08008987
 800888c:	08008959 	.word	0x08008959
 8008890:	080088fb 	.word	0x080088fb
 8008894:	0800880b 	.word	0x0800880b
 8008898:	0800880b 	.word	0x0800880b
 800889c:	08008983 	.word	0x08008983
 80088a0:	0800880b 	.word	0x0800880b
 80088a4:	0800894d 	.word	0x0800894d
 80088a8:	0800880b 	.word	0x0800880b
 80088ac:	0800880b 	.word	0x0800880b
 80088b0:	08008903 	.word	0x08008903
 80088b4:	3b45      	subs	r3, #69	; 0x45
 80088b6:	2b02      	cmp	r3, #2
 80088b8:	d8a7      	bhi.n	800880a <__ssvfiscanf_r+0xd2>
 80088ba:	2305      	movs	r3, #5
 80088bc:	e02b      	b.n	8008916 <__ssvfiscanf_r+0x1de>
 80088be:	6863      	ldr	r3, [r4, #4]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	dd0d      	ble.n	80088e0 <__ssvfiscanf_r+0x1a8>
 80088c4:	6823      	ldr	r3, [r4, #0]
 80088c6:	781a      	ldrb	r2, [r3, #0]
 80088c8:	4552      	cmp	r2, sl
 80088ca:	f040 80a1 	bne.w	8008a10 <__ssvfiscanf_r+0x2d8>
 80088ce:	3301      	adds	r3, #1
 80088d0:	6862      	ldr	r2, [r4, #4]
 80088d2:	6023      	str	r3, [r4, #0]
 80088d4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80088d6:	3a01      	subs	r2, #1
 80088d8:	3301      	adds	r3, #1
 80088da:	6062      	str	r2, [r4, #4]
 80088dc:	9345      	str	r3, [sp, #276]	; 0x114
 80088de:	e755      	b.n	800878c <__ssvfiscanf_r+0x54>
 80088e0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80088e2:	4621      	mov	r1, r4
 80088e4:	4630      	mov	r0, r6
 80088e6:	4798      	blx	r3
 80088e8:	2800      	cmp	r0, #0
 80088ea:	d0eb      	beq.n	80088c4 <__ssvfiscanf_r+0x18c>
 80088ec:	9844      	ldr	r0, [sp, #272]	; 0x110
 80088ee:	2800      	cmp	r0, #0
 80088f0:	f040 8084 	bne.w	80089fc <__ssvfiscanf_r+0x2c4>
 80088f4:	f04f 30ff 	mov.w	r0, #4294967295
 80088f8:	e086      	b.n	8008a08 <__ssvfiscanf_r+0x2d0>
 80088fa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80088fc:	f042 0220 	orr.w	r2, r2, #32
 8008900:	9241      	str	r2, [sp, #260]	; 0x104
 8008902:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008904:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008908:	9241      	str	r2, [sp, #260]	; 0x104
 800890a:	2210      	movs	r2, #16
 800890c:	2b6f      	cmp	r3, #111	; 0x6f
 800890e:	9242      	str	r2, [sp, #264]	; 0x108
 8008910:	bf34      	ite	cc
 8008912:	2303      	movcc	r3, #3
 8008914:	2304      	movcs	r3, #4
 8008916:	9347      	str	r3, [sp, #284]	; 0x11c
 8008918:	6863      	ldr	r3, [r4, #4]
 800891a:	2b00      	cmp	r3, #0
 800891c:	dd41      	ble.n	80089a2 <__ssvfiscanf_r+0x26a>
 800891e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008920:	0659      	lsls	r1, r3, #25
 8008922:	d404      	bmi.n	800892e <__ssvfiscanf_r+0x1f6>
 8008924:	6823      	ldr	r3, [r4, #0]
 8008926:	781a      	ldrb	r2, [r3, #0]
 8008928:	5cba      	ldrb	r2, [r7, r2]
 800892a:	0712      	lsls	r2, r2, #28
 800892c:	d440      	bmi.n	80089b0 <__ssvfiscanf_r+0x278>
 800892e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8008930:	2b02      	cmp	r3, #2
 8008932:	dc4f      	bgt.n	80089d4 <__ssvfiscanf_r+0x29c>
 8008934:	466b      	mov	r3, sp
 8008936:	4622      	mov	r2, r4
 8008938:	a941      	add	r1, sp, #260	; 0x104
 800893a:	4630      	mov	r0, r6
 800893c:	f000 f874 	bl	8008a28 <_scanf_chars>
 8008940:	2801      	cmp	r0, #1
 8008942:	d065      	beq.n	8008a10 <__ssvfiscanf_r+0x2d8>
 8008944:	2802      	cmp	r0, #2
 8008946:	f47f af21 	bne.w	800878c <__ssvfiscanf_r+0x54>
 800894a:	e7cf      	b.n	80088ec <__ssvfiscanf_r+0x1b4>
 800894c:	220a      	movs	r2, #10
 800894e:	e7dd      	b.n	800890c <__ssvfiscanf_r+0x1d4>
 8008950:	2300      	movs	r3, #0
 8008952:	9342      	str	r3, [sp, #264]	; 0x108
 8008954:	2303      	movs	r3, #3
 8008956:	e7de      	b.n	8008916 <__ssvfiscanf_r+0x1de>
 8008958:	2308      	movs	r3, #8
 800895a:	9342      	str	r3, [sp, #264]	; 0x108
 800895c:	2304      	movs	r3, #4
 800895e:	e7da      	b.n	8008916 <__ssvfiscanf_r+0x1de>
 8008960:	4629      	mov	r1, r5
 8008962:	4640      	mov	r0, r8
 8008964:	f000 f9ac 	bl	8008cc0 <__sccl>
 8008968:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800896a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800896e:	9341      	str	r3, [sp, #260]	; 0x104
 8008970:	4605      	mov	r5, r0
 8008972:	2301      	movs	r3, #1
 8008974:	e7cf      	b.n	8008916 <__ssvfiscanf_r+0x1de>
 8008976:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008978:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800897c:	9341      	str	r3, [sp, #260]	; 0x104
 800897e:	2300      	movs	r3, #0
 8008980:	e7c9      	b.n	8008916 <__ssvfiscanf_r+0x1de>
 8008982:	2302      	movs	r3, #2
 8008984:	e7c7      	b.n	8008916 <__ssvfiscanf_r+0x1de>
 8008986:	9841      	ldr	r0, [sp, #260]	; 0x104
 8008988:	06c3      	lsls	r3, r0, #27
 800898a:	f53f aeff 	bmi.w	800878c <__ssvfiscanf_r+0x54>
 800898e:	9b00      	ldr	r3, [sp, #0]
 8008990:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008992:	1d19      	adds	r1, r3, #4
 8008994:	9100      	str	r1, [sp, #0]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	07c0      	lsls	r0, r0, #31
 800899a:	bf4c      	ite	mi
 800899c:	801a      	strhmi	r2, [r3, #0]
 800899e:	601a      	strpl	r2, [r3, #0]
 80089a0:	e6f4      	b.n	800878c <__ssvfiscanf_r+0x54>
 80089a2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80089a4:	4621      	mov	r1, r4
 80089a6:	4630      	mov	r0, r6
 80089a8:	4798      	blx	r3
 80089aa:	2800      	cmp	r0, #0
 80089ac:	d0b7      	beq.n	800891e <__ssvfiscanf_r+0x1e6>
 80089ae:	e79d      	b.n	80088ec <__ssvfiscanf_r+0x1b4>
 80089b0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80089b2:	3201      	adds	r2, #1
 80089b4:	9245      	str	r2, [sp, #276]	; 0x114
 80089b6:	6862      	ldr	r2, [r4, #4]
 80089b8:	3a01      	subs	r2, #1
 80089ba:	2a00      	cmp	r2, #0
 80089bc:	6062      	str	r2, [r4, #4]
 80089be:	dd02      	ble.n	80089c6 <__ssvfiscanf_r+0x28e>
 80089c0:	3301      	adds	r3, #1
 80089c2:	6023      	str	r3, [r4, #0]
 80089c4:	e7ae      	b.n	8008924 <__ssvfiscanf_r+0x1ec>
 80089c6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80089c8:	4621      	mov	r1, r4
 80089ca:	4630      	mov	r0, r6
 80089cc:	4798      	blx	r3
 80089ce:	2800      	cmp	r0, #0
 80089d0:	d0a8      	beq.n	8008924 <__ssvfiscanf_r+0x1ec>
 80089d2:	e78b      	b.n	80088ec <__ssvfiscanf_r+0x1b4>
 80089d4:	2b04      	cmp	r3, #4
 80089d6:	dc06      	bgt.n	80089e6 <__ssvfiscanf_r+0x2ae>
 80089d8:	466b      	mov	r3, sp
 80089da:	4622      	mov	r2, r4
 80089dc:	a941      	add	r1, sp, #260	; 0x104
 80089de:	4630      	mov	r0, r6
 80089e0:	f000 f87a 	bl	8008ad8 <_scanf_i>
 80089e4:	e7ac      	b.n	8008940 <__ssvfiscanf_r+0x208>
 80089e6:	4b0f      	ldr	r3, [pc, #60]	; (8008a24 <__ssvfiscanf_r+0x2ec>)
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	f43f aecf 	beq.w	800878c <__ssvfiscanf_r+0x54>
 80089ee:	466b      	mov	r3, sp
 80089f0:	4622      	mov	r2, r4
 80089f2:	a941      	add	r1, sp, #260	; 0x104
 80089f4:	4630      	mov	r0, r6
 80089f6:	f3af 8000 	nop.w
 80089fa:	e7a1      	b.n	8008940 <__ssvfiscanf_r+0x208>
 80089fc:	89a3      	ldrh	r3, [r4, #12]
 80089fe:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008a02:	bf18      	it	ne
 8008a04:	f04f 30ff 	movne.w	r0, #4294967295
 8008a08:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8008a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a10:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008a12:	e7f9      	b.n	8008a08 <__ssvfiscanf_r+0x2d0>
 8008a14:	08008685 	.word	0x08008685
 8008a18:	080086ff 	.word	0x080086ff
 8008a1c:	0800a521 	.word	0x0800a521
 8008a20:	0800a631 	.word	0x0800a631
 8008a24:	00000000 	.word	0x00000000

08008a28 <_scanf_chars>:
 8008a28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a2c:	4615      	mov	r5, r2
 8008a2e:	688a      	ldr	r2, [r1, #8]
 8008a30:	4680      	mov	r8, r0
 8008a32:	460c      	mov	r4, r1
 8008a34:	b932      	cbnz	r2, 8008a44 <_scanf_chars+0x1c>
 8008a36:	698a      	ldr	r2, [r1, #24]
 8008a38:	2a00      	cmp	r2, #0
 8008a3a:	bf0c      	ite	eq
 8008a3c:	2201      	moveq	r2, #1
 8008a3e:	f04f 32ff 	movne.w	r2, #4294967295
 8008a42:	608a      	str	r2, [r1, #8]
 8008a44:	6822      	ldr	r2, [r4, #0]
 8008a46:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8008ad4 <_scanf_chars+0xac>
 8008a4a:	06d1      	lsls	r1, r2, #27
 8008a4c:	bf5f      	itttt	pl
 8008a4e:	681a      	ldrpl	r2, [r3, #0]
 8008a50:	1d11      	addpl	r1, r2, #4
 8008a52:	6019      	strpl	r1, [r3, #0]
 8008a54:	6816      	ldrpl	r6, [r2, #0]
 8008a56:	2700      	movs	r7, #0
 8008a58:	69a0      	ldr	r0, [r4, #24]
 8008a5a:	b188      	cbz	r0, 8008a80 <_scanf_chars+0x58>
 8008a5c:	2801      	cmp	r0, #1
 8008a5e:	d107      	bne.n	8008a70 <_scanf_chars+0x48>
 8008a60:	682b      	ldr	r3, [r5, #0]
 8008a62:	781a      	ldrb	r2, [r3, #0]
 8008a64:	6963      	ldr	r3, [r4, #20]
 8008a66:	5c9b      	ldrb	r3, [r3, r2]
 8008a68:	b953      	cbnz	r3, 8008a80 <_scanf_chars+0x58>
 8008a6a:	bb27      	cbnz	r7, 8008ab6 <_scanf_chars+0x8e>
 8008a6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a70:	2802      	cmp	r0, #2
 8008a72:	d120      	bne.n	8008ab6 <_scanf_chars+0x8e>
 8008a74:	682b      	ldr	r3, [r5, #0]
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	f813 3009 	ldrb.w	r3, [r3, r9]
 8008a7c:	071b      	lsls	r3, r3, #28
 8008a7e:	d41a      	bmi.n	8008ab6 <_scanf_chars+0x8e>
 8008a80:	6823      	ldr	r3, [r4, #0]
 8008a82:	06da      	lsls	r2, r3, #27
 8008a84:	bf5e      	ittt	pl
 8008a86:	682b      	ldrpl	r3, [r5, #0]
 8008a88:	781b      	ldrbpl	r3, [r3, #0]
 8008a8a:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008a8e:	682a      	ldr	r2, [r5, #0]
 8008a90:	686b      	ldr	r3, [r5, #4]
 8008a92:	3201      	adds	r2, #1
 8008a94:	602a      	str	r2, [r5, #0]
 8008a96:	68a2      	ldr	r2, [r4, #8]
 8008a98:	3b01      	subs	r3, #1
 8008a9a:	3a01      	subs	r2, #1
 8008a9c:	606b      	str	r3, [r5, #4]
 8008a9e:	3701      	adds	r7, #1
 8008aa0:	60a2      	str	r2, [r4, #8]
 8008aa2:	b142      	cbz	r2, 8008ab6 <_scanf_chars+0x8e>
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	dcd7      	bgt.n	8008a58 <_scanf_chars+0x30>
 8008aa8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008aac:	4629      	mov	r1, r5
 8008aae:	4640      	mov	r0, r8
 8008ab0:	4798      	blx	r3
 8008ab2:	2800      	cmp	r0, #0
 8008ab4:	d0d0      	beq.n	8008a58 <_scanf_chars+0x30>
 8008ab6:	6823      	ldr	r3, [r4, #0]
 8008ab8:	f013 0310 	ands.w	r3, r3, #16
 8008abc:	d105      	bne.n	8008aca <_scanf_chars+0xa2>
 8008abe:	68e2      	ldr	r2, [r4, #12]
 8008ac0:	3201      	adds	r2, #1
 8008ac2:	60e2      	str	r2, [r4, #12]
 8008ac4:	69a2      	ldr	r2, [r4, #24]
 8008ac6:	b102      	cbz	r2, 8008aca <_scanf_chars+0xa2>
 8008ac8:	7033      	strb	r3, [r6, #0]
 8008aca:	6923      	ldr	r3, [r4, #16]
 8008acc:	441f      	add	r7, r3
 8008ace:	6127      	str	r7, [r4, #16]
 8008ad0:	2000      	movs	r0, #0
 8008ad2:	e7cb      	b.n	8008a6c <_scanf_chars+0x44>
 8008ad4:	0800a521 	.word	0x0800a521

08008ad8 <_scanf_i>:
 8008ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008adc:	4698      	mov	r8, r3
 8008ade:	4b74      	ldr	r3, [pc, #464]	; (8008cb0 <_scanf_i+0x1d8>)
 8008ae0:	460c      	mov	r4, r1
 8008ae2:	4682      	mov	sl, r0
 8008ae4:	4616      	mov	r6, r2
 8008ae6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008aea:	b087      	sub	sp, #28
 8008aec:	ab03      	add	r3, sp, #12
 8008aee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008af2:	4b70      	ldr	r3, [pc, #448]	; (8008cb4 <_scanf_i+0x1dc>)
 8008af4:	69a1      	ldr	r1, [r4, #24]
 8008af6:	4a70      	ldr	r2, [pc, #448]	; (8008cb8 <_scanf_i+0x1e0>)
 8008af8:	2903      	cmp	r1, #3
 8008afa:	bf18      	it	ne
 8008afc:	461a      	movne	r2, r3
 8008afe:	68a3      	ldr	r3, [r4, #8]
 8008b00:	9201      	str	r2, [sp, #4]
 8008b02:	1e5a      	subs	r2, r3, #1
 8008b04:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008b08:	bf88      	it	hi
 8008b0a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008b0e:	4627      	mov	r7, r4
 8008b10:	bf82      	ittt	hi
 8008b12:	eb03 0905 	addhi.w	r9, r3, r5
 8008b16:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008b1a:	60a3      	strhi	r3, [r4, #8]
 8008b1c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008b20:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8008b24:	bf98      	it	ls
 8008b26:	f04f 0900 	movls.w	r9, #0
 8008b2a:	6023      	str	r3, [r4, #0]
 8008b2c:	463d      	mov	r5, r7
 8008b2e:	f04f 0b00 	mov.w	fp, #0
 8008b32:	6831      	ldr	r1, [r6, #0]
 8008b34:	ab03      	add	r3, sp, #12
 8008b36:	7809      	ldrb	r1, [r1, #0]
 8008b38:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008b3c:	2202      	movs	r2, #2
 8008b3e:	f7f7 fb67 	bl	8000210 <memchr>
 8008b42:	b328      	cbz	r0, 8008b90 <_scanf_i+0xb8>
 8008b44:	f1bb 0f01 	cmp.w	fp, #1
 8008b48:	d159      	bne.n	8008bfe <_scanf_i+0x126>
 8008b4a:	6862      	ldr	r2, [r4, #4]
 8008b4c:	b92a      	cbnz	r2, 8008b5a <_scanf_i+0x82>
 8008b4e:	6822      	ldr	r2, [r4, #0]
 8008b50:	2308      	movs	r3, #8
 8008b52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b56:	6063      	str	r3, [r4, #4]
 8008b58:	6022      	str	r2, [r4, #0]
 8008b5a:	6822      	ldr	r2, [r4, #0]
 8008b5c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008b60:	6022      	str	r2, [r4, #0]
 8008b62:	68a2      	ldr	r2, [r4, #8]
 8008b64:	1e51      	subs	r1, r2, #1
 8008b66:	60a1      	str	r1, [r4, #8]
 8008b68:	b192      	cbz	r2, 8008b90 <_scanf_i+0xb8>
 8008b6a:	6832      	ldr	r2, [r6, #0]
 8008b6c:	1c51      	adds	r1, r2, #1
 8008b6e:	6031      	str	r1, [r6, #0]
 8008b70:	7812      	ldrb	r2, [r2, #0]
 8008b72:	f805 2b01 	strb.w	r2, [r5], #1
 8008b76:	6872      	ldr	r2, [r6, #4]
 8008b78:	3a01      	subs	r2, #1
 8008b7a:	2a00      	cmp	r2, #0
 8008b7c:	6072      	str	r2, [r6, #4]
 8008b7e:	dc07      	bgt.n	8008b90 <_scanf_i+0xb8>
 8008b80:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8008b84:	4631      	mov	r1, r6
 8008b86:	4650      	mov	r0, sl
 8008b88:	4790      	blx	r2
 8008b8a:	2800      	cmp	r0, #0
 8008b8c:	f040 8085 	bne.w	8008c9a <_scanf_i+0x1c2>
 8008b90:	f10b 0b01 	add.w	fp, fp, #1
 8008b94:	f1bb 0f03 	cmp.w	fp, #3
 8008b98:	d1cb      	bne.n	8008b32 <_scanf_i+0x5a>
 8008b9a:	6863      	ldr	r3, [r4, #4]
 8008b9c:	b90b      	cbnz	r3, 8008ba2 <_scanf_i+0xca>
 8008b9e:	230a      	movs	r3, #10
 8008ba0:	6063      	str	r3, [r4, #4]
 8008ba2:	6863      	ldr	r3, [r4, #4]
 8008ba4:	4945      	ldr	r1, [pc, #276]	; (8008cbc <_scanf_i+0x1e4>)
 8008ba6:	6960      	ldr	r0, [r4, #20]
 8008ba8:	1ac9      	subs	r1, r1, r3
 8008baa:	f000 f889 	bl	8008cc0 <__sccl>
 8008bae:	f04f 0b00 	mov.w	fp, #0
 8008bb2:	68a3      	ldr	r3, [r4, #8]
 8008bb4:	6822      	ldr	r2, [r4, #0]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d03d      	beq.n	8008c36 <_scanf_i+0x15e>
 8008bba:	6831      	ldr	r1, [r6, #0]
 8008bbc:	6960      	ldr	r0, [r4, #20]
 8008bbe:	f891 c000 	ldrb.w	ip, [r1]
 8008bc2:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008bc6:	2800      	cmp	r0, #0
 8008bc8:	d035      	beq.n	8008c36 <_scanf_i+0x15e>
 8008bca:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8008bce:	d124      	bne.n	8008c1a <_scanf_i+0x142>
 8008bd0:	0510      	lsls	r0, r2, #20
 8008bd2:	d522      	bpl.n	8008c1a <_scanf_i+0x142>
 8008bd4:	f10b 0b01 	add.w	fp, fp, #1
 8008bd8:	f1b9 0f00 	cmp.w	r9, #0
 8008bdc:	d003      	beq.n	8008be6 <_scanf_i+0x10e>
 8008bde:	3301      	adds	r3, #1
 8008be0:	f109 39ff 	add.w	r9, r9, #4294967295
 8008be4:	60a3      	str	r3, [r4, #8]
 8008be6:	6873      	ldr	r3, [r6, #4]
 8008be8:	3b01      	subs	r3, #1
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	6073      	str	r3, [r6, #4]
 8008bee:	dd1b      	ble.n	8008c28 <_scanf_i+0x150>
 8008bf0:	6833      	ldr	r3, [r6, #0]
 8008bf2:	3301      	adds	r3, #1
 8008bf4:	6033      	str	r3, [r6, #0]
 8008bf6:	68a3      	ldr	r3, [r4, #8]
 8008bf8:	3b01      	subs	r3, #1
 8008bfa:	60a3      	str	r3, [r4, #8]
 8008bfc:	e7d9      	b.n	8008bb2 <_scanf_i+0xda>
 8008bfe:	f1bb 0f02 	cmp.w	fp, #2
 8008c02:	d1ae      	bne.n	8008b62 <_scanf_i+0x8a>
 8008c04:	6822      	ldr	r2, [r4, #0]
 8008c06:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8008c0a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008c0e:	d1bf      	bne.n	8008b90 <_scanf_i+0xb8>
 8008c10:	2310      	movs	r3, #16
 8008c12:	6063      	str	r3, [r4, #4]
 8008c14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c18:	e7a2      	b.n	8008b60 <_scanf_i+0x88>
 8008c1a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8008c1e:	6022      	str	r2, [r4, #0]
 8008c20:	780b      	ldrb	r3, [r1, #0]
 8008c22:	f805 3b01 	strb.w	r3, [r5], #1
 8008c26:	e7de      	b.n	8008be6 <_scanf_i+0x10e>
 8008c28:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008c2c:	4631      	mov	r1, r6
 8008c2e:	4650      	mov	r0, sl
 8008c30:	4798      	blx	r3
 8008c32:	2800      	cmp	r0, #0
 8008c34:	d0df      	beq.n	8008bf6 <_scanf_i+0x11e>
 8008c36:	6823      	ldr	r3, [r4, #0]
 8008c38:	05d9      	lsls	r1, r3, #23
 8008c3a:	d50d      	bpl.n	8008c58 <_scanf_i+0x180>
 8008c3c:	42bd      	cmp	r5, r7
 8008c3e:	d909      	bls.n	8008c54 <_scanf_i+0x17c>
 8008c40:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008c44:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c48:	4632      	mov	r2, r6
 8008c4a:	4650      	mov	r0, sl
 8008c4c:	4798      	blx	r3
 8008c4e:	f105 39ff 	add.w	r9, r5, #4294967295
 8008c52:	464d      	mov	r5, r9
 8008c54:	42bd      	cmp	r5, r7
 8008c56:	d028      	beq.n	8008caa <_scanf_i+0x1d2>
 8008c58:	6822      	ldr	r2, [r4, #0]
 8008c5a:	f012 0210 	ands.w	r2, r2, #16
 8008c5e:	d113      	bne.n	8008c88 <_scanf_i+0x1b0>
 8008c60:	702a      	strb	r2, [r5, #0]
 8008c62:	6863      	ldr	r3, [r4, #4]
 8008c64:	9e01      	ldr	r6, [sp, #4]
 8008c66:	4639      	mov	r1, r7
 8008c68:	4650      	mov	r0, sl
 8008c6a:	47b0      	blx	r6
 8008c6c:	f8d8 3000 	ldr.w	r3, [r8]
 8008c70:	6821      	ldr	r1, [r4, #0]
 8008c72:	1d1a      	adds	r2, r3, #4
 8008c74:	f8c8 2000 	str.w	r2, [r8]
 8008c78:	f011 0f20 	tst.w	r1, #32
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	d00f      	beq.n	8008ca0 <_scanf_i+0x1c8>
 8008c80:	6018      	str	r0, [r3, #0]
 8008c82:	68e3      	ldr	r3, [r4, #12]
 8008c84:	3301      	adds	r3, #1
 8008c86:	60e3      	str	r3, [r4, #12]
 8008c88:	1bed      	subs	r5, r5, r7
 8008c8a:	44ab      	add	fp, r5
 8008c8c:	6925      	ldr	r5, [r4, #16]
 8008c8e:	445d      	add	r5, fp
 8008c90:	6125      	str	r5, [r4, #16]
 8008c92:	2000      	movs	r0, #0
 8008c94:	b007      	add	sp, #28
 8008c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c9a:	f04f 0b00 	mov.w	fp, #0
 8008c9e:	e7ca      	b.n	8008c36 <_scanf_i+0x15e>
 8008ca0:	07ca      	lsls	r2, r1, #31
 8008ca2:	bf4c      	ite	mi
 8008ca4:	8018      	strhmi	r0, [r3, #0]
 8008ca6:	6018      	strpl	r0, [r3, #0]
 8008ca8:	e7eb      	b.n	8008c82 <_scanf_i+0x1aa>
 8008caa:	2001      	movs	r0, #1
 8008cac:	e7f2      	b.n	8008c94 <_scanf_i+0x1bc>
 8008cae:	bf00      	nop
 8008cb0:	0800a0c0 	.word	0x0800a0c0
 8008cb4:	0800715d 	.word	0x0800715d
 8008cb8:	08008ec5 	.word	0x08008ec5
 8008cbc:	0800a677 	.word	0x0800a677

08008cc0 <__sccl>:
 8008cc0:	b570      	push	{r4, r5, r6, lr}
 8008cc2:	780b      	ldrb	r3, [r1, #0]
 8008cc4:	4604      	mov	r4, r0
 8008cc6:	2b5e      	cmp	r3, #94	; 0x5e
 8008cc8:	bf0b      	itete	eq
 8008cca:	784b      	ldrbeq	r3, [r1, #1]
 8008ccc:	1c48      	addne	r0, r1, #1
 8008cce:	1c88      	addeq	r0, r1, #2
 8008cd0:	2200      	movne	r2, #0
 8008cd2:	bf08      	it	eq
 8008cd4:	2201      	moveq	r2, #1
 8008cd6:	1e61      	subs	r1, r4, #1
 8008cd8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8008cdc:	f801 2f01 	strb.w	r2, [r1, #1]!
 8008ce0:	42a9      	cmp	r1, r5
 8008ce2:	d1fb      	bne.n	8008cdc <__sccl+0x1c>
 8008ce4:	b90b      	cbnz	r3, 8008cea <__sccl+0x2a>
 8008ce6:	3801      	subs	r0, #1
 8008ce8:	bd70      	pop	{r4, r5, r6, pc}
 8008cea:	f082 0101 	eor.w	r1, r2, #1
 8008cee:	54e1      	strb	r1, [r4, r3]
 8008cf0:	1c42      	adds	r2, r0, #1
 8008cf2:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8008cf6:	2d2d      	cmp	r5, #45	; 0x2d
 8008cf8:	f102 36ff 	add.w	r6, r2, #4294967295
 8008cfc:	4610      	mov	r0, r2
 8008cfe:	d006      	beq.n	8008d0e <__sccl+0x4e>
 8008d00:	2d5d      	cmp	r5, #93	; 0x5d
 8008d02:	d0f1      	beq.n	8008ce8 <__sccl+0x28>
 8008d04:	b90d      	cbnz	r5, 8008d0a <__sccl+0x4a>
 8008d06:	4630      	mov	r0, r6
 8008d08:	e7ee      	b.n	8008ce8 <__sccl+0x28>
 8008d0a:	462b      	mov	r3, r5
 8008d0c:	e7ef      	b.n	8008cee <__sccl+0x2e>
 8008d0e:	7816      	ldrb	r6, [r2, #0]
 8008d10:	2e5d      	cmp	r6, #93	; 0x5d
 8008d12:	d0fa      	beq.n	8008d0a <__sccl+0x4a>
 8008d14:	42b3      	cmp	r3, r6
 8008d16:	dcf8      	bgt.n	8008d0a <__sccl+0x4a>
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3001      	adds	r0, #1
 8008d1c:	4286      	cmp	r6, r0
 8008d1e:	5421      	strb	r1, [r4, r0]
 8008d20:	dcfb      	bgt.n	8008d1a <__sccl+0x5a>
 8008d22:	43d8      	mvns	r0, r3
 8008d24:	4430      	add	r0, r6
 8008d26:	1c5d      	adds	r5, r3, #1
 8008d28:	42b3      	cmp	r3, r6
 8008d2a:	bfa8      	it	ge
 8008d2c:	2000      	movge	r0, #0
 8008d2e:	182b      	adds	r3, r5, r0
 8008d30:	3202      	adds	r2, #2
 8008d32:	e7de      	b.n	8008cf2 <__sccl+0x32>

08008d34 <_raise_r>:
 8008d34:	291f      	cmp	r1, #31
 8008d36:	b538      	push	{r3, r4, r5, lr}
 8008d38:	4604      	mov	r4, r0
 8008d3a:	460d      	mov	r5, r1
 8008d3c:	d904      	bls.n	8008d48 <_raise_r+0x14>
 8008d3e:	2316      	movs	r3, #22
 8008d40:	6003      	str	r3, [r0, #0]
 8008d42:	f04f 30ff 	mov.w	r0, #4294967295
 8008d46:	bd38      	pop	{r3, r4, r5, pc}
 8008d48:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008d4a:	b112      	cbz	r2, 8008d52 <_raise_r+0x1e>
 8008d4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008d50:	b94b      	cbnz	r3, 8008d66 <_raise_r+0x32>
 8008d52:	4620      	mov	r0, r4
 8008d54:	f000 f830 	bl	8008db8 <_getpid_r>
 8008d58:	462a      	mov	r2, r5
 8008d5a:	4601      	mov	r1, r0
 8008d5c:	4620      	mov	r0, r4
 8008d5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d62:	f000 b817 	b.w	8008d94 <_kill_r>
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	d00a      	beq.n	8008d80 <_raise_r+0x4c>
 8008d6a:	1c59      	adds	r1, r3, #1
 8008d6c:	d103      	bne.n	8008d76 <_raise_r+0x42>
 8008d6e:	2316      	movs	r3, #22
 8008d70:	6003      	str	r3, [r0, #0]
 8008d72:	2001      	movs	r0, #1
 8008d74:	e7e7      	b.n	8008d46 <_raise_r+0x12>
 8008d76:	2400      	movs	r4, #0
 8008d78:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008d7c:	4628      	mov	r0, r5
 8008d7e:	4798      	blx	r3
 8008d80:	2000      	movs	r0, #0
 8008d82:	e7e0      	b.n	8008d46 <_raise_r+0x12>

08008d84 <raise>:
 8008d84:	4b02      	ldr	r3, [pc, #8]	; (8008d90 <raise+0xc>)
 8008d86:	4601      	mov	r1, r0
 8008d88:	6818      	ldr	r0, [r3, #0]
 8008d8a:	f7ff bfd3 	b.w	8008d34 <_raise_r>
 8008d8e:	bf00      	nop
 8008d90:	20000018 	.word	0x20000018

08008d94 <_kill_r>:
 8008d94:	b538      	push	{r3, r4, r5, lr}
 8008d96:	4d07      	ldr	r5, [pc, #28]	; (8008db4 <_kill_r+0x20>)
 8008d98:	2300      	movs	r3, #0
 8008d9a:	4604      	mov	r4, r0
 8008d9c:	4608      	mov	r0, r1
 8008d9e:	4611      	mov	r1, r2
 8008da0:	602b      	str	r3, [r5, #0]
 8008da2:	f7f9 f9e9 	bl	8002178 <_kill>
 8008da6:	1c43      	adds	r3, r0, #1
 8008da8:	d102      	bne.n	8008db0 <_kill_r+0x1c>
 8008daa:	682b      	ldr	r3, [r5, #0]
 8008dac:	b103      	cbz	r3, 8008db0 <_kill_r+0x1c>
 8008dae:	6023      	str	r3, [r4, #0]
 8008db0:	bd38      	pop	{r3, r4, r5, pc}
 8008db2:	bf00      	nop
 8008db4:	200004b4 	.word	0x200004b4

08008db8 <_getpid_r>:
 8008db8:	f7f9 b9d6 	b.w	8002168 <_getpid>

08008dbc <_strtol_l.isra.0>:
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dc2:	d001      	beq.n	8008dc8 <_strtol_l.isra.0+0xc>
 8008dc4:	2b24      	cmp	r3, #36	; 0x24
 8008dc6:	d906      	bls.n	8008dd6 <_strtol_l.isra.0+0x1a>
 8008dc8:	f7fc ffb4 	bl	8005d34 <__errno>
 8008dcc:	2316      	movs	r3, #22
 8008dce:	6003      	str	r3, [r0, #0]
 8008dd0:	2000      	movs	r0, #0
 8008dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dd6:	4f3a      	ldr	r7, [pc, #232]	; (8008ec0 <_strtol_l.isra.0+0x104>)
 8008dd8:	468e      	mov	lr, r1
 8008dda:	4676      	mov	r6, lr
 8008ddc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008de0:	5de5      	ldrb	r5, [r4, r7]
 8008de2:	f015 0508 	ands.w	r5, r5, #8
 8008de6:	d1f8      	bne.n	8008dda <_strtol_l.isra.0+0x1e>
 8008de8:	2c2d      	cmp	r4, #45	; 0x2d
 8008dea:	d134      	bne.n	8008e56 <_strtol_l.isra.0+0x9a>
 8008dec:	f89e 4000 	ldrb.w	r4, [lr]
 8008df0:	f04f 0801 	mov.w	r8, #1
 8008df4:	f106 0e02 	add.w	lr, r6, #2
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d05c      	beq.n	8008eb6 <_strtol_l.isra.0+0xfa>
 8008dfc:	2b10      	cmp	r3, #16
 8008dfe:	d10c      	bne.n	8008e1a <_strtol_l.isra.0+0x5e>
 8008e00:	2c30      	cmp	r4, #48	; 0x30
 8008e02:	d10a      	bne.n	8008e1a <_strtol_l.isra.0+0x5e>
 8008e04:	f89e 4000 	ldrb.w	r4, [lr]
 8008e08:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008e0c:	2c58      	cmp	r4, #88	; 0x58
 8008e0e:	d14d      	bne.n	8008eac <_strtol_l.isra.0+0xf0>
 8008e10:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8008e14:	2310      	movs	r3, #16
 8008e16:	f10e 0e02 	add.w	lr, lr, #2
 8008e1a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8008e1e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008e22:	2600      	movs	r6, #0
 8008e24:	fbbc f9f3 	udiv	r9, ip, r3
 8008e28:	4635      	mov	r5, r6
 8008e2a:	fb03 ca19 	mls	sl, r3, r9, ip
 8008e2e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008e32:	2f09      	cmp	r7, #9
 8008e34:	d818      	bhi.n	8008e68 <_strtol_l.isra.0+0xac>
 8008e36:	463c      	mov	r4, r7
 8008e38:	42a3      	cmp	r3, r4
 8008e3a:	dd24      	ble.n	8008e86 <_strtol_l.isra.0+0xca>
 8008e3c:	2e00      	cmp	r6, #0
 8008e3e:	db1f      	blt.n	8008e80 <_strtol_l.isra.0+0xc4>
 8008e40:	45a9      	cmp	r9, r5
 8008e42:	d31d      	bcc.n	8008e80 <_strtol_l.isra.0+0xc4>
 8008e44:	d101      	bne.n	8008e4a <_strtol_l.isra.0+0x8e>
 8008e46:	45a2      	cmp	sl, r4
 8008e48:	db1a      	blt.n	8008e80 <_strtol_l.isra.0+0xc4>
 8008e4a:	fb05 4503 	mla	r5, r5, r3, r4
 8008e4e:	2601      	movs	r6, #1
 8008e50:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008e54:	e7eb      	b.n	8008e2e <_strtol_l.isra.0+0x72>
 8008e56:	2c2b      	cmp	r4, #43	; 0x2b
 8008e58:	bf08      	it	eq
 8008e5a:	f89e 4000 	ldrbeq.w	r4, [lr]
 8008e5e:	46a8      	mov	r8, r5
 8008e60:	bf08      	it	eq
 8008e62:	f106 0e02 	addeq.w	lr, r6, #2
 8008e66:	e7c7      	b.n	8008df8 <_strtol_l.isra.0+0x3c>
 8008e68:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008e6c:	2f19      	cmp	r7, #25
 8008e6e:	d801      	bhi.n	8008e74 <_strtol_l.isra.0+0xb8>
 8008e70:	3c37      	subs	r4, #55	; 0x37
 8008e72:	e7e1      	b.n	8008e38 <_strtol_l.isra.0+0x7c>
 8008e74:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008e78:	2f19      	cmp	r7, #25
 8008e7a:	d804      	bhi.n	8008e86 <_strtol_l.isra.0+0xca>
 8008e7c:	3c57      	subs	r4, #87	; 0x57
 8008e7e:	e7db      	b.n	8008e38 <_strtol_l.isra.0+0x7c>
 8008e80:	f04f 36ff 	mov.w	r6, #4294967295
 8008e84:	e7e4      	b.n	8008e50 <_strtol_l.isra.0+0x94>
 8008e86:	2e00      	cmp	r6, #0
 8008e88:	da05      	bge.n	8008e96 <_strtol_l.isra.0+0xda>
 8008e8a:	2322      	movs	r3, #34	; 0x22
 8008e8c:	6003      	str	r3, [r0, #0]
 8008e8e:	4665      	mov	r5, ip
 8008e90:	b942      	cbnz	r2, 8008ea4 <_strtol_l.isra.0+0xe8>
 8008e92:	4628      	mov	r0, r5
 8008e94:	e79d      	b.n	8008dd2 <_strtol_l.isra.0+0x16>
 8008e96:	f1b8 0f00 	cmp.w	r8, #0
 8008e9a:	d000      	beq.n	8008e9e <_strtol_l.isra.0+0xe2>
 8008e9c:	426d      	negs	r5, r5
 8008e9e:	2a00      	cmp	r2, #0
 8008ea0:	d0f7      	beq.n	8008e92 <_strtol_l.isra.0+0xd6>
 8008ea2:	b10e      	cbz	r6, 8008ea8 <_strtol_l.isra.0+0xec>
 8008ea4:	f10e 31ff 	add.w	r1, lr, #4294967295
 8008ea8:	6011      	str	r1, [r2, #0]
 8008eaa:	e7f2      	b.n	8008e92 <_strtol_l.isra.0+0xd6>
 8008eac:	2430      	movs	r4, #48	; 0x30
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d1b3      	bne.n	8008e1a <_strtol_l.isra.0+0x5e>
 8008eb2:	2308      	movs	r3, #8
 8008eb4:	e7b1      	b.n	8008e1a <_strtol_l.isra.0+0x5e>
 8008eb6:	2c30      	cmp	r4, #48	; 0x30
 8008eb8:	d0a4      	beq.n	8008e04 <_strtol_l.isra.0+0x48>
 8008eba:	230a      	movs	r3, #10
 8008ebc:	e7ad      	b.n	8008e1a <_strtol_l.isra.0+0x5e>
 8008ebe:	bf00      	nop
 8008ec0:	0800a521 	.word	0x0800a521

08008ec4 <_strtol_r>:
 8008ec4:	f7ff bf7a 	b.w	8008dbc <_strtol_l.isra.0>

08008ec8 <__submore>:
 8008ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ecc:	460c      	mov	r4, r1
 8008ece:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008ed0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ed4:	4299      	cmp	r1, r3
 8008ed6:	d11d      	bne.n	8008f14 <__submore+0x4c>
 8008ed8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008edc:	f7fd faa0 	bl	8006420 <_malloc_r>
 8008ee0:	b918      	cbnz	r0, 8008eea <__submore+0x22>
 8008ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008eea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008eee:	63a3      	str	r3, [r4, #56]	; 0x38
 8008ef0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8008ef4:	6360      	str	r0, [r4, #52]	; 0x34
 8008ef6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8008efa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008efe:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8008f02:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008f06:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8008f0a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8008f0e:	6020      	str	r0, [r4, #0]
 8008f10:	2000      	movs	r0, #0
 8008f12:	e7e8      	b.n	8008ee6 <__submore+0x1e>
 8008f14:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8008f16:	0077      	lsls	r7, r6, #1
 8008f18:	463a      	mov	r2, r7
 8008f1a:	f7ff fb8d 	bl	8008638 <_realloc_r>
 8008f1e:	4605      	mov	r5, r0
 8008f20:	2800      	cmp	r0, #0
 8008f22:	d0de      	beq.n	8008ee2 <__submore+0x1a>
 8008f24:	eb00 0806 	add.w	r8, r0, r6
 8008f28:	4601      	mov	r1, r0
 8008f2a:	4632      	mov	r2, r6
 8008f2c:	4640      	mov	r0, r8
 8008f2e:	f7ff fb5b 	bl	80085e8 <memcpy>
 8008f32:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8008f36:	f8c4 8000 	str.w	r8, [r4]
 8008f3a:	e7e9      	b.n	8008f10 <__submore+0x48>

08008f3c <_fstat_r>:
 8008f3c:	b538      	push	{r3, r4, r5, lr}
 8008f3e:	4d07      	ldr	r5, [pc, #28]	; (8008f5c <_fstat_r+0x20>)
 8008f40:	2300      	movs	r3, #0
 8008f42:	4604      	mov	r4, r0
 8008f44:	4608      	mov	r0, r1
 8008f46:	4611      	mov	r1, r2
 8008f48:	602b      	str	r3, [r5, #0]
 8008f4a:	f7f9 f974 	bl	8002236 <_fstat>
 8008f4e:	1c43      	adds	r3, r0, #1
 8008f50:	d102      	bne.n	8008f58 <_fstat_r+0x1c>
 8008f52:	682b      	ldr	r3, [r5, #0]
 8008f54:	b103      	cbz	r3, 8008f58 <_fstat_r+0x1c>
 8008f56:	6023      	str	r3, [r4, #0]
 8008f58:	bd38      	pop	{r3, r4, r5, pc}
 8008f5a:	bf00      	nop
 8008f5c:	200004b4 	.word	0x200004b4

08008f60 <_isatty_r>:
 8008f60:	b538      	push	{r3, r4, r5, lr}
 8008f62:	4d06      	ldr	r5, [pc, #24]	; (8008f7c <_isatty_r+0x1c>)
 8008f64:	2300      	movs	r3, #0
 8008f66:	4604      	mov	r4, r0
 8008f68:	4608      	mov	r0, r1
 8008f6a:	602b      	str	r3, [r5, #0]
 8008f6c:	f7f9 f973 	bl	8002256 <_isatty>
 8008f70:	1c43      	adds	r3, r0, #1
 8008f72:	d102      	bne.n	8008f7a <_isatty_r+0x1a>
 8008f74:	682b      	ldr	r3, [r5, #0]
 8008f76:	b103      	cbz	r3, 8008f7a <_isatty_r+0x1a>
 8008f78:	6023      	str	r3, [r4, #0]
 8008f7a:	bd38      	pop	{r3, r4, r5, pc}
 8008f7c:	200004b4 	.word	0x200004b4

08008f80 <_malloc_usable_size_r>:
 8008f80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f84:	1f18      	subs	r0, r3, #4
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	bfbc      	itt	lt
 8008f8a:	580b      	ldrlt	r3, [r1, r0]
 8008f8c:	18c0      	addlt	r0, r0, r3
 8008f8e:	4770      	bx	lr

08008f90 <tan>:
 8008f90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008f92:	ec53 2b10 	vmov	r2, r3, d0
 8008f96:	4814      	ldr	r0, [pc, #80]	; (8008fe8 <tan+0x58>)
 8008f98:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008f9c:	4281      	cmp	r1, r0
 8008f9e:	dc05      	bgt.n	8008fac <tan+0x1c>
 8008fa0:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8008fe0 <tan+0x50>
 8008fa4:	2001      	movs	r0, #1
 8008fa6:	f000 fd6f 	bl	8009a88 <__kernel_tan>
 8008faa:	e009      	b.n	8008fc0 <tan+0x30>
 8008fac:	480f      	ldr	r0, [pc, #60]	; (8008fec <tan+0x5c>)
 8008fae:	4281      	cmp	r1, r0
 8008fb0:	dd09      	ble.n	8008fc6 <tan+0x36>
 8008fb2:	ee10 0a10 	vmov	r0, s0
 8008fb6:	4619      	mov	r1, r3
 8008fb8:	f7f7 f97e 	bl	80002b8 <__aeabi_dsub>
 8008fbc:	ec41 0b10 	vmov	d0, r0, r1
 8008fc0:	b005      	add	sp, #20
 8008fc2:	f85d fb04 	ldr.w	pc, [sp], #4
 8008fc6:	4668      	mov	r0, sp
 8008fc8:	f000 f812 	bl	8008ff0 <__ieee754_rem_pio2>
 8008fcc:	0040      	lsls	r0, r0, #1
 8008fce:	f000 0002 	and.w	r0, r0, #2
 8008fd2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008fd6:	ed9d 0b00 	vldr	d0, [sp]
 8008fda:	f1c0 0001 	rsb	r0, r0, #1
 8008fde:	e7e2      	b.n	8008fa6 <tan+0x16>
	...
 8008fe8:	3fe921fb 	.word	0x3fe921fb
 8008fec:	7fefffff 	.word	0x7fefffff

08008ff0 <__ieee754_rem_pio2>:
 8008ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ff4:	ed2d 8b02 	vpush	{d8}
 8008ff8:	ec55 4b10 	vmov	r4, r5, d0
 8008ffc:	4bca      	ldr	r3, [pc, #808]	; (8009328 <__ieee754_rem_pio2+0x338>)
 8008ffe:	b08b      	sub	sp, #44	; 0x2c
 8009000:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8009004:	4598      	cmp	r8, r3
 8009006:	4682      	mov	sl, r0
 8009008:	9502      	str	r5, [sp, #8]
 800900a:	dc08      	bgt.n	800901e <__ieee754_rem_pio2+0x2e>
 800900c:	2200      	movs	r2, #0
 800900e:	2300      	movs	r3, #0
 8009010:	ed80 0b00 	vstr	d0, [r0]
 8009014:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009018:	f04f 0b00 	mov.w	fp, #0
 800901c:	e028      	b.n	8009070 <__ieee754_rem_pio2+0x80>
 800901e:	4bc3      	ldr	r3, [pc, #780]	; (800932c <__ieee754_rem_pio2+0x33c>)
 8009020:	4598      	cmp	r8, r3
 8009022:	dc78      	bgt.n	8009116 <__ieee754_rem_pio2+0x126>
 8009024:	9b02      	ldr	r3, [sp, #8]
 8009026:	4ec2      	ldr	r6, [pc, #776]	; (8009330 <__ieee754_rem_pio2+0x340>)
 8009028:	2b00      	cmp	r3, #0
 800902a:	ee10 0a10 	vmov	r0, s0
 800902e:	a3b0      	add	r3, pc, #704	; (adr r3, 80092f0 <__ieee754_rem_pio2+0x300>)
 8009030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009034:	4629      	mov	r1, r5
 8009036:	dd39      	ble.n	80090ac <__ieee754_rem_pio2+0xbc>
 8009038:	f7f7 f93e 	bl	80002b8 <__aeabi_dsub>
 800903c:	45b0      	cmp	r8, r6
 800903e:	4604      	mov	r4, r0
 8009040:	460d      	mov	r5, r1
 8009042:	d01b      	beq.n	800907c <__ieee754_rem_pio2+0x8c>
 8009044:	a3ac      	add	r3, pc, #688	; (adr r3, 80092f8 <__ieee754_rem_pio2+0x308>)
 8009046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800904a:	f7f7 f935 	bl	80002b8 <__aeabi_dsub>
 800904e:	4602      	mov	r2, r0
 8009050:	460b      	mov	r3, r1
 8009052:	e9ca 2300 	strd	r2, r3, [sl]
 8009056:	4620      	mov	r0, r4
 8009058:	4629      	mov	r1, r5
 800905a:	f7f7 f92d 	bl	80002b8 <__aeabi_dsub>
 800905e:	a3a6      	add	r3, pc, #664	; (adr r3, 80092f8 <__ieee754_rem_pio2+0x308>)
 8009060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009064:	f7f7 f928 	bl	80002b8 <__aeabi_dsub>
 8009068:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800906c:	f04f 0b01 	mov.w	fp, #1
 8009070:	4658      	mov	r0, fp
 8009072:	b00b      	add	sp, #44	; 0x2c
 8009074:	ecbd 8b02 	vpop	{d8}
 8009078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800907c:	a3a0      	add	r3, pc, #640	; (adr r3, 8009300 <__ieee754_rem_pio2+0x310>)
 800907e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009082:	f7f7 f919 	bl	80002b8 <__aeabi_dsub>
 8009086:	a3a0      	add	r3, pc, #640	; (adr r3, 8009308 <__ieee754_rem_pio2+0x318>)
 8009088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800908c:	4604      	mov	r4, r0
 800908e:	460d      	mov	r5, r1
 8009090:	f7f7 f912 	bl	80002b8 <__aeabi_dsub>
 8009094:	4602      	mov	r2, r0
 8009096:	460b      	mov	r3, r1
 8009098:	e9ca 2300 	strd	r2, r3, [sl]
 800909c:	4620      	mov	r0, r4
 800909e:	4629      	mov	r1, r5
 80090a0:	f7f7 f90a 	bl	80002b8 <__aeabi_dsub>
 80090a4:	a398      	add	r3, pc, #608	; (adr r3, 8009308 <__ieee754_rem_pio2+0x318>)
 80090a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090aa:	e7db      	b.n	8009064 <__ieee754_rem_pio2+0x74>
 80090ac:	f7f7 f906 	bl	80002bc <__adddf3>
 80090b0:	45b0      	cmp	r8, r6
 80090b2:	4604      	mov	r4, r0
 80090b4:	460d      	mov	r5, r1
 80090b6:	d016      	beq.n	80090e6 <__ieee754_rem_pio2+0xf6>
 80090b8:	a38f      	add	r3, pc, #572	; (adr r3, 80092f8 <__ieee754_rem_pio2+0x308>)
 80090ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090be:	f7f7 f8fd 	bl	80002bc <__adddf3>
 80090c2:	4602      	mov	r2, r0
 80090c4:	460b      	mov	r3, r1
 80090c6:	e9ca 2300 	strd	r2, r3, [sl]
 80090ca:	4620      	mov	r0, r4
 80090cc:	4629      	mov	r1, r5
 80090ce:	f7f7 f8f3 	bl	80002b8 <__aeabi_dsub>
 80090d2:	a389      	add	r3, pc, #548	; (adr r3, 80092f8 <__ieee754_rem_pio2+0x308>)
 80090d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d8:	f7f7 f8f0 	bl	80002bc <__adddf3>
 80090dc:	f04f 3bff 	mov.w	fp, #4294967295
 80090e0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80090e4:	e7c4      	b.n	8009070 <__ieee754_rem_pio2+0x80>
 80090e6:	a386      	add	r3, pc, #536	; (adr r3, 8009300 <__ieee754_rem_pio2+0x310>)
 80090e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ec:	f7f7 f8e6 	bl	80002bc <__adddf3>
 80090f0:	a385      	add	r3, pc, #532	; (adr r3, 8009308 <__ieee754_rem_pio2+0x318>)
 80090f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f6:	4604      	mov	r4, r0
 80090f8:	460d      	mov	r5, r1
 80090fa:	f7f7 f8df 	bl	80002bc <__adddf3>
 80090fe:	4602      	mov	r2, r0
 8009100:	460b      	mov	r3, r1
 8009102:	e9ca 2300 	strd	r2, r3, [sl]
 8009106:	4620      	mov	r0, r4
 8009108:	4629      	mov	r1, r5
 800910a:	f7f7 f8d5 	bl	80002b8 <__aeabi_dsub>
 800910e:	a37e      	add	r3, pc, #504	; (adr r3, 8009308 <__ieee754_rem_pio2+0x318>)
 8009110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009114:	e7e0      	b.n	80090d8 <__ieee754_rem_pio2+0xe8>
 8009116:	4b87      	ldr	r3, [pc, #540]	; (8009334 <__ieee754_rem_pio2+0x344>)
 8009118:	4598      	cmp	r8, r3
 800911a:	f300 80d9 	bgt.w	80092d0 <__ieee754_rem_pio2+0x2e0>
 800911e:	f000 fe87 	bl	8009e30 <fabs>
 8009122:	ec55 4b10 	vmov	r4, r5, d0
 8009126:	ee10 0a10 	vmov	r0, s0
 800912a:	a379      	add	r3, pc, #484	; (adr r3, 8009310 <__ieee754_rem_pio2+0x320>)
 800912c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009130:	4629      	mov	r1, r5
 8009132:	f7f7 fa79 	bl	8000628 <__aeabi_dmul>
 8009136:	4b80      	ldr	r3, [pc, #512]	; (8009338 <__ieee754_rem_pio2+0x348>)
 8009138:	2200      	movs	r2, #0
 800913a:	f7f7 f8bf 	bl	80002bc <__adddf3>
 800913e:	f7f7 fd0d 	bl	8000b5c <__aeabi_d2iz>
 8009142:	4683      	mov	fp, r0
 8009144:	f7f7 fa06 	bl	8000554 <__aeabi_i2d>
 8009148:	4602      	mov	r2, r0
 800914a:	460b      	mov	r3, r1
 800914c:	ec43 2b18 	vmov	d8, r2, r3
 8009150:	a367      	add	r3, pc, #412	; (adr r3, 80092f0 <__ieee754_rem_pio2+0x300>)
 8009152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009156:	f7f7 fa67 	bl	8000628 <__aeabi_dmul>
 800915a:	4602      	mov	r2, r0
 800915c:	460b      	mov	r3, r1
 800915e:	4620      	mov	r0, r4
 8009160:	4629      	mov	r1, r5
 8009162:	f7f7 f8a9 	bl	80002b8 <__aeabi_dsub>
 8009166:	a364      	add	r3, pc, #400	; (adr r3, 80092f8 <__ieee754_rem_pio2+0x308>)
 8009168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800916c:	4606      	mov	r6, r0
 800916e:	460f      	mov	r7, r1
 8009170:	ec51 0b18 	vmov	r0, r1, d8
 8009174:	f7f7 fa58 	bl	8000628 <__aeabi_dmul>
 8009178:	f1bb 0f1f 	cmp.w	fp, #31
 800917c:	4604      	mov	r4, r0
 800917e:	460d      	mov	r5, r1
 8009180:	dc0d      	bgt.n	800919e <__ieee754_rem_pio2+0x1ae>
 8009182:	4b6e      	ldr	r3, [pc, #440]	; (800933c <__ieee754_rem_pio2+0x34c>)
 8009184:	f10b 32ff 	add.w	r2, fp, #4294967295
 8009188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800918c:	4543      	cmp	r3, r8
 800918e:	d006      	beq.n	800919e <__ieee754_rem_pio2+0x1ae>
 8009190:	4622      	mov	r2, r4
 8009192:	462b      	mov	r3, r5
 8009194:	4630      	mov	r0, r6
 8009196:	4639      	mov	r1, r7
 8009198:	f7f7 f88e 	bl	80002b8 <__aeabi_dsub>
 800919c:	e00f      	b.n	80091be <__ieee754_rem_pio2+0x1ce>
 800919e:	462b      	mov	r3, r5
 80091a0:	4622      	mov	r2, r4
 80091a2:	4630      	mov	r0, r6
 80091a4:	4639      	mov	r1, r7
 80091a6:	f7f7 f887 	bl	80002b8 <__aeabi_dsub>
 80091aa:	ea4f 5328 	mov.w	r3, r8, asr #20
 80091ae:	9303      	str	r3, [sp, #12]
 80091b0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80091b4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80091b8:	f1b8 0f10 	cmp.w	r8, #16
 80091bc:	dc02      	bgt.n	80091c4 <__ieee754_rem_pio2+0x1d4>
 80091be:	e9ca 0100 	strd	r0, r1, [sl]
 80091c2:	e039      	b.n	8009238 <__ieee754_rem_pio2+0x248>
 80091c4:	a34e      	add	r3, pc, #312	; (adr r3, 8009300 <__ieee754_rem_pio2+0x310>)
 80091c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ca:	ec51 0b18 	vmov	r0, r1, d8
 80091ce:	f7f7 fa2b 	bl	8000628 <__aeabi_dmul>
 80091d2:	4604      	mov	r4, r0
 80091d4:	460d      	mov	r5, r1
 80091d6:	4602      	mov	r2, r0
 80091d8:	460b      	mov	r3, r1
 80091da:	4630      	mov	r0, r6
 80091dc:	4639      	mov	r1, r7
 80091de:	f7f7 f86b 	bl	80002b8 <__aeabi_dsub>
 80091e2:	4602      	mov	r2, r0
 80091e4:	460b      	mov	r3, r1
 80091e6:	4680      	mov	r8, r0
 80091e8:	4689      	mov	r9, r1
 80091ea:	4630      	mov	r0, r6
 80091ec:	4639      	mov	r1, r7
 80091ee:	f7f7 f863 	bl	80002b8 <__aeabi_dsub>
 80091f2:	4622      	mov	r2, r4
 80091f4:	462b      	mov	r3, r5
 80091f6:	f7f7 f85f 	bl	80002b8 <__aeabi_dsub>
 80091fa:	a343      	add	r3, pc, #268	; (adr r3, 8009308 <__ieee754_rem_pio2+0x318>)
 80091fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009200:	4604      	mov	r4, r0
 8009202:	460d      	mov	r5, r1
 8009204:	ec51 0b18 	vmov	r0, r1, d8
 8009208:	f7f7 fa0e 	bl	8000628 <__aeabi_dmul>
 800920c:	4622      	mov	r2, r4
 800920e:	462b      	mov	r3, r5
 8009210:	f7f7 f852 	bl	80002b8 <__aeabi_dsub>
 8009214:	4602      	mov	r2, r0
 8009216:	460b      	mov	r3, r1
 8009218:	4604      	mov	r4, r0
 800921a:	460d      	mov	r5, r1
 800921c:	4640      	mov	r0, r8
 800921e:	4649      	mov	r1, r9
 8009220:	f7f7 f84a 	bl	80002b8 <__aeabi_dsub>
 8009224:	9a03      	ldr	r2, [sp, #12]
 8009226:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800922a:	1ad3      	subs	r3, r2, r3
 800922c:	2b31      	cmp	r3, #49	; 0x31
 800922e:	dc24      	bgt.n	800927a <__ieee754_rem_pio2+0x28a>
 8009230:	e9ca 0100 	strd	r0, r1, [sl]
 8009234:	4646      	mov	r6, r8
 8009236:	464f      	mov	r7, r9
 8009238:	e9da 8900 	ldrd	r8, r9, [sl]
 800923c:	4630      	mov	r0, r6
 800923e:	4642      	mov	r2, r8
 8009240:	464b      	mov	r3, r9
 8009242:	4639      	mov	r1, r7
 8009244:	f7f7 f838 	bl	80002b8 <__aeabi_dsub>
 8009248:	462b      	mov	r3, r5
 800924a:	4622      	mov	r2, r4
 800924c:	f7f7 f834 	bl	80002b8 <__aeabi_dsub>
 8009250:	9b02      	ldr	r3, [sp, #8]
 8009252:	2b00      	cmp	r3, #0
 8009254:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009258:	f6bf af0a 	bge.w	8009070 <__ieee754_rem_pio2+0x80>
 800925c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009260:	f8ca 3004 	str.w	r3, [sl, #4]
 8009264:	f8ca 8000 	str.w	r8, [sl]
 8009268:	f8ca 0008 	str.w	r0, [sl, #8]
 800926c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009270:	f8ca 300c 	str.w	r3, [sl, #12]
 8009274:	f1cb 0b00 	rsb	fp, fp, #0
 8009278:	e6fa      	b.n	8009070 <__ieee754_rem_pio2+0x80>
 800927a:	a327      	add	r3, pc, #156	; (adr r3, 8009318 <__ieee754_rem_pio2+0x328>)
 800927c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009280:	ec51 0b18 	vmov	r0, r1, d8
 8009284:	f7f7 f9d0 	bl	8000628 <__aeabi_dmul>
 8009288:	4604      	mov	r4, r0
 800928a:	460d      	mov	r5, r1
 800928c:	4602      	mov	r2, r0
 800928e:	460b      	mov	r3, r1
 8009290:	4640      	mov	r0, r8
 8009292:	4649      	mov	r1, r9
 8009294:	f7f7 f810 	bl	80002b8 <__aeabi_dsub>
 8009298:	4602      	mov	r2, r0
 800929a:	460b      	mov	r3, r1
 800929c:	4606      	mov	r6, r0
 800929e:	460f      	mov	r7, r1
 80092a0:	4640      	mov	r0, r8
 80092a2:	4649      	mov	r1, r9
 80092a4:	f7f7 f808 	bl	80002b8 <__aeabi_dsub>
 80092a8:	4622      	mov	r2, r4
 80092aa:	462b      	mov	r3, r5
 80092ac:	f7f7 f804 	bl	80002b8 <__aeabi_dsub>
 80092b0:	a31b      	add	r3, pc, #108	; (adr r3, 8009320 <__ieee754_rem_pio2+0x330>)
 80092b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b6:	4604      	mov	r4, r0
 80092b8:	460d      	mov	r5, r1
 80092ba:	ec51 0b18 	vmov	r0, r1, d8
 80092be:	f7f7 f9b3 	bl	8000628 <__aeabi_dmul>
 80092c2:	4622      	mov	r2, r4
 80092c4:	462b      	mov	r3, r5
 80092c6:	f7f6 fff7 	bl	80002b8 <__aeabi_dsub>
 80092ca:	4604      	mov	r4, r0
 80092cc:	460d      	mov	r5, r1
 80092ce:	e75f      	b.n	8009190 <__ieee754_rem_pio2+0x1a0>
 80092d0:	4b1b      	ldr	r3, [pc, #108]	; (8009340 <__ieee754_rem_pio2+0x350>)
 80092d2:	4598      	cmp	r8, r3
 80092d4:	dd36      	ble.n	8009344 <__ieee754_rem_pio2+0x354>
 80092d6:	ee10 2a10 	vmov	r2, s0
 80092da:	462b      	mov	r3, r5
 80092dc:	4620      	mov	r0, r4
 80092de:	4629      	mov	r1, r5
 80092e0:	f7f6 ffea 	bl	80002b8 <__aeabi_dsub>
 80092e4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80092e8:	e9ca 0100 	strd	r0, r1, [sl]
 80092ec:	e694      	b.n	8009018 <__ieee754_rem_pio2+0x28>
 80092ee:	bf00      	nop
 80092f0:	54400000 	.word	0x54400000
 80092f4:	3ff921fb 	.word	0x3ff921fb
 80092f8:	1a626331 	.word	0x1a626331
 80092fc:	3dd0b461 	.word	0x3dd0b461
 8009300:	1a600000 	.word	0x1a600000
 8009304:	3dd0b461 	.word	0x3dd0b461
 8009308:	2e037073 	.word	0x2e037073
 800930c:	3ba3198a 	.word	0x3ba3198a
 8009310:	6dc9c883 	.word	0x6dc9c883
 8009314:	3fe45f30 	.word	0x3fe45f30
 8009318:	2e000000 	.word	0x2e000000
 800931c:	3ba3198a 	.word	0x3ba3198a
 8009320:	252049c1 	.word	0x252049c1
 8009324:	397b839a 	.word	0x397b839a
 8009328:	3fe921fb 	.word	0x3fe921fb
 800932c:	4002d97b 	.word	0x4002d97b
 8009330:	3ff921fb 	.word	0x3ff921fb
 8009334:	413921fb 	.word	0x413921fb
 8009338:	3fe00000 	.word	0x3fe00000
 800933c:	0800a67c 	.word	0x0800a67c
 8009340:	7fefffff 	.word	0x7fefffff
 8009344:	ea4f 5428 	mov.w	r4, r8, asr #20
 8009348:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800934c:	ee10 0a10 	vmov	r0, s0
 8009350:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8009354:	ee10 6a10 	vmov	r6, s0
 8009358:	460f      	mov	r7, r1
 800935a:	f7f7 fbff 	bl	8000b5c <__aeabi_d2iz>
 800935e:	f7f7 f8f9 	bl	8000554 <__aeabi_i2d>
 8009362:	4602      	mov	r2, r0
 8009364:	460b      	mov	r3, r1
 8009366:	4630      	mov	r0, r6
 8009368:	4639      	mov	r1, r7
 800936a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800936e:	f7f6 ffa3 	bl	80002b8 <__aeabi_dsub>
 8009372:	4b22      	ldr	r3, [pc, #136]	; (80093fc <__ieee754_rem_pio2+0x40c>)
 8009374:	2200      	movs	r2, #0
 8009376:	f7f7 f957 	bl	8000628 <__aeabi_dmul>
 800937a:	460f      	mov	r7, r1
 800937c:	4606      	mov	r6, r0
 800937e:	f7f7 fbed 	bl	8000b5c <__aeabi_d2iz>
 8009382:	f7f7 f8e7 	bl	8000554 <__aeabi_i2d>
 8009386:	4602      	mov	r2, r0
 8009388:	460b      	mov	r3, r1
 800938a:	4630      	mov	r0, r6
 800938c:	4639      	mov	r1, r7
 800938e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009392:	f7f6 ff91 	bl	80002b8 <__aeabi_dsub>
 8009396:	4b19      	ldr	r3, [pc, #100]	; (80093fc <__ieee754_rem_pio2+0x40c>)
 8009398:	2200      	movs	r2, #0
 800939a:	f7f7 f945 	bl	8000628 <__aeabi_dmul>
 800939e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80093a2:	ad04      	add	r5, sp, #16
 80093a4:	f04f 0803 	mov.w	r8, #3
 80093a8:	46a9      	mov	r9, r5
 80093aa:	2600      	movs	r6, #0
 80093ac:	2700      	movs	r7, #0
 80093ae:	4632      	mov	r2, r6
 80093b0:	463b      	mov	r3, r7
 80093b2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80093b6:	46c3      	mov	fp, r8
 80093b8:	3d08      	subs	r5, #8
 80093ba:	f108 38ff 	add.w	r8, r8, #4294967295
 80093be:	f7f7 fb9b 	bl	8000af8 <__aeabi_dcmpeq>
 80093c2:	2800      	cmp	r0, #0
 80093c4:	d1f3      	bne.n	80093ae <__ieee754_rem_pio2+0x3be>
 80093c6:	4b0e      	ldr	r3, [pc, #56]	; (8009400 <__ieee754_rem_pio2+0x410>)
 80093c8:	9301      	str	r3, [sp, #4]
 80093ca:	2302      	movs	r3, #2
 80093cc:	9300      	str	r3, [sp, #0]
 80093ce:	4622      	mov	r2, r4
 80093d0:	465b      	mov	r3, fp
 80093d2:	4651      	mov	r1, sl
 80093d4:	4648      	mov	r0, r9
 80093d6:	f000 f817 	bl	8009408 <__kernel_rem_pio2>
 80093da:	9b02      	ldr	r3, [sp, #8]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	4683      	mov	fp, r0
 80093e0:	f6bf ae46 	bge.w	8009070 <__ieee754_rem_pio2+0x80>
 80093e4:	f8da 3004 	ldr.w	r3, [sl, #4]
 80093e8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80093ec:	f8ca 3004 	str.w	r3, [sl, #4]
 80093f0:	f8da 300c 	ldr.w	r3, [sl, #12]
 80093f4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80093f8:	e73a      	b.n	8009270 <__ieee754_rem_pio2+0x280>
 80093fa:	bf00      	nop
 80093fc:	41700000 	.word	0x41700000
 8009400:	0800a6fc 	.word	0x0800a6fc
 8009404:	00000000 	.word	0x00000000

08009408 <__kernel_rem_pio2>:
 8009408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800940c:	ed2d 8b02 	vpush	{d8}
 8009410:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8009414:	f112 0f14 	cmn.w	r2, #20
 8009418:	9308      	str	r3, [sp, #32]
 800941a:	9101      	str	r1, [sp, #4]
 800941c:	4bc6      	ldr	r3, [pc, #792]	; (8009738 <__kernel_rem_pio2+0x330>)
 800941e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8009420:	9009      	str	r0, [sp, #36]	; 0x24
 8009422:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009426:	9304      	str	r3, [sp, #16]
 8009428:	9b08      	ldr	r3, [sp, #32]
 800942a:	f103 33ff 	add.w	r3, r3, #4294967295
 800942e:	bfa8      	it	ge
 8009430:	1ed4      	subge	r4, r2, #3
 8009432:	9306      	str	r3, [sp, #24]
 8009434:	bfb2      	itee	lt
 8009436:	2400      	movlt	r4, #0
 8009438:	2318      	movge	r3, #24
 800943a:	fb94 f4f3 	sdivge	r4, r4, r3
 800943e:	f06f 0317 	mvn.w	r3, #23
 8009442:	fb04 3303 	mla	r3, r4, r3, r3
 8009446:	eb03 0a02 	add.w	sl, r3, r2
 800944a:	9b04      	ldr	r3, [sp, #16]
 800944c:	9a06      	ldr	r2, [sp, #24]
 800944e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8009728 <__kernel_rem_pio2+0x320>
 8009452:	eb03 0802 	add.w	r8, r3, r2
 8009456:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8009458:	1aa7      	subs	r7, r4, r2
 800945a:	ae20      	add	r6, sp, #128	; 0x80
 800945c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009460:	2500      	movs	r5, #0
 8009462:	4545      	cmp	r5, r8
 8009464:	dd18      	ble.n	8009498 <__kernel_rem_pio2+0x90>
 8009466:	9b08      	ldr	r3, [sp, #32]
 8009468:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800946c:	aa20      	add	r2, sp, #128	; 0x80
 800946e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8009728 <__kernel_rem_pio2+0x320>
 8009472:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8009476:	f1c3 0301 	rsb	r3, r3, #1
 800947a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800947e:	9307      	str	r3, [sp, #28]
 8009480:	9b07      	ldr	r3, [sp, #28]
 8009482:	9a04      	ldr	r2, [sp, #16]
 8009484:	4443      	add	r3, r8
 8009486:	429a      	cmp	r2, r3
 8009488:	db2f      	blt.n	80094ea <__kernel_rem_pio2+0xe2>
 800948a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800948e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009492:	462f      	mov	r7, r5
 8009494:	2600      	movs	r6, #0
 8009496:	e01b      	b.n	80094d0 <__kernel_rem_pio2+0xc8>
 8009498:	42ef      	cmn	r7, r5
 800949a:	d407      	bmi.n	80094ac <__kernel_rem_pio2+0xa4>
 800949c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80094a0:	f7f7 f858 	bl	8000554 <__aeabi_i2d>
 80094a4:	e8e6 0102 	strd	r0, r1, [r6], #8
 80094a8:	3501      	adds	r5, #1
 80094aa:	e7da      	b.n	8009462 <__kernel_rem_pio2+0x5a>
 80094ac:	ec51 0b18 	vmov	r0, r1, d8
 80094b0:	e7f8      	b.n	80094a4 <__kernel_rem_pio2+0x9c>
 80094b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094b6:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80094ba:	f7f7 f8b5 	bl	8000628 <__aeabi_dmul>
 80094be:	4602      	mov	r2, r0
 80094c0:	460b      	mov	r3, r1
 80094c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094c6:	f7f6 fef9 	bl	80002bc <__adddf3>
 80094ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094ce:	3601      	adds	r6, #1
 80094d0:	9b06      	ldr	r3, [sp, #24]
 80094d2:	429e      	cmp	r6, r3
 80094d4:	f1a7 0708 	sub.w	r7, r7, #8
 80094d8:	ddeb      	ble.n	80094b2 <__kernel_rem_pio2+0xaa>
 80094da:	ed9d 7b02 	vldr	d7, [sp, #8]
 80094de:	3508      	adds	r5, #8
 80094e0:	ecab 7b02 	vstmia	fp!, {d7}
 80094e4:	f108 0801 	add.w	r8, r8, #1
 80094e8:	e7ca      	b.n	8009480 <__kernel_rem_pio2+0x78>
 80094ea:	9b04      	ldr	r3, [sp, #16]
 80094ec:	aa0c      	add	r2, sp, #48	; 0x30
 80094ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80094f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80094f4:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80094f6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80094fa:	9c04      	ldr	r4, [sp, #16]
 80094fc:	930a      	str	r3, [sp, #40]	; 0x28
 80094fe:	ab98      	add	r3, sp, #608	; 0x260
 8009500:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009504:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8009508:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800950c:	f8cd b008 	str.w	fp, [sp, #8]
 8009510:	4625      	mov	r5, r4
 8009512:	2d00      	cmp	r5, #0
 8009514:	dc78      	bgt.n	8009608 <__kernel_rem_pio2+0x200>
 8009516:	ec47 6b10 	vmov	d0, r6, r7
 800951a:	4650      	mov	r0, sl
 800951c:	f000 fd14 	bl	8009f48 <scalbn>
 8009520:	ec57 6b10 	vmov	r6, r7, d0
 8009524:	2200      	movs	r2, #0
 8009526:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800952a:	ee10 0a10 	vmov	r0, s0
 800952e:	4639      	mov	r1, r7
 8009530:	f7f7 f87a 	bl	8000628 <__aeabi_dmul>
 8009534:	ec41 0b10 	vmov	d0, r0, r1
 8009538:	f000 fc86 	bl	8009e48 <floor>
 800953c:	4b7f      	ldr	r3, [pc, #508]	; (800973c <__kernel_rem_pio2+0x334>)
 800953e:	ec51 0b10 	vmov	r0, r1, d0
 8009542:	2200      	movs	r2, #0
 8009544:	f7f7 f870 	bl	8000628 <__aeabi_dmul>
 8009548:	4602      	mov	r2, r0
 800954a:	460b      	mov	r3, r1
 800954c:	4630      	mov	r0, r6
 800954e:	4639      	mov	r1, r7
 8009550:	f7f6 feb2 	bl	80002b8 <__aeabi_dsub>
 8009554:	460f      	mov	r7, r1
 8009556:	4606      	mov	r6, r0
 8009558:	f7f7 fb00 	bl	8000b5c <__aeabi_d2iz>
 800955c:	9007      	str	r0, [sp, #28]
 800955e:	f7f6 fff9 	bl	8000554 <__aeabi_i2d>
 8009562:	4602      	mov	r2, r0
 8009564:	460b      	mov	r3, r1
 8009566:	4630      	mov	r0, r6
 8009568:	4639      	mov	r1, r7
 800956a:	f7f6 fea5 	bl	80002b8 <__aeabi_dsub>
 800956e:	f1ba 0f00 	cmp.w	sl, #0
 8009572:	4606      	mov	r6, r0
 8009574:	460f      	mov	r7, r1
 8009576:	dd70      	ble.n	800965a <__kernel_rem_pio2+0x252>
 8009578:	1e62      	subs	r2, r4, #1
 800957a:	ab0c      	add	r3, sp, #48	; 0x30
 800957c:	9d07      	ldr	r5, [sp, #28]
 800957e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009582:	f1ca 0118 	rsb	r1, sl, #24
 8009586:	fa40 f301 	asr.w	r3, r0, r1
 800958a:	441d      	add	r5, r3
 800958c:	408b      	lsls	r3, r1
 800958e:	1ac0      	subs	r0, r0, r3
 8009590:	ab0c      	add	r3, sp, #48	; 0x30
 8009592:	9507      	str	r5, [sp, #28]
 8009594:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8009598:	f1ca 0317 	rsb	r3, sl, #23
 800959c:	fa40 f303 	asr.w	r3, r0, r3
 80095a0:	9302      	str	r3, [sp, #8]
 80095a2:	9b02      	ldr	r3, [sp, #8]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	dd66      	ble.n	8009676 <__kernel_rem_pio2+0x26e>
 80095a8:	9b07      	ldr	r3, [sp, #28]
 80095aa:	2200      	movs	r2, #0
 80095ac:	3301      	adds	r3, #1
 80095ae:	9307      	str	r3, [sp, #28]
 80095b0:	4615      	mov	r5, r2
 80095b2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80095b6:	4294      	cmp	r4, r2
 80095b8:	f300 8099 	bgt.w	80096ee <__kernel_rem_pio2+0x2e6>
 80095bc:	f1ba 0f00 	cmp.w	sl, #0
 80095c0:	dd07      	ble.n	80095d2 <__kernel_rem_pio2+0x1ca>
 80095c2:	f1ba 0f01 	cmp.w	sl, #1
 80095c6:	f000 80a5 	beq.w	8009714 <__kernel_rem_pio2+0x30c>
 80095ca:	f1ba 0f02 	cmp.w	sl, #2
 80095ce:	f000 80c1 	beq.w	8009754 <__kernel_rem_pio2+0x34c>
 80095d2:	9b02      	ldr	r3, [sp, #8]
 80095d4:	2b02      	cmp	r3, #2
 80095d6:	d14e      	bne.n	8009676 <__kernel_rem_pio2+0x26e>
 80095d8:	4632      	mov	r2, r6
 80095da:	463b      	mov	r3, r7
 80095dc:	4958      	ldr	r1, [pc, #352]	; (8009740 <__kernel_rem_pio2+0x338>)
 80095de:	2000      	movs	r0, #0
 80095e0:	f7f6 fe6a 	bl	80002b8 <__aeabi_dsub>
 80095e4:	4606      	mov	r6, r0
 80095e6:	460f      	mov	r7, r1
 80095e8:	2d00      	cmp	r5, #0
 80095ea:	d044      	beq.n	8009676 <__kernel_rem_pio2+0x26e>
 80095ec:	4650      	mov	r0, sl
 80095ee:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8009730 <__kernel_rem_pio2+0x328>
 80095f2:	f000 fca9 	bl	8009f48 <scalbn>
 80095f6:	4630      	mov	r0, r6
 80095f8:	4639      	mov	r1, r7
 80095fa:	ec53 2b10 	vmov	r2, r3, d0
 80095fe:	f7f6 fe5b 	bl	80002b8 <__aeabi_dsub>
 8009602:	4606      	mov	r6, r0
 8009604:	460f      	mov	r7, r1
 8009606:	e036      	b.n	8009676 <__kernel_rem_pio2+0x26e>
 8009608:	4b4e      	ldr	r3, [pc, #312]	; (8009744 <__kernel_rem_pio2+0x33c>)
 800960a:	2200      	movs	r2, #0
 800960c:	4630      	mov	r0, r6
 800960e:	4639      	mov	r1, r7
 8009610:	f7f7 f80a 	bl	8000628 <__aeabi_dmul>
 8009614:	f7f7 faa2 	bl	8000b5c <__aeabi_d2iz>
 8009618:	f7f6 ff9c 	bl	8000554 <__aeabi_i2d>
 800961c:	4b4a      	ldr	r3, [pc, #296]	; (8009748 <__kernel_rem_pio2+0x340>)
 800961e:	2200      	movs	r2, #0
 8009620:	4680      	mov	r8, r0
 8009622:	4689      	mov	r9, r1
 8009624:	f7f7 f800 	bl	8000628 <__aeabi_dmul>
 8009628:	4602      	mov	r2, r0
 800962a:	460b      	mov	r3, r1
 800962c:	4630      	mov	r0, r6
 800962e:	4639      	mov	r1, r7
 8009630:	f7f6 fe42 	bl	80002b8 <__aeabi_dsub>
 8009634:	f7f7 fa92 	bl	8000b5c <__aeabi_d2iz>
 8009638:	9b02      	ldr	r3, [sp, #8]
 800963a:	f843 0b04 	str.w	r0, [r3], #4
 800963e:	3d01      	subs	r5, #1
 8009640:	9302      	str	r3, [sp, #8]
 8009642:	ab70      	add	r3, sp, #448	; 0x1c0
 8009644:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800964c:	4640      	mov	r0, r8
 800964e:	4649      	mov	r1, r9
 8009650:	f7f6 fe34 	bl	80002bc <__adddf3>
 8009654:	4606      	mov	r6, r0
 8009656:	460f      	mov	r7, r1
 8009658:	e75b      	b.n	8009512 <__kernel_rem_pio2+0x10a>
 800965a:	d105      	bne.n	8009668 <__kernel_rem_pio2+0x260>
 800965c:	1e63      	subs	r3, r4, #1
 800965e:	aa0c      	add	r2, sp, #48	; 0x30
 8009660:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009664:	15c3      	asrs	r3, r0, #23
 8009666:	e79b      	b.n	80095a0 <__kernel_rem_pio2+0x198>
 8009668:	4b38      	ldr	r3, [pc, #224]	; (800974c <__kernel_rem_pio2+0x344>)
 800966a:	2200      	movs	r2, #0
 800966c:	f7f7 fa62 	bl	8000b34 <__aeabi_dcmpge>
 8009670:	2800      	cmp	r0, #0
 8009672:	d139      	bne.n	80096e8 <__kernel_rem_pio2+0x2e0>
 8009674:	9002      	str	r0, [sp, #8]
 8009676:	2200      	movs	r2, #0
 8009678:	2300      	movs	r3, #0
 800967a:	4630      	mov	r0, r6
 800967c:	4639      	mov	r1, r7
 800967e:	f7f7 fa3b 	bl	8000af8 <__aeabi_dcmpeq>
 8009682:	2800      	cmp	r0, #0
 8009684:	f000 80b4 	beq.w	80097f0 <__kernel_rem_pio2+0x3e8>
 8009688:	f104 3bff 	add.w	fp, r4, #4294967295
 800968c:	465b      	mov	r3, fp
 800968e:	2200      	movs	r2, #0
 8009690:	9904      	ldr	r1, [sp, #16]
 8009692:	428b      	cmp	r3, r1
 8009694:	da65      	bge.n	8009762 <__kernel_rem_pio2+0x35a>
 8009696:	2a00      	cmp	r2, #0
 8009698:	d07b      	beq.n	8009792 <__kernel_rem_pio2+0x38a>
 800969a:	ab0c      	add	r3, sp, #48	; 0x30
 800969c:	f1aa 0a18 	sub.w	sl, sl, #24
 80096a0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	f000 80a0 	beq.w	80097ea <__kernel_rem_pio2+0x3e2>
 80096aa:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8009730 <__kernel_rem_pio2+0x328>
 80096ae:	4650      	mov	r0, sl
 80096b0:	f000 fc4a 	bl	8009f48 <scalbn>
 80096b4:	4f23      	ldr	r7, [pc, #140]	; (8009744 <__kernel_rem_pio2+0x33c>)
 80096b6:	ec55 4b10 	vmov	r4, r5, d0
 80096ba:	46d8      	mov	r8, fp
 80096bc:	2600      	movs	r6, #0
 80096be:	f1b8 0f00 	cmp.w	r8, #0
 80096c2:	f280 80cf 	bge.w	8009864 <__kernel_rem_pio2+0x45c>
 80096c6:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8009728 <__kernel_rem_pio2+0x320>
 80096ca:	465f      	mov	r7, fp
 80096cc:	f04f 0800 	mov.w	r8, #0
 80096d0:	2f00      	cmp	r7, #0
 80096d2:	f2c0 80fd 	blt.w	80098d0 <__kernel_rem_pio2+0x4c8>
 80096d6:	ab70      	add	r3, sp, #448	; 0x1c0
 80096d8:	f8df a074 	ldr.w	sl, [pc, #116]	; 8009750 <__kernel_rem_pio2+0x348>
 80096dc:	ec55 4b18 	vmov	r4, r5, d8
 80096e0:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 80096e4:	2600      	movs	r6, #0
 80096e6:	e0e5      	b.n	80098b4 <__kernel_rem_pio2+0x4ac>
 80096e8:	2302      	movs	r3, #2
 80096ea:	9302      	str	r3, [sp, #8]
 80096ec:	e75c      	b.n	80095a8 <__kernel_rem_pio2+0x1a0>
 80096ee:	f8db 3000 	ldr.w	r3, [fp]
 80096f2:	b955      	cbnz	r5, 800970a <__kernel_rem_pio2+0x302>
 80096f4:	b123      	cbz	r3, 8009700 <__kernel_rem_pio2+0x2f8>
 80096f6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80096fa:	f8cb 3000 	str.w	r3, [fp]
 80096fe:	2301      	movs	r3, #1
 8009700:	3201      	adds	r2, #1
 8009702:	f10b 0b04 	add.w	fp, fp, #4
 8009706:	461d      	mov	r5, r3
 8009708:	e755      	b.n	80095b6 <__kernel_rem_pio2+0x1ae>
 800970a:	1acb      	subs	r3, r1, r3
 800970c:	f8cb 3000 	str.w	r3, [fp]
 8009710:	462b      	mov	r3, r5
 8009712:	e7f5      	b.n	8009700 <__kernel_rem_pio2+0x2f8>
 8009714:	1e62      	subs	r2, r4, #1
 8009716:	ab0c      	add	r3, sp, #48	; 0x30
 8009718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800971c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009720:	a90c      	add	r1, sp, #48	; 0x30
 8009722:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009726:	e754      	b.n	80095d2 <__kernel_rem_pio2+0x1ca>
	...
 8009734:	3ff00000 	.word	0x3ff00000
 8009738:	0800a848 	.word	0x0800a848
 800973c:	40200000 	.word	0x40200000
 8009740:	3ff00000 	.word	0x3ff00000
 8009744:	3e700000 	.word	0x3e700000
 8009748:	41700000 	.word	0x41700000
 800974c:	3fe00000 	.word	0x3fe00000
 8009750:	0800a808 	.word	0x0800a808
 8009754:	1e62      	subs	r2, r4, #1
 8009756:	ab0c      	add	r3, sp, #48	; 0x30
 8009758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800975c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009760:	e7de      	b.n	8009720 <__kernel_rem_pio2+0x318>
 8009762:	a90c      	add	r1, sp, #48	; 0x30
 8009764:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009768:	3b01      	subs	r3, #1
 800976a:	430a      	orrs	r2, r1
 800976c:	e790      	b.n	8009690 <__kernel_rem_pio2+0x288>
 800976e:	3301      	adds	r3, #1
 8009770:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8009774:	2900      	cmp	r1, #0
 8009776:	d0fa      	beq.n	800976e <__kernel_rem_pio2+0x366>
 8009778:	9a08      	ldr	r2, [sp, #32]
 800977a:	18e3      	adds	r3, r4, r3
 800977c:	18a6      	adds	r6, r4, r2
 800977e:	aa20      	add	r2, sp, #128	; 0x80
 8009780:	1c65      	adds	r5, r4, #1
 8009782:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8009786:	9302      	str	r3, [sp, #8]
 8009788:	9b02      	ldr	r3, [sp, #8]
 800978a:	42ab      	cmp	r3, r5
 800978c:	da04      	bge.n	8009798 <__kernel_rem_pio2+0x390>
 800978e:	461c      	mov	r4, r3
 8009790:	e6b5      	b.n	80094fe <__kernel_rem_pio2+0xf6>
 8009792:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009794:	2301      	movs	r3, #1
 8009796:	e7eb      	b.n	8009770 <__kernel_rem_pio2+0x368>
 8009798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800979a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800979e:	f7f6 fed9 	bl	8000554 <__aeabi_i2d>
 80097a2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80097a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097a8:	46b3      	mov	fp, r6
 80097aa:	461c      	mov	r4, r3
 80097ac:	2700      	movs	r7, #0
 80097ae:	f04f 0800 	mov.w	r8, #0
 80097b2:	f04f 0900 	mov.w	r9, #0
 80097b6:	9b06      	ldr	r3, [sp, #24]
 80097b8:	429f      	cmp	r7, r3
 80097ba:	dd06      	ble.n	80097ca <__kernel_rem_pio2+0x3c2>
 80097bc:	ab70      	add	r3, sp, #448	; 0x1c0
 80097be:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80097c2:	e9c3 8900 	strd	r8, r9, [r3]
 80097c6:	3501      	adds	r5, #1
 80097c8:	e7de      	b.n	8009788 <__kernel_rem_pio2+0x380>
 80097ca:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80097ce:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80097d2:	f7f6 ff29 	bl	8000628 <__aeabi_dmul>
 80097d6:	4602      	mov	r2, r0
 80097d8:	460b      	mov	r3, r1
 80097da:	4640      	mov	r0, r8
 80097dc:	4649      	mov	r1, r9
 80097de:	f7f6 fd6d 	bl	80002bc <__adddf3>
 80097e2:	3701      	adds	r7, #1
 80097e4:	4680      	mov	r8, r0
 80097e6:	4689      	mov	r9, r1
 80097e8:	e7e5      	b.n	80097b6 <__kernel_rem_pio2+0x3ae>
 80097ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 80097ee:	e754      	b.n	800969a <__kernel_rem_pio2+0x292>
 80097f0:	ec47 6b10 	vmov	d0, r6, r7
 80097f4:	f1ca 0000 	rsb	r0, sl, #0
 80097f8:	f000 fba6 	bl	8009f48 <scalbn>
 80097fc:	ec57 6b10 	vmov	r6, r7, d0
 8009800:	4b9f      	ldr	r3, [pc, #636]	; (8009a80 <__kernel_rem_pio2+0x678>)
 8009802:	ee10 0a10 	vmov	r0, s0
 8009806:	2200      	movs	r2, #0
 8009808:	4639      	mov	r1, r7
 800980a:	f7f7 f993 	bl	8000b34 <__aeabi_dcmpge>
 800980e:	b300      	cbz	r0, 8009852 <__kernel_rem_pio2+0x44a>
 8009810:	4b9c      	ldr	r3, [pc, #624]	; (8009a84 <__kernel_rem_pio2+0x67c>)
 8009812:	2200      	movs	r2, #0
 8009814:	4630      	mov	r0, r6
 8009816:	4639      	mov	r1, r7
 8009818:	f7f6 ff06 	bl	8000628 <__aeabi_dmul>
 800981c:	f7f7 f99e 	bl	8000b5c <__aeabi_d2iz>
 8009820:	4605      	mov	r5, r0
 8009822:	f7f6 fe97 	bl	8000554 <__aeabi_i2d>
 8009826:	4b96      	ldr	r3, [pc, #600]	; (8009a80 <__kernel_rem_pio2+0x678>)
 8009828:	2200      	movs	r2, #0
 800982a:	f7f6 fefd 	bl	8000628 <__aeabi_dmul>
 800982e:	460b      	mov	r3, r1
 8009830:	4602      	mov	r2, r0
 8009832:	4639      	mov	r1, r7
 8009834:	4630      	mov	r0, r6
 8009836:	f7f6 fd3f 	bl	80002b8 <__aeabi_dsub>
 800983a:	f7f7 f98f 	bl	8000b5c <__aeabi_d2iz>
 800983e:	f104 0b01 	add.w	fp, r4, #1
 8009842:	ab0c      	add	r3, sp, #48	; 0x30
 8009844:	f10a 0a18 	add.w	sl, sl, #24
 8009848:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800984c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8009850:	e72b      	b.n	80096aa <__kernel_rem_pio2+0x2a2>
 8009852:	4630      	mov	r0, r6
 8009854:	4639      	mov	r1, r7
 8009856:	f7f7 f981 	bl	8000b5c <__aeabi_d2iz>
 800985a:	ab0c      	add	r3, sp, #48	; 0x30
 800985c:	46a3      	mov	fp, r4
 800985e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009862:	e722      	b.n	80096aa <__kernel_rem_pio2+0x2a2>
 8009864:	ab70      	add	r3, sp, #448	; 0x1c0
 8009866:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800986a:	ab0c      	add	r3, sp, #48	; 0x30
 800986c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8009870:	f7f6 fe70 	bl	8000554 <__aeabi_i2d>
 8009874:	4622      	mov	r2, r4
 8009876:	462b      	mov	r3, r5
 8009878:	f7f6 fed6 	bl	8000628 <__aeabi_dmul>
 800987c:	4632      	mov	r2, r6
 800987e:	e9c9 0100 	strd	r0, r1, [r9]
 8009882:	463b      	mov	r3, r7
 8009884:	4620      	mov	r0, r4
 8009886:	4629      	mov	r1, r5
 8009888:	f7f6 fece 	bl	8000628 <__aeabi_dmul>
 800988c:	f108 38ff 	add.w	r8, r8, #4294967295
 8009890:	4604      	mov	r4, r0
 8009892:	460d      	mov	r5, r1
 8009894:	e713      	b.n	80096be <__kernel_rem_pio2+0x2b6>
 8009896:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800989a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800989e:	f7f6 fec3 	bl	8000628 <__aeabi_dmul>
 80098a2:	4602      	mov	r2, r0
 80098a4:	460b      	mov	r3, r1
 80098a6:	4620      	mov	r0, r4
 80098a8:	4629      	mov	r1, r5
 80098aa:	f7f6 fd07 	bl	80002bc <__adddf3>
 80098ae:	3601      	adds	r6, #1
 80098b0:	4604      	mov	r4, r0
 80098b2:	460d      	mov	r5, r1
 80098b4:	9b04      	ldr	r3, [sp, #16]
 80098b6:	429e      	cmp	r6, r3
 80098b8:	dc01      	bgt.n	80098be <__kernel_rem_pio2+0x4b6>
 80098ba:	45b0      	cmp	r8, r6
 80098bc:	daeb      	bge.n	8009896 <__kernel_rem_pio2+0x48e>
 80098be:	ab48      	add	r3, sp, #288	; 0x120
 80098c0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80098c4:	e9c3 4500 	strd	r4, r5, [r3]
 80098c8:	3f01      	subs	r7, #1
 80098ca:	f108 0801 	add.w	r8, r8, #1
 80098ce:	e6ff      	b.n	80096d0 <__kernel_rem_pio2+0x2c8>
 80098d0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80098d2:	2b02      	cmp	r3, #2
 80098d4:	dc0b      	bgt.n	80098ee <__kernel_rem_pio2+0x4e6>
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	dc6e      	bgt.n	80099b8 <__kernel_rem_pio2+0x5b0>
 80098da:	d045      	beq.n	8009968 <__kernel_rem_pio2+0x560>
 80098dc:	9b07      	ldr	r3, [sp, #28]
 80098de:	f003 0007 	and.w	r0, r3, #7
 80098e2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80098e6:	ecbd 8b02 	vpop	{d8}
 80098ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ee:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80098f0:	2b03      	cmp	r3, #3
 80098f2:	d1f3      	bne.n	80098dc <__kernel_rem_pio2+0x4d4>
 80098f4:	ab48      	add	r3, sp, #288	; 0x120
 80098f6:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 80098fa:	46d0      	mov	r8, sl
 80098fc:	46d9      	mov	r9, fp
 80098fe:	f1b9 0f00 	cmp.w	r9, #0
 8009902:	f1a8 0808 	sub.w	r8, r8, #8
 8009906:	dc64      	bgt.n	80099d2 <__kernel_rem_pio2+0x5ca>
 8009908:	465c      	mov	r4, fp
 800990a:	2c01      	cmp	r4, #1
 800990c:	f1aa 0a08 	sub.w	sl, sl, #8
 8009910:	dc7e      	bgt.n	8009a10 <__kernel_rem_pio2+0x608>
 8009912:	2000      	movs	r0, #0
 8009914:	2100      	movs	r1, #0
 8009916:	f1bb 0f01 	cmp.w	fp, #1
 800991a:	f300 8097 	bgt.w	8009a4c <__kernel_rem_pio2+0x644>
 800991e:	9b02      	ldr	r3, [sp, #8]
 8009920:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8009924:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8009928:	2b00      	cmp	r3, #0
 800992a:	f040 8099 	bne.w	8009a60 <__kernel_rem_pio2+0x658>
 800992e:	9b01      	ldr	r3, [sp, #4]
 8009930:	e9c3 5600 	strd	r5, r6, [r3]
 8009934:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8009938:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800993c:	e7ce      	b.n	80098dc <__kernel_rem_pio2+0x4d4>
 800993e:	ab48      	add	r3, sp, #288	; 0x120
 8009940:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009948:	f7f6 fcb8 	bl	80002bc <__adddf3>
 800994c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009950:	f1bb 0f00 	cmp.w	fp, #0
 8009954:	daf3      	bge.n	800993e <__kernel_rem_pio2+0x536>
 8009956:	9b02      	ldr	r3, [sp, #8]
 8009958:	b113      	cbz	r3, 8009960 <__kernel_rem_pio2+0x558>
 800995a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800995e:	4619      	mov	r1, r3
 8009960:	9b01      	ldr	r3, [sp, #4]
 8009962:	e9c3 0100 	strd	r0, r1, [r3]
 8009966:	e7b9      	b.n	80098dc <__kernel_rem_pio2+0x4d4>
 8009968:	2000      	movs	r0, #0
 800996a:	2100      	movs	r1, #0
 800996c:	e7f0      	b.n	8009950 <__kernel_rem_pio2+0x548>
 800996e:	ab48      	add	r3, sp, #288	; 0x120
 8009970:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009978:	f7f6 fca0 	bl	80002bc <__adddf3>
 800997c:	3c01      	subs	r4, #1
 800997e:	2c00      	cmp	r4, #0
 8009980:	daf5      	bge.n	800996e <__kernel_rem_pio2+0x566>
 8009982:	9b02      	ldr	r3, [sp, #8]
 8009984:	b1e3      	cbz	r3, 80099c0 <__kernel_rem_pio2+0x5b8>
 8009986:	4602      	mov	r2, r0
 8009988:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800998c:	9c01      	ldr	r4, [sp, #4]
 800998e:	e9c4 2300 	strd	r2, r3, [r4]
 8009992:	4602      	mov	r2, r0
 8009994:	460b      	mov	r3, r1
 8009996:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800999a:	f7f6 fc8d 	bl	80002b8 <__aeabi_dsub>
 800999e:	ad4a      	add	r5, sp, #296	; 0x128
 80099a0:	2401      	movs	r4, #1
 80099a2:	45a3      	cmp	fp, r4
 80099a4:	da0f      	bge.n	80099c6 <__kernel_rem_pio2+0x5be>
 80099a6:	9b02      	ldr	r3, [sp, #8]
 80099a8:	b113      	cbz	r3, 80099b0 <__kernel_rem_pio2+0x5a8>
 80099aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80099ae:	4619      	mov	r1, r3
 80099b0:	9b01      	ldr	r3, [sp, #4]
 80099b2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80099b6:	e791      	b.n	80098dc <__kernel_rem_pio2+0x4d4>
 80099b8:	465c      	mov	r4, fp
 80099ba:	2000      	movs	r0, #0
 80099bc:	2100      	movs	r1, #0
 80099be:	e7de      	b.n	800997e <__kernel_rem_pio2+0x576>
 80099c0:	4602      	mov	r2, r0
 80099c2:	460b      	mov	r3, r1
 80099c4:	e7e2      	b.n	800998c <__kernel_rem_pio2+0x584>
 80099c6:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80099ca:	f7f6 fc77 	bl	80002bc <__adddf3>
 80099ce:	3401      	adds	r4, #1
 80099d0:	e7e7      	b.n	80099a2 <__kernel_rem_pio2+0x59a>
 80099d2:	e9d8 4500 	ldrd	r4, r5, [r8]
 80099d6:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 80099da:	4620      	mov	r0, r4
 80099dc:	4632      	mov	r2, r6
 80099de:	463b      	mov	r3, r7
 80099e0:	4629      	mov	r1, r5
 80099e2:	f7f6 fc6b 	bl	80002bc <__adddf3>
 80099e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80099ea:	4602      	mov	r2, r0
 80099ec:	460b      	mov	r3, r1
 80099ee:	4620      	mov	r0, r4
 80099f0:	4629      	mov	r1, r5
 80099f2:	f7f6 fc61 	bl	80002b8 <__aeabi_dsub>
 80099f6:	4632      	mov	r2, r6
 80099f8:	463b      	mov	r3, r7
 80099fa:	f7f6 fc5f 	bl	80002bc <__adddf3>
 80099fe:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009a02:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8009a06:	ed88 7b00 	vstr	d7, [r8]
 8009a0a:	f109 39ff 	add.w	r9, r9, #4294967295
 8009a0e:	e776      	b.n	80098fe <__kernel_rem_pio2+0x4f6>
 8009a10:	e9da 8900 	ldrd	r8, r9, [sl]
 8009a14:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8009a18:	4640      	mov	r0, r8
 8009a1a:	4632      	mov	r2, r6
 8009a1c:	463b      	mov	r3, r7
 8009a1e:	4649      	mov	r1, r9
 8009a20:	f7f6 fc4c 	bl	80002bc <__adddf3>
 8009a24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a28:	4602      	mov	r2, r0
 8009a2a:	460b      	mov	r3, r1
 8009a2c:	4640      	mov	r0, r8
 8009a2e:	4649      	mov	r1, r9
 8009a30:	f7f6 fc42 	bl	80002b8 <__aeabi_dsub>
 8009a34:	4632      	mov	r2, r6
 8009a36:	463b      	mov	r3, r7
 8009a38:	f7f6 fc40 	bl	80002bc <__adddf3>
 8009a3c:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009a40:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009a44:	ed8a 7b00 	vstr	d7, [sl]
 8009a48:	3c01      	subs	r4, #1
 8009a4a:	e75e      	b.n	800990a <__kernel_rem_pio2+0x502>
 8009a4c:	ab48      	add	r3, sp, #288	; 0x120
 8009a4e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a56:	f7f6 fc31 	bl	80002bc <__adddf3>
 8009a5a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009a5e:	e75a      	b.n	8009916 <__kernel_rem_pio2+0x50e>
 8009a60:	9b01      	ldr	r3, [sp, #4]
 8009a62:	9a01      	ldr	r2, [sp, #4]
 8009a64:	601d      	str	r5, [r3, #0]
 8009a66:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8009a6a:	605c      	str	r4, [r3, #4]
 8009a6c:	609f      	str	r7, [r3, #8]
 8009a6e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8009a72:	60d3      	str	r3, [r2, #12]
 8009a74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009a78:	6110      	str	r0, [r2, #16]
 8009a7a:	6153      	str	r3, [r2, #20]
 8009a7c:	e72e      	b.n	80098dc <__kernel_rem_pio2+0x4d4>
 8009a7e:	bf00      	nop
 8009a80:	41700000 	.word	0x41700000
 8009a84:	3e700000 	.word	0x3e700000

08009a88 <__kernel_tan>:
 8009a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a8c:	ed2d 8b04 	vpush	{d8-d9}
 8009a90:	ec5b ab10 	vmov	sl, fp, d0
 8009a94:	4be2      	ldr	r3, [pc, #904]	; (8009e20 <__kernel_tan+0x398>)
 8009a96:	b085      	sub	sp, #20
 8009a98:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8009a9c:	429f      	cmp	r7, r3
 8009a9e:	ed8d 1b00 	vstr	d1, [sp]
 8009aa2:	4606      	mov	r6, r0
 8009aa4:	f8cd b00c 	str.w	fp, [sp, #12]
 8009aa8:	dc24      	bgt.n	8009af4 <__kernel_tan+0x6c>
 8009aaa:	ee10 0a10 	vmov	r0, s0
 8009aae:	4659      	mov	r1, fp
 8009ab0:	f7f7 f854 	bl	8000b5c <__aeabi_d2iz>
 8009ab4:	2800      	cmp	r0, #0
 8009ab6:	d148      	bne.n	8009b4a <__kernel_tan+0xc2>
 8009ab8:	1c73      	adds	r3, r6, #1
 8009aba:	4652      	mov	r2, sl
 8009abc:	4313      	orrs	r3, r2
 8009abe:	433b      	orrs	r3, r7
 8009ac0:	d112      	bne.n	8009ae8 <__kernel_tan+0x60>
 8009ac2:	ec4b ab10 	vmov	d0, sl, fp
 8009ac6:	f000 f9b3 	bl	8009e30 <fabs>
 8009aca:	49d6      	ldr	r1, [pc, #856]	; (8009e24 <__kernel_tan+0x39c>)
 8009acc:	ec53 2b10 	vmov	r2, r3, d0
 8009ad0:	2000      	movs	r0, #0
 8009ad2:	f7f6 fed3 	bl	800087c <__aeabi_ddiv>
 8009ad6:	4682      	mov	sl, r0
 8009ad8:	468b      	mov	fp, r1
 8009ada:	ec4b ab10 	vmov	d0, sl, fp
 8009ade:	b005      	add	sp, #20
 8009ae0:	ecbd 8b04 	vpop	{d8-d9}
 8009ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ae8:	2e01      	cmp	r6, #1
 8009aea:	d0f6      	beq.n	8009ada <__kernel_tan+0x52>
 8009aec:	49ce      	ldr	r1, [pc, #824]	; (8009e28 <__kernel_tan+0x3a0>)
 8009aee:	465b      	mov	r3, fp
 8009af0:	2000      	movs	r0, #0
 8009af2:	e7ee      	b.n	8009ad2 <__kernel_tan+0x4a>
 8009af4:	4bcd      	ldr	r3, [pc, #820]	; (8009e2c <__kernel_tan+0x3a4>)
 8009af6:	429f      	cmp	r7, r3
 8009af8:	dd27      	ble.n	8009b4a <__kernel_tan+0xc2>
 8009afa:	9b03      	ldr	r3, [sp, #12]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	da0a      	bge.n	8009b16 <__kernel_tan+0x8e>
 8009b00:	e9dd 2100 	ldrd	r2, r1, [sp]
 8009b04:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009b08:	469b      	mov	fp, r3
 8009b0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009b0e:	e9cd 2300 	strd	r2, r3, [sp]
 8009b12:	ee10 aa10 	vmov	sl, s0
 8009b16:	4652      	mov	r2, sl
 8009b18:	465b      	mov	r3, fp
 8009b1a:	a1a1      	add	r1, pc, #644	; (adr r1, 8009da0 <__kernel_tan+0x318>)
 8009b1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b20:	f7f6 fbca 	bl	80002b8 <__aeabi_dsub>
 8009b24:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b28:	4604      	mov	r4, r0
 8009b2a:	460d      	mov	r5, r1
 8009b2c:	a19e      	add	r1, pc, #632	; (adr r1, 8009da8 <__kernel_tan+0x320>)
 8009b2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b32:	f7f6 fbc1 	bl	80002b8 <__aeabi_dsub>
 8009b36:	4622      	mov	r2, r4
 8009b38:	462b      	mov	r3, r5
 8009b3a:	f7f6 fbbf 	bl	80002bc <__adddf3>
 8009b3e:	ed9f 7b9c 	vldr	d7, [pc, #624]	; 8009db0 <__kernel_tan+0x328>
 8009b42:	ed8d 7b00 	vstr	d7, [sp]
 8009b46:	4682      	mov	sl, r0
 8009b48:	468b      	mov	fp, r1
 8009b4a:	4652      	mov	r2, sl
 8009b4c:	465b      	mov	r3, fp
 8009b4e:	4650      	mov	r0, sl
 8009b50:	4659      	mov	r1, fp
 8009b52:	f7f6 fd69 	bl	8000628 <__aeabi_dmul>
 8009b56:	4602      	mov	r2, r0
 8009b58:	460b      	mov	r3, r1
 8009b5a:	4680      	mov	r8, r0
 8009b5c:	4689      	mov	r9, r1
 8009b5e:	f7f6 fd63 	bl	8000628 <__aeabi_dmul>
 8009b62:	4642      	mov	r2, r8
 8009b64:	4604      	mov	r4, r0
 8009b66:	460d      	mov	r5, r1
 8009b68:	464b      	mov	r3, r9
 8009b6a:	4650      	mov	r0, sl
 8009b6c:	4659      	mov	r1, fp
 8009b6e:	f7f6 fd5b 	bl	8000628 <__aeabi_dmul>
 8009b72:	a391      	add	r3, pc, #580	; (adr r3, 8009db8 <__kernel_tan+0x330>)
 8009b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b78:	ec41 0b18 	vmov	d8, r0, r1
 8009b7c:	4620      	mov	r0, r4
 8009b7e:	4629      	mov	r1, r5
 8009b80:	f7f6 fd52 	bl	8000628 <__aeabi_dmul>
 8009b84:	a38e      	add	r3, pc, #568	; (adr r3, 8009dc0 <__kernel_tan+0x338>)
 8009b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b8a:	f7f6 fb97 	bl	80002bc <__adddf3>
 8009b8e:	4622      	mov	r2, r4
 8009b90:	462b      	mov	r3, r5
 8009b92:	f7f6 fd49 	bl	8000628 <__aeabi_dmul>
 8009b96:	a38c      	add	r3, pc, #560	; (adr r3, 8009dc8 <__kernel_tan+0x340>)
 8009b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b9c:	f7f6 fb8e 	bl	80002bc <__adddf3>
 8009ba0:	4622      	mov	r2, r4
 8009ba2:	462b      	mov	r3, r5
 8009ba4:	f7f6 fd40 	bl	8000628 <__aeabi_dmul>
 8009ba8:	a389      	add	r3, pc, #548	; (adr r3, 8009dd0 <__kernel_tan+0x348>)
 8009baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bae:	f7f6 fb85 	bl	80002bc <__adddf3>
 8009bb2:	4622      	mov	r2, r4
 8009bb4:	462b      	mov	r3, r5
 8009bb6:	f7f6 fd37 	bl	8000628 <__aeabi_dmul>
 8009bba:	a387      	add	r3, pc, #540	; (adr r3, 8009dd8 <__kernel_tan+0x350>)
 8009bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc0:	f7f6 fb7c 	bl	80002bc <__adddf3>
 8009bc4:	4622      	mov	r2, r4
 8009bc6:	462b      	mov	r3, r5
 8009bc8:	f7f6 fd2e 	bl	8000628 <__aeabi_dmul>
 8009bcc:	a384      	add	r3, pc, #528	; (adr r3, 8009de0 <__kernel_tan+0x358>)
 8009bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd2:	f7f6 fb73 	bl	80002bc <__adddf3>
 8009bd6:	4642      	mov	r2, r8
 8009bd8:	464b      	mov	r3, r9
 8009bda:	f7f6 fd25 	bl	8000628 <__aeabi_dmul>
 8009bde:	a382      	add	r3, pc, #520	; (adr r3, 8009de8 <__kernel_tan+0x360>)
 8009be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be4:	ec41 0b19 	vmov	d9, r0, r1
 8009be8:	4620      	mov	r0, r4
 8009bea:	4629      	mov	r1, r5
 8009bec:	f7f6 fd1c 	bl	8000628 <__aeabi_dmul>
 8009bf0:	a37f      	add	r3, pc, #508	; (adr r3, 8009df0 <__kernel_tan+0x368>)
 8009bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf6:	f7f6 fb61 	bl	80002bc <__adddf3>
 8009bfa:	4622      	mov	r2, r4
 8009bfc:	462b      	mov	r3, r5
 8009bfe:	f7f6 fd13 	bl	8000628 <__aeabi_dmul>
 8009c02:	a37d      	add	r3, pc, #500	; (adr r3, 8009df8 <__kernel_tan+0x370>)
 8009c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c08:	f7f6 fb58 	bl	80002bc <__adddf3>
 8009c0c:	4622      	mov	r2, r4
 8009c0e:	462b      	mov	r3, r5
 8009c10:	f7f6 fd0a 	bl	8000628 <__aeabi_dmul>
 8009c14:	a37a      	add	r3, pc, #488	; (adr r3, 8009e00 <__kernel_tan+0x378>)
 8009c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c1a:	f7f6 fb4f 	bl	80002bc <__adddf3>
 8009c1e:	4622      	mov	r2, r4
 8009c20:	462b      	mov	r3, r5
 8009c22:	f7f6 fd01 	bl	8000628 <__aeabi_dmul>
 8009c26:	a378      	add	r3, pc, #480	; (adr r3, 8009e08 <__kernel_tan+0x380>)
 8009c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c2c:	f7f6 fb46 	bl	80002bc <__adddf3>
 8009c30:	4622      	mov	r2, r4
 8009c32:	462b      	mov	r3, r5
 8009c34:	f7f6 fcf8 	bl	8000628 <__aeabi_dmul>
 8009c38:	a375      	add	r3, pc, #468	; (adr r3, 8009e10 <__kernel_tan+0x388>)
 8009c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c3e:	f7f6 fb3d 	bl	80002bc <__adddf3>
 8009c42:	4602      	mov	r2, r0
 8009c44:	460b      	mov	r3, r1
 8009c46:	ec51 0b19 	vmov	r0, r1, d9
 8009c4a:	f7f6 fb37 	bl	80002bc <__adddf3>
 8009c4e:	ec53 2b18 	vmov	r2, r3, d8
 8009c52:	f7f6 fce9 	bl	8000628 <__aeabi_dmul>
 8009c56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c5a:	f7f6 fb2f 	bl	80002bc <__adddf3>
 8009c5e:	4642      	mov	r2, r8
 8009c60:	464b      	mov	r3, r9
 8009c62:	f7f6 fce1 	bl	8000628 <__aeabi_dmul>
 8009c66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c6a:	f7f6 fb27 	bl	80002bc <__adddf3>
 8009c6e:	a36a      	add	r3, pc, #424	; (adr r3, 8009e18 <__kernel_tan+0x390>)
 8009c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c74:	4604      	mov	r4, r0
 8009c76:	460d      	mov	r5, r1
 8009c78:	ec51 0b18 	vmov	r0, r1, d8
 8009c7c:	f7f6 fcd4 	bl	8000628 <__aeabi_dmul>
 8009c80:	4622      	mov	r2, r4
 8009c82:	462b      	mov	r3, r5
 8009c84:	f7f6 fb1a 	bl	80002bc <__adddf3>
 8009c88:	460b      	mov	r3, r1
 8009c8a:	ec41 0b18 	vmov	d8, r0, r1
 8009c8e:	4602      	mov	r2, r0
 8009c90:	4659      	mov	r1, fp
 8009c92:	4650      	mov	r0, sl
 8009c94:	f7f6 fb12 	bl	80002bc <__adddf3>
 8009c98:	4b64      	ldr	r3, [pc, #400]	; (8009e2c <__kernel_tan+0x3a4>)
 8009c9a:	429f      	cmp	r7, r3
 8009c9c:	4604      	mov	r4, r0
 8009c9e:	460d      	mov	r5, r1
 8009ca0:	dd3e      	ble.n	8009d20 <__kernel_tan+0x298>
 8009ca2:	4630      	mov	r0, r6
 8009ca4:	f7f6 fc56 	bl	8000554 <__aeabi_i2d>
 8009ca8:	4622      	mov	r2, r4
 8009caa:	4680      	mov	r8, r0
 8009cac:	4689      	mov	r9, r1
 8009cae:	462b      	mov	r3, r5
 8009cb0:	4620      	mov	r0, r4
 8009cb2:	4629      	mov	r1, r5
 8009cb4:	f7f6 fcb8 	bl	8000628 <__aeabi_dmul>
 8009cb8:	4642      	mov	r2, r8
 8009cba:	4606      	mov	r6, r0
 8009cbc:	460f      	mov	r7, r1
 8009cbe:	464b      	mov	r3, r9
 8009cc0:	4620      	mov	r0, r4
 8009cc2:	4629      	mov	r1, r5
 8009cc4:	f7f6 fafa 	bl	80002bc <__adddf3>
 8009cc8:	4602      	mov	r2, r0
 8009cca:	460b      	mov	r3, r1
 8009ccc:	4630      	mov	r0, r6
 8009cce:	4639      	mov	r1, r7
 8009cd0:	f7f6 fdd4 	bl	800087c <__aeabi_ddiv>
 8009cd4:	ec53 2b18 	vmov	r2, r3, d8
 8009cd8:	f7f6 faee 	bl	80002b8 <__aeabi_dsub>
 8009cdc:	4602      	mov	r2, r0
 8009cde:	460b      	mov	r3, r1
 8009ce0:	4650      	mov	r0, sl
 8009ce2:	4659      	mov	r1, fp
 8009ce4:	f7f6 fae8 	bl	80002b8 <__aeabi_dsub>
 8009ce8:	4602      	mov	r2, r0
 8009cea:	460b      	mov	r3, r1
 8009cec:	f7f6 fae6 	bl	80002bc <__adddf3>
 8009cf0:	4602      	mov	r2, r0
 8009cf2:	460b      	mov	r3, r1
 8009cf4:	4640      	mov	r0, r8
 8009cf6:	4649      	mov	r1, r9
 8009cf8:	f7f6 fade 	bl	80002b8 <__aeabi_dsub>
 8009cfc:	9b03      	ldr	r3, [sp, #12]
 8009cfe:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 8009d02:	f00a 0a02 	and.w	sl, sl, #2
 8009d06:	4604      	mov	r4, r0
 8009d08:	f1ca 0001 	rsb	r0, sl, #1
 8009d0c:	460d      	mov	r5, r1
 8009d0e:	f7f6 fc21 	bl	8000554 <__aeabi_i2d>
 8009d12:	4602      	mov	r2, r0
 8009d14:	460b      	mov	r3, r1
 8009d16:	4620      	mov	r0, r4
 8009d18:	4629      	mov	r1, r5
 8009d1a:	f7f6 fc85 	bl	8000628 <__aeabi_dmul>
 8009d1e:	e6da      	b.n	8009ad6 <__kernel_tan+0x4e>
 8009d20:	2e01      	cmp	r6, #1
 8009d22:	d038      	beq.n	8009d96 <__kernel_tan+0x30e>
 8009d24:	460f      	mov	r7, r1
 8009d26:	4689      	mov	r9, r1
 8009d28:	4602      	mov	r2, r0
 8009d2a:	460b      	mov	r3, r1
 8009d2c:	2000      	movs	r0, #0
 8009d2e:	493e      	ldr	r1, [pc, #248]	; (8009e28 <__kernel_tan+0x3a0>)
 8009d30:	f7f6 fda4 	bl	800087c <__aeabi_ddiv>
 8009d34:	2600      	movs	r6, #0
 8009d36:	e9cd 0100 	strd	r0, r1, [sp]
 8009d3a:	4652      	mov	r2, sl
 8009d3c:	465b      	mov	r3, fp
 8009d3e:	4630      	mov	r0, r6
 8009d40:	4639      	mov	r1, r7
 8009d42:	f7f6 fab9 	bl	80002b8 <__aeabi_dsub>
 8009d46:	e9dd 4500 	ldrd	r4, r5, [sp]
 8009d4a:	4602      	mov	r2, r0
 8009d4c:	460b      	mov	r3, r1
 8009d4e:	ec51 0b18 	vmov	r0, r1, d8
 8009d52:	f7f6 fab1 	bl	80002b8 <__aeabi_dsub>
 8009d56:	4632      	mov	r2, r6
 8009d58:	462b      	mov	r3, r5
 8009d5a:	f7f6 fc65 	bl	8000628 <__aeabi_dmul>
 8009d5e:	46b0      	mov	r8, r6
 8009d60:	460f      	mov	r7, r1
 8009d62:	4606      	mov	r6, r0
 8009d64:	4642      	mov	r2, r8
 8009d66:	462b      	mov	r3, r5
 8009d68:	4640      	mov	r0, r8
 8009d6a:	4649      	mov	r1, r9
 8009d6c:	f7f6 fc5c 	bl	8000628 <__aeabi_dmul>
 8009d70:	4b2c      	ldr	r3, [pc, #176]	; (8009e24 <__kernel_tan+0x39c>)
 8009d72:	2200      	movs	r2, #0
 8009d74:	f7f6 faa2 	bl	80002bc <__adddf3>
 8009d78:	4602      	mov	r2, r0
 8009d7a:	460b      	mov	r3, r1
 8009d7c:	4630      	mov	r0, r6
 8009d7e:	4639      	mov	r1, r7
 8009d80:	f7f6 fa9c 	bl	80002bc <__adddf3>
 8009d84:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d88:	f7f6 fc4e 	bl	8000628 <__aeabi_dmul>
 8009d8c:	4642      	mov	r2, r8
 8009d8e:	462b      	mov	r3, r5
 8009d90:	f7f6 fa94 	bl	80002bc <__adddf3>
 8009d94:	e69f      	b.n	8009ad6 <__kernel_tan+0x4e>
 8009d96:	4682      	mov	sl, r0
 8009d98:	468b      	mov	fp, r1
 8009d9a:	e69e      	b.n	8009ada <__kernel_tan+0x52>
 8009d9c:	f3af 8000 	nop.w
 8009da0:	54442d18 	.word	0x54442d18
 8009da4:	3fe921fb 	.word	0x3fe921fb
 8009da8:	33145c07 	.word	0x33145c07
 8009dac:	3c81a626 	.word	0x3c81a626
	...
 8009db8:	74bf7ad4 	.word	0x74bf7ad4
 8009dbc:	3efb2a70 	.word	0x3efb2a70
 8009dc0:	32f0a7e9 	.word	0x32f0a7e9
 8009dc4:	3f12b80f 	.word	0x3f12b80f
 8009dc8:	1a8d1068 	.word	0x1a8d1068
 8009dcc:	3f3026f7 	.word	0x3f3026f7
 8009dd0:	fee08315 	.word	0xfee08315
 8009dd4:	3f57dbc8 	.word	0x3f57dbc8
 8009dd8:	e96e8493 	.word	0xe96e8493
 8009ddc:	3f8226e3 	.word	0x3f8226e3
 8009de0:	1bb341fe 	.word	0x1bb341fe
 8009de4:	3faba1ba 	.word	0x3faba1ba
 8009de8:	db605373 	.word	0xdb605373
 8009dec:	bef375cb 	.word	0xbef375cb
 8009df0:	a03792a6 	.word	0xa03792a6
 8009df4:	3f147e88 	.word	0x3f147e88
 8009df8:	f2f26501 	.word	0xf2f26501
 8009dfc:	3f4344d8 	.word	0x3f4344d8
 8009e00:	c9560328 	.word	0xc9560328
 8009e04:	3f6d6d22 	.word	0x3f6d6d22
 8009e08:	8406d637 	.word	0x8406d637
 8009e0c:	3f9664f4 	.word	0x3f9664f4
 8009e10:	1110fe7a 	.word	0x1110fe7a
 8009e14:	3fc11111 	.word	0x3fc11111
 8009e18:	55555563 	.word	0x55555563
 8009e1c:	3fd55555 	.word	0x3fd55555
 8009e20:	3e2fffff 	.word	0x3e2fffff
 8009e24:	3ff00000 	.word	0x3ff00000
 8009e28:	bff00000 	.word	0xbff00000
 8009e2c:	3fe59427 	.word	0x3fe59427

08009e30 <fabs>:
 8009e30:	ec51 0b10 	vmov	r0, r1, d0
 8009e34:	ee10 2a10 	vmov	r2, s0
 8009e38:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009e3c:	ec43 2b10 	vmov	d0, r2, r3
 8009e40:	4770      	bx	lr
 8009e42:	0000      	movs	r0, r0
 8009e44:	0000      	movs	r0, r0
	...

08009e48 <floor>:
 8009e48:	ec51 0b10 	vmov	r0, r1, d0
 8009e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e50:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8009e54:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009e58:	2e13      	cmp	r6, #19
 8009e5a:	ee10 5a10 	vmov	r5, s0
 8009e5e:	ee10 8a10 	vmov	r8, s0
 8009e62:	460c      	mov	r4, r1
 8009e64:	dc32      	bgt.n	8009ecc <floor+0x84>
 8009e66:	2e00      	cmp	r6, #0
 8009e68:	da14      	bge.n	8009e94 <floor+0x4c>
 8009e6a:	a333      	add	r3, pc, #204	; (adr r3, 8009f38 <floor+0xf0>)
 8009e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e70:	f7f6 fa24 	bl	80002bc <__adddf3>
 8009e74:	2200      	movs	r2, #0
 8009e76:	2300      	movs	r3, #0
 8009e78:	f7f6 fe66 	bl	8000b48 <__aeabi_dcmpgt>
 8009e7c:	b138      	cbz	r0, 8009e8e <floor+0x46>
 8009e7e:	2c00      	cmp	r4, #0
 8009e80:	da57      	bge.n	8009f32 <floor+0xea>
 8009e82:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8009e86:	431d      	orrs	r5, r3
 8009e88:	d001      	beq.n	8009e8e <floor+0x46>
 8009e8a:	4c2d      	ldr	r4, [pc, #180]	; (8009f40 <floor+0xf8>)
 8009e8c:	2500      	movs	r5, #0
 8009e8e:	4621      	mov	r1, r4
 8009e90:	4628      	mov	r0, r5
 8009e92:	e025      	b.n	8009ee0 <floor+0x98>
 8009e94:	4f2b      	ldr	r7, [pc, #172]	; (8009f44 <floor+0xfc>)
 8009e96:	4137      	asrs	r7, r6
 8009e98:	ea01 0307 	and.w	r3, r1, r7
 8009e9c:	4303      	orrs	r3, r0
 8009e9e:	d01f      	beq.n	8009ee0 <floor+0x98>
 8009ea0:	a325      	add	r3, pc, #148	; (adr r3, 8009f38 <floor+0xf0>)
 8009ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea6:	f7f6 fa09 	bl	80002bc <__adddf3>
 8009eaa:	2200      	movs	r2, #0
 8009eac:	2300      	movs	r3, #0
 8009eae:	f7f6 fe4b 	bl	8000b48 <__aeabi_dcmpgt>
 8009eb2:	2800      	cmp	r0, #0
 8009eb4:	d0eb      	beq.n	8009e8e <floor+0x46>
 8009eb6:	2c00      	cmp	r4, #0
 8009eb8:	bfbe      	ittt	lt
 8009eba:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009ebe:	fa43 f606 	asrlt.w	r6, r3, r6
 8009ec2:	19a4      	addlt	r4, r4, r6
 8009ec4:	ea24 0407 	bic.w	r4, r4, r7
 8009ec8:	2500      	movs	r5, #0
 8009eca:	e7e0      	b.n	8009e8e <floor+0x46>
 8009ecc:	2e33      	cmp	r6, #51	; 0x33
 8009ece:	dd0b      	ble.n	8009ee8 <floor+0xa0>
 8009ed0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009ed4:	d104      	bne.n	8009ee0 <floor+0x98>
 8009ed6:	ee10 2a10 	vmov	r2, s0
 8009eda:	460b      	mov	r3, r1
 8009edc:	f7f6 f9ee 	bl	80002bc <__adddf3>
 8009ee0:	ec41 0b10 	vmov	d0, r0, r1
 8009ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ee8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8009eec:	f04f 33ff 	mov.w	r3, #4294967295
 8009ef0:	fa23 f707 	lsr.w	r7, r3, r7
 8009ef4:	4207      	tst	r7, r0
 8009ef6:	d0f3      	beq.n	8009ee0 <floor+0x98>
 8009ef8:	a30f      	add	r3, pc, #60	; (adr r3, 8009f38 <floor+0xf0>)
 8009efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009efe:	f7f6 f9dd 	bl	80002bc <__adddf3>
 8009f02:	2200      	movs	r2, #0
 8009f04:	2300      	movs	r3, #0
 8009f06:	f7f6 fe1f 	bl	8000b48 <__aeabi_dcmpgt>
 8009f0a:	2800      	cmp	r0, #0
 8009f0c:	d0bf      	beq.n	8009e8e <floor+0x46>
 8009f0e:	2c00      	cmp	r4, #0
 8009f10:	da02      	bge.n	8009f18 <floor+0xd0>
 8009f12:	2e14      	cmp	r6, #20
 8009f14:	d103      	bne.n	8009f1e <floor+0xd6>
 8009f16:	3401      	adds	r4, #1
 8009f18:	ea25 0507 	bic.w	r5, r5, r7
 8009f1c:	e7b7      	b.n	8009e8e <floor+0x46>
 8009f1e:	2301      	movs	r3, #1
 8009f20:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009f24:	fa03 f606 	lsl.w	r6, r3, r6
 8009f28:	4435      	add	r5, r6
 8009f2a:	4545      	cmp	r5, r8
 8009f2c:	bf38      	it	cc
 8009f2e:	18e4      	addcc	r4, r4, r3
 8009f30:	e7f2      	b.n	8009f18 <floor+0xd0>
 8009f32:	2500      	movs	r5, #0
 8009f34:	462c      	mov	r4, r5
 8009f36:	e7aa      	b.n	8009e8e <floor+0x46>
 8009f38:	8800759c 	.word	0x8800759c
 8009f3c:	7e37e43c 	.word	0x7e37e43c
 8009f40:	bff00000 	.word	0xbff00000
 8009f44:	000fffff 	.word	0x000fffff

08009f48 <scalbn>:
 8009f48:	b570      	push	{r4, r5, r6, lr}
 8009f4a:	ec55 4b10 	vmov	r4, r5, d0
 8009f4e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8009f52:	4606      	mov	r6, r0
 8009f54:	462b      	mov	r3, r5
 8009f56:	b99a      	cbnz	r2, 8009f80 <scalbn+0x38>
 8009f58:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009f5c:	4323      	orrs	r3, r4
 8009f5e:	d036      	beq.n	8009fce <scalbn+0x86>
 8009f60:	4b39      	ldr	r3, [pc, #228]	; (800a048 <scalbn+0x100>)
 8009f62:	4629      	mov	r1, r5
 8009f64:	ee10 0a10 	vmov	r0, s0
 8009f68:	2200      	movs	r2, #0
 8009f6a:	f7f6 fb5d 	bl	8000628 <__aeabi_dmul>
 8009f6e:	4b37      	ldr	r3, [pc, #220]	; (800a04c <scalbn+0x104>)
 8009f70:	429e      	cmp	r6, r3
 8009f72:	4604      	mov	r4, r0
 8009f74:	460d      	mov	r5, r1
 8009f76:	da10      	bge.n	8009f9a <scalbn+0x52>
 8009f78:	a32b      	add	r3, pc, #172	; (adr r3, 800a028 <scalbn+0xe0>)
 8009f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f7e:	e03a      	b.n	8009ff6 <scalbn+0xae>
 8009f80:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009f84:	428a      	cmp	r2, r1
 8009f86:	d10c      	bne.n	8009fa2 <scalbn+0x5a>
 8009f88:	ee10 2a10 	vmov	r2, s0
 8009f8c:	4620      	mov	r0, r4
 8009f8e:	4629      	mov	r1, r5
 8009f90:	f7f6 f994 	bl	80002bc <__adddf3>
 8009f94:	4604      	mov	r4, r0
 8009f96:	460d      	mov	r5, r1
 8009f98:	e019      	b.n	8009fce <scalbn+0x86>
 8009f9a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009f9e:	460b      	mov	r3, r1
 8009fa0:	3a36      	subs	r2, #54	; 0x36
 8009fa2:	4432      	add	r2, r6
 8009fa4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009fa8:	428a      	cmp	r2, r1
 8009faa:	dd08      	ble.n	8009fbe <scalbn+0x76>
 8009fac:	2d00      	cmp	r5, #0
 8009fae:	a120      	add	r1, pc, #128	; (adr r1, 800a030 <scalbn+0xe8>)
 8009fb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fb4:	da1c      	bge.n	8009ff0 <scalbn+0xa8>
 8009fb6:	a120      	add	r1, pc, #128	; (adr r1, 800a038 <scalbn+0xf0>)
 8009fb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fbc:	e018      	b.n	8009ff0 <scalbn+0xa8>
 8009fbe:	2a00      	cmp	r2, #0
 8009fc0:	dd08      	ble.n	8009fd4 <scalbn+0x8c>
 8009fc2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009fc6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009fca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009fce:	ec45 4b10 	vmov	d0, r4, r5
 8009fd2:	bd70      	pop	{r4, r5, r6, pc}
 8009fd4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009fd8:	da19      	bge.n	800a00e <scalbn+0xc6>
 8009fda:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009fde:	429e      	cmp	r6, r3
 8009fe0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8009fe4:	dd0a      	ble.n	8009ffc <scalbn+0xb4>
 8009fe6:	a112      	add	r1, pc, #72	; (adr r1, 800a030 <scalbn+0xe8>)
 8009fe8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d1e2      	bne.n	8009fb6 <scalbn+0x6e>
 8009ff0:	a30f      	add	r3, pc, #60	; (adr r3, 800a030 <scalbn+0xe8>)
 8009ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff6:	f7f6 fb17 	bl	8000628 <__aeabi_dmul>
 8009ffa:	e7cb      	b.n	8009f94 <scalbn+0x4c>
 8009ffc:	a10a      	add	r1, pc, #40	; (adr r1, 800a028 <scalbn+0xe0>)
 8009ffe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d0b8      	beq.n	8009f78 <scalbn+0x30>
 800a006:	a10e      	add	r1, pc, #56	; (adr r1, 800a040 <scalbn+0xf8>)
 800a008:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a00c:	e7b4      	b.n	8009f78 <scalbn+0x30>
 800a00e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a012:	3236      	adds	r2, #54	; 0x36
 800a014:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a018:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a01c:	4620      	mov	r0, r4
 800a01e:	4b0c      	ldr	r3, [pc, #48]	; (800a050 <scalbn+0x108>)
 800a020:	2200      	movs	r2, #0
 800a022:	e7e8      	b.n	8009ff6 <scalbn+0xae>
 800a024:	f3af 8000 	nop.w
 800a028:	c2f8f359 	.word	0xc2f8f359
 800a02c:	01a56e1f 	.word	0x01a56e1f
 800a030:	8800759c 	.word	0x8800759c
 800a034:	7e37e43c 	.word	0x7e37e43c
 800a038:	8800759c 	.word	0x8800759c
 800a03c:	fe37e43c 	.word	0xfe37e43c
 800a040:	c2f8f359 	.word	0xc2f8f359
 800a044:	81a56e1f 	.word	0x81a56e1f
 800a048:	43500000 	.word	0x43500000
 800a04c:	ffff3cb0 	.word	0xffff3cb0
 800a050:	3c900000 	.word	0x3c900000

0800a054 <_init>:
 800a054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a056:	bf00      	nop
 800a058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a05a:	bc08      	pop	{r3}
 800a05c:	469e      	mov	lr, r3
 800a05e:	4770      	bx	lr

0800a060 <_fini>:
 800a060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a062:	bf00      	nop
 800a064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a066:	bc08      	pop	{r3}
 800a068:	469e      	mov	lr, r3
 800a06a:	4770      	bx	lr
