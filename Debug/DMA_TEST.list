
DMA_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058ac  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08005a48  08005a48  00015a48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c40  08005c40  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005c40  08005c40  00015c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c48  08005c48  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c48  08005c48  00015c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c4c  08005c4c  00015c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005c50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  2000000c  08005c5c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  08005c5c  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dff8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bc5  00000000  00000000  0002e034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c40  00000000  00000000  0002fc00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ba8  00000000  00000000  00030840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016158  00000000  00000000  000313e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eb10  00000000  00000000  00047540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dd91  00000000  00000000  00056050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e3de1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037bc  00000000  00000000  000e3e34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005a2c 	.word	0x08005a2c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08005a2c 	.word	0x08005a2c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2uiz>:
 8000ad4:	004a      	lsls	r2, r1, #1
 8000ad6:	d211      	bcs.n	8000afc <__aeabi_d2uiz+0x28>
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000adc:	d211      	bcs.n	8000b02 <__aeabi_d2uiz+0x2e>
 8000ade:	d50d      	bpl.n	8000afc <__aeabi_d2uiz+0x28>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d40e      	bmi.n	8000b08 <__aeabi_d2uiz+0x34>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	fa23 f002 	lsr.w	r0, r3, r2
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d102      	bne.n	8000b0e <__aeabi_d2uiz+0x3a>
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	4770      	bx	lr
 8000b0e:	f04f 0000 	mov.w	r0, #0
 8000b12:	4770      	bx	lr

08000b14 <__aeabi_d2f>:
 8000b14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b1c:	bf24      	itt	cs
 8000b1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b26:	d90d      	bls.n	8000b44 <__aeabi_d2f+0x30>
 8000b28:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b34:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b3c:	bf08      	it	eq
 8000b3e:	f020 0001 	biceq.w	r0, r0, #1
 8000b42:	4770      	bx	lr
 8000b44:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b48:	d121      	bne.n	8000b8e <__aeabi_d2f+0x7a>
 8000b4a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b4e:	bfbc      	itt	lt
 8000b50:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b54:	4770      	bxlt	lr
 8000b56:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5e:	f1c2 0218 	rsb	r2, r2, #24
 8000b62:	f1c2 0c20 	rsb	ip, r2, #32
 8000b66:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6e:	bf18      	it	ne
 8000b70:	f040 0001 	orrne.w	r0, r0, #1
 8000b74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b7c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b80:	ea40 000c 	orr.w	r0, r0, ip
 8000b84:	fa23 f302 	lsr.w	r3, r3, r2
 8000b88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b8c:	e7cc      	b.n	8000b28 <__aeabi_d2f+0x14>
 8000b8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b92:	d107      	bne.n	8000ba4 <__aeabi_d2f+0x90>
 8000b94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b98:	bf1e      	ittt	ne
 8000b9a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b9e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ba2:	4770      	bxne	lr
 8000ba4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_uldivmod>:
 8000bb4:	b953      	cbnz	r3, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb6:	b94a      	cbnz	r2, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb8:	2900      	cmp	r1, #0
 8000bba:	bf08      	it	eq
 8000bbc:	2800      	cmpeq	r0, #0
 8000bbe:	bf1c      	itt	ne
 8000bc0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc8:	f000 b96e 	b.w	8000ea8 <__aeabi_idiv0>
 8000bcc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd4:	f000 f806 	bl	8000be4 <__udivmoddi4>
 8000bd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be0:	b004      	add	sp, #16
 8000be2:	4770      	bx	lr

08000be4 <__udivmoddi4>:
 8000be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be8:	9d08      	ldr	r5, [sp, #32]
 8000bea:	4604      	mov	r4, r0
 8000bec:	468c      	mov	ip, r1
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	f040 8083 	bne.w	8000cfa <__udivmoddi4+0x116>
 8000bf4:	428a      	cmp	r2, r1
 8000bf6:	4617      	mov	r7, r2
 8000bf8:	d947      	bls.n	8000c8a <__udivmoddi4+0xa6>
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	b142      	cbz	r2, 8000c12 <__udivmoddi4+0x2e>
 8000c00:	f1c2 0020 	rsb	r0, r2, #32
 8000c04:	fa24 f000 	lsr.w	r0, r4, r0
 8000c08:	4091      	lsls	r1, r2
 8000c0a:	4097      	lsls	r7, r2
 8000c0c:	ea40 0c01 	orr.w	ip, r0, r1
 8000c10:	4094      	lsls	r4, r2
 8000c12:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c16:	0c23      	lsrs	r3, r4, #16
 8000c18:	fbbc f6f8 	udiv	r6, ip, r8
 8000c1c:	fa1f fe87 	uxth.w	lr, r7
 8000c20:	fb08 c116 	mls	r1, r8, r6, ip
 8000c24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c28:	fb06 f10e 	mul.w	r1, r6, lr
 8000c2c:	4299      	cmp	r1, r3
 8000c2e:	d909      	bls.n	8000c44 <__udivmoddi4+0x60>
 8000c30:	18fb      	adds	r3, r7, r3
 8000c32:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c36:	f080 8119 	bcs.w	8000e6c <__udivmoddi4+0x288>
 8000c3a:	4299      	cmp	r1, r3
 8000c3c:	f240 8116 	bls.w	8000e6c <__udivmoddi4+0x288>
 8000c40:	3e02      	subs	r6, #2
 8000c42:	443b      	add	r3, r7
 8000c44:	1a5b      	subs	r3, r3, r1
 8000c46:	b2a4      	uxth	r4, r4
 8000c48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c4c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c58:	45a6      	cmp	lr, r4
 8000c5a:	d909      	bls.n	8000c70 <__udivmoddi4+0x8c>
 8000c5c:	193c      	adds	r4, r7, r4
 8000c5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c62:	f080 8105 	bcs.w	8000e70 <__udivmoddi4+0x28c>
 8000c66:	45a6      	cmp	lr, r4
 8000c68:	f240 8102 	bls.w	8000e70 <__udivmoddi4+0x28c>
 8000c6c:	3802      	subs	r0, #2
 8000c6e:	443c      	add	r4, r7
 8000c70:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c74:	eba4 040e 	sub.w	r4, r4, lr
 8000c78:	2600      	movs	r6, #0
 8000c7a:	b11d      	cbz	r5, 8000c84 <__udivmoddi4+0xa0>
 8000c7c:	40d4      	lsrs	r4, r2
 8000c7e:	2300      	movs	r3, #0
 8000c80:	e9c5 4300 	strd	r4, r3, [r5]
 8000c84:	4631      	mov	r1, r6
 8000c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8a:	b902      	cbnz	r2, 8000c8e <__udivmoddi4+0xaa>
 8000c8c:	deff      	udf	#255	; 0xff
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	2a00      	cmp	r2, #0
 8000c94:	d150      	bne.n	8000d38 <__udivmoddi4+0x154>
 8000c96:	1bcb      	subs	r3, r1, r7
 8000c98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c9c:	fa1f f887 	uxth.w	r8, r7
 8000ca0:	2601      	movs	r6, #1
 8000ca2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ca6:	0c21      	lsrs	r1, r4, #16
 8000ca8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb0:	fb08 f30c 	mul.w	r3, r8, ip
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	d907      	bls.n	8000cc8 <__udivmoddi4+0xe4>
 8000cb8:	1879      	adds	r1, r7, r1
 8000cba:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cbe:	d202      	bcs.n	8000cc6 <__udivmoddi4+0xe2>
 8000cc0:	428b      	cmp	r3, r1
 8000cc2:	f200 80e9 	bhi.w	8000e98 <__udivmoddi4+0x2b4>
 8000cc6:	4684      	mov	ip, r0
 8000cc8:	1ac9      	subs	r1, r1, r3
 8000cca:	b2a3      	uxth	r3, r4
 8000ccc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cd4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cd8:	fb08 f800 	mul.w	r8, r8, r0
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	d907      	bls.n	8000cf0 <__udivmoddi4+0x10c>
 8000ce0:	193c      	adds	r4, r7, r4
 8000ce2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce6:	d202      	bcs.n	8000cee <__udivmoddi4+0x10a>
 8000ce8:	45a0      	cmp	r8, r4
 8000cea:	f200 80d9 	bhi.w	8000ea0 <__udivmoddi4+0x2bc>
 8000cee:	4618      	mov	r0, r3
 8000cf0:	eba4 0408 	sub.w	r4, r4, r8
 8000cf4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cf8:	e7bf      	b.n	8000c7a <__udivmoddi4+0x96>
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	d909      	bls.n	8000d12 <__udivmoddi4+0x12e>
 8000cfe:	2d00      	cmp	r5, #0
 8000d00:	f000 80b1 	beq.w	8000e66 <__udivmoddi4+0x282>
 8000d04:	2600      	movs	r6, #0
 8000d06:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0a:	4630      	mov	r0, r6
 8000d0c:	4631      	mov	r1, r6
 8000d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d12:	fab3 f683 	clz	r6, r3
 8000d16:	2e00      	cmp	r6, #0
 8000d18:	d14a      	bne.n	8000db0 <__udivmoddi4+0x1cc>
 8000d1a:	428b      	cmp	r3, r1
 8000d1c:	d302      	bcc.n	8000d24 <__udivmoddi4+0x140>
 8000d1e:	4282      	cmp	r2, r0
 8000d20:	f200 80b8 	bhi.w	8000e94 <__udivmoddi4+0x2b0>
 8000d24:	1a84      	subs	r4, r0, r2
 8000d26:	eb61 0103 	sbc.w	r1, r1, r3
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2d00      	cmp	r5, #0
 8000d30:	d0a8      	beq.n	8000c84 <__udivmoddi4+0xa0>
 8000d32:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0xa0>
 8000d38:	f1c2 0320 	rsb	r3, r2, #32
 8000d3c:	fa20 f603 	lsr.w	r6, r0, r3
 8000d40:	4097      	lsls	r7, r2
 8000d42:	fa01 f002 	lsl.w	r0, r1, r2
 8000d46:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4a:	40d9      	lsrs	r1, r3
 8000d4c:	4330      	orrs	r0, r6
 8000d4e:	0c03      	lsrs	r3, r0, #16
 8000d50:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d54:	fa1f f887 	uxth.w	r8, r7
 8000d58:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d60:	fb06 f108 	mul.w	r1, r6, r8
 8000d64:	4299      	cmp	r1, r3
 8000d66:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6a:	d909      	bls.n	8000d80 <__udivmoddi4+0x19c>
 8000d6c:	18fb      	adds	r3, r7, r3
 8000d6e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d72:	f080 808d 	bcs.w	8000e90 <__udivmoddi4+0x2ac>
 8000d76:	4299      	cmp	r1, r3
 8000d78:	f240 808a 	bls.w	8000e90 <__udivmoddi4+0x2ac>
 8000d7c:	3e02      	subs	r6, #2
 8000d7e:	443b      	add	r3, r7
 8000d80:	1a5b      	subs	r3, r3, r1
 8000d82:	b281      	uxth	r1, r0
 8000d84:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d88:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d8c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d90:	fb00 f308 	mul.w	r3, r0, r8
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d907      	bls.n	8000da8 <__udivmoddi4+0x1c4>
 8000d98:	1879      	adds	r1, r7, r1
 8000d9a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d9e:	d273      	bcs.n	8000e88 <__udivmoddi4+0x2a4>
 8000da0:	428b      	cmp	r3, r1
 8000da2:	d971      	bls.n	8000e88 <__udivmoddi4+0x2a4>
 8000da4:	3802      	subs	r0, #2
 8000da6:	4439      	add	r1, r7
 8000da8:	1acb      	subs	r3, r1, r3
 8000daa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dae:	e778      	b.n	8000ca2 <__udivmoddi4+0xbe>
 8000db0:	f1c6 0c20 	rsb	ip, r6, #32
 8000db4:	fa03 f406 	lsl.w	r4, r3, r6
 8000db8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dbc:	431c      	orrs	r4, r3
 8000dbe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dc2:	fa01 f306 	lsl.w	r3, r1, r6
 8000dc6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dca:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dce:	431f      	orrs	r7, r3
 8000dd0:	0c3b      	lsrs	r3, r7, #16
 8000dd2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dd6:	fa1f f884 	uxth.w	r8, r4
 8000dda:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dde:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de2:	fb09 fa08 	mul.w	sl, r9, r8
 8000de6:	458a      	cmp	sl, r1
 8000de8:	fa02 f206 	lsl.w	r2, r2, r6
 8000dec:	fa00 f306 	lsl.w	r3, r0, r6
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x220>
 8000df2:	1861      	adds	r1, r4, r1
 8000df4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000df8:	d248      	bcs.n	8000e8c <__udivmoddi4+0x2a8>
 8000dfa:	458a      	cmp	sl, r1
 8000dfc:	d946      	bls.n	8000e8c <__udivmoddi4+0x2a8>
 8000dfe:	f1a9 0902 	sub.w	r9, r9, #2
 8000e02:	4421      	add	r1, r4
 8000e04:	eba1 010a 	sub.w	r1, r1, sl
 8000e08:	b2bf      	uxth	r7, r7
 8000e0a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e0e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e12:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e16:	fb00 f808 	mul.w	r8, r0, r8
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x24a>
 8000e1e:	19e7      	adds	r7, r4, r7
 8000e20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e24:	d22e      	bcs.n	8000e84 <__udivmoddi4+0x2a0>
 8000e26:	45b8      	cmp	r8, r7
 8000e28:	d92c      	bls.n	8000e84 <__udivmoddi4+0x2a0>
 8000e2a:	3802      	subs	r0, #2
 8000e2c:	4427      	add	r7, r4
 8000e2e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e32:	eba7 0708 	sub.w	r7, r7, r8
 8000e36:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3a:	454f      	cmp	r7, r9
 8000e3c:	46c6      	mov	lr, r8
 8000e3e:	4649      	mov	r1, r9
 8000e40:	d31a      	bcc.n	8000e78 <__udivmoddi4+0x294>
 8000e42:	d017      	beq.n	8000e74 <__udivmoddi4+0x290>
 8000e44:	b15d      	cbz	r5, 8000e5e <__udivmoddi4+0x27a>
 8000e46:	ebb3 020e 	subs.w	r2, r3, lr
 8000e4a:	eb67 0701 	sbc.w	r7, r7, r1
 8000e4e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e52:	40f2      	lsrs	r2, r6
 8000e54:	ea4c 0202 	orr.w	r2, ip, r2
 8000e58:	40f7      	lsrs	r7, r6
 8000e5a:	e9c5 2700 	strd	r2, r7, [r5]
 8000e5e:	2600      	movs	r6, #0
 8000e60:	4631      	mov	r1, r6
 8000e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e66:	462e      	mov	r6, r5
 8000e68:	4628      	mov	r0, r5
 8000e6a:	e70b      	b.n	8000c84 <__udivmoddi4+0xa0>
 8000e6c:	4606      	mov	r6, r0
 8000e6e:	e6e9      	b.n	8000c44 <__udivmoddi4+0x60>
 8000e70:	4618      	mov	r0, r3
 8000e72:	e6fd      	b.n	8000c70 <__udivmoddi4+0x8c>
 8000e74:	4543      	cmp	r3, r8
 8000e76:	d2e5      	bcs.n	8000e44 <__udivmoddi4+0x260>
 8000e78:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e7c:	eb69 0104 	sbc.w	r1, r9, r4
 8000e80:	3801      	subs	r0, #1
 8000e82:	e7df      	b.n	8000e44 <__udivmoddi4+0x260>
 8000e84:	4608      	mov	r0, r1
 8000e86:	e7d2      	b.n	8000e2e <__udivmoddi4+0x24a>
 8000e88:	4660      	mov	r0, ip
 8000e8a:	e78d      	b.n	8000da8 <__udivmoddi4+0x1c4>
 8000e8c:	4681      	mov	r9, r0
 8000e8e:	e7b9      	b.n	8000e04 <__udivmoddi4+0x220>
 8000e90:	4666      	mov	r6, ip
 8000e92:	e775      	b.n	8000d80 <__udivmoddi4+0x19c>
 8000e94:	4630      	mov	r0, r6
 8000e96:	e74a      	b.n	8000d2e <__udivmoddi4+0x14a>
 8000e98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e9c:	4439      	add	r1, r7
 8000e9e:	e713      	b.n	8000cc8 <__udivmoddi4+0xe4>
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	443c      	add	r4, r7
 8000ea4:	e724      	b.n	8000cf0 <__udivmoddi4+0x10c>
 8000ea6:	bf00      	nop

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <set_brightness>:

static inline uint8_t scale8(uint8_t x, uint8_t scale) {
  return ((uint16_t)x * scale) >> 8;
}

void set_brightness(int bright) {
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	brightness = bright;
 8000eb4:	4a04      	ldr	r2, [pc, #16]	; (8000ec8 <set_brightness+0x1c>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6013      	str	r3, [r2, #0]
}
 8000eba:	bf00      	nop
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	200000a4 	.word	0x200000a4
 8000ecc:	00000000 	.word	0x00000000

08000ed0 <led_set_RGB>:

void led_set_RGB(uint8_t index, uint8_t r, uint8_t g, uint8_t b) {
 8000ed0:	b5b0      	push	{r4, r5, r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4604      	mov	r4, r0
 8000ed8:	4608      	mov	r0, r1
 8000eda:	4611      	mov	r1, r2
 8000edc:	461a      	mov	r2, r3
 8000ede:	4623      	mov	r3, r4
 8000ee0:	71fb      	strb	r3, [r7, #7]
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71bb      	strb	r3, [r7, #6]
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	717b      	strb	r3, [r7, #5]
 8000eea:	4613      	mov	r3, r2
 8000eec:	713b      	strb	r3, [r7, #4]
  float angle = 90-brightness;  // in degrees
 8000eee:	4b4c      	ldr	r3, [pc, #304]	; (8001020 <led_set_RGB+0x150>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8000ef6:	ee07 3a90 	vmov	s15, r3
 8000efa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000efe:	edc7 7a03 	vstr	s15, [r7, #12]
  angle = angle*PI / 180;  // in rad
 8000f02:	68f8      	ldr	r0, [r7, #12]
 8000f04:	f7ff facc 	bl	80004a0 <__aeabi_f2d>
 8000f08:	a343      	add	r3, pc, #268	; (adr r3, 8001018 <led_set_RGB+0x148>)
 8000f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f0e:	f7ff fb1f 	bl	8000550 <__aeabi_dmul>
 8000f12:	4602      	mov	r2, r0
 8000f14:	460b      	mov	r3, r1
 8000f16:	4610      	mov	r0, r2
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f04f 0200 	mov.w	r2, #0
 8000f1e:	4b41      	ldr	r3, [pc, #260]	; (8001024 <led_set_RGB+0x154>)
 8000f20:	f7ff fc40 	bl	80007a4 <__aeabi_ddiv>
 8000f24:	4602      	mov	r2, r0
 8000f26:	460b      	mov	r3, r1
 8000f28:	4610      	mov	r0, r2
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	f7ff fdf2 	bl	8000b14 <__aeabi_d2f>
 8000f30:	4603      	mov	r3, r0
 8000f32:	60fb      	str	r3, [r7, #12]
  rgb_arr[3 * index]= (g)/(tan(angle)); // g;
 8000f34:	797b      	ldrb	r3, [r7, #5]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff faa0 	bl	800047c <__aeabi_i2d>
 8000f3c:	4604      	mov	r4, r0
 8000f3e:	460d      	mov	r5, r1
 8000f40:	68f8      	ldr	r0, [r7, #12]
 8000f42:	f7ff faad 	bl	80004a0 <__aeabi_f2d>
 8000f46:	4602      	mov	r2, r0
 8000f48:	460b      	mov	r3, r1
 8000f4a:	ec43 2b10 	vmov	d0, r2, r3
 8000f4e:	f003 fd0b 	bl	8004968 <tan>
 8000f52:	ec53 2b10 	vmov	r2, r3, d0
 8000f56:	4620      	mov	r0, r4
 8000f58:	4629      	mov	r1, r5
 8000f5a:	f7ff fc23 	bl	80007a4 <__aeabi_ddiv>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	460b      	mov	r3, r1
 8000f62:	4610      	mov	r0, r2
 8000f64:	4619      	mov	r1, r3
 8000f66:	79fa      	ldrb	r2, [r7, #7]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	189c      	adds	r4, r3, r2
 8000f6e:	f7ff fdb1 	bl	8000ad4 <__aeabi_d2uiz>
 8000f72:	4603      	mov	r3, r0
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	4b2c      	ldr	r3, [pc, #176]	; (8001028 <led_set_RGB+0x158>)
 8000f78:	551a      	strb	r2, [r3, r4]
  rgb_arr[3 * index + 1] = (r)/(tan(angle));
 8000f7a:	79bb      	ldrb	r3, [r7, #6]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff fa7d 	bl	800047c <__aeabi_i2d>
 8000f82:	4604      	mov	r4, r0
 8000f84:	460d      	mov	r5, r1
 8000f86:	68f8      	ldr	r0, [r7, #12]
 8000f88:	f7ff fa8a 	bl	80004a0 <__aeabi_f2d>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	460b      	mov	r3, r1
 8000f90:	ec43 2b10 	vmov	d0, r2, r3
 8000f94:	f003 fce8 	bl	8004968 <tan>
 8000f98:	ec53 2b10 	vmov	r2, r3, d0
 8000f9c:	4620      	mov	r0, r4
 8000f9e:	4629      	mov	r1, r5
 8000fa0:	f7ff fc00 	bl	80007a4 <__aeabi_ddiv>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	4610      	mov	r0, r2
 8000faa:	4619      	mov	r1, r3
 8000fac:	79fa      	ldrb	r2, [r7, #7]
 8000fae:	4613      	mov	r3, r2
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	4413      	add	r3, r2
 8000fb4:	1c5c      	adds	r4, r3, #1
 8000fb6:	f7ff fd8d 	bl	8000ad4 <__aeabi_d2uiz>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	4b1a      	ldr	r3, [pc, #104]	; (8001028 <led_set_RGB+0x158>)
 8000fc0:	551a      	strb	r2, [r3, r4]
  rgb_arr[3 * index + 2] = (b)/(tan(angle));
 8000fc2:	793b      	ldrb	r3, [r7, #4]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff fa59 	bl	800047c <__aeabi_i2d>
 8000fca:	4604      	mov	r4, r0
 8000fcc:	460d      	mov	r5, r1
 8000fce:	68f8      	ldr	r0, [r7, #12]
 8000fd0:	f7ff fa66 	bl	80004a0 <__aeabi_f2d>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	ec43 2b10 	vmov	d0, r2, r3
 8000fdc:	f003 fcc4 	bl	8004968 <tan>
 8000fe0:	ec53 2b10 	vmov	r2, r3, d0
 8000fe4:	4620      	mov	r0, r4
 8000fe6:	4629      	mov	r1, r5
 8000fe8:	f7ff fbdc 	bl	80007a4 <__aeabi_ddiv>
 8000fec:	4602      	mov	r2, r0
 8000fee:	460b      	mov	r3, r1
 8000ff0:	4610      	mov	r0, r2
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	79fa      	ldrb	r2, [r7, #7]
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	4413      	add	r3, r2
 8000ffc:	1c9c      	adds	r4, r3, #2
 8000ffe:	f7ff fd69 	bl	8000ad4 <__aeabi_d2uiz>
 8001002:	4603      	mov	r3, r0
 8001004:	b2da      	uxtb	r2, r3
 8001006:	4b08      	ldr	r3, [pc, #32]	; (8001028 <led_set_RGB+0x158>)
 8001008:	551a      	strb	r2, [r3, r4]

}
 800100a:	bf00      	nop
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bdb0      	pop	{r4, r5, r7, pc}
 8001012:	bf00      	nop
 8001014:	f3af 8000 	nop.w
 8001018:	53c8d4f1 	.word	0x53c8d4f1
 800101c:	400921fb 	.word	0x400921fb
 8001020:	200000a4 	.word	0x200000a4
 8001024:	40668000 	.word	0x40668000
 8001028:	20000028 	.word	0x20000028

0800102c <led_render>:

void led_render() {
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
  //for(uint8_t i = 0; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;

  if(wr_buf_p != 0 || hdma_tim1_ch1.State != HAL_DMA_STATE_READY) {
 8001032:	4b50      	ldr	r3, [pc, #320]	; (8001174 <led_render+0x148>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d105      	bne.n	8001046 <led_render+0x1a>
 800103a:	4b4f      	ldr	r3, [pc, #316]	; (8001178 <led_render+0x14c>)
 800103c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001040:	b2db      	uxtb	r3, r3
 8001042:	2b01      	cmp	r3, #1
 8001044:	d015      	beq.n	8001072 <led_render+0x46>
	// Ongoing transfer, cancel!
	for(uint8_t i = 0; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	71fb      	strb	r3, [r7, #7]
 800104a:	e007      	b.n	800105c <led_render+0x30>
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	4a4b      	ldr	r2, [pc, #300]	; (800117c <led_render+0x150>)
 8001050:	2100      	movs	r1, #0
 8001052:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	3301      	adds	r3, #1
 800105a:	71fb      	strb	r3, [r7, #7]
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	2b2f      	cmp	r3, #47	; 0x2f
 8001060:	d9f4      	bls.n	800104c <led_render+0x20>
	wr_buf_p = 0;
 8001062:	4b44      	ldr	r3, [pc, #272]	; (8001174 <led_render+0x148>)
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8001068:	2100      	movs	r1, #0
 800106a:	4845      	ldr	r0, [pc, #276]	; (8001180 <led_render+0x154>)
 800106c:	f002 fb84 	bl	8003778 <HAL_TIM_PWM_Stop_DMA>
	return;
 8001070:	e07c      	b.n	800116c <led_render+0x140>
  }

  for(uint_fast8_t i = 0; i < 8; ++i) {
 8001072:	2300      	movs	r3, #0
 8001074:	603b      	str	r3, [r7, #0]
 8001076:	e06d      	b.n	8001154 <led_render+0x128>
    wr_buf[i     ] = PWM_LO << (((rgb_arr[0] << i) & 0x80) > 0);
 8001078:	4b42      	ldr	r3, [pc, #264]	; (8001184 <led_render+0x158>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	461a      	mov	r2, r3
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001088:	2b00      	cmp	r3, #0
 800108a:	dd01      	ble.n	8001090 <led_render+0x64>
 800108c:	213a      	movs	r1, #58	; 0x3a
 800108e:	e000      	b.n	8001092 <led_render+0x66>
 8001090:	211d      	movs	r1, #29
 8001092:	4a3a      	ldr	r2, [pc, #232]	; (800117c <led_render+0x150>)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i +  8] = PWM_LO << (((rgb_arr[1] << i) & 0x80) > 0);
 800109a:	4b3a      	ldr	r3, [pc, #232]	; (8001184 <led_render+0x158>)
 800109c:	785b      	ldrb	r3, [r3, #1]
 800109e:	461a      	mov	r2, r3
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	dd01      	ble.n	80010b2 <led_render+0x86>
 80010ae:	213a      	movs	r1, #58	; 0x3a
 80010b0:	e000      	b.n	80010b4 <led_render+0x88>
 80010b2:	211d      	movs	r1, #29
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	3308      	adds	r3, #8
 80010b8:	4a30      	ldr	r2, [pc, #192]	; (800117c <led_render+0x150>)
 80010ba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 16] = PWM_LO << (((rgb_arr[2] << i) & 0x80) > 0);
 80010be:	4b31      	ldr	r3, [pc, #196]	; (8001184 <led_render+0x158>)
 80010c0:	789b      	ldrb	r3, [r3, #2]
 80010c2:	461a      	mov	r2, r3
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	dd01      	ble.n	80010d6 <led_render+0xaa>
 80010d2:	213a      	movs	r1, #58	; 0x3a
 80010d4:	e000      	b.n	80010d8 <led_render+0xac>
 80010d6:	211d      	movs	r1, #29
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	3310      	adds	r3, #16
 80010dc:	4a27      	ldr	r2, [pc, #156]	; (800117c <led_render+0x150>)
 80010de:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 24] = PWM_LO << (((rgb_arr[3] << i) & 0x80) > 0);
 80010e2:	4b28      	ldr	r3, [pc, #160]	; (8001184 <led_render+0x158>)
 80010e4:	78db      	ldrb	r3, [r3, #3]
 80010e6:	461a      	mov	r2, r3
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	dd01      	ble.n	80010fa <led_render+0xce>
 80010f6:	213a      	movs	r1, #58	; 0x3a
 80010f8:	e000      	b.n	80010fc <led_render+0xd0>
 80010fa:	211d      	movs	r1, #29
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	3318      	adds	r3, #24
 8001100:	4a1e      	ldr	r2, [pc, #120]	; (800117c <led_render+0x150>)
 8001102:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 32] = PWM_LO << (((rgb_arr[4] << i) & 0x80) > 0);
 8001106:	4b1f      	ldr	r3, [pc, #124]	; (8001184 <led_render+0x158>)
 8001108:	791b      	ldrb	r3, [r3, #4]
 800110a:	461a      	mov	r2, r3
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001116:	2b00      	cmp	r3, #0
 8001118:	dd01      	ble.n	800111e <led_render+0xf2>
 800111a:	213a      	movs	r1, #58	; 0x3a
 800111c:	e000      	b.n	8001120 <led_render+0xf4>
 800111e:	211d      	movs	r1, #29
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	3320      	adds	r3, #32
 8001124:	4a15      	ldr	r2, [pc, #84]	; (800117c <led_render+0x150>)
 8001126:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 40] = PWM_LO << (((rgb_arr[5] << i) & 0x80) > 0);
 800112a:	4b16      	ldr	r3, [pc, #88]	; (8001184 <led_render+0x158>)
 800112c:	795b      	ldrb	r3, [r3, #5]
 800112e:	461a      	mov	r2, r3
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800113a:	2b00      	cmp	r3, #0
 800113c:	dd01      	ble.n	8001142 <led_render+0x116>
 800113e:	213a      	movs	r1, #58	; 0x3a
 8001140:	e000      	b.n	8001144 <led_render+0x118>
 8001142:	211d      	movs	r1, #29
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	3328      	adds	r3, #40	; 0x28
 8001148:	4a0c      	ldr	r2, [pc, #48]	; (800117c <led_render+0x150>)
 800114a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(uint_fast8_t i = 0; i < 8; ++i) {
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	3301      	adds	r3, #1
 8001152:	603b      	str	r3, [r7, #0]
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	2b07      	cmp	r3, #7
 8001158:	d98e      	bls.n	8001078 <led_render+0x4c>
  }

  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)wr_buf, WR_BUF_LEN);
 800115a:	2330      	movs	r3, #48	; 0x30
 800115c:	4a07      	ldr	r2, [pc, #28]	; (800117c <led_render+0x150>)
 800115e:	2100      	movs	r1, #0
 8001160:	4807      	ldr	r0, [pc, #28]	; (8001180 <led_render+0x154>)
 8001162:	f002 f959 	bl	8003418 <HAL_TIM_PWM_Start_DMA>
  wr_buf_p = 2;
 8001166:	4b03      	ldr	r3, [pc, #12]	; (8001174 <led_render+0x148>)
 8001168:	2202      	movs	r2, #2
 800116a:	601a      	str	r2, [r3, #0]
}
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	200000a0 	.word	0x200000a0
 8001178:	200000ac 	.word	0x200000ac
 800117c:	20000040 	.word	0x20000040
 8001180:	2000010c 	.word	0x2000010c
 8001184:	20000028 	.word	0x20000028

08001188 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim) {
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 8001190:	4b3a      	ldr	r3, [pc, #232]	; (800127c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b07      	cmp	r3, #7
 8001196:	d854      	bhi.n	8001242 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xba>
    // We're in. Fill the even buffer
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8001198:	2300      	movs	r3, #0
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	e048      	b.n	8001230 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xa8>
      wr_buf[i     ] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 800119e:	4b37      	ldr	r3, [pc, #220]	; (800127c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	4613      	mov	r3, r2
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	4413      	add	r3, r2
 80011a8:	4a35      	ldr	r2, [pc, #212]	; (8001280 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 80011aa:	5cd3      	ldrb	r3, [r2, r3]
 80011ac:	461a      	mov	r2, r3
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	dd01      	ble.n	80011c0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x38>
 80011bc:	213a      	movs	r1, #58	; 0x3a
 80011be:	e000      	b.n	80011c2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x3a>
 80011c0:	211d      	movs	r1, #29
 80011c2:	4a30      	ldr	r2, [pc, #192]	; (8001284 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      wr_buf[i +  8] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 80011ca:	4b2c      	ldr	r3, [pc, #176]	; (800127c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	4613      	mov	r3, r2
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	4413      	add	r3, r2
 80011d4:	3301      	adds	r3, #1
 80011d6:	4a2a      	ldr	r2, [pc, #168]	; (8001280 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 80011d8:	5cd3      	ldrb	r3, [r2, r3]
 80011da:	461a      	mov	r2, r3
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	dd01      	ble.n	80011ee <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x66>
 80011ea:	213a      	movs	r1, #58	; 0x3a
 80011ec:	e000      	b.n	80011f0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x68>
 80011ee:	211d      	movs	r1, #29
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	3308      	adds	r3, #8
 80011f4:	4a23      	ldr	r2, [pc, #140]	; (8001284 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 80011f6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      wr_buf[i + 16] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 80011fa:	4b20      	ldr	r3, [pc, #128]	; (800127c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	4613      	mov	r3, r2
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	4413      	add	r3, r2
 8001204:	3302      	adds	r3, #2
 8001206:	4a1e      	ldr	r2, [pc, #120]	; (8001280 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 8001208:	5cd3      	ldrb	r3, [r2, r3]
 800120a:	461a      	mov	r2, r3
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001216:	2b00      	cmp	r3, #0
 8001218:	dd01      	ble.n	800121e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x96>
 800121a:	213a      	movs	r1, #58	; 0x3a
 800121c:	e000      	b.n	8001220 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x98>
 800121e:	211d      	movs	r1, #29
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	3310      	adds	r3, #16
 8001224:	4a17      	ldr	r2, [pc, #92]	; (8001284 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8001226:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	3301      	adds	r3, #1
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2b07      	cmp	r3, #7
 8001234:	d9b3      	bls.n	800119e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x16>
    }
    wr_buf_p++;
 8001236:	4b11      	ldr	r3, [pc, #68]	; (800127c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	3301      	adds	r3, #1
 800123c:	4a0f      	ldr	r2, [pc, #60]	; (800127c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 800123e:	6013      	str	r3, [r2, #0]
  	//                               WS2812B: 48 * 1.25 us = 60 us == good enough reset
    // First half reset zero fill
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
    wr_buf_p++;
  }
}
 8001240:	e016      	b.n	8001270 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe8>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 8001242:	4b0e      	ldr	r3, [pc, #56]	; (800127c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2b09      	cmp	r3, #9
 8001248:	d812      	bhi.n	8001270 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe8>
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	72fb      	strb	r3, [r7, #11]
 800124e:	e007      	b.n	8001260 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xd8>
 8001250:	7afb      	ldrb	r3, [r7, #11]
 8001252:	4a0c      	ldr	r2, [pc, #48]	; (8001284 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8001254:	2100      	movs	r1, #0
 8001256:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800125a:	7afb      	ldrb	r3, [r7, #11]
 800125c:	3301      	adds	r3, #1
 800125e:	72fb      	strb	r3, [r7, #11]
 8001260:	7afb      	ldrb	r3, [r7, #11]
 8001262:	2b17      	cmp	r3, #23
 8001264:	d9f4      	bls.n	8001250 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xc8>
    wr_buf_p++;
 8001266:	4b05      	ldr	r3, [pc, #20]	; (800127c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	3301      	adds	r3, #1
 800126c:	4a03      	ldr	r2, [pc, #12]	; (800127c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 800126e:	6013      	str	r3, [r2, #0]
}
 8001270:	bf00      	nop
 8001272:	3714      	adds	r7, #20
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	200000a0 	.word	0x200000a0
 8001280:	20000028 	.word	0x20000028
 8001284:	20000040 	.word	0x20000040

08001288 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
	  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
	  if(wr_buf_p < NUM_PIXELS) {
 8001290:	4b3e      	ldr	r3, [pc, #248]	; (800138c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b07      	cmp	r3, #7
 8001296:	d855      	bhi.n	8001344 <HAL_TIM_PWM_PulseFinishedCallback+0xbc>
	    // We're in. Fill the odd buffer
	    for(uint_fast8_t i = 0; i < 8; ++i) {
 8001298:	2300      	movs	r3, #0
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	e049      	b.n	8001332 <HAL_TIM_PWM_PulseFinishedCallback+0xaa>
	      wr_buf[i + 24] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 800129e:	4b3b      	ldr	r3, [pc, #236]	; (800138c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	4613      	mov	r3, r2
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	4413      	add	r3, r2
 80012a8:	4a39      	ldr	r2, [pc, #228]	; (8001390 <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 80012aa:	5cd3      	ldrb	r3, [r2, r3]
 80012ac:	461a      	mov	r2, r3
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	dd01      	ble.n	80012c0 <HAL_TIM_PWM_PulseFinishedCallback+0x38>
 80012bc:	213a      	movs	r1, #58	; 0x3a
 80012be:	e000      	b.n	80012c2 <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
 80012c0:	211d      	movs	r1, #29
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	3318      	adds	r3, #24
 80012c6:	4a33      	ldr	r2, [pc, #204]	; (8001394 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 80012c8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	      wr_buf[i + 32] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 80012cc:	4b2f      	ldr	r3, [pc, #188]	; (800138c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	4613      	mov	r3, r2
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	4413      	add	r3, r2
 80012d6:	3301      	adds	r3, #1
 80012d8:	4a2d      	ldr	r2, [pc, #180]	; (8001390 <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 80012da:	5cd3      	ldrb	r3, [r2, r3]
 80012dc:	461a      	mov	r2, r3
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	dd01      	ble.n	80012f0 <HAL_TIM_PWM_PulseFinishedCallback+0x68>
 80012ec:	213a      	movs	r1, #58	; 0x3a
 80012ee:	e000      	b.n	80012f2 <HAL_TIM_PWM_PulseFinishedCallback+0x6a>
 80012f0:	211d      	movs	r1, #29
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	3320      	adds	r3, #32
 80012f6:	4a27      	ldr	r2, [pc, #156]	; (8001394 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 80012f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	      wr_buf[i + 40] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 80012fc:	4b23      	ldr	r3, [pc, #140]	; (800138c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	4613      	mov	r3, r2
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	4413      	add	r3, r2
 8001306:	3302      	adds	r3, #2
 8001308:	4a21      	ldr	r2, [pc, #132]	; (8001390 <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 800130a:	5cd3      	ldrb	r3, [r2, r3]
 800130c:	461a      	mov	r2, r3
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001318:	2b00      	cmp	r3, #0
 800131a:	dd01      	ble.n	8001320 <HAL_TIM_PWM_PulseFinishedCallback+0x98>
 800131c:	213a      	movs	r1, #58	; 0x3a
 800131e:	e000      	b.n	8001322 <HAL_TIM_PWM_PulseFinishedCallback+0x9a>
 8001320:	211d      	movs	r1, #29
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	3328      	adds	r3, #40	; 0x28
 8001326:	4a1b      	ldr	r2, [pc, #108]	; (8001394 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8001328:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	    for(uint_fast8_t i = 0; i < 8; ++i) {
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	3301      	adds	r3, #1
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2b07      	cmp	r3, #7
 8001336:	d9b2      	bls.n	800129e <HAL_TIM_PWM_PulseFinishedCallback+0x16>
	    }
	    wr_buf_p++;
 8001338:	4b14      	ldr	r3, [pc, #80]	; (800138c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	3301      	adds	r3, #1
 800133e:	4a13      	ldr	r2, [pc, #76]	; (800138c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8001340:	6013      	str	r3, [r2, #0]
	  } else {
	    // We're done. Lean back and until next time!
	    wr_buf_p = 0;
	    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
	  }
}
 8001342:	e01e      	b.n	8001382 <HAL_TIM_PWM_PulseFinishedCallback+0xfa>
	  } else if (wr_buf_p < NUM_PIXELS + 2) {
 8001344:	4b11      	ldr	r3, [pc, #68]	; (800138c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2b09      	cmp	r3, #9
 800134a:	d813      	bhi.n	8001374 <HAL_TIM_PWM_PulseFinishedCallback+0xec>
	    for(uint8_t i = WR_BUF_LEN / 2; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 800134c:	2318      	movs	r3, #24
 800134e:	72fb      	strb	r3, [r7, #11]
 8001350:	e007      	b.n	8001362 <HAL_TIM_PWM_PulseFinishedCallback+0xda>
 8001352:	7afb      	ldrb	r3, [r7, #11]
 8001354:	4a0f      	ldr	r2, [pc, #60]	; (8001394 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8001356:	2100      	movs	r1, #0
 8001358:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800135c:	7afb      	ldrb	r3, [r7, #11]
 800135e:	3301      	adds	r3, #1
 8001360:	72fb      	strb	r3, [r7, #11]
 8001362:	7afb      	ldrb	r3, [r7, #11]
 8001364:	2b2f      	cmp	r3, #47	; 0x2f
 8001366:	d9f4      	bls.n	8001352 <HAL_TIM_PWM_PulseFinishedCallback+0xca>
	    ++wr_buf_p;
 8001368:	4b08      	ldr	r3, [pc, #32]	; (800138c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	3301      	adds	r3, #1
 800136e:	4a07      	ldr	r2, [pc, #28]	; (800138c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8001370:	6013      	str	r3, [r2, #0]
}
 8001372:	e006      	b.n	8001382 <HAL_TIM_PWM_PulseFinishedCallback+0xfa>
	    wr_buf_p = 0;
 8001374:	4b05      	ldr	r3, [pc, #20]	; (800138c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
	    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 800137a:	2100      	movs	r1, #0
 800137c:	4806      	ldr	r0, [pc, #24]	; (8001398 <HAL_TIM_PWM_PulseFinishedCallback+0x110>)
 800137e:	f002 f9fb 	bl	8003778 <HAL_TIM_PWM_Stop_DMA>
}
 8001382:	bf00      	nop
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	200000a0 	.word	0x200000a0
 8001390:	20000028 	.word	0x20000028
 8001394:	20000040 	.word	0x20000040
 8001398:	2000010c 	.word	0x2000010c

0800139c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013a0:	f000 fc46 	bl	8001c30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013a4:	f000 f812 	bl	80013cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013a8:	f000 f962 	bl	8001670 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80013ac:	f000 f916 	bl	80015dc <MX_USART2_UART_Init>
  MX_DMA_Init();
 80013b0:	f000 f93e 	bl	8001630 <MX_DMA_Init>
  MX_TIM1_Init();
 80013b4:	f000 f872 	bl	800149c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  set_brightness(10);
 80013b8:	200a      	movs	r0, #10
 80013ba:	f7ff fd77 	bl	8000eac <set_brightness>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  rainbow_effect_fade();
 80013be:	f000 f9c7 	bl	8001750 <rainbow_effect_fade>
	  //rainbow_effect_left();
	  HAL_Delay(5);
 80013c2:	2005      	movs	r0, #5
 80013c4:	f000 fca6 	bl	8001d14 <HAL_Delay>
	  rainbow_effect_fade();
 80013c8:	e7f9      	b.n	80013be <main+0x22>
	...

080013cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b094      	sub	sp, #80	; 0x50
 80013d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013d2:	f107 0320 	add.w	r3, r7, #32
 80013d6:	2230      	movs	r2, #48	; 0x30
 80013d8:	2100      	movs	r1, #0
 80013da:	4618      	mov	r0, r3
 80013dc:	f003 fabc 	bl	8004958 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013e0:	f107 030c 	add.w	r3, r7, #12
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f0:	2300      	movs	r3, #0
 80013f2:	60bb      	str	r3, [r7, #8]
 80013f4:	4b27      	ldr	r3, [pc, #156]	; (8001494 <SystemClock_Config+0xc8>)
 80013f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f8:	4a26      	ldr	r2, [pc, #152]	; (8001494 <SystemClock_Config+0xc8>)
 80013fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001400:	4b24      	ldr	r3, [pc, #144]	; (8001494 <SystemClock_Config+0xc8>)
 8001402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001404:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001408:	60bb      	str	r3, [r7, #8]
 800140a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800140c:	2300      	movs	r3, #0
 800140e:	607b      	str	r3, [r7, #4]
 8001410:	4b21      	ldr	r3, [pc, #132]	; (8001498 <SystemClock_Config+0xcc>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a20      	ldr	r2, [pc, #128]	; (8001498 <SystemClock_Config+0xcc>)
 8001416:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800141a:	6013      	str	r3, [r2, #0]
 800141c:	4b1e      	ldr	r3, [pc, #120]	; (8001498 <SystemClock_Config+0xcc>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001424:	607b      	str	r3, [r7, #4]
 8001426:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001428:	2301      	movs	r3, #1
 800142a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800142c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001432:	2302      	movs	r3, #2
 8001434:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001436:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800143a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800143c:	2304      	movs	r3, #4
 800143e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001440:	2348      	movs	r3, #72	; 0x48
 8001442:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001444:	2302      	movs	r3, #2
 8001446:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001448:	2304      	movs	r3, #4
 800144a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800144c:	f107 0320 	add.w	r3, r7, #32
 8001450:	4618      	mov	r0, r3
 8001452:	f001 fac5 	bl	80029e0 <HAL_RCC_OscConfig>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800145c:	f000 fa72 	bl	8001944 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001460:	230f      	movs	r3, #15
 8001462:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001464:	2302      	movs	r3, #2
 8001466:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800146c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001470:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001472:	2300      	movs	r3, #0
 8001474:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001476:	f107 030c 	add.w	r3, r7, #12
 800147a:	2102      	movs	r1, #2
 800147c:	4618      	mov	r0, r3
 800147e:	f001 fd27 	bl	8002ed0 <HAL_RCC_ClockConfig>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001488:	f000 fa5c 	bl	8001944 <Error_Handler>
  }
}
 800148c:	bf00      	nop
 800148e:	3750      	adds	r7, #80	; 0x50
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40023800 	.word	0x40023800
 8001498:	40007000 	.word	0x40007000

0800149c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b096      	sub	sp, #88	; 0x58
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	60da      	str	r2, [r3, #12]
 80014c8:	611a      	str	r2, [r3, #16]
 80014ca:	615a      	str	r2, [r3, #20]
 80014cc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014ce:	1d3b      	adds	r3, r7, #4
 80014d0:	2220      	movs	r2, #32
 80014d2:	2100      	movs	r1, #0
 80014d4:	4618      	mov	r0, r3
 80014d6:	f003 fa3f 	bl	8004958 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014da:	4b3e      	ldr	r3, [pc, #248]	; (80015d4 <MX_TIM1_Init+0x138>)
 80014dc:	4a3e      	ldr	r2, [pc, #248]	; (80015d8 <MX_TIM1_Init+0x13c>)
 80014de:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80014e0:	4b3c      	ldr	r3, [pc, #240]	; (80015d4 <MX_TIM1_Init+0x138>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e6:	4b3b      	ldr	r3, [pc, #236]	; (80015d4 <MX_TIM1_Init+0x138>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 80014ec:	4b39      	ldr	r3, [pc, #228]	; (80015d4 <MX_TIM1_Init+0x138>)
 80014ee:	2259      	movs	r2, #89	; 0x59
 80014f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f2:	4b38      	ldr	r3, [pc, #224]	; (80015d4 <MX_TIM1_Init+0x138>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014f8:	4b36      	ldr	r3, [pc, #216]	; (80015d4 <MX_TIM1_Init+0x138>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014fe:	4b35      	ldr	r3, [pc, #212]	; (80015d4 <MX_TIM1_Init+0x138>)
 8001500:	2200      	movs	r2, #0
 8001502:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001504:	4833      	ldr	r0, [pc, #204]	; (80015d4 <MX_TIM1_Init+0x138>)
 8001506:	f001 fedf 	bl	80032c8 <HAL_TIM_Base_Init>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001510:	f000 fa18 	bl	8001944 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001514:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001518:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800151a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800151e:	4619      	mov	r1, r3
 8001520:	482c      	ldr	r0, [pc, #176]	; (80015d4 <MX_TIM1_Init+0x138>)
 8001522:	f002 fab1 	bl	8003a88 <HAL_TIM_ConfigClockSource>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800152c:	f000 fa0a 	bl	8001944 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001530:	4828      	ldr	r0, [pc, #160]	; (80015d4 <MX_TIM1_Init+0x138>)
 8001532:	f001 ff18 	bl	8003366 <HAL_TIM_PWM_Init>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800153c:	f000 fa02 	bl	8001944 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001540:	2300      	movs	r3, #0
 8001542:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001544:	2300      	movs	r3, #0
 8001546:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001548:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800154c:	4619      	mov	r1, r3
 800154e:	4821      	ldr	r0, [pc, #132]	; (80015d4 <MX_TIM1_Init+0x138>)
 8001550:	f002 ff08 	bl	8004364 <HAL_TIMEx_MasterConfigSynchronization>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800155a:	f000 f9f3 	bl	8001944 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800155e:	2360      	movs	r3, #96	; 0x60
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001566:	2300      	movs	r3, #0
 8001568:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800156a:	2300      	movs	r3, #0
 800156c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800156e:	2300      	movs	r3, #0
 8001570:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001572:	2300      	movs	r3, #0
 8001574:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001576:	2300      	movs	r3, #0
 8001578:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800157a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800157e:	2200      	movs	r2, #0
 8001580:	4619      	mov	r1, r3
 8001582:	4814      	ldr	r0, [pc, #80]	; (80015d4 <MX_TIM1_Init+0x138>)
 8001584:	f002 f9be 	bl	8003904 <HAL_TIM_PWM_ConfigChannel>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800158e:	f000 f9d9 	bl	8001944 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001592:	2300      	movs	r3, #0
 8001594:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001596:	2300      	movs	r3, #0
 8001598:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800159a:	2300      	movs	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800159e:	2300      	movs	r3, #0
 80015a0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015a2:	2300      	movs	r3, #0
 80015a4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015aa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015ac:	2300      	movs	r3, #0
 80015ae:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015b0:	1d3b      	adds	r3, r7, #4
 80015b2:	4619      	mov	r1, r3
 80015b4:	4807      	ldr	r0, [pc, #28]	; (80015d4 <MX_TIM1_Init+0x138>)
 80015b6:	f002 ff43 	bl	8004440 <HAL_TIMEx_ConfigBreakDeadTime>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80015c0:	f000 f9c0 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80015c4:	4803      	ldr	r0, [pc, #12]	; (80015d4 <MX_TIM1_Init+0x138>)
 80015c6:	f000 fa41 	bl	8001a4c <HAL_TIM_MspPostInit>

}
 80015ca:	bf00      	nop
 80015cc:	3758      	adds	r7, #88	; 0x58
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	2000010c 	.word	0x2000010c
 80015d8:	40010000 	.word	0x40010000

080015dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015e0:	4b11      	ldr	r3, [pc, #68]	; (8001628 <MX_USART2_UART_Init+0x4c>)
 80015e2:	4a12      	ldr	r2, [pc, #72]	; (800162c <MX_USART2_UART_Init+0x50>)
 80015e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015e6:	4b10      	ldr	r3, [pc, #64]	; (8001628 <MX_USART2_UART_Init+0x4c>)
 80015e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015ee:	4b0e      	ldr	r3, [pc, #56]	; (8001628 <MX_USART2_UART_Init+0x4c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015f4:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <MX_USART2_UART_Init+0x4c>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015fa:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <MX_USART2_UART_Init+0x4c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001600:	4b09      	ldr	r3, [pc, #36]	; (8001628 <MX_USART2_UART_Init+0x4c>)
 8001602:	220c      	movs	r2, #12
 8001604:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001606:	4b08      	ldr	r3, [pc, #32]	; (8001628 <MX_USART2_UART_Init+0x4c>)
 8001608:	2200      	movs	r2, #0
 800160a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800160c:	4b06      	ldr	r3, [pc, #24]	; (8001628 <MX_USART2_UART_Init+0x4c>)
 800160e:	2200      	movs	r2, #0
 8001610:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001612:	4805      	ldr	r0, [pc, #20]	; (8001628 <MX_USART2_UART_Init+0x4c>)
 8001614:	f002 ff66 	bl	80044e4 <HAL_UART_Init>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800161e:	f000 f991 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000154 	.word	0x20000154
 800162c:	40004400 	.word	0x40004400

08001630 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	607b      	str	r3, [r7, #4]
 800163a:	4b0c      	ldr	r3, [pc, #48]	; (800166c <MX_DMA_Init+0x3c>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	4a0b      	ldr	r2, [pc, #44]	; (800166c <MX_DMA_Init+0x3c>)
 8001640:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001644:	6313      	str	r3, [r2, #48]	; 0x30
 8001646:	4b09      	ldr	r3, [pc, #36]	; (800166c <MX_DMA_Init+0x3c>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800164e:	607b      	str	r3, [r7, #4]
 8001650:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001652:	2200      	movs	r2, #0
 8001654:	2100      	movs	r1, #0
 8001656:	2039      	movs	r0, #57	; 0x39
 8001658:	f000 fc5b 	bl	8001f12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800165c:	2039      	movs	r0, #57	; 0x39
 800165e:	f000 fc74 	bl	8001f4a <HAL_NVIC_EnableIRQ>

}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40023800 	.word	0x40023800

08001670 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08a      	sub	sp, #40	; 0x28
 8001674:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001676:	f107 0314 	add.w	r3, r7, #20
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	605a      	str	r2, [r3, #4]
 8001680:	609a      	str	r2, [r3, #8]
 8001682:	60da      	str	r2, [r3, #12]
 8001684:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	613b      	str	r3, [r7, #16]
 800168a:	4b2e      	ldr	r3, [pc, #184]	; (8001744 <MX_GPIO_Init+0xd4>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	4a2d      	ldr	r2, [pc, #180]	; (8001744 <MX_GPIO_Init+0xd4>)
 8001690:	f043 0304 	orr.w	r3, r3, #4
 8001694:	6313      	str	r3, [r2, #48]	; 0x30
 8001696:	4b2b      	ldr	r3, [pc, #172]	; (8001744 <MX_GPIO_Init+0xd4>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	f003 0304 	and.w	r3, r3, #4
 800169e:	613b      	str	r3, [r7, #16]
 80016a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	4b27      	ldr	r3, [pc, #156]	; (8001744 <MX_GPIO_Init+0xd4>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	4a26      	ldr	r2, [pc, #152]	; (8001744 <MX_GPIO_Init+0xd4>)
 80016ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016b0:	6313      	str	r3, [r2, #48]	; 0x30
 80016b2:	4b24      	ldr	r3, [pc, #144]	; (8001744 <MX_GPIO_Init+0xd4>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	60bb      	str	r3, [r7, #8]
 80016c2:	4b20      	ldr	r3, [pc, #128]	; (8001744 <MX_GPIO_Init+0xd4>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	4a1f      	ldr	r2, [pc, #124]	; (8001744 <MX_GPIO_Init+0xd4>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	6313      	str	r3, [r2, #48]	; 0x30
 80016ce:	4b1d      	ldr	r3, [pc, #116]	; (8001744 <MX_GPIO_Init+0xd4>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	60bb      	str	r3, [r7, #8]
 80016d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	607b      	str	r3, [r7, #4]
 80016de:	4b19      	ldr	r3, [pc, #100]	; (8001744 <MX_GPIO_Init+0xd4>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	4a18      	ldr	r2, [pc, #96]	; (8001744 <MX_GPIO_Init+0xd4>)
 80016e4:	f043 0302 	orr.w	r3, r3, #2
 80016e8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ea:	4b16      	ldr	r3, [pc, #88]	; (8001744 <MX_GPIO_Init+0xd4>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	607b      	str	r3, [r7, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_12, GPIO_PIN_RESET);
 80016f6:	2200      	movs	r2, #0
 80016f8:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 80016fc:	4812      	ldr	r0, [pc, #72]	; (8001748 <MX_GPIO_Init+0xd8>)
 80016fe:	f001 f955 	bl	80029ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001702:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001706:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001708:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800170c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001712:	f107 0314 	add.w	r3, r7, #20
 8001716:	4619      	mov	r1, r3
 8001718:	480c      	ldr	r0, [pc, #48]	; (800174c <MX_GPIO_Init+0xdc>)
 800171a:	f000 ffc3 	bl	80026a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA12 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_12;
 800171e:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001724:	2301      	movs	r3, #1
 8001726:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172c:	2300      	movs	r3, #0
 800172e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	4619      	mov	r1, r3
 8001736:	4804      	ldr	r0, [pc, #16]	; (8001748 <MX_GPIO_Init+0xd8>)
 8001738:	f000 ffb4 	bl	80026a4 <HAL_GPIO_Init>

}
 800173c:	bf00      	nop
 800173e:	3728      	adds	r7, #40	; 0x28
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40023800 	.word	0x40023800
 8001748:	40020000 	.word	0x40020000
 800174c:	40020800 	.word	0x40020800

08001750 <rainbow_effect_fade>:
  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
  //HAL_TIM_Base_Start_IT(&htim1);

 */

void rainbow_effect_fade() {
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
  	for(uint8_t i = 0; i < 8; i++) {
 8001756:	2300      	movs	r3, #0
 8001758:	71fb      	strb	r3, [r7, #7]
 800175a:	e01c      	b.n	8001796 <rainbow_effect_fade+0x46>
			// Calculate color
			uint32_t rgb_color = hsl_to_rgb(ang + (i * angle_difference), 255, 127);
 800175c:	220b      	movs	r2, #11
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	fb13 f302 	smulbb	r3, r3, r2
 8001764:	b2da      	uxtb	r2, r3
 8001766:	4b13      	ldr	r3, [pc, #76]	; (80017b4 <rainbow_effect_fade+0x64>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	4413      	add	r3, r2
 800176c:	b2db      	uxtb	r3, r3
 800176e:	227f      	movs	r2, #127	; 0x7f
 8001770:	21ff      	movs	r1, #255	; 0xff
 8001772:	4618      	mov	r0, r3
 8001774:	f000 f820 	bl	80017b8 <hsl_to_rgb>
 8001778:	6038      	str	r0, [r7, #0]
			// Set color
			led_set_RGB(i, (rgb_color >> 16) & 0xFF, (rgb_color >> 8) & 0xFF, rgb_color & 0xFF);
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	0c1b      	lsrs	r3, r3, #16
 800177e:	b2d9      	uxtb	r1, r3
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	0a1b      	lsrs	r3, r3, #8
 8001784:	b2da      	uxtb	r2, r3
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	b2db      	uxtb	r3, r3
 800178a:	79f8      	ldrb	r0, [r7, #7]
 800178c:	f7ff fba0 	bl	8000ed0 <led_set_RGB>
  	for(uint8_t i = 0; i < 8; i++) {
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	3301      	adds	r3, #1
 8001794:	71fb      	strb	r3, [r7, #7]
 8001796:	79fb      	ldrb	r3, [r7, #7]
 8001798:	2b07      	cmp	r3, #7
 800179a:	d9df      	bls.n	800175c <rainbow_effect_fade+0xc>
		}
		// Write to LED
  	++ang;
 800179c:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <rainbow_effect_fade+0x64>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	3301      	adds	r3, #1
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	4b03      	ldr	r3, [pc, #12]	; (80017b4 <rainbow_effect_fade+0x64>)
 80017a6:	701a      	strb	r2, [r3, #0]
		led_render();
 80017a8:	f7ff fc40 	bl	800102c <led_render>
		// Some delay
}
 80017ac:	bf00      	nop
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	200000a8 	.word	0x200000a8

080017b8 <hsl_to_rgb>:
  led_render();
  return 0x01;
}


uint32_t hsl_to_rgb(uint8_t h, uint8_t s, uint8_t l) {
 80017b8:	b480      	push	{r7}
 80017ba:	b087      	sub	sp, #28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	71fb      	strb	r3, [r7, #7]
 80017c2:	460b      	mov	r3, r1
 80017c4:	71bb      	strb	r3, [r7, #6]
 80017c6:	4613      	mov	r3, r2
 80017c8:	717b      	strb	r3, [r7, #5]
	if(l == 0) return 0;
 80017ca:	797b      	ldrb	r3, [r7, #5]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d101      	bne.n	80017d4 <hsl_to_rgb+0x1c>
 80017d0:	2300      	movs	r3, #0
 80017d2:	e0b1      	b.n	8001938 <hsl_to_rgb+0x180>

	volatile uint8_t  r, g, b, lo, c, x, m;
	volatile uint16_t h1, l1, H;
	l1 = l + 1;
 80017d4:	797b      	ldrb	r3, [r7, #5]
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	3301      	adds	r3, #1
 80017da:	b29b      	uxth	r3, r3
 80017dc:	81bb      	strh	r3, [r7, #12]
	if (l < 128)    c = ((l1 << 1) * s) >> 8;
 80017de:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	db09      	blt.n	80017fa <hsl_to_rgb+0x42>
 80017e6:	89bb      	ldrh	r3, [r7, #12]
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	79ba      	ldrb	r2, [r7, #6]
 80017ee:	fb02 f303 	mul.w	r3, r2, r3
 80017f2:	121b      	asrs	r3, r3, #8
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	74fb      	strb	r3, [r7, #19]
 80017f8:	e00a      	b.n	8001810 <hsl_to_rgb+0x58>
	else            c = (512 - (l1 << 1)) * s >> 8;
 80017fa:	89bb      	ldrh	r3, [r7, #12]
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001804:	79ba      	ldrb	r2, [r7, #6]
 8001806:	fb02 f303 	mul.w	r3, r2, r3
 800180a:	121b      	asrs	r3, r3, #8
 800180c:	b2db      	uxtb	r3, r3
 800180e:	74fb      	strb	r3, [r7, #19]

	H = h * 6;              // 0 to 1535 (actually 1530)
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	b29b      	uxth	r3, r3
 8001814:	461a      	mov	r2, r3
 8001816:	0052      	lsls	r2, r2, #1
 8001818:	4413      	add	r3, r2
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	b29b      	uxth	r3, r3
 800181e:	817b      	strh	r3, [r7, #10]
	lo = H & 255;           // Low byte  = primary/secondary color mix
 8001820:	897b      	ldrh	r3, [r7, #10]
 8001822:	b29b      	uxth	r3, r3
 8001824:	b2db      	uxtb	r3, r3
 8001826:	753b      	strb	r3, [r7, #20]
	h1 = lo + 1;
 8001828:	7d3b      	ldrb	r3, [r7, #20]
 800182a:	b2db      	uxtb	r3, r3
 800182c:	b29b      	uxth	r3, r3
 800182e:	3301      	adds	r3, #1
 8001830:	b29b      	uxth	r3, r3
 8001832:	81fb      	strh	r3, [r7, #14]

	if ((H & 256) == 0)   x = h1 * c >> 8;          // even sextant, like red to yellow
 8001834:	897b      	ldrh	r3, [r7, #10]
 8001836:	b29b      	uxth	r3, r3
 8001838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800183c:	2b00      	cmp	r3, #0
 800183e:	d109      	bne.n	8001854 <hsl_to_rgb+0x9c>
 8001840:	89fb      	ldrh	r3, [r7, #14]
 8001842:	b29b      	uxth	r3, r3
 8001844:	7cfa      	ldrb	r2, [r7, #19]
 8001846:	b2d2      	uxtb	r2, r2
 8001848:	fb02 f303 	mul.w	r3, r2, r3
 800184c:	121b      	asrs	r3, r3, #8
 800184e:	b2db      	uxtb	r3, r3
 8001850:	74bb      	strb	r3, [r7, #18]
 8001852:	e00a      	b.n	800186a <hsl_to_rgb+0xb2>
	else                  x = (256 - h1) * c >> 8;  // odd sextant, like yellow to green
 8001854:	89fb      	ldrh	r3, [r7, #14]
 8001856:	b29b      	uxth	r3, r3
 8001858:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800185c:	7cfa      	ldrb	r2, [r7, #19]
 800185e:	b2d2      	uxtb	r2, r2
 8001860:	fb02 f303 	mul.w	r3, r2, r3
 8001864:	121b      	asrs	r3, r3, #8
 8001866:	b2db      	uxtb	r3, r3
 8001868:	74bb      	strb	r3, [r7, #18]

	m = l - (c >> 1);
 800186a:	7cfb      	ldrb	r3, [r7, #19]
 800186c:	b2db      	uxtb	r3, r3
 800186e:	085b      	lsrs	r3, r3, #1
 8001870:	b2db      	uxtb	r3, r3
 8001872:	797a      	ldrb	r2, [r7, #5]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	b2db      	uxtb	r3, r3
 8001878:	747b      	strb	r3, [r7, #17]
	switch(H >> 8) {       // High byte = sextant of colorwheel
 800187a:	897b      	ldrh	r3, [r7, #10]
 800187c:	b29b      	uxth	r3, r3
 800187e:	0a1b      	lsrs	r3, r3, #8
 8001880:	b29b      	uxth	r3, r3
 8001882:	2b04      	cmp	r3, #4
 8001884:	d839      	bhi.n	80018fa <hsl_to_rgb+0x142>
 8001886:	a201      	add	r2, pc, #4	; (adr r2, 800188c <hsl_to_rgb+0xd4>)
 8001888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800188c:	080018a1 	.word	0x080018a1
 8001890:	080018b3 	.word	0x080018b3
 8001894:	080018c5 	.word	0x080018c5
 8001898:	080018d7 	.word	0x080018d7
 800189c:	080018e9 	.word	0x080018e9
	 case 0 : r = c; g = x; b = 0; break; // R to Y
 80018a0:	7cfb      	ldrb	r3, [r7, #19]
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	75fb      	strb	r3, [r7, #23]
 80018a6:	7cbb      	ldrb	r3, [r7, #18]
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	75bb      	strb	r3, [r7, #22]
 80018ac:	2300      	movs	r3, #0
 80018ae:	757b      	strb	r3, [r7, #21]
 80018b0:	e02c      	b.n	800190c <hsl_to_rgb+0x154>
	 case 1 : r = x; g = c; b = 0; break; // Y to G
 80018b2:	7cbb      	ldrb	r3, [r7, #18]
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	75fb      	strb	r3, [r7, #23]
 80018b8:	7cfb      	ldrb	r3, [r7, #19]
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	75bb      	strb	r3, [r7, #22]
 80018be:	2300      	movs	r3, #0
 80018c0:	757b      	strb	r3, [r7, #21]
 80018c2:	e023      	b.n	800190c <hsl_to_rgb+0x154>
	 case 2 : r = 0; g = c; b = x; break; // G to C
 80018c4:	2300      	movs	r3, #0
 80018c6:	75fb      	strb	r3, [r7, #23]
 80018c8:	7cfb      	ldrb	r3, [r7, #19]
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	75bb      	strb	r3, [r7, #22]
 80018ce:	7cbb      	ldrb	r3, [r7, #18]
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	757b      	strb	r3, [r7, #21]
 80018d4:	e01a      	b.n	800190c <hsl_to_rgb+0x154>
	 case 3 : r = 0; g = x; b = c; break; // C to B
 80018d6:	2300      	movs	r3, #0
 80018d8:	75fb      	strb	r3, [r7, #23]
 80018da:	7cbb      	ldrb	r3, [r7, #18]
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	75bb      	strb	r3, [r7, #22]
 80018e0:	7cfb      	ldrb	r3, [r7, #19]
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	757b      	strb	r3, [r7, #21]
 80018e6:	e011      	b.n	800190c <hsl_to_rgb+0x154>
	 case 4 : r = x; g = 0; b = c; break; // B to M
 80018e8:	7cbb      	ldrb	r3, [r7, #18]
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	75fb      	strb	r3, [r7, #23]
 80018ee:	2300      	movs	r3, #0
 80018f0:	75bb      	strb	r3, [r7, #22]
 80018f2:	7cfb      	ldrb	r3, [r7, #19]
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	757b      	strb	r3, [r7, #21]
 80018f8:	e008      	b.n	800190c <hsl_to_rgb+0x154>
	 default: r = c; g = 0; b = x; break; // M to R
 80018fa:	7cfb      	ldrb	r3, [r7, #19]
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	75fb      	strb	r3, [r7, #23]
 8001900:	2300      	movs	r3, #0
 8001902:	75bb      	strb	r3, [r7, #22]
 8001904:	7cbb      	ldrb	r3, [r7, #18]
 8001906:	b2db      	uxtb	r3, r3
 8001908:	757b      	strb	r3, [r7, #21]
 800190a:	bf00      	nop
	}

	return (((uint32_t)r + m) << 16) | (((uint32_t)g + m) << 8) | ((uint32_t)b + m);
 800190c:	7dfb      	ldrb	r3, [r7, #23]
 800190e:	b2db      	uxtb	r3, r3
 8001910:	461a      	mov	r2, r3
 8001912:	7c7b      	ldrb	r3, [r7, #17]
 8001914:	b2db      	uxtb	r3, r3
 8001916:	4413      	add	r3, r2
 8001918:	041a      	lsls	r2, r3, #16
 800191a:	7dbb      	ldrb	r3, [r7, #22]
 800191c:	b2db      	uxtb	r3, r3
 800191e:	4619      	mov	r1, r3
 8001920:	7c7b      	ldrb	r3, [r7, #17]
 8001922:	b2db      	uxtb	r3, r3
 8001924:	440b      	add	r3, r1
 8001926:	021b      	lsls	r3, r3, #8
 8001928:	431a      	orrs	r2, r3
 800192a:	7d7b      	ldrb	r3, [r7, #21]
 800192c:	b2db      	uxtb	r3, r3
 800192e:	4619      	mov	r1, r3
 8001930:	7c7b      	ldrb	r3, [r7, #17]
 8001932:	b2db      	uxtb	r3, r3
 8001934:	440b      	add	r3, r1
 8001936:	4313      	orrs	r3, r2
}
 8001938:	4618      	mov	r0, r3
 800193a:	371c      	adds	r7, #28
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001948:	b672      	cpsid	i
}
 800194a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800194c:	e7fe      	b.n	800194c <Error_Handler+0x8>
	...

08001950 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	607b      	str	r3, [r7, #4]
 800195a:	4b10      	ldr	r3, [pc, #64]	; (800199c <HAL_MspInit+0x4c>)
 800195c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195e:	4a0f      	ldr	r2, [pc, #60]	; (800199c <HAL_MspInit+0x4c>)
 8001960:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001964:	6453      	str	r3, [r2, #68]	; 0x44
 8001966:	4b0d      	ldr	r3, [pc, #52]	; (800199c <HAL_MspInit+0x4c>)
 8001968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800196e:	607b      	str	r3, [r7, #4]
 8001970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	603b      	str	r3, [r7, #0]
 8001976:	4b09      	ldr	r3, [pc, #36]	; (800199c <HAL_MspInit+0x4c>)
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	4a08      	ldr	r2, [pc, #32]	; (800199c <HAL_MspInit+0x4c>)
 800197c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001980:	6413      	str	r3, [r2, #64]	; 0x40
 8001982:	4b06      	ldr	r3, [pc, #24]	; (800199c <HAL_MspInit+0x4c>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198a:	603b      	str	r3, [r7, #0]
 800198c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800198e:	2007      	movs	r0, #7
 8001990:	f000 fab4 	bl	8001efc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001994:	bf00      	nop
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40023800 	.word	0x40023800

080019a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a23      	ldr	r2, [pc, #140]	; (8001a3c <HAL_TIM_Base_MspInit+0x9c>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d13f      	bne.n	8001a32 <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	4b22      	ldr	r3, [pc, #136]	; (8001a40 <HAL_TIM_Base_MspInit+0xa0>)
 80019b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ba:	4a21      	ldr	r2, [pc, #132]	; (8001a40 <HAL_TIM_Base_MspInit+0xa0>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	6453      	str	r3, [r2, #68]	; 0x44
 80019c2:	4b1f      	ldr	r3, [pc, #124]	; (8001a40 <HAL_TIM_Base_MspInit+0xa0>)
 80019c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 80019ce:	4b1d      	ldr	r3, [pc, #116]	; (8001a44 <HAL_TIM_Base_MspInit+0xa4>)
 80019d0:	4a1d      	ldr	r2, [pc, #116]	; (8001a48 <HAL_TIM_Base_MspInit+0xa8>)
 80019d2:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 80019d4:	4b1b      	ldr	r3, [pc, #108]	; (8001a44 <HAL_TIM_Base_MspInit+0xa4>)
 80019d6:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80019da:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019dc:	4b19      	ldr	r3, [pc, #100]	; (8001a44 <HAL_TIM_Base_MspInit+0xa4>)
 80019de:	2240      	movs	r2, #64	; 0x40
 80019e0:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019e2:	4b18      	ldr	r3, [pc, #96]	; (8001a44 <HAL_TIM_Base_MspInit+0xa4>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80019e8:	4b16      	ldr	r3, [pc, #88]	; (8001a44 <HAL_TIM_Base_MspInit+0xa4>)
 80019ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019ee:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019f0:	4b14      	ldr	r3, [pc, #80]	; (8001a44 <HAL_TIM_Base_MspInit+0xa4>)
 80019f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019f6:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019f8:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <HAL_TIM_Base_MspInit+0xa4>)
 80019fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019fe:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8001a00:	4b10      	ldr	r3, [pc, #64]	; (8001a44 <HAL_TIM_Base_MspInit+0xa4>)
 8001a02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a06:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001a08:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <HAL_TIM_Base_MspInit+0xa4>)
 8001a0a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a0e:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a10:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <HAL_TIM_Base_MspInit+0xa4>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001a16:	480b      	ldr	r0, [pc, #44]	; (8001a44 <HAL_TIM_Base_MspInit+0xa4>)
 8001a18:	f000 fab2 	bl	8001f80 <HAL_DMA_Init>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <HAL_TIM_Base_MspInit+0x86>
    {
      Error_Handler();
 8001a22:	f7ff ff8f 	bl	8001944 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a06      	ldr	r2, [pc, #24]	; (8001a44 <HAL_TIM_Base_MspInit+0xa4>)
 8001a2a:	625a      	str	r2, [r3, #36]	; 0x24
 8001a2c:	4a05      	ldr	r2, [pc, #20]	; (8001a44 <HAL_TIM_Base_MspInit+0xa4>)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001a32:	bf00      	nop
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40010000 	.word	0x40010000
 8001a40:	40023800 	.word	0x40023800
 8001a44:	200000ac 	.word	0x200000ac
 8001a48:	40026428 	.word	0x40026428

08001a4c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b088      	sub	sp, #32
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a54:	f107 030c 	add.w	r3, r7, #12
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	60da      	str	r2, [r3, #12]
 8001a62:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a12      	ldr	r2, [pc, #72]	; (8001ab4 <HAL_TIM_MspPostInit+0x68>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d11e      	bne.n	8001aac <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60bb      	str	r3, [r7, #8]
 8001a72:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <HAL_TIM_MspPostInit+0x6c>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	4a10      	ldr	r2, [pc, #64]	; (8001ab8 <HAL_TIM_MspPostInit+0x6c>)
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7e:	4b0e      	ldr	r3, [pc, #56]	; (8001ab8 <HAL_TIM_MspPostInit+0x6c>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	60bb      	str	r3, [r7, #8]
 8001a88:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a8e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a90:	2302      	movs	r3, #2
 8001a92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a94:	2300      	movs	r3, #0
 8001a96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa0:	f107 030c 	add.w	r3, r7, #12
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4805      	ldr	r0, [pc, #20]	; (8001abc <HAL_TIM_MspPostInit+0x70>)
 8001aa8:	f000 fdfc 	bl	80026a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001aac:	bf00      	nop
 8001aae:	3720      	adds	r7, #32
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40010000 	.word	0x40010000
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	40020000 	.word	0x40020000

08001ac0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08a      	sub	sp, #40	; 0x28
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac8:	f107 0314 	add.w	r3, r7, #20
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
 8001ad6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a19      	ldr	r2, [pc, #100]	; (8001b44 <HAL_UART_MspInit+0x84>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d12b      	bne.n	8001b3a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	613b      	str	r3, [r7, #16]
 8001ae6:	4b18      	ldr	r3, [pc, #96]	; (8001b48 <HAL_UART_MspInit+0x88>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	4a17      	ldr	r2, [pc, #92]	; (8001b48 <HAL_UART_MspInit+0x88>)
 8001aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001af0:	6413      	str	r3, [r2, #64]	; 0x40
 8001af2:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <HAL_UART_MspInit+0x88>)
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afa:	613b      	str	r3, [r7, #16]
 8001afc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <HAL_UART_MspInit+0x88>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	4a10      	ldr	r2, [pc, #64]	; (8001b48 <HAL_UART_MspInit+0x88>)
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0e:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <HAL_UART_MspInit+0x88>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b1a:	230c      	movs	r3, #12
 8001b1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b26:	2303      	movs	r3, #3
 8001b28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b2a:	2307      	movs	r3, #7
 8001b2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b2e:	f107 0314 	add.w	r3, r7, #20
 8001b32:	4619      	mov	r1, r3
 8001b34:	4805      	ldr	r0, [pc, #20]	; (8001b4c <HAL_UART_MspInit+0x8c>)
 8001b36:	f000 fdb5 	bl	80026a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b3a:	bf00      	nop
 8001b3c:	3728      	adds	r7, #40	; 0x28
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40004400 	.word	0x40004400
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	40020000 	.word	0x40020000

08001b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b54:	e7fe      	b.n	8001b54 <NMI_Handler+0x4>

08001b56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b56:	b480      	push	{r7}
 8001b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b5a:	e7fe      	b.n	8001b5a <HardFault_Handler+0x4>

08001b5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b60:	e7fe      	b.n	8001b60 <MemManage_Handler+0x4>

08001b62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b62:	b480      	push	{r7}
 8001b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b66:	e7fe      	b.n	8001b66 <BusFault_Handler+0x4>

08001b68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b6c:	e7fe      	b.n	8001b6c <UsageFault_Handler+0x4>

08001b6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b72:	bf00      	nop
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b9c:	f000 f89a 	bl	8001cd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ba0:	bf00      	nop
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001ba8:	4802      	ldr	r0, [pc, #8]	; (8001bb4 <DMA2_Stream1_IRQHandler+0x10>)
 8001baa:	f000 fb11 	bl	80021d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	200000ac 	.word	0x200000ac

08001bb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <SystemInit+0x20>)
 8001bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bc2:	4a05      	ldr	r2, [pc, #20]	; (8001bd8 <SystemInit+0x20>)
 8001bc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	e000ed00 	.word	0xe000ed00

08001bdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001be0:	480d      	ldr	r0, [pc, #52]	; (8001c18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001be2:	490e      	ldr	r1, [pc, #56]	; (8001c1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001be4:	4a0e      	ldr	r2, [pc, #56]	; (8001c20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001be6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001be8:	e002      	b.n	8001bf0 <LoopCopyDataInit>

08001bea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bee:	3304      	adds	r3, #4

08001bf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bf4:	d3f9      	bcc.n	8001bea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bf6:	4a0b      	ldr	r2, [pc, #44]	; (8001c24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bf8:	4c0b      	ldr	r4, [pc, #44]	; (8001c28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bfc:	e001      	b.n	8001c02 <LoopFillZerobss>

08001bfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c00:	3204      	adds	r2, #4

08001c02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c04:	d3fb      	bcc.n	8001bfe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c06:	f7ff ffd7 	bl	8001bb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c0a:	f002 fe81 	bl	8004910 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c0e:	f7ff fbc5 	bl	800139c <main>
  bx  lr    
 8001c12:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c1c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001c20:	08005c50 	.word	0x08005c50
  ldr r2, =_sbss
 8001c24:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001c28:	2000019c 	.word	0x2000019c

08001c2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c2c:	e7fe      	b.n	8001c2c <ADC_IRQHandler>
	...

08001c30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c34:	4b0e      	ldr	r3, [pc, #56]	; (8001c70 <HAL_Init+0x40>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a0d      	ldr	r2, [pc, #52]	; (8001c70 <HAL_Init+0x40>)
 8001c3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c40:	4b0b      	ldr	r3, [pc, #44]	; (8001c70 <HAL_Init+0x40>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a0a      	ldr	r2, [pc, #40]	; (8001c70 <HAL_Init+0x40>)
 8001c46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c4c:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <HAL_Init+0x40>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a07      	ldr	r2, [pc, #28]	; (8001c70 <HAL_Init+0x40>)
 8001c52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c58:	2003      	movs	r0, #3
 8001c5a:	f000 f94f 	bl	8001efc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c5e:	2000      	movs	r0, #0
 8001c60:	f000 f808 	bl	8001c74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c64:	f7ff fe74 	bl	8001950 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40023c00 	.word	0x40023c00

08001c74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c7c:	4b12      	ldr	r3, [pc, #72]	; (8001cc8 <HAL_InitTick+0x54>)
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	4b12      	ldr	r3, [pc, #72]	; (8001ccc <HAL_InitTick+0x58>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	4619      	mov	r1, r3
 8001c86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c92:	4618      	mov	r0, r3
 8001c94:	f000 f967 	bl	8001f66 <HAL_SYSTICK_Config>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e00e      	b.n	8001cc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2b0f      	cmp	r3, #15
 8001ca6:	d80a      	bhi.n	8001cbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	6879      	ldr	r1, [r7, #4]
 8001cac:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb0:	f000 f92f 	bl	8001f12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cb4:	4a06      	ldr	r2, [pc, #24]	; (8001cd0 <HAL_InitTick+0x5c>)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	e000      	b.n	8001cc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	20000000 	.word	0x20000000
 8001ccc:	20000008 	.word	0x20000008
 8001cd0:	20000004 	.word	0x20000004

08001cd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cd8:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <HAL_IncTick+0x20>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <HAL_IncTick+0x24>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	4a04      	ldr	r2, [pc, #16]	; (8001cf8 <HAL_IncTick+0x24>)
 8001ce6:	6013      	str	r3, [r2, #0]
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	20000008 	.word	0x20000008
 8001cf8:	20000198 	.word	0x20000198

08001cfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  return uwTick;
 8001d00:	4b03      	ldr	r3, [pc, #12]	; (8001d10 <HAL_GetTick+0x14>)
 8001d02:	681b      	ldr	r3, [r3, #0]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	20000198 	.word	0x20000198

08001d14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d1c:	f7ff ffee 	bl	8001cfc <HAL_GetTick>
 8001d20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d2c:	d005      	beq.n	8001d3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d2e:	4b0a      	ldr	r3, [pc, #40]	; (8001d58 <HAL_Delay+0x44>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	461a      	mov	r2, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	4413      	add	r3, r2
 8001d38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d3a:	bf00      	nop
 8001d3c:	f7ff ffde 	bl	8001cfc <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d8f7      	bhi.n	8001d3c <HAL_Delay+0x28>
  {
  }
}
 8001d4c:	bf00      	nop
 8001d4e:	bf00      	nop
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20000008 	.word	0x20000008

08001d5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f003 0307 	and.w	r3, r3, #7
 8001d6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d6c:	4b0c      	ldr	r3, [pc, #48]	; (8001da0 <__NVIC_SetPriorityGrouping+0x44>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d72:	68ba      	ldr	r2, [r7, #8]
 8001d74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d78:	4013      	ands	r3, r2
 8001d7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d8e:	4a04      	ldr	r2, [pc, #16]	; (8001da0 <__NVIC_SetPriorityGrouping+0x44>)
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	60d3      	str	r3, [r2, #12]
}
 8001d94:	bf00      	nop
 8001d96:	3714      	adds	r7, #20
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	e000ed00 	.word	0xe000ed00

08001da4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001da8:	4b04      	ldr	r3, [pc, #16]	; (8001dbc <__NVIC_GetPriorityGrouping+0x18>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	0a1b      	lsrs	r3, r3, #8
 8001dae:	f003 0307 	and.w	r3, r3, #7
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	e000ed00 	.word	0xe000ed00

08001dc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	db0b      	blt.n	8001dea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dd2:	79fb      	ldrb	r3, [r7, #7]
 8001dd4:	f003 021f 	and.w	r2, r3, #31
 8001dd8:	4907      	ldr	r1, [pc, #28]	; (8001df8 <__NVIC_EnableIRQ+0x38>)
 8001dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dde:	095b      	lsrs	r3, r3, #5
 8001de0:	2001      	movs	r0, #1
 8001de2:	fa00 f202 	lsl.w	r2, r0, r2
 8001de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	e000e100 	.word	0xe000e100

08001dfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	6039      	str	r1, [r7, #0]
 8001e06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	db0a      	blt.n	8001e26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	b2da      	uxtb	r2, r3
 8001e14:	490c      	ldr	r1, [pc, #48]	; (8001e48 <__NVIC_SetPriority+0x4c>)
 8001e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1a:	0112      	lsls	r2, r2, #4
 8001e1c:	b2d2      	uxtb	r2, r2
 8001e1e:	440b      	add	r3, r1
 8001e20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e24:	e00a      	b.n	8001e3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	b2da      	uxtb	r2, r3
 8001e2a:	4908      	ldr	r1, [pc, #32]	; (8001e4c <__NVIC_SetPriority+0x50>)
 8001e2c:	79fb      	ldrb	r3, [r7, #7]
 8001e2e:	f003 030f 	and.w	r3, r3, #15
 8001e32:	3b04      	subs	r3, #4
 8001e34:	0112      	lsls	r2, r2, #4
 8001e36:	b2d2      	uxtb	r2, r2
 8001e38:	440b      	add	r3, r1
 8001e3a:	761a      	strb	r2, [r3, #24]
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	e000e100 	.word	0xe000e100
 8001e4c:	e000ed00 	.word	0xe000ed00

08001e50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b089      	sub	sp, #36	; 0x24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f003 0307 	and.w	r3, r3, #7
 8001e62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	f1c3 0307 	rsb	r3, r3, #7
 8001e6a:	2b04      	cmp	r3, #4
 8001e6c:	bf28      	it	cs
 8001e6e:	2304      	movcs	r3, #4
 8001e70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	3304      	adds	r3, #4
 8001e76:	2b06      	cmp	r3, #6
 8001e78:	d902      	bls.n	8001e80 <NVIC_EncodePriority+0x30>
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	3b03      	subs	r3, #3
 8001e7e:	e000      	b.n	8001e82 <NVIC_EncodePriority+0x32>
 8001e80:	2300      	movs	r3, #0
 8001e82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e84:	f04f 32ff 	mov.w	r2, #4294967295
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	43da      	mvns	r2, r3
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	401a      	ands	r2, r3
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e98:	f04f 31ff 	mov.w	r1, #4294967295
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea2:	43d9      	mvns	r1, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea8:	4313      	orrs	r3, r2
         );
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3724      	adds	r7, #36	; 0x24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
	...

08001eb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ec8:	d301      	bcc.n	8001ece <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e00f      	b.n	8001eee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ece:	4a0a      	ldr	r2, [pc, #40]	; (8001ef8 <SysTick_Config+0x40>)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ed6:	210f      	movs	r1, #15
 8001ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8001edc:	f7ff ff8e 	bl	8001dfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ee0:	4b05      	ldr	r3, [pc, #20]	; (8001ef8 <SysTick_Config+0x40>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ee6:	4b04      	ldr	r3, [pc, #16]	; (8001ef8 <SysTick_Config+0x40>)
 8001ee8:	2207      	movs	r2, #7
 8001eea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	e000e010 	.word	0xe000e010

08001efc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f7ff ff29 	bl	8001d5c <__NVIC_SetPriorityGrouping>
}
 8001f0a:	bf00      	nop
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b086      	sub	sp, #24
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	4603      	mov	r3, r0
 8001f1a:	60b9      	str	r1, [r7, #8]
 8001f1c:	607a      	str	r2, [r7, #4]
 8001f1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f24:	f7ff ff3e 	bl	8001da4 <__NVIC_GetPriorityGrouping>
 8001f28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	68b9      	ldr	r1, [r7, #8]
 8001f2e:	6978      	ldr	r0, [r7, #20]
 8001f30:	f7ff ff8e 	bl	8001e50 <NVIC_EncodePriority>
 8001f34:	4602      	mov	r2, r0
 8001f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f3a:	4611      	mov	r1, r2
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff ff5d 	bl	8001dfc <__NVIC_SetPriority>
}
 8001f42:	bf00      	nop
 8001f44:	3718      	adds	r7, #24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b082      	sub	sp, #8
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	4603      	mov	r3, r0
 8001f52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff ff31 	bl	8001dc0 <__NVIC_EnableIRQ>
}
 8001f5e:	bf00      	nop
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b082      	sub	sp, #8
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f7ff ffa2 	bl	8001eb8 <SysTick_Config>
 8001f74:	4603      	mov	r3, r0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
	...

08001f80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f8c:	f7ff feb6 	bl	8001cfc <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d101      	bne.n	8001f9c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e099      	b.n	80020d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f022 0201 	bic.w	r2, r2, #1
 8001fba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fbc:	e00f      	b.n	8001fde <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fbe:	f7ff fe9d 	bl	8001cfc <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b05      	cmp	r3, #5
 8001fca:	d908      	bls.n	8001fde <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2220      	movs	r2, #32
 8001fd0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2203      	movs	r2, #3
 8001fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e078      	b.n	80020d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1e8      	bne.n	8001fbe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	4b38      	ldr	r3, [pc, #224]	; (80020d8 <HAL_DMA_Init+0x158>)
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685a      	ldr	r2, [r3, #4]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800200a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002016:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002022:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a1b      	ldr	r3, [r3, #32]
 8002028:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	4313      	orrs	r3, r2
 800202e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002034:	2b04      	cmp	r3, #4
 8002036:	d107      	bne.n	8002048 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002040:	4313      	orrs	r3, r2
 8002042:	697a      	ldr	r2, [r7, #20]
 8002044:	4313      	orrs	r3, r2
 8002046:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	697a      	ldr	r2, [r7, #20]
 800204e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	f023 0307 	bic.w	r3, r3, #7
 800205e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002064:	697a      	ldr	r2, [r7, #20]
 8002066:	4313      	orrs	r3, r2
 8002068:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206e:	2b04      	cmp	r3, #4
 8002070:	d117      	bne.n	80020a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002076:	697a      	ldr	r2, [r7, #20]
 8002078:	4313      	orrs	r3, r2
 800207a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002080:	2b00      	cmp	r3, #0
 8002082:	d00e      	beq.n	80020a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 fa91 	bl	80025ac <DMA_CheckFifoParam>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d008      	beq.n	80020a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2240      	movs	r2, #64	; 0x40
 8002094:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2201      	movs	r2, #1
 800209a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800209e:	2301      	movs	r3, #1
 80020a0:	e016      	b.n	80020d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	697a      	ldr	r2, [r7, #20]
 80020a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 fa48 	bl	8002540 <DMA_CalcBaseAndBitshift>
 80020b0:	4603      	mov	r3, r0
 80020b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b8:	223f      	movs	r2, #63	; 0x3f
 80020ba:	409a      	lsls	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2201      	movs	r2, #1
 80020ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3718      	adds	r7, #24
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	f010803f 	.word	0xf010803f

080020dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
 80020e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020ea:	2300      	movs	r3, #0
 80020ec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d101      	bne.n	8002102 <HAL_DMA_Start_IT+0x26>
 80020fe:	2302      	movs	r3, #2
 8002100:	e040      	b.n	8002184 <HAL_DMA_Start_IT+0xa8>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b01      	cmp	r3, #1
 8002114:	d12f      	bne.n	8002176 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2202      	movs	r2, #2
 800211a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2200      	movs	r2, #0
 8002122:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	68b9      	ldr	r1, [r7, #8]
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f000 f9da 	bl	80024e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002134:	223f      	movs	r2, #63	; 0x3f
 8002136:	409a      	lsls	r2, r3
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f042 0216 	orr.w	r2, r2, #22
 800214a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002150:	2b00      	cmp	r3, #0
 8002152:	d007      	beq.n	8002164 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f042 0208 	orr.w	r2, r2, #8
 8002162:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f042 0201 	orr.w	r2, r2, #1
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	e005      	b.n	8002182 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800217e:	2302      	movs	r3, #2
 8002180:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002182:	7dfb      	ldrb	r3, [r7, #23]
}
 8002184:	4618      	mov	r0, r3
 8002186:	3718      	adds	r7, #24
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800219a:	b2db      	uxtb	r3, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d004      	beq.n	80021aa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2280      	movs	r2, #128	; 0x80
 80021a4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e00c      	b.n	80021c4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2205      	movs	r2, #5
 80021ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 0201 	bic.w	r2, r2, #1
 80021c0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80021d8:	2300      	movs	r3, #0
 80021da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80021dc:	4b92      	ldr	r3, [pc, #584]	; (8002428 <HAL_DMA_IRQHandler+0x258>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a92      	ldr	r2, [pc, #584]	; (800242c <HAL_DMA_IRQHandler+0x25c>)
 80021e2:	fba2 2303 	umull	r2, r3, r2, r3
 80021e6:	0a9b      	lsrs	r3, r3, #10
 80021e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021fa:	2208      	movs	r2, #8
 80021fc:	409a      	lsls	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	4013      	ands	r3, r2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d01a      	beq.n	800223c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	d013      	beq.n	800223c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f022 0204 	bic.w	r2, r2, #4
 8002222:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002228:	2208      	movs	r2, #8
 800222a:	409a      	lsls	r2, r3
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002234:	f043 0201 	orr.w	r2, r3, #1
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002240:	2201      	movs	r2, #1
 8002242:	409a      	lsls	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	4013      	ands	r3, r2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d012      	beq.n	8002272 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00b      	beq.n	8002272 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800225e:	2201      	movs	r2, #1
 8002260:	409a      	lsls	r2, r3
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800226a:	f043 0202 	orr.w	r2, r3, #2
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002276:	2204      	movs	r2, #4
 8002278:	409a      	lsls	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	4013      	ands	r3, r2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d012      	beq.n	80022a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d00b      	beq.n	80022a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002294:	2204      	movs	r2, #4
 8002296:	409a      	lsls	r2, r3
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a0:	f043 0204 	orr.w	r2, r3, #4
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ac:	2210      	movs	r2, #16
 80022ae:	409a      	lsls	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	4013      	ands	r3, r2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d043      	beq.n	8002340 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0308 	and.w	r3, r3, #8
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d03c      	beq.n	8002340 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ca:	2210      	movs	r2, #16
 80022cc:	409a      	lsls	r2, r3
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d018      	beq.n	8002312 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d108      	bne.n	8002300 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d024      	beq.n	8002340 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	4798      	blx	r3
 80022fe:	e01f      	b.n	8002340 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002304:	2b00      	cmp	r3, #0
 8002306:	d01b      	beq.n	8002340 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	4798      	blx	r3
 8002310:	e016      	b.n	8002340 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800231c:	2b00      	cmp	r3, #0
 800231e:	d107      	bne.n	8002330 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f022 0208 	bic.w	r2, r2, #8
 800232e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002334:	2b00      	cmp	r3, #0
 8002336:	d003      	beq.n	8002340 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002344:	2220      	movs	r2, #32
 8002346:	409a      	lsls	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	4013      	ands	r3, r2
 800234c:	2b00      	cmp	r3, #0
 800234e:	f000 808e 	beq.w	800246e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0310 	and.w	r3, r3, #16
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 8086 	beq.w	800246e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002366:	2220      	movs	r2, #32
 8002368:	409a      	lsls	r2, r3
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b05      	cmp	r3, #5
 8002378:	d136      	bne.n	80023e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f022 0216 	bic.w	r2, r2, #22
 8002388:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	695a      	ldr	r2, [r3, #20]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002398:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d103      	bne.n	80023aa <HAL_DMA_IRQHandler+0x1da>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d007      	beq.n	80023ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 0208 	bic.w	r2, r2, #8
 80023b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023be:	223f      	movs	r2, #63	; 0x3f
 80023c0:	409a      	lsls	r2, r3
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d07d      	beq.n	80024da <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	4798      	blx	r3
        }
        return;
 80023e6:	e078      	b.n	80024da <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d01c      	beq.n	8002430 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d108      	bne.n	8002416 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002408:	2b00      	cmp	r3, #0
 800240a:	d030      	beq.n	800246e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	4798      	blx	r3
 8002414:	e02b      	b.n	800246e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800241a:	2b00      	cmp	r3, #0
 800241c:	d027      	beq.n	800246e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	4798      	blx	r3
 8002426:	e022      	b.n	800246e <HAL_DMA_IRQHandler+0x29e>
 8002428:	20000000 	.word	0x20000000
 800242c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800243a:	2b00      	cmp	r3, #0
 800243c:	d10f      	bne.n	800245e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 0210 	bic.w	r2, r2, #16
 800244c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2201      	movs	r2, #1
 8002452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002472:	2b00      	cmp	r3, #0
 8002474:	d032      	beq.n	80024dc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	d022      	beq.n	80024c8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2205      	movs	r2, #5
 8002486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 0201 	bic.w	r2, r2, #1
 8002498:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	3301      	adds	r3, #1
 800249e:	60bb      	str	r3, [r7, #8]
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d307      	bcc.n	80024b6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1f2      	bne.n	800249a <HAL_DMA_IRQHandler+0x2ca>
 80024b4:	e000      	b.n	80024b8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80024b6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d005      	beq.n	80024dc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	4798      	blx	r3
 80024d8:	e000      	b.n	80024dc <HAL_DMA_IRQHandler+0x30c>
        return;
 80024da:	bf00      	nop
    }
  }
}
 80024dc:	3718      	adds	r7, #24
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop

080024e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
 80024f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002500:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	2b40      	cmp	r3, #64	; 0x40
 8002510:	d108      	bne.n	8002524 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002522:	e007      	b.n	8002534 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68ba      	ldr	r2, [r7, #8]
 800252a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	60da      	str	r2, [r3, #12]
}
 8002534:	bf00      	nop
 8002536:	3714      	adds	r7, #20
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	b2db      	uxtb	r3, r3
 800254e:	3b10      	subs	r3, #16
 8002550:	4a14      	ldr	r2, [pc, #80]	; (80025a4 <DMA_CalcBaseAndBitshift+0x64>)
 8002552:	fba2 2303 	umull	r2, r3, r2, r3
 8002556:	091b      	lsrs	r3, r3, #4
 8002558:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800255a:	4a13      	ldr	r2, [pc, #76]	; (80025a8 <DMA_CalcBaseAndBitshift+0x68>)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	4413      	add	r3, r2
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	461a      	mov	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2b03      	cmp	r3, #3
 800256c:	d909      	bls.n	8002582 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002576:	f023 0303 	bic.w	r3, r3, #3
 800257a:	1d1a      	adds	r2, r3, #4
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	659a      	str	r2, [r3, #88]	; 0x58
 8002580:	e007      	b.n	8002592 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800258a:	f023 0303 	bic.w	r3, r3, #3
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002596:	4618      	mov	r0, r3
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	aaaaaaab 	.word	0xaaaaaaab
 80025a8:	08005a60 	.word	0x08005a60

080025ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025b4:	2300      	movs	r3, #0
 80025b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d11f      	bne.n	8002606 <DMA_CheckFifoParam+0x5a>
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	2b03      	cmp	r3, #3
 80025ca:	d856      	bhi.n	800267a <DMA_CheckFifoParam+0xce>
 80025cc:	a201      	add	r2, pc, #4	; (adr r2, 80025d4 <DMA_CheckFifoParam+0x28>)
 80025ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025d2:	bf00      	nop
 80025d4:	080025e5 	.word	0x080025e5
 80025d8:	080025f7 	.word	0x080025f7
 80025dc:	080025e5 	.word	0x080025e5
 80025e0:	0800267b 	.word	0x0800267b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d046      	beq.n	800267e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025f4:	e043      	b.n	800267e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025fe:	d140      	bne.n	8002682 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002604:	e03d      	b.n	8002682 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800260e:	d121      	bne.n	8002654 <DMA_CheckFifoParam+0xa8>
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	2b03      	cmp	r3, #3
 8002614:	d837      	bhi.n	8002686 <DMA_CheckFifoParam+0xda>
 8002616:	a201      	add	r2, pc, #4	; (adr r2, 800261c <DMA_CheckFifoParam+0x70>)
 8002618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800261c:	0800262d 	.word	0x0800262d
 8002620:	08002633 	.word	0x08002633
 8002624:	0800262d 	.word	0x0800262d
 8002628:	08002645 	.word	0x08002645
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	73fb      	strb	r3, [r7, #15]
      break;
 8002630:	e030      	b.n	8002694 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002636:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d025      	beq.n	800268a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002642:	e022      	b.n	800268a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002648:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800264c:	d11f      	bne.n	800268e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002652:	e01c      	b.n	800268e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	2b02      	cmp	r3, #2
 8002658:	d903      	bls.n	8002662 <DMA_CheckFifoParam+0xb6>
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	2b03      	cmp	r3, #3
 800265e:	d003      	beq.n	8002668 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002660:	e018      	b.n	8002694 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	73fb      	strb	r3, [r7, #15]
      break;
 8002666:	e015      	b.n	8002694 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00e      	beq.n	8002692 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	73fb      	strb	r3, [r7, #15]
      break;
 8002678:	e00b      	b.n	8002692 <DMA_CheckFifoParam+0xe6>
      break;
 800267a:	bf00      	nop
 800267c:	e00a      	b.n	8002694 <DMA_CheckFifoParam+0xe8>
      break;
 800267e:	bf00      	nop
 8002680:	e008      	b.n	8002694 <DMA_CheckFifoParam+0xe8>
      break;
 8002682:	bf00      	nop
 8002684:	e006      	b.n	8002694 <DMA_CheckFifoParam+0xe8>
      break;
 8002686:	bf00      	nop
 8002688:	e004      	b.n	8002694 <DMA_CheckFifoParam+0xe8>
      break;
 800268a:	bf00      	nop
 800268c:	e002      	b.n	8002694 <DMA_CheckFifoParam+0xe8>
      break;   
 800268e:	bf00      	nop
 8002690:	e000      	b.n	8002694 <DMA_CheckFifoParam+0xe8>
      break;
 8002692:	bf00      	nop
    }
  } 
  
  return status; 
 8002694:	7bfb      	ldrb	r3, [r7, #15]
}
 8002696:	4618      	mov	r0, r3
 8002698:	3714      	adds	r7, #20
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop

080026a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b089      	sub	sp, #36	; 0x24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026ae:	2300      	movs	r3, #0
 80026b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026b2:	2300      	movs	r3, #0
 80026b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026b6:	2300      	movs	r3, #0
 80026b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026ba:	2300      	movs	r3, #0
 80026bc:	61fb      	str	r3, [r7, #28]
 80026be:	e159      	b.n	8002974 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026c0:	2201      	movs	r2, #1
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	4013      	ands	r3, r2
 80026d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	429a      	cmp	r2, r3
 80026da:	f040 8148 	bne.w	800296e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f003 0303 	and.w	r3, r3, #3
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d005      	beq.n	80026f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d130      	bne.n	8002758 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	2203      	movs	r2, #3
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	43db      	mvns	r3, r3
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	4013      	ands	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	68da      	ldr	r2, [r3, #12]
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4313      	orrs	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800272c:	2201      	movs	r2, #1
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	43db      	mvns	r3, r3
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4013      	ands	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	091b      	lsrs	r3, r3, #4
 8002742:	f003 0201 	and.w	r2, r3, #1
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	4313      	orrs	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f003 0303 	and.w	r3, r3, #3
 8002760:	2b03      	cmp	r3, #3
 8002762:	d017      	beq.n	8002794 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	2203      	movs	r2, #3
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	43db      	mvns	r3, r3
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4013      	ands	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	689a      	ldr	r2, [r3, #8]
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4313      	orrs	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f003 0303 	and.w	r3, r3, #3
 800279c:	2b02      	cmp	r3, #2
 800279e:	d123      	bne.n	80027e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	08da      	lsrs	r2, r3, #3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3208      	adds	r2, #8
 80027a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	f003 0307 	and.w	r3, r3, #7
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	220f      	movs	r2, #15
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	43db      	mvns	r3, r3
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	4013      	ands	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	691a      	ldr	r2, [r3, #16]
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	f003 0307 	and.w	r3, r3, #7
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	08da      	lsrs	r2, r3, #3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	3208      	adds	r2, #8
 80027e2:	69b9      	ldr	r1, [r7, #24]
 80027e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	2203      	movs	r2, #3
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	43db      	mvns	r3, r3
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	4013      	ands	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f003 0203 	and.w	r2, r3, #3
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	4313      	orrs	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002824:	2b00      	cmp	r3, #0
 8002826:	f000 80a2 	beq.w	800296e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	4b57      	ldr	r3, [pc, #348]	; (800298c <HAL_GPIO_Init+0x2e8>)
 8002830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002832:	4a56      	ldr	r2, [pc, #344]	; (800298c <HAL_GPIO_Init+0x2e8>)
 8002834:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002838:	6453      	str	r3, [r2, #68]	; 0x44
 800283a:	4b54      	ldr	r3, [pc, #336]	; (800298c <HAL_GPIO_Init+0x2e8>)
 800283c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002846:	4a52      	ldr	r2, [pc, #328]	; (8002990 <HAL_GPIO_Init+0x2ec>)
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	089b      	lsrs	r3, r3, #2
 800284c:	3302      	adds	r3, #2
 800284e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002852:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	f003 0303 	and.w	r3, r3, #3
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	220f      	movs	r2, #15
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	43db      	mvns	r3, r3
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	4013      	ands	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a49      	ldr	r2, [pc, #292]	; (8002994 <HAL_GPIO_Init+0x2f0>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d019      	beq.n	80028a6 <HAL_GPIO_Init+0x202>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a48      	ldr	r2, [pc, #288]	; (8002998 <HAL_GPIO_Init+0x2f4>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d013      	beq.n	80028a2 <HAL_GPIO_Init+0x1fe>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a47      	ldr	r2, [pc, #284]	; (800299c <HAL_GPIO_Init+0x2f8>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d00d      	beq.n	800289e <HAL_GPIO_Init+0x1fa>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a46      	ldr	r2, [pc, #280]	; (80029a0 <HAL_GPIO_Init+0x2fc>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d007      	beq.n	800289a <HAL_GPIO_Init+0x1f6>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a45      	ldr	r2, [pc, #276]	; (80029a4 <HAL_GPIO_Init+0x300>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d101      	bne.n	8002896 <HAL_GPIO_Init+0x1f2>
 8002892:	2304      	movs	r3, #4
 8002894:	e008      	b.n	80028a8 <HAL_GPIO_Init+0x204>
 8002896:	2307      	movs	r3, #7
 8002898:	e006      	b.n	80028a8 <HAL_GPIO_Init+0x204>
 800289a:	2303      	movs	r3, #3
 800289c:	e004      	b.n	80028a8 <HAL_GPIO_Init+0x204>
 800289e:	2302      	movs	r3, #2
 80028a0:	e002      	b.n	80028a8 <HAL_GPIO_Init+0x204>
 80028a2:	2301      	movs	r3, #1
 80028a4:	e000      	b.n	80028a8 <HAL_GPIO_Init+0x204>
 80028a6:	2300      	movs	r3, #0
 80028a8:	69fa      	ldr	r2, [r7, #28]
 80028aa:	f002 0203 	and.w	r2, r2, #3
 80028ae:	0092      	lsls	r2, r2, #2
 80028b0:	4093      	lsls	r3, r2
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028b8:	4935      	ldr	r1, [pc, #212]	; (8002990 <HAL_GPIO_Init+0x2ec>)
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	089b      	lsrs	r3, r3, #2
 80028be:	3302      	adds	r3, #2
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028c6:	4b38      	ldr	r3, [pc, #224]	; (80029a8 <HAL_GPIO_Init+0x304>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	43db      	mvns	r3, r3
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	4013      	ands	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d003      	beq.n	80028ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028ea:	4a2f      	ldr	r2, [pc, #188]	; (80029a8 <HAL_GPIO_Init+0x304>)
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80028f0:	4b2d      	ldr	r3, [pc, #180]	; (80029a8 <HAL_GPIO_Init+0x304>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	43db      	mvns	r3, r3
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	4013      	ands	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d003      	beq.n	8002914 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	4313      	orrs	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002914:	4a24      	ldr	r2, [pc, #144]	; (80029a8 <HAL_GPIO_Init+0x304>)
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800291a:	4b23      	ldr	r3, [pc, #140]	; (80029a8 <HAL_GPIO_Init+0x304>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	43db      	mvns	r3, r3
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	4013      	ands	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d003      	beq.n	800293e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	4313      	orrs	r3, r2
 800293c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800293e:	4a1a      	ldr	r2, [pc, #104]	; (80029a8 <HAL_GPIO_Init+0x304>)
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002944:	4b18      	ldr	r3, [pc, #96]	; (80029a8 <HAL_GPIO_Init+0x304>)
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	43db      	mvns	r3, r3
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	4013      	ands	r3, r2
 8002952:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d003      	beq.n	8002968 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	4313      	orrs	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002968:	4a0f      	ldr	r2, [pc, #60]	; (80029a8 <HAL_GPIO_Init+0x304>)
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	3301      	adds	r3, #1
 8002972:	61fb      	str	r3, [r7, #28]
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	2b0f      	cmp	r3, #15
 8002978:	f67f aea2 	bls.w	80026c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800297c:	bf00      	nop
 800297e:	bf00      	nop
 8002980:	3724      	adds	r7, #36	; 0x24
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	40023800 	.word	0x40023800
 8002990:	40013800 	.word	0x40013800
 8002994:	40020000 	.word	0x40020000
 8002998:	40020400 	.word	0x40020400
 800299c:	40020800 	.word	0x40020800
 80029a0:	40020c00 	.word	0x40020c00
 80029a4:	40021000 	.word	0x40021000
 80029a8:	40013c00 	.word	0x40013c00

080029ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	460b      	mov	r3, r1
 80029b6:	807b      	strh	r3, [r7, #2]
 80029b8:	4613      	mov	r3, r2
 80029ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029bc:	787b      	ldrb	r3, [r7, #1]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029c2:	887a      	ldrh	r2, [r7, #2]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029c8:	e003      	b.n	80029d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029ca:	887b      	ldrh	r3, [r7, #2]
 80029cc:	041a      	lsls	r2, r3, #16
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	619a      	str	r2, [r3, #24]
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
	...

080029e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e264      	b.n	8002ebc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d075      	beq.n	8002aea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029fe:	4ba3      	ldr	r3, [pc, #652]	; (8002c8c <HAL_RCC_OscConfig+0x2ac>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 030c 	and.w	r3, r3, #12
 8002a06:	2b04      	cmp	r3, #4
 8002a08:	d00c      	beq.n	8002a24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a0a:	4ba0      	ldr	r3, [pc, #640]	; (8002c8c <HAL_RCC_OscConfig+0x2ac>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a12:	2b08      	cmp	r3, #8
 8002a14:	d112      	bne.n	8002a3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a16:	4b9d      	ldr	r3, [pc, #628]	; (8002c8c <HAL_RCC_OscConfig+0x2ac>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a22:	d10b      	bne.n	8002a3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a24:	4b99      	ldr	r3, [pc, #612]	; (8002c8c <HAL_RCC_OscConfig+0x2ac>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d05b      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x108>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d157      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e23f      	b.n	8002ebc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a44:	d106      	bne.n	8002a54 <HAL_RCC_OscConfig+0x74>
 8002a46:	4b91      	ldr	r3, [pc, #580]	; (8002c8c <HAL_RCC_OscConfig+0x2ac>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a90      	ldr	r2, [pc, #576]	; (8002c8c <HAL_RCC_OscConfig+0x2ac>)
 8002a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a50:	6013      	str	r3, [r2, #0]
 8002a52:	e01d      	b.n	8002a90 <HAL_RCC_OscConfig+0xb0>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a5c:	d10c      	bne.n	8002a78 <HAL_RCC_OscConfig+0x98>
 8002a5e:	4b8b      	ldr	r3, [pc, #556]	; (8002c8c <HAL_RCC_OscConfig+0x2ac>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a8a      	ldr	r2, [pc, #552]	; (8002c8c <HAL_RCC_OscConfig+0x2ac>)
 8002a64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a68:	6013      	str	r3, [r2, #0]
 8002a6a:	4b88      	ldr	r3, [pc, #544]	; (8002c8c <HAL_RCC_OscConfig+0x2ac>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a87      	ldr	r2, [pc, #540]	; (8002c8c <HAL_RCC_OscConfig+0x2ac>)
 8002a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a74:	6013      	str	r3, [r2, #0]
 8002a76:	e00b      	b.n	8002a90 <HAL_RCC_OscConfig+0xb0>
 8002a78:	4b84      	ldr	r3, [pc, #528]	; (8002c8c <HAL_RCC_OscConfig+0x2ac>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a83      	ldr	r2, [pc, #524]	; (8002c8c <HAL_RCC_OscConfig+0x2ac>)
 8002a7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a82:	6013      	str	r3, [r2, #0]
 8002a84:	4b81      	ldr	r3, [pc, #516]	; (8002c8c <HAL_RCC_OscConfig+0x2ac>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a80      	ldr	r2, [pc, #512]	; (8002c8c <HAL_RCC_OscConfig+0x2ac>)
 8002a8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d013      	beq.n	8002ac0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a98:	f7ff f930 	bl	8001cfc <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aa0:	f7ff f92c 	bl	8001cfc <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b64      	cmp	r3, #100	; 0x64
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e204      	b.n	8002ebc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ab2:	4b76      	ldr	r3, [pc, #472]	; (8002c8c <HAL_RCC_OscConfig+0x2ac>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d0f0      	beq.n	8002aa0 <HAL_RCC_OscConfig+0xc0>
 8002abe:	e014      	b.n	8002aea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac0:	f7ff f91c 	bl	8001cfc <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ac8:	f7ff f918 	bl	8001cfc <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b64      	cmp	r3, #100	; 0x64
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e1f0      	b.n	8002ebc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ada:	4b6c      	ldr	r3, [pc, #432]	; (8002c8c <HAL_RCC_OscConfig+0x2ac>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1f0      	bne.n	8002ac8 <HAL_RCC_OscConfig+0xe8>
 8002ae6:	e000      	b.n	8002aea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ae8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d063      	beq.n	8002bbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002af6:	4b65      	ldr	r3, [pc, #404]	; (8002c8c <HAL_RCC_OscConfig+0x2ac>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f003 030c 	and.w	r3, r3, #12
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00b      	beq.n	8002b1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b02:	4b62      	ldr	r3, [pc, #392]	; (8002c8c <HAL_RCC_OscConfig+0x2ac>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b0a:	2b08      	cmp	r3, #8
 8002b0c:	d11c      	bne.n	8002b48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b0e:	4b5f      	ldr	r3, [pc, #380]	; (8002c8c <HAL_RCC_OscConfig+0x2ac>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d116      	bne.n	8002b48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b1a:	4b5c      	ldr	r3, [pc, #368]	; (8002c8c <HAL_RCC_OscConfig+0x2ac>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d005      	beq.n	8002b32 <HAL_RCC_OscConfig+0x152>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d001      	beq.n	8002b32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e1c4      	b.n	8002ebc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b32:	4b56      	ldr	r3, [pc, #344]	; (8002c8c <HAL_RCC_OscConfig+0x2ac>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	4952      	ldr	r1, [pc, #328]	; (8002c8c <HAL_RCC_OscConfig+0x2ac>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b46:	e03a      	b.n	8002bbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d020      	beq.n	8002b92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b50:	4b4f      	ldr	r3, [pc, #316]	; (8002c90 <HAL_RCC_OscConfig+0x2b0>)
 8002b52:	2201      	movs	r2, #1
 8002b54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b56:	f7ff f8d1 	bl	8001cfc <HAL_GetTick>
 8002b5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b5c:	e008      	b.n	8002b70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b5e:	f7ff f8cd 	bl	8001cfc <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e1a5      	b.n	8002ebc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b70:	4b46      	ldr	r3, [pc, #280]	; (8002c8c <HAL_RCC_OscConfig+0x2ac>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d0f0      	beq.n	8002b5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b7c:	4b43      	ldr	r3, [pc, #268]	; (8002c8c <HAL_RCC_OscConfig+0x2ac>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	4940      	ldr	r1, [pc, #256]	; (8002c8c <HAL_RCC_OscConfig+0x2ac>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	600b      	str	r3, [r1, #0]
 8002b90:	e015      	b.n	8002bbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b92:	4b3f      	ldr	r3, [pc, #252]	; (8002c90 <HAL_RCC_OscConfig+0x2b0>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b98:	f7ff f8b0 	bl	8001cfc <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ba0:	f7ff f8ac 	bl	8001cfc <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e184      	b.n	8002ebc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bb2:	4b36      	ldr	r3, [pc, #216]	; (8002c8c <HAL_RCC_OscConfig+0x2ac>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1f0      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0308 	and.w	r3, r3, #8
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d030      	beq.n	8002c2c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d016      	beq.n	8002c00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bd2:	4b30      	ldr	r3, [pc, #192]	; (8002c94 <HAL_RCC_OscConfig+0x2b4>)
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd8:	f7ff f890 	bl	8001cfc <HAL_GetTick>
 8002bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bde:	e008      	b.n	8002bf2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002be0:	f7ff f88c 	bl	8001cfc <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e164      	b.n	8002ebc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bf2:	4b26      	ldr	r3, [pc, #152]	; (8002c8c <HAL_RCC_OscConfig+0x2ac>)
 8002bf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d0f0      	beq.n	8002be0 <HAL_RCC_OscConfig+0x200>
 8002bfe:	e015      	b.n	8002c2c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c00:	4b24      	ldr	r3, [pc, #144]	; (8002c94 <HAL_RCC_OscConfig+0x2b4>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c06:	f7ff f879 	bl	8001cfc <HAL_GetTick>
 8002c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c0c:	e008      	b.n	8002c20 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c0e:	f7ff f875 	bl	8001cfc <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d901      	bls.n	8002c20 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e14d      	b.n	8002ebc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c20:	4b1a      	ldr	r3, [pc, #104]	; (8002c8c <HAL_RCC_OscConfig+0x2ac>)
 8002c22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1f0      	bne.n	8002c0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0304 	and.w	r3, r3, #4
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 80a0 	beq.w	8002d7a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c3e:	4b13      	ldr	r3, [pc, #76]	; (8002c8c <HAL_RCC_OscConfig+0x2ac>)
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d10f      	bne.n	8002c6a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	60bb      	str	r3, [r7, #8]
 8002c4e:	4b0f      	ldr	r3, [pc, #60]	; (8002c8c <HAL_RCC_OscConfig+0x2ac>)
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	4a0e      	ldr	r2, [pc, #56]	; (8002c8c <HAL_RCC_OscConfig+0x2ac>)
 8002c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c58:	6413      	str	r3, [r2, #64]	; 0x40
 8002c5a:	4b0c      	ldr	r3, [pc, #48]	; (8002c8c <HAL_RCC_OscConfig+0x2ac>)
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c62:	60bb      	str	r3, [r7, #8]
 8002c64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c66:	2301      	movs	r3, #1
 8002c68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c6a:	4b0b      	ldr	r3, [pc, #44]	; (8002c98 <HAL_RCC_OscConfig+0x2b8>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d121      	bne.n	8002cba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c76:	4b08      	ldr	r3, [pc, #32]	; (8002c98 <HAL_RCC_OscConfig+0x2b8>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a07      	ldr	r2, [pc, #28]	; (8002c98 <HAL_RCC_OscConfig+0x2b8>)
 8002c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c82:	f7ff f83b 	bl	8001cfc <HAL_GetTick>
 8002c86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c88:	e011      	b.n	8002cae <HAL_RCC_OscConfig+0x2ce>
 8002c8a:	bf00      	nop
 8002c8c:	40023800 	.word	0x40023800
 8002c90:	42470000 	.word	0x42470000
 8002c94:	42470e80 	.word	0x42470e80
 8002c98:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c9c:	f7ff f82e 	bl	8001cfc <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e106      	b.n	8002ebc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cae:	4b85      	ldr	r3, [pc, #532]	; (8002ec4 <HAL_RCC_OscConfig+0x4e4>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d0f0      	beq.n	8002c9c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d106      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x2f0>
 8002cc2:	4b81      	ldr	r3, [pc, #516]	; (8002ec8 <HAL_RCC_OscConfig+0x4e8>)
 8002cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc6:	4a80      	ldr	r2, [pc, #512]	; (8002ec8 <HAL_RCC_OscConfig+0x4e8>)
 8002cc8:	f043 0301 	orr.w	r3, r3, #1
 8002ccc:	6713      	str	r3, [r2, #112]	; 0x70
 8002cce:	e01c      	b.n	8002d0a <HAL_RCC_OscConfig+0x32a>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	2b05      	cmp	r3, #5
 8002cd6:	d10c      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x312>
 8002cd8:	4b7b      	ldr	r3, [pc, #492]	; (8002ec8 <HAL_RCC_OscConfig+0x4e8>)
 8002cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cdc:	4a7a      	ldr	r2, [pc, #488]	; (8002ec8 <HAL_RCC_OscConfig+0x4e8>)
 8002cde:	f043 0304 	orr.w	r3, r3, #4
 8002ce2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ce4:	4b78      	ldr	r3, [pc, #480]	; (8002ec8 <HAL_RCC_OscConfig+0x4e8>)
 8002ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce8:	4a77      	ldr	r2, [pc, #476]	; (8002ec8 <HAL_RCC_OscConfig+0x4e8>)
 8002cea:	f043 0301 	orr.w	r3, r3, #1
 8002cee:	6713      	str	r3, [r2, #112]	; 0x70
 8002cf0:	e00b      	b.n	8002d0a <HAL_RCC_OscConfig+0x32a>
 8002cf2:	4b75      	ldr	r3, [pc, #468]	; (8002ec8 <HAL_RCC_OscConfig+0x4e8>)
 8002cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf6:	4a74      	ldr	r2, [pc, #464]	; (8002ec8 <HAL_RCC_OscConfig+0x4e8>)
 8002cf8:	f023 0301 	bic.w	r3, r3, #1
 8002cfc:	6713      	str	r3, [r2, #112]	; 0x70
 8002cfe:	4b72      	ldr	r3, [pc, #456]	; (8002ec8 <HAL_RCC_OscConfig+0x4e8>)
 8002d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d02:	4a71      	ldr	r2, [pc, #452]	; (8002ec8 <HAL_RCC_OscConfig+0x4e8>)
 8002d04:	f023 0304 	bic.w	r3, r3, #4
 8002d08:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d015      	beq.n	8002d3e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d12:	f7fe fff3 	bl	8001cfc <HAL_GetTick>
 8002d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d18:	e00a      	b.n	8002d30 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d1a:	f7fe ffef 	bl	8001cfc <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e0c5      	b.n	8002ebc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d30:	4b65      	ldr	r3, [pc, #404]	; (8002ec8 <HAL_RCC_OscConfig+0x4e8>)
 8002d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d0ee      	beq.n	8002d1a <HAL_RCC_OscConfig+0x33a>
 8002d3c:	e014      	b.n	8002d68 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d3e:	f7fe ffdd 	bl	8001cfc <HAL_GetTick>
 8002d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d44:	e00a      	b.n	8002d5c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d46:	f7fe ffd9 	bl	8001cfc <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e0af      	b.n	8002ebc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d5c:	4b5a      	ldr	r3, [pc, #360]	; (8002ec8 <HAL_RCC_OscConfig+0x4e8>)
 8002d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d60:	f003 0302 	and.w	r3, r3, #2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1ee      	bne.n	8002d46 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d68:	7dfb      	ldrb	r3, [r7, #23]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d105      	bne.n	8002d7a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d6e:	4b56      	ldr	r3, [pc, #344]	; (8002ec8 <HAL_RCC_OscConfig+0x4e8>)
 8002d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d72:	4a55      	ldr	r2, [pc, #340]	; (8002ec8 <HAL_RCC_OscConfig+0x4e8>)
 8002d74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d78:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f000 809b 	beq.w	8002eba <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d84:	4b50      	ldr	r3, [pc, #320]	; (8002ec8 <HAL_RCC_OscConfig+0x4e8>)
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f003 030c 	and.w	r3, r3, #12
 8002d8c:	2b08      	cmp	r3, #8
 8002d8e:	d05c      	beq.n	8002e4a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d141      	bne.n	8002e1c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d98:	4b4c      	ldr	r3, [pc, #304]	; (8002ecc <HAL_RCC_OscConfig+0x4ec>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d9e:	f7fe ffad 	bl	8001cfc <HAL_GetTick>
 8002da2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002da4:	e008      	b.n	8002db8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002da6:	f7fe ffa9 	bl	8001cfc <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e081      	b.n	8002ebc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002db8:	4b43      	ldr	r3, [pc, #268]	; (8002ec8 <HAL_RCC_OscConfig+0x4e8>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1f0      	bne.n	8002da6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	69da      	ldr	r2, [r3, #28]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd2:	019b      	lsls	r3, r3, #6
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dda:	085b      	lsrs	r3, r3, #1
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	041b      	lsls	r3, r3, #16
 8002de0:	431a      	orrs	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de6:	061b      	lsls	r3, r3, #24
 8002de8:	4937      	ldr	r1, [pc, #220]	; (8002ec8 <HAL_RCC_OscConfig+0x4e8>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dee:	4b37      	ldr	r3, [pc, #220]	; (8002ecc <HAL_RCC_OscConfig+0x4ec>)
 8002df0:	2201      	movs	r2, #1
 8002df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df4:	f7fe ff82 	bl	8001cfc <HAL_GetTick>
 8002df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dfc:	f7fe ff7e 	bl	8001cfc <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e056      	b.n	8002ebc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e0e:	4b2e      	ldr	r3, [pc, #184]	; (8002ec8 <HAL_RCC_OscConfig+0x4e8>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d0f0      	beq.n	8002dfc <HAL_RCC_OscConfig+0x41c>
 8002e1a:	e04e      	b.n	8002eba <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e1c:	4b2b      	ldr	r3, [pc, #172]	; (8002ecc <HAL_RCC_OscConfig+0x4ec>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e22:	f7fe ff6b 	bl	8001cfc <HAL_GetTick>
 8002e26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e28:	e008      	b.n	8002e3c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e2a:	f7fe ff67 	bl	8001cfc <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e03f      	b.n	8002ebc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e3c:	4b22      	ldr	r3, [pc, #136]	; (8002ec8 <HAL_RCC_OscConfig+0x4e8>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d1f0      	bne.n	8002e2a <HAL_RCC_OscConfig+0x44a>
 8002e48:	e037      	b.n	8002eba <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d101      	bne.n	8002e56 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e032      	b.n	8002ebc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e56:	4b1c      	ldr	r3, [pc, #112]	; (8002ec8 <HAL_RCC_OscConfig+0x4e8>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d028      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d121      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d11a      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e86:	4013      	ands	r3, r2
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e8c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d111      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9c:	085b      	lsrs	r3, r3, #1
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d107      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d001      	beq.n	8002eba <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e000      	b.n	8002ebc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3718      	adds	r7, #24
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	40007000 	.word	0x40007000
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	42470060 	.word	0x42470060

08002ed0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d101      	bne.n	8002ee4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e0cc      	b.n	800307e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ee4:	4b68      	ldr	r3, [pc, #416]	; (8003088 <HAL_RCC_ClockConfig+0x1b8>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d90c      	bls.n	8002f0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ef2:	4b65      	ldr	r3, [pc, #404]	; (8003088 <HAL_RCC_ClockConfig+0x1b8>)
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	b2d2      	uxtb	r2, r2
 8002ef8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002efa:	4b63      	ldr	r3, [pc, #396]	; (8003088 <HAL_RCC_ClockConfig+0x1b8>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0307 	and.w	r3, r3, #7
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d001      	beq.n	8002f0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e0b8      	b.n	800307e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d020      	beq.n	8002f5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0304 	and.w	r3, r3, #4
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d005      	beq.n	8002f30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f24:	4b59      	ldr	r3, [pc, #356]	; (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	4a58      	ldr	r2, [pc, #352]	; (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002f2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0308 	and.w	r3, r3, #8
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d005      	beq.n	8002f48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f3c:	4b53      	ldr	r3, [pc, #332]	; (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	4a52      	ldr	r2, [pc, #328]	; (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002f42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f48:	4b50      	ldr	r3, [pc, #320]	; (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	494d      	ldr	r1, [pc, #308]	; (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d044      	beq.n	8002ff0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d107      	bne.n	8002f7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f6e:	4b47      	ldr	r3, [pc, #284]	; (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d119      	bne.n	8002fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e07f      	b.n	800307e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d003      	beq.n	8002f8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f8a:	2b03      	cmp	r3, #3
 8002f8c:	d107      	bne.n	8002f9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f8e:	4b3f      	ldr	r3, [pc, #252]	; (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d109      	bne.n	8002fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e06f      	b.n	800307e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f9e:	4b3b      	ldr	r3, [pc, #236]	; (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e067      	b.n	800307e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fae:	4b37      	ldr	r3, [pc, #220]	; (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f023 0203 	bic.w	r2, r3, #3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	4934      	ldr	r1, [pc, #208]	; (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fc0:	f7fe fe9c 	bl	8001cfc <HAL_GetTick>
 8002fc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fc6:	e00a      	b.n	8002fde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fc8:	f7fe fe98 	bl	8001cfc <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e04f      	b.n	800307e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fde:	4b2b      	ldr	r3, [pc, #172]	; (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f003 020c 	and.w	r2, r3, #12
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d1eb      	bne.n	8002fc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ff0:	4b25      	ldr	r3, [pc, #148]	; (8003088 <HAL_RCC_ClockConfig+0x1b8>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0307 	and.w	r3, r3, #7
 8002ff8:	683a      	ldr	r2, [r7, #0]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d20c      	bcs.n	8003018 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ffe:	4b22      	ldr	r3, [pc, #136]	; (8003088 <HAL_RCC_ClockConfig+0x1b8>)
 8003000:	683a      	ldr	r2, [r7, #0]
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003006:	4b20      	ldr	r3, [pc, #128]	; (8003088 <HAL_RCC_ClockConfig+0x1b8>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0307 	and.w	r3, r3, #7
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	429a      	cmp	r2, r3
 8003012:	d001      	beq.n	8003018 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e032      	b.n	800307e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0304 	and.w	r3, r3, #4
 8003020:	2b00      	cmp	r3, #0
 8003022:	d008      	beq.n	8003036 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003024:	4b19      	ldr	r3, [pc, #100]	; (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	4916      	ldr	r1, [pc, #88]	; (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8003032:	4313      	orrs	r3, r2
 8003034:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0308 	and.w	r3, r3, #8
 800303e:	2b00      	cmp	r3, #0
 8003040:	d009      	beq.n	8003056 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003042:	4b12      	ldr	r3, [pc, #72]	; (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	490e      	ldr	r1, [pc, #56]	; (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8003052:	4313      	orrs	r3, r2
 8003054:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003056:	f000 f821 	bl	800309c <HAL_RCC_GetSysClockFreq>
 800305a:	4602      	mov	r2, r0
 800305c:	4b0b      	ldr	r3, [pc, #44]	; (800308c <HAL_RCC_ClockConfig+0x1bc>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	091b      	lsrs	r3, r3, #4
 8003062:	f003 030f 	and.w	r3, r3, #15
 8003066:	490a      	ldr	r1, [pc, #40]	; (8003090 <HAL_RCC_ClockConfig+0x1c0>)
 8003068:	5ccb      	ldrb	r3, [r1, r3]
 800306a:	fa22 f303 	lsr.w	r3, r2, r3
 800306e:	4a09      	ldr	r2, [pc, #36]	; (8003094 <HAL_RCC_ClockConfig+0x1c4>)
 8003070:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003072:	4b09      	ldr	r3, [pc, #36]	; (8003098 <HAL_RCC_ClockConfig+0x1c8>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4618      	mov	r0, r3
 8003078:	f7fe fdfc 	bl	8001c74 <HAL_InitTick>

  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	40023c00 	.word	0x40023c00
 800308c:	40023800 	.word	0x40023800
 8003090:	08005a48 	.word	0x08005a48
 8003094:	20000000 	.word	0x20000000
 8003098:	20000004 	.word	0x20000004

0800309c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800309c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80030a0:	b084      	sub	sp, #16
 80030a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030a4:	2300      	movs	r3, #0
 80030a6:	607b      	str	r3, [r7, #4]
 80030a8:	2300      	movs	r3, #0
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	2300      	movs	r3, #0
 80030ae:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030b4:	4b67      	ldr	r3, [pc, #412]	; (8003254 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f003 030c 	and.w	r3, r3, #12
 80030bc:	2b08      	cmp	r3, #8
 80030be:	d00d      	beq.n	80030dc <HAL_RCC_GetSysClockFreq+0x40>
 80030c0:	2b08      	cmp	r3, #8
 80030c2:	f200 80bd 	bhi.w	8003240 <HAL_RCC_GetSysClockFreq+0x1a4>
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d002      	beq.n	80030d0 <HAL_RCC_GetSysClockFreq+0x34>
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	d003      	beq.n	80030d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80030ce:	e0b7      	b.n	8003240 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030d0:	4b61      	ldr	r3, [pc, #388]	; (8003258 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80030d2:	60bb      	str	r3, [r7, #8]
       break;
 80030d4:	e0b7      	b.n	8003246 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030d6:	4b61      	ldr	r3, [pc, #388]	; (800325c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80030d8:	60bb      	str	r3, [r7, #8]
      break;
 80030da:	e0b4      	b.n	8003246 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030dc:	4b5d      	ldr	r3, [pc, #372]	; (8003254 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030e4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030e6:	4b5b      	ldr	r3, [pc, #364]	; (8003254 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d04d      	beq.n	800318e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030f2:	4b58      	ldr	r3, [pc, #352]	; (8003254 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	099b      	lsrs	r3, r3, #6
 80030f8:	461a      	mov	r2, r3
 80030fa:	f04f 0300 	mov.w	r3, #0
 80030fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003102:	f04f 0100 	mov.w	r1, #0
 8003106:	ea02 0800 	and.w	r8, r2, r0
 800310a:	ea03 0901 	and.w	r9, r3, r1
 800310e:	4640      	mov	r0, r8
 8003110:	4649      	mov	r1, r9
 8003112:	f04f 0200 	mov.w	r2, #0
 8003116:	f04f 0300 	mov.w	r3, #0
 800311a:	014b      	lsls	r3, r1, #5
 800311c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003120:	0142      	lsls	r2, r0, #5
 8003122:	4610      	mov	r0, r2
 8003124:	4619      	mov	r1, r3
 8003126:	ebb0 0008 	subs.w	r0, r0, r8
 800312a:	eb61 0109 	sbc.w	r1, r1, r9
 800312e:	f04f 0200 	mov.w	r2, #0
 8003132:	f04f 0300 	mov.w	r3, #0
 8003136:	018b      	lsls	r3, r1, #6
 8003138:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800313c:	0182      	lsls	r2, r0, #6
 800313e:	1a12      	subs	r2, r2, r0
 8003140:	eb63 0301 	sbc.w	r3, r3, r1
 8003144:	f04f 0000 	mov.w	r0, #0
 8003148:	f04f 0100 	mov.w	r1, #0
 800314c:	00d9      	lsls	r1, r3, #3
 800314e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003152:	00d0      	lsls	r0, r2, #3
 8003154:	4602      	mov	r2, r0
 8003156:	460b      	mov	r3, r1
 8003158:	eb12 0208 	adds.w	r2, r2, r8
 800315c:	eb43 0309 	adc.w	r3, r3, r9
 8003160:	f04f 0000 	mov.w	r0, #0
 8003164:	f04f 0100 	mov.w	r1, #0
 8003168:	0259      	lsls	r1, r3, #9
 800316a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800316e:	0250      	lsls	r0, r2, #9
 8003170:	4602      	mov	r2, r0
 8003172:	460b      	mov	r3, r1
 8003174:	4610      	mov	r0, r2
 8003176:	4619      	mov	r1, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	461a      	mov	r2, r3
 800317c:	f04f 0300 	mov.w	r3, #0
 8003180:	f7fd fd18 	bl	8000bb4 <__aeabi_uldivmod>
 8003184:	4602      	mov	r2, r0
 8003186:	460b      	mov	r3, r1
 8003188:	4613      	mov	r3, r2
 800318a:	60fb      	str	r3, [r7, #12]
 800318c:	e04a      	b.n	8003224 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800318e:	4b31      	ldr	r3, [pc, #196]	; (8003254 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	099b      	lsrs	r3, r3, #6
 8003194:	461a      	mov	r2, r3
 8003196:	f04f 0300 	mov.w	r3, #0
 800319a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800319e:	f04f 0100 	mov.w	r1, #0
 80031a2:	ea02 0400 	and.w	r4, r2, r0
 80031a6:	ea03 0501 	and.w	r5, r3, r1
 80031aa:	4620      	mov	r0, r4
 80031ac:	4629      	mov	r1, r5
 80031ae:	f04f 0200 	mov.w	r2, #0
 80031b2:	f04f 0300 	mov.w	r3, #0
 80031b6:	014b      	lsls	r3, r1, #5
 80031b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80031bc:	0142      	lsls	r2, r0, #5
 80031be:	4610      	mov	r0, r2
 80031c0:	4619      	mov	r1, r3
 80031c2:	1b00      	subs	r0, r0, r4
 80031c4:	eb61 0105 	sbc.w	r1, r1, r5
 80031c8:	f04f 0200 	mov.w	r2, #0
 80031cc:	f04f 0300 	mov.w	r3, #0
 80031d0:	018b      	lsls	r3, r1, #6
 80031d2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80031d6:	0182      	lsls	r2, r0, #6
 80031d8:	1a12      	subs	r2, r2, r0
 80031da:	eb63 0301 	sbc.w	r3, r3, r1
 80031de:	f04f 0000 	mov.w	r0, #0
 80031e2:	f04f 0100 	mov.w	r1, #0
 80031e6:	00d9      	lsls	r1, r3, #3
 80031e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80031ec:	00d0      	lsls	r0, r2, #3
 80031ee:	4602      	mov	r2, r0
 80031f0:	460b      	mov	r3, r1
 80031f2:	1912      	adds	r2, r2, r4
 80031f4:	eb45 0303 	adc.w	r3, r5, r3
 80031f8:	f04f 0000 	mov.w	r0, #0
 80031fc:	f04f 0100 	mov.w	r1, #0
 8003200:	0299      	lsls	r1, r3, #10
 8003202:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003206:	0290      	lsls	r0, r2, #10
 8003208:	4602      	mov	r2, r0
 800320a:	460b      	mov	r3, r1
 800320c:	4610      	mov	r0, r2
 800320e:	4619      	mov	r1, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	461a      	mov	r2, r3
 8003214:	f04f 0300 	mov.w	r3, #0
 8003218:	f7fd fccc 	bl	8000bb4 <__aeabi_uldivmod>
 800321c:	4602      	mov	r2, r0
 800321e:	460b      	mov	r3, r1
 8003220:	4613      	mov	r3, r2
 8003222:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003224:	4b0b      	ldr	r3, [pc, #44]	; (8003254 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	0c1b      	lsrs	r3, r3, #16
 800322a:	f003 0303 	and.w	r3, r3, #3
 800322e:	3301      	adds	r3, #1
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	fbb2 f3f3 	udiv	r3, r2, r3
 800323c:	60bb      	str	r3, [r7, #8]
      break;
 800323e:	e002      	b.n	8003246 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003240:	4b05      	ldr	r3, [pc, #20]	; (8003258 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003242:	60bb      	str	r3, [r7, #8]
      break;
 8003244:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003246:	68bb      	ldr	r3, [r7, #8]
}
 8003248:	4618      	mov	r0, r3
 800324a:	3710      	adds	r7, #16
 800324c:	46bd      	mov	sp, r7
 800324e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003252:	bf00      	nop
 8003254:	40023800 	.word	0x40023800
 8003258:	00f42400 	.word	0x00f42400
 800325c:	007a1200 	.word	0x007a1200

08003260 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003264:	4b03      	ldr	r3, [pc, #12]	; (8003274 <HAL_RCC_GetHCLKFreq+0x14>)
 8003266:	681b      	ldr	r3, [r3, #0]
}
 8003268:	4618      	mov	r0, r3
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	20000000 	.word	0x20000000

08003278 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800327c:	f7ff fff0 	bl	8003260 <HAL_RCC_GetHCLKFreq>
 8003280:	4602      	mov	r2, r0
 8003282:	4b05      	ldr	r3, [pc, #20]	; (8003298 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	0a9b      	lsrs	r3, r3, #10
 8003288:	f003 0307 	and.w	r3, r3, #7
 800328c:	4903      	ldr	r1, [pc, #12]	; (800329c <HAL_RCC_GetPCLK1Freq+0x24>)
 800328e:	5ccb      	ldrb	r3, [r1, r3]
 8003290:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003294:	4618      	mov	r0, r3
 8003296:	bd80      	pop	{r7, pc}
 8003298:	40023800 	.word	0x40023800
 800329c:	08005a58 	.word	0x08005a58

080032a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032a4:	f7ff ffdc 	bl	8003260 <HAL_RCC_GetHCLKFreq>
 80032a8:	4602      	mov	r2, r0
 80032aa:	4b05      	ldr	r3, [pc, #20]	; (80032c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	0b5b      	lsrs	r3, r3, #13
 80032b0:	f003 0307 	and.w	r3, r3, #7
 80032b4:	4903      	ldr	r1, [pc, #12]	; (80032c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032b6:	5ccb      	ldrb	r3, [r1, r3]
 80032b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032bc:	4618      	mov	r0, r3
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	40023800 	.word	0x40023800
 80032c4:	08005a58 	.word	0x08005a58

080032c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e041      	b.n	800335e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d106      	bne.n	80032f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f7fe fb56 	bl	80019a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2202      	movs	r2, #2
 80032f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	3304      	adds	r3, #4
 8003304:	4619      	mov	r1, r3
 8003306:	4610      	mov	r0, r2
 8003308:	f000 fd60 	bl	8003dcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003366:	b580      	push	{r7, lr}
 8003368:	b082      	sub	sp, #8
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d101      	bne.n	8003378 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e041      	b.n	80033fc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800337e:	b2db      	uxtb	r3, r3
 8003380:	2b00      	cmp	r3, #0
 8003382:	d106      	bne.n	8003392 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 f839 	bl	8003404 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2202      	movs	r2, #2
 8003396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	3304      	adds	r3, #4
 80033a2:	4619      	mov	r1, r3
 80033a4:	4610      	mov	r0, r2
 80033a6:	f000 fd11 	bl	8003dcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2201      	movs	r2, #1
 80033b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2201      	movs	r2, #1
 80033be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2201      	movs	r2, #1
 80033ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3708      	adds	r7, #8
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b086      	sub	sp, #24
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]
 8003424:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003426:	2300      	movs	r3, #0
 8003428:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d109      	bne.n	8003444 <HAL_TIM_PWM_Start_DMA+0x2c>
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003436:	b2db      	uxtb	r3, r3
 8003438:	2b02      	cmp	r3, #2
 800343a:	bf0c      	ite	eq
 800343c:	2301      	moveq	r3, #1
 800343e:	2300      	movne	r3, #0
 8003440:	b2db      	uxtb	r3, r3
 8003442:	e022      	b.n	800348a <HAL_TIM_PWM_Start_DMA+0x72>
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	2b04      	cmp	r3, #4
 8003448:	d109      	bne.n	800345e <HAL_TIM_PWM_Start_DMA+0x46>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b02      	cmp	r3, #2
 8003454:	bf0c      	ite	eq
 8003456:	2301      	moveq	r3, #1
 8003458:	2300      	movne	r3, #0
 800345a:	b2db      	uxtb	r3, r3
 800345c:	e015      	b.n	800348a <HAL_TIM_PWM_Start_DMA+0x72>
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	2b08      	cmp	r3, #8
 8003462:	d109      	bne.n	8003478 <HAL_TIM_PWM_Start_DMA+0x60>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	bf0c      	ite	eq
 8003470:	2301      	moveq	r3, #1
 8003472:	2300      	movne	r3, #0
 8003474:	b2db      	uxtb	r3, r3
 8003476:	e008      	b.n	800348a <HAL_TIM_PWM_Start_DMA+0x72>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b02      	cmp	r3, #2
 8003482:	bf0c      	ite	eq
 8003484:	2301      	moveq	r3, #1
 8003486:	2300      	movne	r3, #0
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800348e:	2302      	movs	r3, #2
 8003490:	e15d      	b.n	800374e <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d109      	bne.n	80034ac <HAL_TIM_PWM_Start_DMA+0x94>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	bf0c      	ite	eq
 80034a4:	2301      	moveq	r3, #1
 80034a6:	2300      	movne	r3, #0
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	e022      	b.n	80034f2 <HAL_TIM_PWM_Start_DMA+0xda>
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	d109      	bne.n	80034c6 <HAL_TIM_PWM_Start_DMA+0xae>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	bf0c      	ite	eq
 80034be:	2301      	moveq	r3, #1
 80034c0:	2300      	movne	r3, #0
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	e015      	b.n	80034f2 <HAL_TIM_PWM_Start_DMA+0xda>
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	2b08      	cmp	r3, #8
 80034ca:	d109      	bne.n	80034e0 <HAL_TIM_PWM_Start_DMA+0xc8>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	bf0c      	ite	eq
 80034d8:	2301      	moveq	r3, #1
 80034da:	2300      	movne	r3, #0
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	e008      	b.n	80034f2 <HAL_TIM_PWM_Start_DMA+0xda>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	bf0c      	ite	eq
 80034ec:	2301      	moveq	r3, #1
 80034ee:	2300      	movne	r3, #0
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d024      	beq.n	8003540 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d104      	bne.n	8003506 <HAL_TIM_PWM_Start_DMA+0xee>
 80034fc:	887b      	ldrh	r3, [r7, #2]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e123      	b.n	800374e <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d104      	bne.n	8003516 <HAL_TIM_PWM_Start_DMA+0xfe>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2202      	movs	r2, #2
 8003510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003514:	e016      	b.n	8003544 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	2b04      	cmp	r3, #4
 800351a:	d104      	bne.n	8003526 <HAL_TIM_PWM_Start_DMA+0x10e>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2202      	movs	r2, #2
 8003520:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003524:	e00e      	b.n	8003544 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	2b08      	cmp	r3, #8
 800352a:	d104      	bne.n	8003536 <HAL_TIM_PWM_Start_DMA+0x11e>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2202      	movs	r2, #2
 8003530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003534:	e006      	b.n	8003544 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2202      	movs	r2, #2
 800353a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800353e:	e001      	b.n	8003544 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e104      	b.n	800374e <HAL_TIM_PWM_Start_DMA+0x336>
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	2b0c      	cmp	r3, #12
 8003548:	f200 80ae 	bhi.w	80036a8 <HAL_TIM_PWM_Start_DMA+0x290>
 800354c:	a201      	add	r2, pc, #4	; (adr r2, 8003554 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800354e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003552:	bf00      	nop
 8003554:	08003589 	.word	0x08003589
 8003558:	080036a9 	.word	0x080036a9
 800355c:	080036a9 	.word	0x080036a9
 8003560:	080036a9 	.word	0x080036a9
 8003564:	080035d1 	.word	0x080035d1
 8003568:	080036a9 	.word	0x080036a9
 800356c:	080036a9 	.word	0x080036a9
 8003570:	080036a9 	.word	0x080036a9
 8003574:	08003619 	.word	0x08003619
 8003578:	080036a9 	.word	0x080036a9
 800357c:	080036a9 	.word	0x080036a9
 8003580:	080036a9 	.word	0x080036a9
 8003584:	08003661 	.word	0x08003661
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358c:	4a72      	ldr	r2, [pc, #456]	; (8003758 <HAL_TIM_PWM_Start_DMA+0x340>)
 800358e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003594:	4a71      	ldr	r2, [pc, #452]	; (800375c <HAL_TIM_PWM_Start_DMA+0x344>)
 8003596:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359c:	4a70      	ldr	r2, [pc, #448]	; (8003760 <HAL_TIM_PWM_Start_DMA+0x348>)
 800359e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80035a4:	6879      	ldr	r1, [r7, #4]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	3334      	adds	r3, #52	; 0x34
 80035ac:	461a      	mov	r2, r3
 80035ae:	887b      	ldrh	r3, [r7, #2]
 80035b0:	f7fe fd94 	bl	80020dc <HAL_DMA_Start_IT>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e0c7      	b.n	800374e <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68da      	ldr	r2, [r3, #12]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035cc:	60da      	str	r2, [r3, #12]
      break;
 80035ce:	e06e      	b.n	80036ae <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d4:	4a60      	ldr	r2, [pc, #384]	; (8003758 <HAL_TIM_PWM_Start_DMA+0x340>)
 80035d6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035dc:	4a5f      	ldr	r2, [pc, #380]	; (800375c <HAL_TIM_PWM_Start_DMA+0x344>)
 80035de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e4:	4a5e      	ldr	r2, [pc, #376]	; (8003760 <HAL_TIM_PWM_Start_DMA+0x348>)
 80035e6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80035ec:	6879      	ldr	r1, [r7, #4]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	3338      	adds	r3, #56	; 0x38
 80035f4:	461a      	mov	r2, r3
 80035f6:	887b      	ldrh	r3, [r7, #2]
 80035f8:	f7fe fd70 	bl	80020dc <HAL_DMA_Start_IT>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e0a3      	b.n	800374e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68da      	ldr	r2, [r3, #12]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003614:	60da      	str	r2, [r3, #12]
      break;
 8003616:	e04a      	b.n	80036ae <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361c:	4a4e      	ldr	r2, [pc, #312]	; (8003758 <HAL_TIM_PWM_Start_DMA+0x340>)
 800361e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003624:	4a4d      	ldr	r2, [pc, #308]	; (800375c <HAL_TIM_PWM_Start_DMA+0x344>)
 8003626:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362c:	4a4c      	ldr	r2, [pc, #304]	; (8003760 <HAL_TIM_PWM_Start_DMA+0x348>)
 800362e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003634:	6879      	ldr	r1, [r7, #4]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	333c      	adds	r3, #60	; 0x3c
 800363c:	461a      	mov	r2, r3
 800363e:	887b      	ldrh	r3, [r7, #2]
 8003640:	f7fe fd4c 	bl	80020dc <HAL_DMA_Start_IT>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e07f      	b.n	800374e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68da      	ldr	r2, [r3, #12]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800365c:	60da      	str	r2, [r3, #12]
      break;
 800365e:	e026      	b.n	80036ae <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003664:	4a3c      	ldr	r2, [pc, #240]	; (8003758 <HAL_TIM_PWM_Start_DMA+0x340>)
 8003666:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366c:	4a3b      	ldr	r2, [pc, #236]	; (800375c <HAL_TIM_PWM_Start_DMA+0x344>)
 800366e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003674:	4a3a      	ldr	r2, [pc, #232]	; (8003760 <HAL_TIM_PWM_Start_DMA+0x348>)
 8003676:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800367c:	6879      	ldr	r1, [r7, #4]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	3340      	adds	r3, #64	; 0x40
 8003684:	461a      	mov	r2, r3
 8003686:	887b      	ldrh	r3, [r7, #2]
 8003688:	f7fe fd28 	bl	80020dc <HAL_DMA_Start_IT>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e05b      	b.n	800374e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68da      	ldr	r2, [r3, #12]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80036a4:	60da      	str	r2, [r3, #12]
      break;
 80036a6:	e002      	b.n	80036ae <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	75fb      	strb	r3, [r7, #23]
      break;
 80036ac:	bf00      	nop
  }

  if (status == HAL_OK)
 80036ae:	7dfb      	ldrb	r3, [r7, #23]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d14b      	bne.n	800374c <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2201      	movs	r2, #1
 80036ba:	68b9      	ldr	r1, [r7, #8]
 80036bc:	4618      	mov	r0, r3
 80036be:	f000 fe2b 	bl	8004318 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a27      	ldr	r2, [pc, #156]	; (8003764 <HAL_TIM_PWM_Start_DMA+0x34c>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d107      	bne.n	80036dc <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036da:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a20      	ldr	r2, [pc, #128]	; (8003764 <HAL_TIM_PWM_Start_DMA+0x34c>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d018      	beq.n	8003718 <HAL_TIM_PWM_Start_DMA+0x300>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ee:	d013      	beq.n	8003718 <HAL_TIM_PWM_Start_DMA+0x300>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a1c      	ldr	r2, [pc, #112]	; (8003768 <HAL_TIM_PWM_Start_DMA+0x350>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d00e      	beq.n	8003718 <HAL_TIM_PWM_Start_DMA+0x300>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a1b      	ldr	r2, [pc, #108]	; (800376c <HAL_TIM_PWM_Start_DMA+0x354>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d009      	beq.n	8003718 <HAL_TIM_PWM_Start_DMA+0x300>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a19      	ldr	r2, [pc, #100]	; (8003770 <HAL_TIM_PWM_Start_DMA+0x358>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d004      	beq.n	8003718 <HAL_TIM_PWM_Start_DMA+0x300>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a18      	ldr	r2, [pc, #96]	; (8003774 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d111      	bne.n	800373c <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f003 0307 	and.w	r3, r3, #7
 8003722:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	2b06      	cmp	r3, #6
 8003728:	d010      	beq.n	800374c <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f042 0201 	orr.w	r2, r2, #1
 8003738:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800373a:	e007      	b.n	800374c <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f042 0201 	orr.w	r2, r2, #1
 800374a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800374c:	7dfb      	ldrb	r3, [r7, #23]
}
 800374e:	4618      	mov	r0, r3
 8003750:	3718      	adds	r7, #24
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	08003cbd 	.word	0x08003cbd
 800375c:	08003d65 	.word	0x08003d65
 8003760:	08003c2b 	.word	0x08003c2b
 8003764:	40010000 	.word	0x40010000
 8003768:	40000400 	.word	0x40000400
 800376c:	40000800 	.word	0x40000800
 8003770:	40000c00 	.word	0x40000c00
 8003774:	40014000 	.word	0x40014000

08003778 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003782:	2300      	movs	r3, #0
 8003784:	73fb      	strb	r3, [r7, #15]
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	2b0c      	cmp	r3, #12
 800378a:	d855      	bhi.n	8003838 <HAL_TIM_PWM_Stop_DMA+0xc0>
 800378c:	a201      	add	r2, pc, #4	; (adr r2, 8003794 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800378e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003792:	bf00      	nop
 8003794:	080037c9 	.word	0x080037c9
 8003798:	08003839 	.word	0x08003839
 800379c:	08003839 	.word	0x08003839
 80037a0:	08003839 	.word	0x08003839
 80037a4:	080037e5 	.word	0x080037e5
 80037a8:	08003839 	.word	0x08003839
 80037ac:	08003839 	.word	0x08003839
 80037b0:	08003839 	.word	0x08003839
 80037b4:	08003801 	.word	0x08003801
 80037b8:	08003839 	.word	0x08003839
 80037bc:	08003839 	.word	0x08003839
 80037c0:	08003839 	.word	0x08003839
 80037c4:	0800381d 	.word	0x0800381d
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68da      	ldr	r2, [r3, #12]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80037d6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037dc:	4618      	mov	r0, r3
 80037de:	f7fe fcd5 	bl	800218c <HAL_DMA_Abort_IT>
      break;
 80037e2:	e02c      	b.n	800383e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68da      	ldr	r2, [r3, #12]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037f2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7fe fcc7 	bl	800218c <HAL_DMA_Abort_IT>
      break;
 80037fe:	e01e      	b.n	800383e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68da      	ldr	r2, [r3, #12]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800380e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003814:	4618      	mov	r0, r3
 8003816:	f7fe fcb9 	bl	800218c <HAL_DMA_Abort_IT>
      break;
 800381a:	e010      	b.n	800383e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68da      	ldr	r2, [r3, #12]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800382a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003830:	4618      	mov	r0, r3
 8003832:	f7fe fcab 	bl	800218c <HAL_DMA_Abort_IT>
      break;
 8003836:	e002      	b.n	800383e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	73fb      	strb	r3, [r7, #15]
      break;
 800383c:	bf00      	nop
  }

  if (status == HAL_OK)
 800383e:	7bfb      	ldrb	r3, [r7, #15]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d157      	bne.n	80038f4 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2200      	movs	r2, #0
 800384a:	6839      	ldr	r1, [r7, #0]
 800384c:	4618      	mov	r0, r3
 800384e:	f000 fd63 	bl	8004318 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a2a      	ldr	r2, [pc, #168]	; (8003900 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d117      	bne.n	800388c <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	6a1a      	ldr	r2, [r3, #32]
 8003862:	f241 1311 	movw	r3, #4369	; 0x1111
 8003866:	4013      	ands	r3, r2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d10f      	bne.n	800388c <HAL_TIM_PWM_Stop_DMA+0x114>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6a1a      	ldr	r2, [r3, #32]
 8003872:	f240 4344 	movw	r3, #1092	; 0x444
 8003876:	4013      	ands	r3, r2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d107      	bne.n	800388c <HAL_TIM_PWM_Stop_DMA+0x114>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800388a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6a1a      	ldr	r2, [r3, #32]
 8003892:	f241 1311 	movw	r3, #4369	; 0x1111
 8003896:	4013      	ands	r3, r2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d10f      	bne.n	80038bc <HAL_TIM_PWM_Stop_DMA+0x144>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6a1a      	ldr	r2, [r3, #32]
 80038a2:	f240 4344 	movw	r3, #1092	; 0x444
 80038a6:	4013      	ands	r3, r2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d107      	bne.n	80038bc <HAL_TIM_PWM_Stop_DMA+0x144>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f022 0201 	bic.w	r2, r2, #1
 80038ba:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d104      	bne.n	80038cc <HAL_TIM_PWM_Stop_DMA+0x154>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038ca:	e013      	b.n	80038f4 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	2b04      	cmp	r3, #4
 80038d0:	d104      	bne.n	80038dc <HAL_TIM_PWM_Stop_DMA+0x164>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038da:	e00b      	b.n	80038f4 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	2b08      	cmp	r3, #8
 80038e0:	d104      	bne.n	80038ec <HAL_TIM_PWM_Stop_DMA+0x174>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2201      	movs	r2, #1
 80038e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038ea:	e003      	b.n	80038f4 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80038f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	40010000 	.word	0x40010000

08003904 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003910:	2300      	movs	r3, #0
 8003912:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800391a:	2b01      	cmp	r3, #1
 800391c:	d101      	bne.n	8003922 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800391e:	2302      	movs	r3, #2
 8003920:	e0ae      	b.n	8003a80 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2b0c      	cmp	r3, #12
 800392e:	f200 809f 	bhi.w	8003a70 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003932:	a201      	add	r2, pc, #4	; (adr r2, 8003938 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003938:	0800396d 	.word	0x0800396d
 800393c:	08003a71 	.word	0x08003a71
 8003940:	08003a71 	.word	0x08003a71
 8003944:	08003a71 	.word	0x08003a71
 8003948:	080039ad 	.word	0x080039ad
 800394c:	08003a71 	.word	0x08003a71
 8003950:	08003a71 	.word	0x08003a71
 8003954:	08003a71 	.word	0x08003a71
 8003958:	080039ef 	.word	0x080039ef
 800395c:	08003a71 	.word	0x08003a71
 8003960:	08003a71 	.word	0x08003a71
 8003964:	08003a71 	.word	0x08003a71
 8003968:	08003a2f 	.word	0x08003a2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68b9      	ldr	r1, [r7, #8]
 8003972:	4618      	mov	r0, r3
 8003974:	f000 faaa 	bl	8003ecc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	699a      	ldr	r2, [r3, #24]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f042 0208 	orr.w	r2, r2, #8
 8003986:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	699a      	ldr	r2, [r3, #24]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f022 0204 	bic.w	r2, r2, #4
 8003996:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	6999      	ldr	r1, [r3, #24]
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	691a      	ldr	r2, [r3, #16]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	430a      	orrs	r2, r1
 80039a8:	619a      	str	r2, [r3, #24]
      break;
 80039aa:	e064      	b.n	8003a76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68b9      	ldr	r1, [r7, #8]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f000 faf0 	bl	8003f98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	699a      	ldr	r2, [r3, #24]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	699a      	ldr	r2, [r3, #24]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	6999      	ldr	r1, [r3, #24]
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	021a      	lsls	r2, r3, #8
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	430a      	orrs	r2, r1
 80039ea:	619a      	str	r2, [r3, #24]
      break;
 80039ec:	e043      	b.n	8003a76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68b9      	ldr	r1, [r7, #8]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f000 fb3b 	bl	8004070 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	69da      	ldr	r2, [r3, #28]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f042 0208 	orr.w	r2, r2, #8
 8003a08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	69da      	ldr	r2, [r3, #28]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f022 0204 	bic.w	r2, r2, #4
 8003a18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	69d9      	ldr	r1, [r3, #28]
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	691a      	ldr	r2, [r3, #16]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	61da      	str	r2, [r3, #28]
      break;
 8003a2c:	e023      	b.n	8003a76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68b9      	ldr	r1, [r7, #8]
 8003a34:	4618      	mov	r0, r3
 8003a36:	f000 fb85 	bl	8004144 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	69da      	ldr	r2, [r3, #28]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	69da      	ldr	r2, [r3, #28]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	69d9      	ldr	r1, [r3, #28]
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	021a      	lsls	r2, r3, #8
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	61da      	str	r2, [r3, #28]
      break;
 8003a6e:	e002      	b.n	8003a76 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	75fb      	strb	r3, [r7, #23]
      break;
 8003a74:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3718      	adds	r7, #24
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a92:	2300      	movs	r3, #0
 8003a94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d101      	bne.n	8003aa4 <HAL_TIM_ConfigClockSource+0x1c>
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	e0b4      	b.n	8003c0e <HAL_TIM_ConfigClockSource+0x186>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2202      	movs	r2, #2
 8003ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ac2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003aca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68ba      	ldr	r2, [r7, #8]
 8003ad2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003adc:	d03e      	beq.n	8003b5c <HAL_TIM_ConfigClockSource+0xd4>
 8003ade:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ae2:	f200 8087 	bhi.w	8003bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ae6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aea:	f000 8086 	beq.w	8003bfa <HAL_TIM_ConfigClockSource+0x172>
 8003aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af2:	d87f      	bhi.n	8003bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8003af4:	2b70      	cmp	r3, #112	; 0x70
 8003af6:	d01a      	beq.n	8003b2e <HAL_TIM_ConfigClockSource+0xa6>
 8003af8:	2b70      	cmp	r3, #112	; 0x70
 8003afa:	d87b      	bhi.n	8003bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8003afc:	2b60      	cmp	r3, #96	; 0x60
 8003afe:	d050      	beq.n	8003ba2 <HAL_TIM_ConfigClockSource+0x11a>
 8003b00:	2b60      	cmp	r3, #96	; 0x60
 8003b02:	d877      	bhi.n	8003bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8003b04:	2b50      	cmp	r3, #80	; 0x50
 8003b06:	d03c      	beq.n	8003b82 <HAL_TIM_ConfigClockSource+0xfa>
 8003b08:	2b50      	cmp	r3, #80	; 0x50
 8003b0a:	d873      	bhi.n	8003bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8003b0c:	2b40      	cmp	r3, #64	; 0x40
 8003b0e:	d058      	beq.n	8003bc2 <HAL_TIM_ConfigClockSource+0x13a>
 8003b10:	2b40      	cmp	r3, #64	; 0x40
 8003b12:	d86f      	bhi.n	8003bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8003b14:	2b30      	cmp	r3, #48	; 0x30
 8003b16:	d064      	beq.n	8003be2 <HAL_TIM_ConfigClockSource+0x15a>
 8003b18:	2b30      	cmp	r3, #48	; 0x30
 8003b1a:	d86b      	bhi.n	8003bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8003b1c:	2b20      	cmp	r3, #32
 8003b1e:	d060      	beq.n	8003be2 <HAL_TIM_ConfigClockSource+0x15a>
 8003b20:	2b20      	cmp	r3, #32
 8003b22:	d867      	bhi.n	8003bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d05c      	beq.n	8003be2 <HAL_TIM_ConfigClockSource+0x15a>
 8003b28:	2b10      	cmp	r3, #16
 8003b2a:	d05a      	beq.n	8003be2 <HAL_TIM_ConfigClockSource+0x15a>
 8003b2c:	e062      	b.n	8003bf4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6818      	ldr	r0, [r3, #0]
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	6899      	ldr	r1, [r3, #8]
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	685a      	ldr	r2, [r3, #4]
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	f000 fbcb 	bl	80042d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68ba      	ldr	r2, [r7, #8]
 8003b58:	609a      	str	r2, [r3, #8]
      break;
 8003b5a:	e04f      	b.n	8003bfc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6818      	ldr	r0, [r3, #0]
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	6899      	ldr	r1, [r3, #8]
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	685a      	ldr	r2, [r3, #4]
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	f000 fbb4 	bl	80042d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689a      	ldr	r2, [r3, #8]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b7e:	609a      	str	r2, [r3, #8]
      break;
 8003b80:	e03c      	b.n	8003bfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6818      	ldr	r0, [r3, #0]
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	6859      	ldr	r1, [r3, #4]
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	461a      	mov	r2, r3
 8003b90:	f000 fb28 	bl	80041e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2150      	movs	r1, #80	; 0x50
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f000 fb81 	bl	80042a2 <TIM_ITRx_SetConfig>
      break;
 8003ba0:	e02c      	b.n	8003bfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6818      	ldr	r0, [r3, #0]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	6859      	ldr	r1, [r3, #4]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	461a      	mov	r2, r3
 8003bb0:	f000 fb47 	bl	8004242 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2160      	movs	r1, #96	; 0x60
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f000 fb71 	bl	80042a2 <TIM_ITRx_SetConfig>
      break;
 8003bc0:	e01c      	b.n	8003bfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6818      	ldr	r0, [r3, #0]
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	6859      	ldr	r1, [r3, #4]
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	461a      	mov	r2, r3
 8003bd0:	f000 fb08 	bl	80041e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2140      	movs	r1, #64	; 0x40
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f000 fb61 	bl	80042a2 <TIM_ITRx_SetConfig>
      break;
 8003be0:	e00c      	b.n	8003bfc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4619      	mov	r1, r3
 8003bec:	4610      	mov	r0, r2
 8003bee:	f000 fb58 	bl	80042a2 <TIM_ITRx_SetConfig>
      break;
 8003bf2:	e003      	b.n	8003bfc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	73fb      	strb	r3, [r7, #15]
      break;
 8003bf8:	e000      	b.n	8003bfc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003bfa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003c16:	b480      	push	{r7}
 8003c18:	b083      	sub	sp, #12
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003c1e:	bf00      	nop
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr

08003c2a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b084      	sub	sp, #16
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c36:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d107      	bne.n	8003c52 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2201      	movs	r2, #1
 8003c46:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c50:	e02a      	b.n	8003ca8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d107      	bne.n	8003c6c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2202      	movs	r2, #2
 8003c60:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c6a:	e01d      	b.n	8003ca8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d107      	bne.n	8003c86 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2204      	movs	r2, #4
 8003c7a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c84:	e010      	b.n	8003ca8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d107      	bne.n	8003ca0 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2208      	movs	r2, #8
 8003c94:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c9e:	e003      	b.n	8003ca8 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003ca8:	68f8      	ldr	r0, [r7, #12]
 8003caa:	f7ff ffb4 	bl	8003c16 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	771a      	strb	r2, [r3, #28]
}
 8003cb4:	bf00      	nop
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d10b      	bne.n	8003cec <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	69db      	ldr	r3, [r3, #28]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d136      	bne.n	8003d50 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cea:	e031      	b.n	8003d50 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d10b      	bne.n	8003d0e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2202      	movs	r2, #2
 8003cfa:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	69db      	ldr	r3, [r3, #28]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d125      	bne.n	8003d50 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d0c:	e020      	b.n	8003d50 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d10b      	bne.n	8003d30 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2204      	movs	r2, #4
 8003d1c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	69db      	ldr	r3, [r3, #28]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d114      	bne.n	8003d50 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d2e:	e00f      	b.n	8003d50 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d10a      	bne.n	8003d50 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2208      	movs	r2, #8
 8003d3e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	69db      	ldr	r3, [r3, #28]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d103      	bne.n	8003d50 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d50:	68f8      	ldr	r0, [r7, #12]
 8003d52:	f7fd fa99 	bl	8001288 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	771a      	strb	r2, [r3, #28]
}
 8003d5c:	bf00      	nop
 8003d5e:	3710      	adds	r7, #16
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d70:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d103      	bne.n	8003d84 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	771a      	strb	r2, [r3, #28]
 8003d82:	e019      	b.n	8003db8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d103      	bne.n	8003d96 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2202      	movs	r2, #2
 8003d92:	771a      	strb	r2, [r3, #28]
 8003d94:	e010      	b.n	8003db8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d103      	bne.n	8003da8 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2204      	movs	r2, #4
 8003da4:	771a      	strb	r2, [r3, #28]
 8003da6:	e007      	b.n	8003db8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d102      	bne.n	8003db8 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2208      	movs	r2, #8
 8003db6:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003db8:	68f8      	ldr	r0, [r7, #12]
 8003dba:	f7fd f9e5 	bl	8001188 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	771a      	strb	r2, [r3, #28]
}
 8003dc4:	bf00      	nop
 8003dc6:	3710      	adds	r7, #16
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a34      	ldr	r2, [pc, #208]	; (8003eb0 <TIM_Base_SetConfig+0xe4>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d00f      	beq.n	8003e04 <TIM_Base_SetConfig+0x38>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dea:	d00b      	beq.n	8003e04 <TIM_Base_SetConfig+0x38>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a31      	ldr	r2, [pc, #196]	; (8003eb4 <TIM_Base_SetConfig+0xe8>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d007      	beq.n	8003e04 <TIM_Base_SetConfig+0x38>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a30      	ldr	r2, [pc, #192]	; (8003eb8 <TIM_Base_SetConfig+0xec>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d003      	beq.n	8003e04 <TIM_Base_SetConfig+0x38>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a2f      	ldr	r2, [pc, #188]	; (8003ebc <TIM_Base_SetConfig+0xf0>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d108      	bne.n	8003e16 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a25      	ldr	r2, [pc, #148]	; (8003eb0 <TIM_Base_SetConfig+0xe4>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d01b      	beq.n	8003e56 <TIM_Base_SetConfig+0x8a>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e24:	d017      	beq.n	8003e56 <TIM_Base_SetConfig+0x8a>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a22      	ldr	r2, [pc, #136]	; (8003eb4 <TIM_Base_SetConfig+0xe8>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d013      	beq.n	8003e56 <TIM_Base_SetConfig+0x8a>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a21      	ldr	r2, [pc, #132]	; (8003eb8 <TIM_Base_SetConfig+0xec>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d00f      	beq.n	8003e56 <TIM_Base_SetConfig+0x8a>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a20      	ldr	r2, [pc, #128]	; (8003ebc <TIM_Base_SetConfig+0xf0>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d00b      	beq.n	8003e56 <TIM_Base_SetConfig+0x8a>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a1f      	ldr	r2, [pc, #124]	; (8003ec0 <TIM_Base_SetConfig+0xf4>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d007      	beq.n	8003e56 <TIM_Base_SetConfig+0x8a>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a1e      	ldr	r2, [pc, #120]	; (8003ec4 <TIM_Base_SetConfig+0xf8>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d003      	beq.n	8003e56 <TIM_Base_SetConfig+0x8a>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a1d      	ldr	r2, [pc, #116]	; (8003ec8 <TIM_Base_SetConfig+0xfc>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d108      	bne.n	8003e68 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	689a      	ldr	r2, [r3, #8]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a08      	ldr	r2, [pc, #32]	; (8003eb0 <TIM_Base_SetConfig+0xe4>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d103      	bne.n	8003e9c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	691a      	ldr	r2, [r3, #16]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	615a      	str	r2, [r3, #20]
}
 8003ea2:	bf00      	nop
 8003ea4:	3714      	adds	r7, #20
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	40010000 	.word	0x40010000
 8003eb4:	40000400 	.word	0x40000400
 8003eb8:	40000800 	.word	0x40000800
 8003ebc:	40000c00 	.word	0x40000c00
 8003ec0:	40014000 	.word	0x40014000
 8003ec4:	40014400 	.word	0x40014400
 8003ec8:	40014800 	.word	0x40014800

08003ecc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b087      	sub	sp, #28
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a1b      	ldr	r3, [r3, #32]
 8003eda:	f023 0201 	bic.w	r2, r3, #1
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
 8003ee6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f023 0303 	bic.w	r3, r3, #3
 8003f02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	f023 0302 	bic.w	r3, r3, #2
 8003f14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	697a      	ldr	r2, [r7, #20]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a1c      	ldr	r2, [pc, #112]	; (8003f94 <TIM_OC1_SetConfig+0xc8>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d10c      	bne.n	8003f42 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	f023 0308 	bic.w	r3, r3, #8
 8003f2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	f023 0304 	bic.w	r3, r3, #4
 8003f40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a13      	ldr	r2, [pc, #76]	; (8003f94 <TIM_OC1_SetConfig+0xc8>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d111      	bne.n	8003f6e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	685a      	ldr	r2, [r3, #4]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	621a      	str	r2, [r3, #32]
}
 8003f88:	bf00      	nop
 8003f8a:	371c      	adds	r7, #28
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr
 8003f94:	40010000 	.word	0x40010000

08003f98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b087      	sub	sp, #28
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	f023 0210 	bic.w	r2, r3, #16
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	021b      	lsls	r3, r3, #8
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	f023 0320 	bic.w	r3, r3, #32
 8003fe2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	011b      	lsls	r3, r3, #4
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a1e      	ldr	r2, [pc, #120]	; (800406c <TIM_OC2_SetConfig+0xd4>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d10d      	bne.n	8004014 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ffe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	011b      	lsls	r3, r3, #4
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	4313      	orrs	r3, r2
 800400a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004012:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a15      	ldr	r2, [pc, #84]	; (800406c <TIM_OC2_SetConfig+0xd4>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d113      	bne.n	8004044 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004022:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800402a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	695b      	ldr	r3, [r3, #20]
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	4313      	orrs	r3, r2
 8004036:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	4313      	orrs	r3, r2
 8004042:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	685a      	ldr	r2, [r3, #4]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	621a      	str	r2, [r3, #32]
}
 800405e:	bf00      	nop
 8004060:	371c      	adds	r7, #28
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	40010000 	.word	0x40010000

08004070 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004070:	b480      	push	{r7}
 8004072:	b087      	sub	sp, #28
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	69db      	ldr	r3, [r3, #28]
 8004096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800409e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f023 0303 	bic.w	r3, r3, #3
 80040a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	021b      	lsls	r3, r3, #8
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a1d      	ldr	r2, [pc, #116]	; (8004140 <TIM_OC3_SetConfig+0xd0>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d10d      	bne.n	80040ea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	021b      	lsls	r3, r3, #8
 80040dc:	697a      	ldr	r2, [r7, #20]
 80040de:	4313      	orrs	r3, r2
 80040e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a14      	ldr	r2, [pc, #80]	; (8004140 <TIM_OC3_SetConfig+0xd0>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d113      	bne.n	800411a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80040f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004100:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	011b      	lsls	r3, r3, #4
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	4313      	orrs	r3, r2
 800410c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	011b      	lsls	r3, r3, #4
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	4313      	orrs	r3, r2
 8004118:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	685a      	ldr	r2, [r3, #4]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	621a      	str	r2, [r3, #32]
}
 8004134:	bf00      	nop
 8004136:	371c      	adds	r7, #28
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr
 8004140:	40010000 	.word	0x40010000

08004144 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004144:	b480      	push	{r7}
 8004146:	b087      	sub	sp, #28
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	69db      	ldr	r3, [r3, #28]
 800416a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800417a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	021b      	lsls	r3, r3, #8
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	4313      	orrs	r3, r2
 8004186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800418e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	031b      	lsls	r3, r3, #12
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	4313      	orrs	r3, r2
 800419a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a10      	ldr	r2, [pc, #64]	; (80041e0 <TIM_OC4_SetConfig+0x9c>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d109      	bne.n	80041b8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	695b      	ldr	r3, [r3, #20]
 80041b0:	019b      	lsls	r3, r3, #6
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685a      	ldr	r2, [r3, #4]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	693a      	ldr	r2, [r7, #16]
 80041d0:	621a      	str	r2, [r3, #32]
}
 80041d2:	bf00      	nop
 80041d4:	371c      	adds	r7, #28
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	40010000 	.word	0x40010000

080041e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b087      	sub	sp, #28
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6a1b      	ldr	r3, [r3, #32]
 80041f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	f023 0201 	bic.w	r2, r3, #1
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800420e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	011b      	lsls	r3, r3, #4
 8004214:	693a      	ldr	r2, [r7, #16]
 8004216:	4313      	orrs	r3, r2
 8004218:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	f023 030a 	bic.w	r3, r3, #10
 8004220:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004222:	697a      	ldr	r2, [r7, #20]
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	4313      	orrs	r3, r2
 8004228:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	621a      	str	r2, [r3, #32]
}
 8004236:	bf00      	nop
 8004238:	371c      	adds	r7, #28
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr

08004242 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004242:	b480      	push	{r7}
 8004244:	b087      	sub	sp, #28
 8004246:	af00      	add	r7, sp, #0
 8004248:	60f8      	str	r0, [r7, #12]
 800424a:	60b9      	str	r1, [r7, #8]
 800424c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	f023 0210 	bic.w	r2, r3, #16
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6a1b      	ldr	r3, [r3, #32]
 8004264:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800426c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	031b      	lsls	r3, r3, #12
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	4313      	orrs	r3, r2
 8004276:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800427e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	011b      	lsls	r3, r3, #4
 8004284:	693a      	ldr	r2, [r7, #16]
 8004286:	4313      	orrs	r3, r2
 8004288:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	697a      	ldr	r2, [r7, #20]
 800428e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	621a      	str	r2, [r3, #32]
}
 8004296:	bf00      	nop
 8004298:	371c      	adds	r7, #28
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr

080042a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042a2:	b480      	push	{r7}
 80042a4:	b085      	sub	sp, #20
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
 80042aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042ba:	683a      	ldr	r2, [r7, #0]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	4313      	orrs	r3, r2
 80042c0:	f043 0307 	orr.w	r3, r3, #7
 80042c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	609a      	str	r2, [r3, #8]
}
 80042cc:	bf00      	nop
 80042ce:	3714      	adds	r7, #20
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042d8:	b480      	push	{r7}
 80042da:	b087      	sub	sp, #28
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]
 80042e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	021a      	lsls	r2, r3, #8
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	431a      	orrs	r2, r3
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	4313      	orrs	r3, r2
 8004300:	697a      	ldr	r2, [r7, #20]
 8004302:	4313      	orrs	r3, r2
 8004304:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	609a      	str	r2, [r3, #8]
}
 800430c:	bf00      	nop
 800430e:	371c      	adds	r7, #28
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004318:	b480      	push	{r7}
 800431a:	b087      	sub	sp, #28
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	f003 031f 	and.w	r3, r3, #31
 800432a:	2201      	movs	r2, #1
 800432c:	fa02 f303 	lsl.w	r3, r2, r3
 8004330:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6a1a      	ldr	r2, [r3, #32]
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	43db      	mvns	r3, r3
 800433a:	401a      	ands	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6a1a      	ldr	r2, [r3, #32]
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	f003 031f 	and.w	r3, r3, #31
 800434a:	6879      	ldr	r1, [r7, #4]
 800434c:	fa01 f303 	lsl.w	r3, r1, r3
 8004350:	431a      	orrs	r2, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	621a      	str	r2, [r3, #32]
}
 8004356:	bf00      	nop
 8004358:	371c      	adds	r7, #28
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
	...

08004364 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004374:	2b01      	cmp	r3, #1
 8004376:	d101      	bne.n	800437c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004378:	2302      	movs	r3, #2
 800437a:	e050      	b.n	800441e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2202      	movs	r2, #2
 8004388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a1c      	ldr	r2, [pc, #112]	; (800442c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d018      	beq.n	80043f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043c8:	d013      	beq.n	80043f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a18      	ldr	r2, [pc, #96]	; (8004430 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d00e      	beq.n	80043f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a16      	ldr	r2, [pc, #88]	; (8004434 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d009      	beq.n	80043f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a15      	ldr	r2, [pc, #84]	; (8004438 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d004      	beq.n	80043f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a13      	ldr	r2, [pc, #76]	; (800443c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d10c      	bne.n	800440c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	68ba      	ldr	r2, [r7, #8]
 8004400:	4313      	orrs	r3, r2
 8004402:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68ba      	ldr	r2, [r7, #8]
 800440a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3714      	adds	r7, #20
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	40010000 	.word	0x40010000
 8004430:	40000400 	.word	0x40000400
 8004434:	40000800 	.word	0x40000800
 8004438:	40000c00 	.word	0x40000c00
 800443c:	40014000 	.word	0x40014000

08004440 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800444a:	2300      	movs	r3, #0
 800444c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004454:	2b01      	cmp	r3, #1
 8004456:	d101      	bne.n	800445c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004458:	2302      	movs	r3, #2
 800445a:	e03d      	b.n	80044d8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	4313      	orrs	r3, r2
 8004470:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	4313      	orrs	r3, r2
 800447e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	4313      	orrs	r3, r2
 800448c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4313      	orrs	r3, r2
 800449a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	695b      	ldr	r3, [r3, #20]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	69db      	ldr	r3, [r3, #28]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3714      	adds	r7, #20
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e03f      	b.n	8004576 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d106      	bne.n	8004510 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f7fd fad8 	bl	8001ac0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2224      	movs	r2, #36	; 0x24
 8004514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68da      	ldr	r2, [r3, #12]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004526:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 f829 	bl	8004580 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	691a      	ldr	r2, [r3, #16]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800453c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	695a      	ldr	r2, [r3, #20]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800454c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68da      	ldr	r2, [r3, #12]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800455c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2220      	movs	r2, #32
 8004568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2220      	movs	r2, #32
 8004570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3708      	adds	r7, #8
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
	...

08004580 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004584:	b09f      	sub	sp, #124	; 0x7c
 8004586:	af00      	add	r7, sp, #0
 8004588:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800458a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004594:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004596:	68d9      	ldr	r1, [r3, #12]
 8004598:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	ea40 0301 	orr.w	r3, r0, r1
 80045a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80045a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045a4:	689a      	ldr	r2, [r3, #8]
 80045a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	431a      	orrs	r2, r3
 80045ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	431a      	orrs	r2, r3
 80045b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045b4:	69db      	ldr	r3, [r3, #28]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80045ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80045c4:	f021 010c 	bic.w	r1, r1, #12
 80045c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045ce:	430b      	orrs	r3, r1
 80045d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80045dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045de:	6999      	ldr	r1, [r3, #24]
 80045e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	ea40 0301 	orr.w	r3, r0, r1
 80045e8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	4bc5      	ldr	r3, [pc, #788]	; (8004904 <UART_SetConfig+0x384>)
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d004      	beq.n	80045fe <UART_SetConfig+0x7e>
 80045f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	4bc3      	ldr	r3, [pc, #780]	; (8004908 <UART_SetConfig+0x388>)
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d103      	bne.n	8004606 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80045fe:	f7fe fe4f 	bl	80032a0 <HAL_RCC_GetPCLK2Freq>
 8004602:	6778      	str	r0, [r7, #116]	; 0x74
 8004604:	e002      	b.n	800460c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004606:	f7fe fe37 	bl	8003278 <HAL_RCC_GetPCLK1Freq>
 800460a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800460c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800460e:	69db      	ldr	r3, [r3, #28]
 8004610:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004614:	f040 80b6 	bne.w	8004784 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004618:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800461a:	461c      	mov	r4, r3
 800461c:	f04f 0500 	mov.w	r5, #0
 8004620:	4622      	mov	r2, r4
 8004622:	462b      	mov	r3, r5
 8004624:	1891      	adds	r1, r2, r2
 8004626:	6439      	str	r1, [r7, #64]	; 0x40
 8004628:	415b      	adcs	r3, r3
 800462a:	647b      	str	r3, [r7, #68]	; 0x44
 800462c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004630:	1912      	adds	r2, r2, r4
 8004632:	eb45 0303 	adc.w	r3, r5, r3
 8004636:	f04f 0000 	mov.w	r0, #0
 800463a:	f04f 0100 	mov.w	r1, #0
 800463e:	00d9      	lsls	r1, r3, #3
 8004640:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004644:	00d0      	lsls	r0, r2, #3
 8004646:	4602      	mov	r2, r0
 8004648:	460b      	mov	r3, r1
 800464a:	1911      	adds	r1, r2, r4
 800464c:	6639      	str	r1, [r7, #96]	; 0x60
 800464e:	416b      	adcs	r3, r5
 8004650:	667b      	str	r3, [r7, #100]	; 0x64
 8004652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	461a      	mov	r2, r3
 8004658:	f04f 0300 	mov.w	r3, #0
 800465c:	1891      	adds	r1, r2, r2
 800465e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004660:	415b      	adcs	r3, r3
 8004662:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004664:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004668:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800466c:	f7fc faa2 	bl	8000bb4 <__aeabi_uldivmod>
 8004670:	4602      	mov	r2, r0
 8004672:	460b      	mov	r3, r1
 8004674:	4ba5      	ldr	r3, [pc, #660]	; (800490c <UART_SetConfig+0x38c>)
 8004676:	fba3 2302 	umull	r2, r3, r3, r2
 800467a:	095b      	lsrs	r3, r3, #5
 800467c:	011e      	lsls	r6, r3, #4
 800467e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004680:	461c      	mov	r4, r3
 8004682:	f04f 0500 	mov.w	r5, #0
 8004686:	4622      	mov	r2, r4
 8004688:	462b      	mov	r3, r5
 800468a:	1891      	adds	r1, r2, r2
 800468c:	6339      	str	r1, [r7, #48]	; 0x30
 800468e:	415b      	adcs	r3, r3
 8004690:	637b      	str	r3, [r7, #52]	; 0x34
 8004692:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004696:	1912      	adds	r2, r2, r4
 8004698:	eb45 0303 	adc.w	r3, r5, r3
 800469c:	f04f 0000 	mov.w	r0, #0
 80046a0:	f04f 0100 	mov.w	r1, #0
 80046a4:	00d9      	lsls	r1, r3, #3
 80046a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80046aa:	00d0      	lsls	r0, r2, #3
 80046ac:	4602      	mov	r2, r0
 80046ae:	460b      	mov	r3, r1
 80046b0:	1911      	adds	r1, r2, r4
 80046b2:	65b9      	str	r1, [r7, #88]	; 0x58
 80046b4:	416b      	adcs	r3, r5
 80046b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	461a      	mov	r2, r3
 80046be:	f04f 0300 	mov.w	r3, #0
 80046c2:	1891      	adds	r1, r2, r2
 80046c4:	62b9      	str	r1, [r7, #40]	; 0x28
 80046c6:	415b      	adcs	r3, r3
 80046c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80046ce:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80046d2:	f7fc fa6f 	bl	8000bb4 <__aeabi_uldivmod>
 80046d6:	4602      	mov	r2, r0
 80046d8:	460b      	mov	r3, r1
 80046da:	4b8c      	ldr	r3, [pc, #560]	; (800490c <UART_SetConfig+0x38c>)
 80046dc:	fba3 1302 	umull	r1, r3, r3, r2
 80046e0:	095b      	lsrs	r3, r3, #5
 80046e2:	2164      	movs	r1, #100	; 0x64
 80046e4:	fb01 f303 	mul.w	r3, r1, r3
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	00db      	lsls	r3, r3, #3
 80046ec:	3332      	adds	r3, #50	; 0x32
 80046ee:	4a87      	ldr	r2, [pc, #540]	; (800490c <UART_SetConfig+0x38c>)
 80046f0:	fba2 2303 	umull	r2, r3, r2, r3
 80046f4:	095b      	lsrs	r3, r3, #5
 80046f6:	005b      	lsls	r3, r3, #1
 80046f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80046fc:	441e      	add	r6, r3
 80046fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004700:	4618      	mov	r0, r3
 8004702:	f04f 0100 	mov.w	r1, #0
 8004706:	4602      	mov	r2, r0
 8004708:	460b      	mov	r3, r1
 800470a:	1894      	adds	r4, r2, r2
 800470c:	623c      	str	r4, [r7, #32]
 800470e:	415b      	adcs	r3, r3
 8004710:	627b      	str	r3, [r7, #36]	; 0x24
 8004712:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004716:	1812      	adds	r2, r2, r0
 8004718:	eb41 0303 	adc.w	r3, r1, r3
 800471c:	f04f 0400 	mov.w	r4, #0
 8004720:	f04f 0500 	mov.w	r5, #0
 8004724:	00dd      	lsls	r5, r3, #3
 8004726:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800472a:	00d4      	lsls	r4, r2, #3
 800472c:	4622      	mov	r2, r4
 800472e:	462b      	mov	r3, r5
 8004730:	1814      	adds	r4, r2, r0
 8004732:	653c      	str	r4, [r7, #80]	; 0x50
 8004734:	414b      	adcs	r3, r1
 8004736:	657b      	str	r3, [r7, #84]	; 0x54
 8004738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	461a      	mov	r2, r3
 800473e:	f04f 0300 	mov.w	r3, #0
 8004742:	1891      	adds	r1, r2, r2
 8004744:	61b9      	str	r1, [r7, #24]
 8004746:	415b      	adcs	r3, r3
 8004748:	61fb      	str	r3, [r7, #28]
 800474a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800474e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004752:	f7fc fa2f 	bl	8000bb4 <__aeabi_uldivmod>
 8004756:	4602      	mov	r2, r0
 8004758:	460b      	mov	r3, r1
 800475a:	4b6c      	ldr	r3, [pc, #432]	; (800490c <UART_SetConfig+0x38c>)
 800475c:	fba3 1302 	umull	r1, r3, r3, r2
 8004760:	095b      	lsrs	r3, r3, #5
 8004762:	2164      	movs	r1, #100	; 0x64
 8004764:	fb01 f303 	mul.w	r3, r1, r3
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	00db      	lsls	r3, r3, #3
 800476c:	3332      	adds	r3, #50	; 0x32
 800476e:	4a67      	ldr	r2, [pc, #412]	; (800490c <UART_SetConfig+0x38c>)
 8004770:	fba2 2303 	umull	r2, r3, r2, r3
 8004774:	095b      	lsrs	r3, r3, #5
 8004776:	f003 0207 	and.w	r2, r3, #7
 800477a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4432      	add	r2, r6
 8004780:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004782:	e0b9      	b.n	80048f8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004784:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004786:	461c      	mov	r4, r3
 8004788:	f04f 0500 	mov.w	r5, #0
 800478c:	4622      	mov	r2, r4
 800478e:	462b      	mov	r3, r5
 8004790:	1891      	adds	r1, r2, r2
 8004792:	6139      	str	r1, [r7, #16]
 8004794:	415b      	adcs	r3, r3
 8004796:	617b      	str	r3, [r7, #20]
 8004798:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800479c:	1912      	adds	r2, r2, r4
 800479e:	eb45 0303 	adc.w	r3, r5, r3
 80047a2:	f04f 0000 	mov.w	r0, #0
 80047a6:	f04f 0100 	mov.w	r1, #0
 80047aa:	00d9      	lsls	r1, r3, #3
 80047ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80047b0:	00d0      	lsls	r0, r2, #3
 80047b2:	4602      	mov	r2, r0
 80047b4:	460b      	mov	r3, r1
 80047b6:	eb12 0804 	adds.w	r8, r2, r4
 80047ba:	eb43 0905 	adc.w	r9, r3, r5
 80047be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	4618      	mov	r0, r3
 80047c4:	f04f 0100 	mov.w	r1, #0
 80047c8:	f04f 0200 	mov.w	r2, #0
 80047cc:	f04f 0300 	mov.w	r3, #0
 80047d0:	008b      	lsls	r3, r1, #2
 80047d2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80047d6:	0082      	lsls	r2, r0, #2
 80047d8:	4640      	mov	r0, r8
 80047da:	4649      	mov	r1, r9
 80047dc:	f7fc f9ea 	bl	8000bb4 <__aeabi_uldivmod>
 80047e0:	4602      	mov	r2, r0
 80047e2:	460b      	mov	r3, r1
 80047e4:	4b49      	ldr	r3, [pc, #292]	; (800490c <UART_SetConfig+0x38c>)
 80047e6:	fba3 2302 	umull	r2, r3, r3, r2
 80047ea:	095b      	lsrs	r3, r3, #5
 80047ec:	011e      	lsls	r6, r3, #4
 80047ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047f0:	4618      	mov	r0, r3
 80047f2:	f04f 0100 	mov.w	r1, #0
 80047f6:	4602      	mov	r2, r0
 80047f8:	460b      	mov	r3, r1
 80047fa:	1894      	adds	r4, r2, r2
 80047fc:	60bc      	str	r4, [r7, #8]
 80047fe:	415b      	adcs	r3, r3
 8004800:	60fb      	str	r3, [r7, #12]
 8004802:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004806:	1812      	adds	r2, r2, r0
 8004808:	eb41 0303 	adc.w	r3, r1, r3
 800480c:	f04f 0400 	mov.w	r4, #0
 8004810:	f04f 0500 	mov.w	r5, #0
 8004814:	00dd      	lsls	r5, r3, #3
 8004816:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800481a:	00d4      	lsls	r4, r2, #3
 800481c:	4622      	mov	r2, r4
 800481e:	462b      	mov	r3, r5
 8004820:	1814      	adds	r4, r2, r0
 8004822:	64bc      	str	r4, [r7, #72]	; 0x48
 8004824:	414b      	adcs	r3, r1
 8004826:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004828:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	4618      	mov	r0, r3
 800482e:	f04f 0100 	mov.w	r1, #0
 8004832:	f04f 0200 	mov.w	r2, #0
 8004836:	f04f 0300 	mov.w	r3, #0
 800483a:	008b      	lsls	r3, r1, #2
 800483c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004840:	0082      	lsls	r2, r0, #2
 8004842:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004846:	f7fc f9b5 	bl	8000bb4 <__aeabi_uldivmod>
 800484a:	4602      	mov	r2, r0
 800484c:	460b      	mov	r3, r1
 800484e:	4b2f      	ldr	r3, [pc, #188]	; (800490c <UART_SetConfig+0x38c>)
 8004850:	fba3 1302 	umull	r1, r3, r3, r2
 8004854:	095b      	lsrs	r3, r3, #5
 8004856:	2164      	movs	r1, #100	; 0x64
 8004858:	fb01 f303 	mul.w	r3, r1, r3
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	011b      	lsls	r3, r3, #4
 8004860:	3332      	adds	r3, #50	; 0x32
 8004862:	4a2a      	ldr	r2, [pc, #168]	; (800490c <UART_SetConfig+0x38c>)
 8004864:	fba2 2303 	umull	r2, r3, r2, r3
 8004868:	095b      	lsrs	r3, r3, #5
 800486a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800486e:	441e      	add	r6, r3
 8004870:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004872:	4618      	mov	r0, r3
 8004874:	f04f 0100 	mov.w	r1, #0
 8004878:	4602      	mov	r2, r0
 800487a:	460b      	mov	r3, r1
 800487c:	1894      	adds	r4, r2, r2
 800487e:	603c      	str	r4, [r7, #0]
 8004880:	415b      	adcs	r3, r3
 8004882:	607b      	str	r3, [r7, #4]
 8004884:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004888:	1812      	adds	r2, r2, r0
 800488a:	eb41 0303 	adc.w	r3, r1, r3
 800488e:	f04f 0400 	mov.w	r4, #0
 8004892:	f04f 0500 	mov.w	r5, #0
 8004896:	00dd      	lsls	r5, r3, #3
 8004898:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800489c:	00d4      	lsls	r4, r2, #3
 800489e:	4622      	mov	r2, r4
 80048a0:	462b      	mov	r3, r5
 80048a2:	eb12 0a00 	adds.w	sl, r2, r0
 80048a6:	eb43 0b01 	adc.w	fp, r3, r1
 80048aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f04f 0100 	mov.w	r1, #0
 80048b4:	f04f 0200 	mov.w	r2, #0
 80048b8:	f04f 0300 	mov.w	r3, #0
 80048bc:	008b      	lsls	r3, r1, #2
 80048be:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80048c2:	0082      	lsls	r2, r0, #2
 80048c4:	4650      	mov	r0, sl
 80048c6:	4659      	mov	r1, fp
 80048c8:	f7fc f974 	bl	8000bb4 <__aeabi_uldivmod>
 80048cc:	4602      	mov	r2, r0
 80048ce:	460b      	mov	r3, r1
 80048d0:	4b0e      	ldr	r3, [pc, #56]	; (800490c <UART_SetConfig+0x38c>)
 80048d2:	fba3 1302 	umull	r1, r3, r3, r2
 80048d6:	095b      	lsrs	r3, r3, #5
 80048d8:	2164      	movs	r1, #100	; 0x64
 80048da:	fb01 f303 	mul.w	r3, r1, r3
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	011b      	lsls	r3, r3, #4
 80048e2:	3332      	adds	r3, #50	; 0x32
 80048e4:	4a09      	ldr	r2, [pc, #36]	; (800490c <UART_SetConfig+0x38c>)
 80048e6:	fba2 2303 	umull	r2, r3, r2, r3
 80048ea:	095b      	lsrs	r3, r3, #5
 80048ec:	f003 020f 	and.w	r2, r3, #15
 80048f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4432      	add	r2, r6
 80048f6:	609a      	str	r2, [r3, #8]
}
 80048f8:	bf00      	nop
 80048fa:	377c      	adds	r7, #124	; 0x7c
 80048fc:	46bd      	mov	sp, r7
 80048fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004902:	bf00      	nop
 8004904:	40011000 	.word	0x40011000
 8004908:	40011400 	.word	0x40011400
 800490c:	51eb851f 	.word	0x51eb851f

08004910 <__libc_init_array>:
 8004910:	b570      	push	{r4, r5, r6, lr}
 8004912:	4d0d      	ldr	r5, [pc, #52]	; (8004948 <__libc_init_array+0x38>)
 8004914:	4c0d      	ldr	r4, [pc, #52]	; (800494c <__libc_init_array+0x3c>)
 8004916:	1b64      	subs	r4, r4, r5
 8004918:	10a4      	asrs	r4, r4, #2
 800491a:	2600      	movs	r6, #0
 800491c:	42a6      	cmp	r6, r4
 800491e:	d109      	bne.n	8004934 <__libc_init_array+0x24>
 8004920:	4d0b      	ldr	r5, [pc, #44]	; (8004950 <__libc_init_array+0x40>)
 8004922:	4c0c      	ldr	r4, [pc, #48]	; (8004954 <__libc_init_array+0x44>)
 8004924:	f001 f882 	bl	8005a2c <_init>
 8004928:	1b64      	subs	r4, r4, r5
 800492a:	10a4      	asrs	r4, r4, #2
 800492c:	2600      	movs	r6, #0
 800492e:	42a6      	cmp	r6, r4
 8004930:	d105      	bne.n	800493e <__libc_init_array+0x2e>
 8004932:	bd70      	pop	{r4, r5, r6, pc}
 8004934:	f855 3b04 	ldr.w	r3, [r5], #4
 8004938:	4798      	blx	r3
 800493a:	3601      	adds	r6, #1
 800493c:	e7ee      	b.n	800491c <__libc_init_array+0xc>
 800493e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004942:	4798      	blx	r3
 8004944:	3601      	adds	r6, #1
 8004946:	e7f2      	b.n	800492e <__libc_init_array+0x1e>
 8004948:	08005c48 	.word	0x08005c48
 800494c:	08005c48 	.word	0x08005c48
 8004950:	08005c48 	.word	0x08005c48
 8004954:	08005c4c 	.word	0x08005c4c

08004958 <memset>:
 8004958:	4402      	add	r2, r0
 800495a:	4603      	mov	r3, r0
 800495c:	4293      	cmp	r3, r2
 800495e:	d100      	bne.n	8004962 <memset+0xa>
 8004960:	4770      	bx	lr
 8004962:	f803 1b01 	strb.w	r1, [r3], #1
 8004966:	e7f9      	b.n	800495c <memset+0x4>

08004968 <tan>:
 8004968:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800496a:	ec53 2b10 	vmov	r2, r3, d0
 800496e:	4814      	ldr	r0, [pc, #80]	; (80049c0 <tan+0x58>)
 8004970:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004974:	4281      	cmp	r1, r0
 8004976:	dc05      	bgt.n	8004984 <tan+0x1c>
 8004978:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 80049b8 <tan+0x50>
 800497c:	2001      	movs	r0, #1
 800497e:	f000 fd6f 	bl	8005460 <__kernel_tan>
 8004982:	e009      	b.n	8004998 <tan+0x30>
 8004984:	480f      	ldr	r0, [pc, #60]	; (80049c4 <tan+0x5c>)
 8004986:	4281      	cmp	r1, r0
 8004988:	dd09      	ble.n	800499e <tan+0x36>
 800498a:	ee10 0a10 	vmov	r0, s0
 800498e:	4619      	mov	r1, r3
 8004990:	f7fb fc26 	bl	80001e0 <__aeabi_dsub>
 8004994:	ec41 0b10 	vmov	d0, r0, r1
 8004998:	b005      	add	sp, #20
 800499a:	f85d fb04 	ldr.w	pc, [sp], #4
 800499e:	4668      	mov	r0, sp
 80049a0:	f000 f812 	bl	80049c8 <__ieee754_rem_pio2>
 80049a4:	0040      	lsls	r0, r0, #1
 80049a6:	f000 0002 	and.w	r0, r0, #2
 80049aa:	ed9d 1b02 	vldr	d1, [sp, #8]
 80049ae:	ed9d 0b00 	vldr	d0, [sp]
 80049b2:	f1c0 0001 	rsb	r0, r0, #1
 80049b6:	e7e2      	b.n	800497e <tan+0x16>
	...
 80049c0:	3fe921fb 	.word	0x3fe921fb
 80049c4:	7fefffff 	.word	0x7fefffff

080049c8 <__ieee754_rem_pio2>:
 80049c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049cc:	ed2d 8b02 	vpush	{d8}
 80049d0:	ec55 4b10 	vmov	r4, r5, d0
 80049d4:	4bca      	ldr	r3, [pc, #808]	; (8004d00 <__ieee754_rem_pio2+0x338>)
 80049d6:	b08b      	sub	sp, #44	; 0x2c
 80049d8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80049dc:	4598      	cmp	r8, r3
 80049de:	4682      	mov	sl, r0
 80049e0:	9502      	str	r5, [sp, #8]
 80049e2:	dc08      	bgt.n	80049f6 <__ieee754_rem_pio2+0x2e>
 80049e4:	2200      	movs	r2, #0
 80049e6:	2300      	movs	r3, #0
 80049e8:	ed80 0b00 	vstr	d0, [r0]
 80049ec:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80049f0:	f04f 0b00 	mov.w	fp, #0
 80049f4:	e028      	b.n	8004a48 <__ieee754_rem_pio2+0x80>
 80049f6:	4bc3      	ldr	r3, [pc, #780]	; (8004d04 <__ieee754_rem_pio2+0x33c>)
 80049f8:	4598      	cmp	r8, r3
 80049fa:	dc78      	bgt.n	8004aee <__ieee754_rem_pio2+0x126>
 80049fc:	9b02      	ldr	r3, [sp, #8]
 80049fe:	4ec2      	ldr	r6, [pc, #776]	; (8004d08 <__ieee754_rem_pio2+0x340>)
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	ee10 0a10 	vmov	r0, s0
 8004a06:	a3b0      	add	r3, pc, #704	; (adr r3, 8004cc8 <__ieee754_rem_pio2+0x300>)
 8004a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0c:	4629      	mov	r1, r5
 8004a0e:	dd39      	ble.n	8004a84 <__ieee754_rem_pio2+0xbc>
 8004a10:	f7fb fbe6 	bl	80001e0 <__aeabi_dsub>
 8004a14:	45b0      	cmp	r8, r6
 8004a16:	4604      	mov	r4, r0
 8004a18:	460d      	mov	r5, r1
 8004a1a:	d01b      	beq.n	8004a54 <__ieee754_rem_pio2+0x8c>
 8004a1c:	a3ac      	add	r3, pc, #688	; (adr r3, 8004cd0 <__ieee754_rem_pio2+0x308>)
 8004a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a22:	f7fb fbdd 	bl	80001e0 <__aeabi_dsub>
 8004a26:	4602      	mov	r2, r0
 8004a28:	460b      	mov	r3, r1
 8004a2a:	e9ca 2300 	strd	r2, r3, [sl]
 8004a2e:	4620      	mov	r0, r4
 8004a30:	4629      	mov	r1, r5
 8004a32:	f7fb fbd5 	bl	80001e0 <__aeabi_dsub>
 8004a36:	a3a6      	add	r3, pc, #664	; (adr r3, 8004cd0 <__ieee754_rem_pio2+0x308>)
 8004a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a3c:	f7fb fbd0 	bl	80001e0 <__aeabi_dsub>
 8004a40:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004a44:	f04f 0b01 	mov.w	fp, #1
 8004a48:	4658      	mov	r0, fp
 8004a4a:	b00b      	add	sp, #44	; 0x2c
 8004a4c:	ecbd 8b02 	vpop	{d8}
 8004a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a54:	a3a0      	add	r3, pc, #640	; (adr r3, 8004cd8 <__ieee754_rem_pio2+0x310>)
 8004a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a5a:	f7fb fbc1 	bl	80001e0 <__aeabi_dsub>
 8004a5e:	a3a0      	add	r3, pc, #640	; (adr r3, 8004ce0 <__ieee754_rem_pio2+0x318>)
 8004a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a64:	4604      	mov	r4, r0
 8004a66:	460d      	mov	r5, r1
 8004a68:	f7fb fbba 	bl	80001e0 <__aeabi_dsub>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	460b      	mov	r3, r1
 8004a70:	e9ca 2300 	strd	r2, r3, [sl]
 8004a74:	4620      	mov	r0, r4
 8004a76:	4629      	mov	r1, r5
 8004a78:	f7fb fbb2 	bl	80001e0 <__aeabi_dsub>
 8004a7c:	a398      	add	r3, pc, #608	; (adr r3, 8004ce0 <__ieee754_rem_pio2+0x318>)
 8004a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a82:	e7db      	b.n	8004a3c <__ieee754_rem_pio2+0x74>
 8004a84:	f7fb fbae 	bl	80001e4 <__adddf3>
 8004a88:	45b0      	cmp	r8, r6
 8004a8a:	4604      	mov	r4, r0
 8004a8c:	460d      	mov	r5, r1
 8004a8e:	d016      	beq.n	8004abe <__ieee754_rem_pio2+0xf6>
 8004a90:	a38f      	add	r3, pc, #572	; (adr r3, 8004cd0 <__ieee754_rem_pio2+0x308>)
 8004a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a96:	f7fb fba5 	bl	80001e4 <__adddf3>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	e9ca 2300 	strd	r2, r3, [sl]
 8004aa2:	4620      	mov	r0, r4
 8004aa4:	4629      	mov	r1, r5
 8004aa6:	f7fb fb9b 	bl	80001e0 <__aeabi_dsub>
 8004aaa:	a389      	add	r3, pc, #548	; (adr r3, 8004cd0 <__ieee754_rem_pio2+0x308>)
 8004aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab0:	f7fb fb98 	bl	80001e4 <__adddf3>
 8004ab4:	f04f 3bff 	mov.w	fp, #4294967295
 8004ab8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004abc:	e7c4      	b.n	8004a48 <__ieee754_rem_pio2+0x80>
 8004abe:	a386      	add	r3, pc, #536	; (adr r3, 8004cd8 <__ieee754_rem_pio2+0x310>)
 8004ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac4:	f7fb fb8e 	bl	80001e4 <__adddf3>
 8004ac8:	a385      	add	r3, pc, #532	; (adr r3, 8004ce0 <__ieee754_rem_pio2+0x318>)
 8004aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ace:	4604      	mov	r4, r0
 8004ad0:	460d      	mov	r5, r1
 8004ad2:	f7fb fb87 	bl	80001e4 <__adddf3>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	460b      	mov	r3, r1
 8004ada:	e9ca 2300 	strd	r2, r3, [sl]
 8004ade:	4620      	mov	r0, r4
 8004ae0:	4629      	mov	r1, r5
 8004ae2:	f7fb fb7d 	bl	80001e0 <__aeabi_dsub>
 8004ae6:	a37e      	add	r3, pc, #504	; (adr r3, 8004ce0 <__ieee754_rem_pio2+0x318>)
 8004ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aec:	e7e0      	b.n	8004ab0 <__ieee754_rem_pio2+0xe8>
 8004aee:	4b87      	ldr	r3, [pc, #540]	; (8004d0c <__ieee754_rem_pio2+0x344>)
 8004af0:	4598      	cmp	r8, r3
 8004af2:	f300 80d9 	bgt.w	8004ca8 <__ieee754_rem_pio2+0x2e0>
 8004af6:	f000 fe87 	bl	8005808 <fabs>
 8004afa:	ec55 4b10 	vmov	r4, r5, d0
 8004afe:	ee10 0a10 	vmov	r0, s0
 8004b02:	a379      	add	r3, pc, #484	; (adr r3, 8004ce8 <__ieee754_rem_pio2+0x320>)
 8004b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b08:	4629      	mov	r1, r5
 8004b0a:	f7fb fd21 	bl	8000550 <__aeabi_dmul>
 8004b0e:	4b80      	ldr	r3, [pc, #512]	; (8004d10 <__ieee754_rem_pio2+0x348>)
 8004b10:	2200      	movs	r2, #0
 8004b12:	f7fb fb67 	bl	80001e4 <__adddf3>
 8004b16:	f7fb ffb5 	bl	8000a84 <__aeabi_d2iz>
 8004b1a:	4683      	mov	fp, r0
 8004b1c:	f7fb fcae 	bl	800047c <__aeabi_i2d>
 8004b20:	4602      	mov	r2, r0
 8004b22:	460b      	mov	r3, r1
 8004b24:	ec43 2b18 	vmov	d8, r2, r3
 8004b28:	a367      	add	r3, pc, #412	; (adr r3, 8004cc8 <__ieee754_rem_pio2+0x300>)
 8004b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b2e:	f7fb fd0f 	bl	8000550 <__aeabi_dmul>
 8004b32:	4602      	mov	r2, r0
 8004b34:	460b      	mov	r3, r1
 8004b36:	4620      	mov	r0, r4
 8004b38:	4629      	mov	r1, r5
 8004b3a:	f7fb fb51 	bl	80001e0 <__aeabi_dsub>
 8004b3e:	a364      	add	r3, pc, #400	; (adr r3, 8004cd0 <__ieee754_rem_pio2+0x308>)
 8004b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b44:	4606      	mov	r6, r0
 8004b46:	460f      	mov	r7, r1
 8004b48:	ec51 0b18 	vmov	r0, r1, d8
 8004b4c:	f7fb fd00 	bl	8000550 <__aeabi_dmul>
 8004b50:	f1bb 0f1f 	cmp.w	fp, #31
 8004b54:	4604      	mov	r4, r0
 8004b56:	460d      	mov	r5, r1
 8004b58:	dc0d      	bgt.n	8004b76 <__ieee754_rem_pio2+0x1ae>
 8004b5a:	4b6e      	ldr	r3, [pc, #440]	; (8004d14 <__ieee754_rem_pio2+0x34c>)
 8004b5c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8004b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b64:	4543      	cmp	r3, r8
 8004b66:	d006      	beq.n	8004b76 <__ieee754_rem_pio2+0x1ae>
 8004b68:	4622      	mov	r2, r4
 8004b6a:	462b      	mov	r3, r5
 8004b6c:	4630      	mov	r0, r6
 8004b6e:	4639      	mov	r1, r7
 8004b70:	f7fb fb36 	bl	80001e0 <__aeabi_dsub>
 8004b74:	e00f      	b.n	8004b96 <__ieee754_rem_pio2+0x1ce>
 8004b76:	462b      	mov	r3, r5
 8004b78:	4622      	mov	r2, r4
 8004b7a:	4630      	mov	r0, r6
 8004b7c:	4639      	mov	r1, r7
 8004b7e:	f7fb fb2f 	bl	80001e0 <__aeabi_dsub>
 8004b82:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004b86:	9303      	str	r3, [sp, #12]
 8004b88:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004b8c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8004b90:	f1b8 0f10 	cmp.w	r8, #16
 8004b94:	dc02      	bgt.n	8004b9c <__ieee754_rem_pio2+0x1d4>
 8004b96:	e9ca 0100 	strd	r0, r1, [sl]
 8004b9a:	e039      	b.n	8004c10 <__ieee754_rem_pio2+0x248>
 8004b9c:	a34e      	add	r3, pc, #312	; (adr r3, 8004cd8 <__ieee754_rem_pio2+0x310>)
 8004b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba2:	ec51 0b18 	vmov	r0, r1, d8
 8004ba6:	f7fb fcd3 	bl	8000550 <__aeabi_dmul>
 8004baa:	4604      	mov	r4, r0
 8004bac:	460d      	mov	r5, r1
 8004bae:	4602      	mov	r2, r0
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	4630      	mov	r0, r6
 8004bb4:	4639      	mov	r1, r7
 8004bb6:	f7fb fb13 	bl	80001e0 <__aeabi_dsub>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	4680      	mov	r8, r0
 8004bc0:	4689      	mov	r9, r1
 8004bc2:	4630      	mov	r0, r6
 8004bc4:	4639      	mov	r1, r7
 8004bc6:	f7fb fb0b 	bl	80001e0 <__aeabi_dsub>
 8004bca:	4622      	mov	r2, r4
 8004bcc:	462b      	mov	r3, r5
 8004bce:	f7fb fb07 	bl	80001e0 <__aeabi_dsub>
 8004bd2:	a343      	add	r3, pc, #268	; (adr r3, 8004ce0 <__ieee754_rem_pio2+0x318>)
 8004bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd8:	4604      	mov	r4, r0
 8004bda:	460d      	mov	r5, r1
 8004bdc:	ec51 0b18 	vmov	r0, r1, d8
 8004be0:	f7fb fcb6 	bl	8000550 <__aeabi_dmul>
 8004be4:	4622      	mov	r2, r4
 8004be6:	462b      	mov	r3, r5
 8004be8:	f7fb fafa 	bl	80001e0 <__aeabi_dsub>
 8004bec:	4602      	mov	r2, r0
 8004bee:	460b      	mov	r3, r1
 8004bf0:	4604      	mov	r4, r0
 8004bf2:	460d      	mov	r5, r1
 8004bf4:	4640      	mov	r0, r8
 8004bf6:	4649      	mov	r1, r9
 8004bf8:	f7fb faf2 	bl	80001e0 <__aeabi_dsub>
 8004bfc:	9a03      	ldr	r2, [sp, #12]
 8004bfe:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	2b31      	cmp	r3, #49	; 0x31
 8004c06:	dc24      	bgt.n	8004c52 <__ieee754_rem_pio2+0x28a>
 8004c08:	e9ca 0100 	strd	r0, r1, [sl]
 8004c0c:	4646      	mov	r6, r8
 8004c0e:	464f      	mov	r7, r9
 8004c10:	e9da 8900 	ldrd	r8, r9, [sl]
 8004c14:	4630      	mov	r0, r6
 8004c16:	4642      	mov	r2, r8
 8004c18:	464b      	mov	r3, r9
 8004c1a:	4639      	mov	r1, r7
 8004c1c:	f7fb fae0 	bl	80001e0 <__aeabi_dsub>
 8004c20:	462b      	mov	r3, r5
 8004c22:	4622      	mov	r2, r4
 8004c24:	f7fb fadc 	bl	80001e0 <__aeabi_dsub>
 8004c28:	9b02      	ldr	r3, [sp, #8]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004c30:	f6bf af0a 	bge.w	8004a48 <__ieee754_rem_pio2+0x80>
 8004c34:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004c38:	f8ca 3004 	str.w	r3, [sl, #4]
 8004c3c:	f8ca 8000 	str.w	r8, [sl]
 8004c40:	f8ca 0008 	str.w	r0, [sl, #8]
 8004c44:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004c48:	f8ca 300c 	str.w	r3, [sl, #12]
 8004c4c:	f1cb 0b00 	rsb	fp, fp, #0
 8004c50:	e6fa      	b.n	8004a48 <__ieee754_rem_pio2+0x80>
 8004c52:	a327      	add	r3, pc, #156	; (adr r3, 8004cf0 <__ieee754_rem_pio2+0x328>)
 8004c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c58:	ec51 0b18 	vmov	r0, r1, d8
 8004c5c:	f7fb fc78 	bl	8000550 <__aeabi_dmul>
 8004c60:	4604      	mov	r4, r0
 8004c62:	460d      	mov	r5, r1
 8004c64:	4602      	mov	r2, r0
 8004c66:	460b      	mov	r3, r1
 8004c68:	4640      	mov	r0, r8
 8004c6a:	4649      	mov	r1, r9
 8004c6c:	f7fb fab8 	bl	80001e0 <__aeabi_dsub>
 8004c70:	4602      	mov	r2, r0
 8004c72:	460b      	mov	r3, r1
 8004c74:	4606      	mov	r6, r0
 8004c76:	460f      	mov	r7, r1
 8004c78:	4640      	mov	r0, r8
 8004c7a:	4649      	mov	r1, r9
 8004c7c:	f7fb fab0 	bl	80001e0 <__aeabi_dsub>
 8004c80:	4622      	mov	r2, r4
 8004c82:	462b      	mov	r3, r5
 8004c84:	f7fb faac 	bl	80001e0 <__aeabi_dsub>
 8004c88:	a31b      	add	r3, pc, #108	; (adr r3, 8004cf8 <__ieee754_rem_pio2+0x330>)
 8004c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c8e:	4604      	mov	r4, r0
 8004c90:	460d      	mov	r5, r1
 8004c92:	ec51 0b18 	vmov	r0, r1, d8
 8004c96:	f7fb fc5b 	bl	8000550 <__aeabi_dmul>
 8004c9a:	4622      	mov	r2, r4
 8004c9c:	462b      	mov	r3, r5
 8004c9e:	f7fb fa9f 	bl	80001e0 <__aeabi_dsub>
 8004ca2:	4604      	mov	r4, r0
 8004ca4:	460d      	mov	r5, r1
 8004ca6:	e75f      	b.n	8004b68 <__ieee754_rem_pio2+0x1a0>
 8004ca8:	4b1b      	ldr	r3, [pc, #108]	; (8004d18 <__ieee754_rem_pio2+0x350>)
 8004caa:	4598      	cmp	r8, r3
 8004cac:	dd36      	ble.n	8004d1c <__ieee754_rem_pio2+0x354>
 8004cae:	ee10 2a10 	vmov	r2, s0
 8004cb2:	462b      	mov	r3, r5
 8004cb4:	4620      	mov	r0, r4
 8004cb6:	4629      	mov	r1, r5
 8004cb8:	f7fb fa92 	bl	80001e0 <__aeabi_dsub>
 8004cbc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004cc0:	e9ca 0100 	strd	r0, r1, [sl]
 8004cc4:	e694      	b.n	80049f0 <__ieee754_rem_pio2+0x28>
 8004cc6:	bf00      	nop
 8004cc8:	54400000 	.word	0x54400000
 8004ccc:	3ff921fb 	.word	0x3ff921fb
 8004cd0:	1a626331 	.word	0x1a626331
 8004cd4:	3dd0b461 	.word	0x3dd0b461
 8004cd8:	1a600000 	.word	0x1a600000
 8004cdc:	3dd0b461 	.word	0x3dd0b461
 8004ce0:	2e037073 	.word	0x2e037073
 8004ce4:	3ba3198a 	.word	0x3ba3198a
 8004ce8:	6dc9c883 	.word	0x6dc9c883
 8004cec:	3fe45f30 	.word	0x3fe45f30
 8004cf0:	2e000000 	.word	0x2e000000
 8004cf4:	3ba3198a 	.word	0x3ba3198a
 8004cf8:	252049c1 	.word	0x252049c1
 8004cfc:	397b839a 	.word	0x397b839a
 8004d00:	3fe921fb 	.word	0x3fe921fb
 8004d04:	4002d97b 	.word	0x4002d97b
 8004d08:	3ff921fb 	.word	0x3ff921fb
 8004d0c:	413921fb 	.word	0x413921fb
 8004d10:	3fe00000 	.word	0x3fe00000
 8004d14:	08005a68 	.word	0x08005a68
 8004d18:	7fefffff 	.word	0x7fefffff
 8004d1c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8004d20:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8004d24:	ee10 0a10 	vmov	r0, s0
 8004d28:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8004d2c:	ee10 6a10 	vmov	r6, s0
 8004d30:	460f      	mov	r7, r1
 8004d32:	f7fb fea7 	bl	8000a84 <__aeabi_d2iz>
 8004d36:	f7fb fba1 	bl	800047c <__aeabi_i2d>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	4630      	mov	r0, r6
 8004d40:	4639      	mov	r1, r7
 8004d42:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004d46:	f7fb fa4b 	bl	80001e0 <__aeabi_dsub>
 8004d4a:	4b22      	ldr	r3, [pc, #136]	; (8004dd4 <__ieee754_rem_pio2+0x40c>)
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f7fb fbff 	bl	8000550 <__aeabi_dmul>
 8004d52:	460f      	mov	r7, r1
 8004d54:	4606      	mov	r6, r0
 8004d56:	f7fb fe95 	bl	8000a84 <__aeabi_d2iz>
 8004d5a:	f7fb fb8f 	bl	800047c <__aeabi_i2d>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	460b      	mov	r3, r1
 8004d62:	4630      	mov	r0, r6
 8004d64:	4639      	mov	r1, r7
 8004d66:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004d6a:	f7fb fa39 	bl	80001e0 <__aeabi_dsub>
 8004d6e:	4b19      	ldr	r3, [pc, #100]	; (8004dd4 <__ieee754_rem_pio2+0x40c>)
 8004d70:	2200      	movs	r2, #0
 8004d72:	f7fb fbed 	bl	8000550 <__aeabi_dmul>
 8004d76:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004d7a:	ad04      	add	r5, sp, #16
 8004d7c:	f04f 0803 	mov.w	r8, #3
 8004d80:	46a9      	mov	r9, r5
 8004d82:	2600      	movs	r6, #0
 8004d84:	2700      	movs	r7, #0
 8004d86:	4632      	mov	r2, r6
 8004d88:	463b      	mov	r3, r7
 8004d8a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004d8e:	46c3      	mov	fp, r8
 8004d90:	3d08      	subs	r5, #8
 8004d92:	f108 38ff 	add.w	r8, r8, #4294967295
 8004d96:	f7fb fe43 	bl	8000a20 <__aeabi_dcmpeq>
 8004d9a:	2800      	cmp	r0, #0
 8004d9c:	d1f3      	bne.n	8004d86 <__ieee754_rem_pio2+0x3be>
 8004d9e:	4b0e      	ldr	r3, [pc, #56]	; (8004dd8 <__ieee754_rem_pio2+0x410>)
 8004da0:	9301      	str	r3, [sp, #4]
 8004da2:	2302      	movs	r3, #2
 8004da4:	9300      	str	r3, [sp, #0]
 8004da6:	4622      	mov	r2, r4
 8004da8:	465b      	mov	r3, fp
 8004daa:	4651      	mov	r1, sl
 8004dac:	4648      	mov	r0, r9
 8004dae:	f000 f817 	bl	8004de0 <__kernel_rem_pio2>
 8004db2:	9b02      	ldr	r3, [sp, #8]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	4683      	mov	fp, r0
 8004db8:	f6bf ae46 	bge.w	8004a48 <__ieee754_rem_pio2+0x80>
 8004dbc:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004dc0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004dc4:	f8ca 3004 	str.w	r3, [sl, #4]
 8004dc8:	f8da 300c 	ldr.w	r3, [sl, #12]
 8004dcc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004dd0:	e73a      	b.n	8004c48 <__ieee754_rem_pio2+0x280>
 8004dd2:	bf00      	nop
 8004dd4:	41700000 	.word	0x41700000
 8004dd8:	08005ae8 	.word	0x08005ae8
 8004ddc:	00000000 	.word	0x00000000

08004de0 <__kernel_rem_pio2>:
 8004de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004de4:	ed2d 8b02 	vpush	{d8}
 8004de8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8004dec:	f112 0f14 	cmn.w	r2, #20
 8004df0:	9308      	str	r3, [sp, #32]
 8004df2:	9101      	str	r1, [sp, #4]
 8004df4:	4bc6      	ldr	r3, [pc, #792]	; (8005110 <__kernel_rem_pio2+0x330>)
 8004df6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8004df8:	9009      	str	r0, [sp, #36]	; 0x24
 8004dfa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004dfe:	9304      	str	r3, [sp, #16]
 8004e00:	9b08      	ldr	r3, [sp, #32]
 8004e02:	f103 33ff 	add.w	r3, r3, #4294967295
 8004e06:	bfa8      	it	ge
 8004e08:	1ed4      	subge	r4, r2, #3
 8004e0a:	9306      	str	r3, [sp, #24]
 8004e0c:	bfb2      	itee	lt
 8004e0e:	2400      	movlt	r4, #0
 8004e10:	2318      	movge	r3, #24
 8004e12:	fb94 f4f3 	sdivge	r4, r4, r3
 8004e16:	f06f 0317 	mvn.w	r3, #23
 8004e1a:	fb04 3303 	mla	r3, r4, r3, r3
 8004e1e:	eb03 0a02 	add.w	sl, r3, r2
 8004e22:	9b04      	ldr	r3, [sp, #16]
 8004e24:	9a06      	ldr	r2, [sp, #24]
 8004e26:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8005100 <__kernel_rem_pio2+0x320>
 8004e2a:	eb03 0802 	add.w	r8, r3, r2
 8004e2e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8004e30:	1aa7      	subs	r7, r4, r2
 8004e32:	ae20      	add	r6, sp, #128	; 0x80
 8004e34:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004e38:	2500      	movs	r5, #0
 8004e3a:	4545      	cmp	r5, r8
 8004e3c:	dd18      	ble.n	8004e70 <__kernel_rem_pio2+0x90>
 8004e3e:	9b08      	ldr	r3, [sp, #32]
 8004e40:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8004e44:	aa20      	add	r2, sp, #128	; 0x80
 8004e46:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8005100 <__kernel_rem_pio2+0x320>
 8004e4a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8004e4e:	f1c3 0301 	rsb	r3, r3, #1
 8004e52:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8004e56:	9307      	str	r3, [sp, #28]
 8004e58:	9b07      	ldr	r3, [sp, #28]
 8004e5a:	9a04      	ldr	r2, [sp, #16]
 8004e5c:	4443      	add	r3, r8
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	db2f      	blt.n	8004ec2 <__kernel_rem_pio2+0xe2>
 8004e62:	ed8d 8b02 	vstr	d8, [sp, #8]
 8004e66:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8004e6a:	462f      	mov	r7, r5
 8004e6c:	2600      	movs	r6, #0
 8004e6e:	e01b      	b.n	8004ea8 <__kernel_rem_pio2+0xc8>
 8004e70:	42ef      	cmn	r7, r5
 8004e72:	d407      	bmi.n	8004e84 <__kernel_rem_pio2+0xa4>
 8004e74:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004e78:	f7fb fb00 	bl	800047c <__aeabi_i2d>
 8004e7c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004e80:	3501      	adds	r5, #1
 8004e82:	e7da      	b.n	8004e3a <__kernel_rem_pio2+0x5a>
 8004e84:	ec51 0b18 	vmov	r0, r1, d8
 8004e88:	e7f8      	b.n	8004e7c <__kernel_rem_pio2+0x9c>
 8004e8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e8e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004e92:	f7fb fb5d 	bl	8000550 <__aeabi_dmul>
 8004e96:	4602      	mov	r2, r0
 8004e98:	460b      	mov	r3, r1
 8004e9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e9e:	f7fb f9a1 	bl	80001e4 <__adddf3>
 8004ea2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ea6:	3601      	adds	r6, #1
 8004ea8:	9b06      	ldr	r3, [sp, #24]
 8004eaa:	429e      	cmp	r6, r3
 8004eac:	f1a7 0708 	sub.w	r7, r7, #8
 8004eb0:	ddeb      	ble.n	8004e8a <__kernel_rem_pio2+0xaa>
 8004eb2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004eb6:	3508      	adds	r5, #8
 8004eb8:	ecab 7b02 	vstmia	fp!, {d7}
 8004ebc:	f108 0801 	add.w	r8, r8, #1
 8004ec0:	e7ca      	b.n	8004e58 <__kernel_rem_pio2+0x78>
 8004ec2:	9b04      	ldr	r3, [sp, #16]
 8004ec4:	aa0c      	add	r2, sp, #48	; 0x30
 8004ec6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004eca:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ecc:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8004ece:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004ed2:	9c04      	ldr	r4, [sp, #16]
 8004ed4:	930a      	str	r3, [sp, #40]	; 0x28
 8004ed6:	ab98      	add	r3, sp, #608	; 0x260
 8004ed8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004edc:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8004ee0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8004ee4:	f8cd b008 	str.w	fp, [sp, #8]
 8004ee8:	4625      	mov	r5, r4
 8004eea:	2d00      	cmp	r5, #0
 8004eec:	dc78      	bgt.n	8004fe0 <__kernel_rem_pio2+0x200>
 8004eee:	ec47 6b10 	vmov	d0, r6, r7
 8004ef2:	4650      	mov	r0, sl
 8004ef4:	f000 fd14 	bl	8005920 <scalbn>
 8004ef8:	ec57 6b10 	vmov	r6, r7, d0
 8004efc:	2200      	movs	r2, #0
 8004efe:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004f02:	ee10 0a10 	vmov	r0, s0
 8004f06:	4639      	mov	r1, r7
 8004f08:	f7fb fb22 	bl	8000550 <__aeabi_dmul>
 8004f0c:	ec41 0b10 	vmov	d0, r0, r1
 8004f10:	f000 fc86 	bl	8005820 <floor>
 8004f14:	4b7f      	ldr	r3, [pc, #508]	; (8005114 <__kernel_rem_pio2+0x334>)
 8004f16:	ec51 0b10 	vmov	r0, r1, d0
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f7fb fb18 	bl	8000550 <__aeabi_dmul>
 8004f20:	4602      	mov	r2, r0
 8004f22:	460b      	mov	r3, r1
 8004f24:	4630      	mov	r0, r6
 8004f26:	4639      	mov	r1, r7
 8004f28:	f7fb f95a 	bl	80001e0 <__aeabi_dsub>
 8004f2c:	460f      	mov	r7, r1
 8004f2e:	4606      	mov	r6, r0
 8004f30:	f7fb fda8 	bl	8000a84 <__aeabi_d2iz>
 8004f34:	9007      	str	r0, [sp, #28]
 8004f36:	f7fb faa1 	bl	800047c <__aeabi_i2d>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	4630      	mov	r0, r6
 8004f40:	4639      	mov	r1, r7
 8004f42:	f7fb f94d 	bl	80001e0 <__aeabi_dsub>
 8004f46:	f1ba 0f00 	cmp.w	sl, #0
 8004f4a:	4606      	mov	r6, r0
 8004f4c:	460f      	mov	r7, r1
 8004f4e:	dd70      	ble.n	8005032 <__kernel_rem_pio2+0x252>
 8004f50:	1e62      	subs	r2, r4, #1
 8004f52:	ab0c      	add	r3, sp, #48	; 0x30
 8004f54:	9d07      	ldr	r5, [sp, #28]
 8004f56:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004f5a:	f1ca 0118 	rsb	r1, sl, #24
 8004f5e:	fa40 f301 	asr.w	r3, r0, r1
 8004f62:	441d      	add	r5, r3
 8004f64:	408b      	lsls	r3, r1
 8004f66:	1ac0      	subs	r0, r0, r3
 8004f68:	ab0c      	add	r3, sp, #48	; 0x30
 8004f6a:	9507      	str	r5, [sp, #28]
 8004f6c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8004f70:	f1ca 0317 	rsb	r3, sl, #23
 8004f74:	fa40 f303 	asr.w	r3, r0, r3
 8004f78:	9302      	str	r3, [sp, #8]
 8004f7a:	9b02      	ldr	r3, [sp, #8]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	dd66      	ble.n	800504e <__kernel_rem_pio2+0x26e>
 8004f80:	9b07      	ldr	r3, [sp, #28]
 8004f82:	2200      	movs	r2, #0
 8004f84:	3301      	adds	r3, #1
 8004f86:	9307      	str	r3, [sp, #28]
 8004f88:	4615      	mov	r5, r2
 8004f8a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8004f8e:	4294      	cmp	r4, r2
 8004f90:	f300 8099 	bgt.w	80050c6 <__kernel_rem_pio2+0x2e6>
 8004f94:	f1ba 0f00 	cmp.w	sl, #0
 8004f98:	dd07      	ble.n	8004faa <__kernel_rem_pio2+0x1ca>
 8004f9a:	f1ba 0f01 	cmp.w	sl, #1
 8004f9e:	f000 80a5 	beq.w	80050ec <__kernel_rem_pio2+0x30c>
 8004fa2:	f1ba 0f02 	cmp.w	sl, #2
 8004fa6:	f000 80c1 	beq.w	800512c <__kernel_rem_pio2+0x34c>
 8004faa:	9b02      	ldr	r3, [sp, #8]
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d14e      	bne.n	800504e <__kernel_rem_pio2+0x26e>
 8004fb0:	4632      	mov	r2, r6
 8004fb2:	463b      	mov	r3, r7
 8004fb4:	4958      	ldr	r1, [pc, #352]	; (8005118 <__kernel_rem_pio2+0x338>)
 8004fb6:	2000      	movs	r0, #0
 8004fb8:	f7fb f912 	bl	80001e0 <__aeabi_dsub>
 8004fbc:	4606      	mov	r6, r0
 8004fbe:	460f      	mov	r7, r1
 8004fc0:	2d00      	cmp	r5, #0
 8004fc2:	d044      	beq.n	800504e <__kernel_rem_pio2+0x26e>
 8004fc4:	4650      	mov	r0, sl
 8004fc6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8005108 <__kernel_rem_pio2+0x328>
 8004fca:	f000 fca9 	bl	8005920 <scalbn>
 8004fce:	4630      	mov	r0, r6
 8004fd0:	4639      	mov	r1, r7
 8004fd2:	ec53 2b10 	vmov	r2, r3, d0
 8004fd6:	f7fb f903 	bl	80001e0 <__aeabi_dsub>
 8004fda:	4606      	mov	r6, r0
 8004fdc:	460f      	mov	r7, r1
 8004fde:	e036      	b.n	800504e <__kernel_rem_pio2+0x26e>
 8004fe0:	4b4e      	ldr	r3, [pc, #312]	; (800511c <__kernel_rem_pio2+0x33c>)
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	4630      	mov	r0, r6
 8004fe6:	4639      	mov	r1, r7
 8004fe8:	f7fb fab2 	bl	8000550 <__aeabi_dmul>
 8004fec:	f7fb fd4a 	bl	8000a84 <__aeabi_d2iz>
 8004ff0:	f7fb fa44 	bl	800047c <__aeabi_i2d>
 8004ff4:	4b4a      	ldr	r3, [pc, #296]	; (8005120 <__kernel_rem_pio2+0x340>)
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	4680      	mov	r8, r0
 8004ffa:	4689      	mov	r9, r1
 8004ffc:	f7fb faa8 	bl	8000550 <__aeabi_dmul>
 8005000:	4602      	mov	r2, r0
 8005002:	460b      	mov	r3, r1
 8005004:	4630      	mov	r0, r6
 8005006:	4639      	mov	r1, r7
 8005008:	f7fb f8ea 	bl	80001e0 <__aeabi_dsub>
 800500c:	f7fb fd3a 	bl	8000a84 <__aeabi_d2iz>
 8005010:	9b02      	ldr	r3, [sp, #8]
 8005012:	f843 0b04 	str.w	r0, [r3], #4
 8005016:	3d01      	subs	r5, #1
 8005018:	9302      	str	r3, [sp, #8]
 800501a:	ab70      	add	r3, sp, #448	; 0x1c0
 800501c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005024:	4640      	mov	r0, r8
 8005026:	4649      	mov	r1, r9
 8005028:	f7fb f8dc 	bl	80001e4 <__adddf3>
 800502c:	4606      	mov	r6, r0
 800502e:	460f      	mov	r7, r1
 8005030:	e75b      	b.n	8004eea <__kernel_rem_pio2+0x10a>
 8005032:	d105      	bne.n	8005040 <__kernel_rem_pio2+0x260>
 8005034:	1e63      	subs	r3, r4, #1
 8005036:	aa0c      	add	r2, sp, #48	; 0x30
 8005038:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800503c:	15c3      	asrs	r3, r0, #23
 800503e:	e79b      	b.n	8004f78 <__kernel_rem_pio2+0x198>
 8005040:	4b38      	ldr	r3, [pc, #224]	; (8005124 <__kernel_rem_pio2+0x344>)
 8005042:	2200      	movs	r2, #0
 8005044:	f7fb fd0a 	bl	8000a5c <__aeabi_dcmpge>
 8005048:	2800      	cmp	r0, #0
 800504a:	d139      	bne.n	80050c0 <__kernel_rem_pio2+0x2e0>
 800504c:	9002      	str	r0, [sp, #8]
 800504e:	2200      	movs	r2, #0
 8005050:	2300      	movs	r3, #0
 8005052:	4630      	mov	r0, r6
 8005054:	4639      	mov	r1, r7
 8005056:	f7fb fce3 	bl	8000a20 <__aeabi_dcmpeq>
 800505a:	2800      	cmp	r0, #0
 800505c:	f000 80b4 	beq.w	80051c8 <__kernel_rem_pio2+0x3e8>
 8005060:	f104 3bff 	add.w	fp, r4, #4294967295
 8005064:	465b      	mov	r3, fp
 8005066:	2200      	movs	r2, #0
 8005068:	9904      	ldr	r1, [sp, #16]
 800506a:	428b      	cmp	r3, r1
 800506c:	da65      	bge.n	800513a <__kernel_rem_pio2+0x35a>
 800506e:	2a00      	cmp	r2, #0
 8005070:	d07b      	beq.n	800516a <__kernel_rem_pio2+0x38a>
 8005072:	ab0c      	add	r3, sp, #48	; 0x30
 8005074:	f1aa 0a18 	sub.w	sl, sl, #24
 8005078:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800507c:	2b00      	cmp	r3, #0
 800507e:	f000 80a0 	beq.w	80051c2 <__kernel_rem_pio2+0x3e2>
 8005082:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8005108 <__kernel_rem_pio2+0x328>
 8005086:	4650      	mov	r0, sl
 8005088:	f000 fc4a 	bl	8005920 <scalbn>
 800508c:	4f23      	ldr	r7, [pc, #140]	; (800511c <__kernel_rem_pio2+0x33c>)
 800508e:	ec55 4b10 	vmov	r4, r5, d0
 8005092:	46d8      	mov	r8, fp
 8005094:	2600      	movs	r6, #0
 8005096:	f1b8 0f00 	cmp.w	r8, #0
 800509a:	f280 80cf 	bge.w	800523c <__kernel_rem_pio2+0x45c>
 800509e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8005100 <__kernel_rem_pio2+0x320>
 80050a2:	465f      	mov	r7, fp
 80050a4:	f04f 0800 	mov.w	r8, #0
 80050a8:	2f00      	cmp	r7, #0
 80050aa:	f2c0 80fd 	blt.w	80052a8 <__kernel_rem_pio2+0x4c8>
 80050ae:	ab70      	add	r3, sp, #448	; 0x1c0
 80050b0:	f8df a074 	ldr.w	sl, [pc, #116]	; 8005128 <__kernel_rem_pio2+0x348>
 80050b4:	ec55 4b18 	vmov	r4, r5, d8
 80050b8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 80050bc:	2600      	movs	r6, #0
 80050be:	e0e5      	b.n	800528c <__kernel_rem_pio2+0x4ac>
 80050c0:	2302      	movs	r3, #2
 80050c2:	9302      	str	r3, [sp, #8]
 80050c4:	e75c      	b.n	8004f80 <__kernel_rem_pio2+0x1a0>
 80050c6:	f8db 3000 	ldr.w	r3, [fp]
 80050ca:	b955      	cbnz	r5, 80050e2 <__kernel_rem_pio2+0x302>
 80050cc:	b123      	cbz	r3, 80050d8 <__kernel_rem_pio2+0x2f8>
 80050ce:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80050d2:	f8cb 3000 	str.w	r3, [fp]
 80050d6:	2301      	movs	r3, #1
 80050d8:	3201      	adds	r2, #1
 80050da:	f10b 0b04 	add.w	fp, fp, #4
 80050de:	461d      	mov	r5, r3
 80050e0:	e755      	b.n	8004f8e <__kernel_rem_pio2+0x1ae>
 80050e2:	1acb      	subs	r3, r1, r3
 80050e4:	f8cb 3000 	str.w	r3, [fp]
 80050e8:	462b      	mov	r3, r5
 80050ea:	e7f5      	b.n	80050d8 <__kernel_rem_pio2+0x2f8>
 80050ec:	1e62      	subs	r2, r4, #1
 80050ee:	ab0c      	add	r3, sp, #48	; 0x30
 80050f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050f4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80050f8:	a90c      	add	r1, sp, #48	; 0x30
 80050fa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80050fe:	e754      	b.n	8004faa <__kernel_rem_pio2+0x1ca>
	...
 800510c:	3ff00000 	.word	0x3ff00000
 8005110:	08005c30 	.word	0x08005c30
 8005114:	40200000 	.word	0x40200000
 8005118:	3ff00000 	.word	0x3ff00000
 800511c:	3e700000 	.word	0x3e700000
 8005120:	41700000 	.word	0x41700000
 8005124:	3fe00000 	.word	0x3fe00000
 8005128:	08005bf0 	.word	0x08005bf0
 800512c:	1e62      	subs	r2, r4, #1
 800512e:	ab0c      	add	r3, sp, #48	; 0x30
 8005130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005134:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005138:	e7de      	b.n	80050f8 <__kernel_rem_pio2+0x318>
 800513a:	a90c      	add	r1, sp, #48	; 0x30
 800513c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005140:	3b01      	subs	r3, #1
 8005142:	430a      	orrs	r2, r1
 8005144:	e790      	b.n	8005068 <__kernel_rem_pio2+0x288>
 8005146:	3301      	adds	r3, #1
 8005148:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800514c:	2900      	cmp	r1, #0
 800514e:	d0fa      	beq.n	8005146 <__kernel_rem_pio2+0x366>
 8005150:	9a08      	ldr	r2, [sp, #32]
 8005152:	18e3      	adds	r3, r4, r3
 8005154:	18a6      	adds	r6, r4, r2
 8005156:	aa20      	add	r2, sp, #128	; 0x80
 8005158:	1c65      	adds	r5, r4, #1
 800515a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800515e:	9302      	str	r3, [sp, #8]
 8005160:	9b02      	ldr	r3, [sp, #8]
 8005162:	42ab      	cmp	r3, r5
 8005164:	da04      	bge.n	8005170 <__kernel_rem_pio2+0x390>
 8005166:	461c      	mov	r4, r3
 8005168:	e6b5      	b.n	8004ed6 <__kernel_rem_pio2+0xf6>
 800516a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800516c:	2301      	movs	r3, #1
 800516e:	e7eb      	b.n	8005148 <__kernel_rem_pio2+0x368>
 8005170:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005172:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005176:	f7fb f981 	bl	800047c <__aeabi_i2d>
 800517a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800517e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005180:	46b3      	mov	fp, r6
 8005182:	461c      	mov	r4, r3
 8005184:	2700      	movs	r7, #0
 8005186:	f04f 0800 	mov.w	r8, #0
 800518a:	f04f 0900 	mov.w	r9, #0
 800518e:	9b06      	ldr	r3, [sp, #24]
 8005190:	429f      	cmp	r7, r3
 8005192:	dd06      	ble.n	80051a2 <__kernel_rem_pio2+0x3c2>
 8005194:	ab70      	add	r3, sp, #448	; 0x1c0
 8005196:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800519a:	e9c3 8900 	strd	r8, r9, [r3]
 800519e:	3501      	adds	r5, #1
 80051a0:	e7de      	b.n	8005160 <__kernel_rem_pio2+0x380>
 80051a2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80051a6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80051aa:	f7fb f9d1 	bl	8000550 <__aeabi_dmul>
 80051ae:	4602      	mov	r2, r0
 80051b0:	460b      	mov	r3, r1
 80051b2:	4640      	mov	r0, r8
 80051b4:	4649      	mov	r1, r9
 80051b6:	f7fb f815 	bl	80001e4 <__adddf3>
 80051ba:	3701      	adds	r7, #1
 80051bc:	4680      	mov	r8, r0
 80051be:	4689      	mov	r9, r1
 80051c0:	e7e5      	b.n	800518e <__kernel_rem_pio2+0x3ae>
 80051c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80051c6:	e754      	b.n	8005072 <__kernel_rem_pio2+0x292>
 80051c8:	ec47 6b10 	vmov	d0, r6, r7
 80051cc:	f1ca 0000 	rsb	r0, sl, #0
 80051d0:	f000 fba6 	bl	8005920 <scalbn>
 80051d4:	ec57 6b10 	vmov	r6, r7, d0
 80051d8:	4b9f      	ldr	r3, [pc, #636]	; (8005458 <__kernel_rem_pio2+0x678>)
 80051da:	ee10 0a10 	vmov	r0, s0
 80051de:	2200      	movs	r2, #0
 80051e0:	4639      	mov	r1, r7
 80051e2:	f7fb fc3b 	bl	8000a5c <__aeabi_dcmpge>
 80051e6:	b300      	cbz	r0, 800522a <__kernel_rem_pio2+0x44a>
 80051e8:	4b9c      	ldr	r3, [pc, #624]	; (800545c <__kernel_rem_pio2+0x67c>)
 80051ea:	2200      	movs	r2, #0
 80051ec:	4630      	mov	r0, r6
 80051ee:	4639      	mov	r1, r7
 80051f0:	f7fb f9ae 	bl	8000550 <__aeabi_dmul>
 80051f4:	f7fb fc46 	bl	8000a84 <__aeabi_d2iz>
 80051f8:	4605      	mov	r5, r0
 80051fa:	f7fb f93f 	bl	800047c <__aeabi_i2d>
 80051fe:	4b96      	ldr	r3, [pc, #600]	; (8005458 <__kernel_rem_pio2+0x678>)
 8005200:	2200      	movs	r2, #0
 8005202:	f7fb f9a5 	bl	8000550 <__aeabi_dmul>
 8005206:	460b      	mov	r3, r1
 8005208:	4602      	mov	r2, r0
 800520a:	4639      	mov	r1, r7
 800520c:	4630      	mov	r0, r6
 800520e:	f7fa ffe7 	bl	80001e0 <__aeabi_dsub>
 8005212:	f7fb fc37 	bl	8000a84 <__aeabi_d2iz>
 8005216:	f104 0b01 	add.w	fp, r4, #1
 800521a:	ab0c      	add	r3, sp, #48	; 0x30
 800521c:	f10a 0a18 	add.w	sl, sl, #24
 8005220:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005224:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8005228:	e72b      	b.n	8005082 <__kernel_rem_pio2+0x2a2>
 800522a:	4630      	mov	r0, r6
 800522c:	4639      	mov	r1, r7
 800522e:	f7fb fc29 	bl	8000a84 <__aeabi_d2iz>
 8005232:	ab0c      	add	r3, sp, #48	; 0x30
 8005234:	46a3      	mov	fp, r4
 8005236:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800523a:	e722      	b.n	8005082 <__kernel_rem_pio2+0x2a2>
 800523c:	ab70      	add	r3, sp, #448	; 0x1c0
 800523e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8005242:	ab0c      	add	r3, sp, #48	; 0x30
 8005244:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005248:	f7fb f918 	bl	800047c <__aeabi_i2d>
 800524c:	4622      	mov	r2, r4
 800524e:	462b      	mov	r3, r5
 8005250:	f7fb f97e 	bl	8000550 <__aeabi_dmul>
 8005254:	4632      	mov	r2, r6
 8005256:	e9c9 0100 	strd	r0, r1, [r9]
 800525a:	463b      	mov	r3, r7
 800525c:	4620      	mov	r0, r4
 800525e:	4629      	mov	r1, r5
 8005260:	f7fb f976 	bl	8000550 <__aeabi_dmul>
 8005264:	f108 38ff 	add.w	r8, r8, #4294967295
 8005268:	4604      	mov	r4, r0
 800526a:	460d      	mov	r5, r1
 800526c:	e713      	b.n	8005096 <__kernel_rem_pio2+0x2b6>
 800526e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8005272:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8005276:	f7fb f96b 	bl	8000550 <__aeabi_dmul>
 800527a:	4602      	mov	r2, r0
 800527c:	460b      	mov	r3, r1
 800527e:	4620      	mov	r0, r4
 8005280:	4629      	mov	r1, r5
 8005282:	f7fa ffaf 	bl	80001e4 <__adddf3>
 8005286:	3601      	adds	r6, #1
 8005288:	4604      	mov	r4, r0
 800528a:	460d      	mov	r5, r1
 800528c:	9b04      	ldr	r3, [sp, #16]
 800528e:	429e      	cmp	r6, r3
 8005290:	dc01      	bgt.n	8005296 <__kernel_rem_pio2+0x4b6>
 8005292:	45b0      	cmp	r8, r6
 8005294:	daeb      	bge.n	800526e <__kernel_rem_pio2+0x48e>
 8005296:	ab48      	add	r3, sp, #288	; 0x120
 8005298:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800529c:	e9c3 4500 	strd	r4, r5, [r3]
 80052a0:	3f01      	subs	r7, #1
 80052a2:	f108 0801 	add.w	r8, r8, #1
 80052a6:	e6ff      	b.n	80050a8 <__kernel_rem_pio2+0x2c8>
 80052a8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	dc0b      	bgt.n	80052c6 <__kernel_rem_pio2+0x4e6>
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	dc6e      	bgt.n	8005390 <__kernel_rem_pio2+0x5b0>
 80052b2:	d045      	beq.n	8005340 <__kernel_rem_pio2+0x560>
 80052b4:	9b07      	ldr	r3, [sp, #28]
 80052b6:	f003 0007 	and.w	r0, r3, #7
 80052ba:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80052be:	ecbd 8b02 	vpop	{d8}
 80052c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052c6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80052c8:	2b03      	cmp	r3, #3
 80052ca:	d1f3      	bne.n	80052b4 <__kernel_rem_pio2+0x4d4>
 80052cc:	ab48      	add	r3, sp, #288	; 0x120
 80052ce:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 80052d2:	46d0      	mov	r8, sl
 80052d4:	46d9      	mov	r9, fp
 80052d6:	f1b9 0f00 	cmp.w	r9, #0
 80052da:	f1a8 0808 	sub.w	r8, r8, #8
 80052de:	dc64      	bgt.n	80053aa <__kernel_rem_pio2+0x5ca>
 80052e0:	465c      	mov	r4, fp
 80052e2:	2c01      	cmp	r4, #1
 80052e4:	f1aa 0a08 	sub.w	sl, sl, #8
 80052e8:	dc7e      	bgt.n	80053e8 <__kernel_rem_pio2+0x608>
 80052ea:	2000      	movs	r0, #0
 80052ec:	2100      	movs	r1, #0
 80052ee:	f1bb 0f01 	cmp.w	fp, #1
 80052f2:	f300 8097 	bgt.w	8005424 <__kernel_rem_pio2+0x644>
 80052f6:	9b02      	ldr	r3, [sp, #8]
 80052f8:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 80052fc:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8005300:	2b00      	cmp	r3, #0
 8005302:	f040 8099 	bne.w	8005438 <__kernel_rem_pio2+0x658>
 8005306:	9b01      	ldr	r3, [sp, #4]
 8005308:	e9c3 5600 	strd	r5, r6, [r3]
 800530c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8005310:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005314:	e7ce      	b.n	80052b4 <__kernel_rem_pio2+0x4d4>
 8005316:	ab48      	add	r3, sp, #288	; 0x120
 8005318:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800531c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005320:	f7fa ff60 	bl	80001e4 <__adddf3>
 8005324:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005328:	f1bb 0f00 	cmp.w	fp, #0
 800532c:	daf3      	bge.n	8005316 <__kernel_rem_pio2+0x536>
 800532e:	9b02      	ldr	r3, [sp, #8]
 8005330:	b113      	cbz	r3, 8005338 <__kernel_rem_pio2+0x558>
 8005332:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005336:	4619      	mov	r1, r3
 8005338:	9b01      	ldr	r3, [sp, #4]
 800533a:	e9c3 0100 	strd	r0, r1, [r3]
 800533e:	e7b9      	b.n	80052b4 <__kernel_rem_pio2+0x4d4>
 8005340:	2000      	movs	r0, #0
 8005342:	2100      	movs	r1, #0
 8005344:	e7f0      	b.n	8005328 <__kernel_rem_pio2+0x548>
 8005346:	ab48      	add	r3, sp, #288	; 0x120
 8005348:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800534c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005350:	f7fa ff48 	bl	80001e4 <__adddf3>
 8005354:	3c01      	subs	r4, #1
 8005356:	2c00      	cmp	r4, #0
 8005358:	daf5      	bge.n	8005346 <__kernel_rem_pio2+0x566>
 800535a:	9b02      	ldr	r3, [sp, #8]
 800535c:	b1e3      	cbz	r3, 8005398 <__kernel_rem_pio2+0x5b8>
 800535e:	4602      	mov	r2, r0
 8005360:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005364:	9c01      	ldr	r4, [sp, #4]
 8005366:	e9c4 2300 	strd	r2, r3, [r4]
 800536a:	4602      	mov	r2, r0
 800536c:	460b      	mov	r3, r1
 800536e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8005372:	f7fa ff35 	bl	80001e0 <__aeabi_dsub>
 8005376:	ad4a      	add	r5, sp, #296	; 0x128
 8005378:	2401      	movs	r4, #1
 800537a:	45a3      	cmp	fp, r4
 800537c:	da0f      	bge.n	800539e <__kernel_rem_pio2+0x5be>
 800537e:	9b02      	ldr	r3, [sp, #8]
 8005380:	b113      	cbz	r3, 8005388 <__kernel_rem_pio2+0x5a8>
 8005382:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005386:	4619      	mov	r1, r3
 8005388:	9b01      	ldr	r3, [sp, #4]
 800538a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800538e:	e791      	b.n	80052b4 <__kernel_rem_pio2+0x4d4>
 8005390:	465c      	mov	r4, fp
 8005392:	2000      	movs	r0, #0
 8005394:	2100      	movs	r1, #0
 8005396:	e7de      	b.n	8005356 <__kernel_rem_pio2+0x576>
 8005398:	4602      	mov	r2, r0
 800539a:	460b      	mov	r3, r1
 800539c:	e7e2      	b.n	8005364 <__kernel_rem_pio2+0x584>
 800539e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80053a2:	f7fa ff1f 	bl	80001e4 <__adddf3>
 80053a6:	3401      	adds	r4, #1
 80053a8:	e7e7      	b.n	800537a <__kernel_rem_pio2+0x59a>
 80053aa:	e9d8 4500 	ldrd	r4, r5, [r8]
 80053ae:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 80053b2:	4620      	mov	r0, r4
 80053b4:	4632      	mov	r2, r6
 80053b6:	463b      	mov	r3, r7
 80053b8:	4629      	mov	r1, r5
 80053ba:	f7fa ff13 	bl	80001e4 <__adddf3>
 80053be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80053c2:	4602      	mov	r2, r0
 80053c4:	460b      	mov	r3, r1
 80053c6:	4620      	mov	r0, r4
 80053c8:	4629      	mov	r1, r5
 80053ca:	f7fa ff09 	bl	80001e0 <__aeabi_dsub>
 80053ce:	4632      	mov	r2, r6
 80053d0:	463b      	mov	r3, r7
 80053d2:	f7fa ff07 	bl	80001e4 <__adddf3>
 80053d6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80053da:	e9c8 0102 	strd	r0, r1, [r8, #8]
 80053de:	ed88 7b00 	vstr	d7, [r8]
 80053e2:	f109 39ff 	add.w	r9, r9, #4294967295
 80053e6:	e776      	b.n	80052d6 <__kernel_rem_pio2+0x4f6>
 80053e8:	e9da 8900 	ldrd	r8, r9, [sl]
 80053ec:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80053f0:	4640      	mov	r0, r8
 80053f2:	4632      	mov	r2, r6
 80053f4:	463b      	mov	r3, r7
 80053f6:	4649      	mov	r1, r9
 80053f8:	f7fa fef4 	bl	80001e4 <__adddf3>
 80053fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005400:	4602      	mov	r2, r0
 8005402:	460b      	mov	r3, r1
 8005404:	4640      	mov	r0, r8
 8005406:	4649      	mov	r1, r9
 8005408:	f7fa feea 	bl	80001e0 <__aeabi_dsub>
 800540c:	4632      	mov	r2, r6
 800540e:	463b      	mov	r3, r7
 8005410:	f7fa fee8 	bl	80001e4 <__adddf3>
 8005414:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005418:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800541c:	ed8a 7b00 	vstr	d7, [sl]
 8005420:	3c01      	subs	r4, #1
 8005422:	e75e      	b.n	80052e2 <__kernel_rem_pio2+0x502>
 8005424:	ab48      	add	r3, sp, #288	; 0x120
 8005426:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800542a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542e:	f7fa fed9 	bl	80001e4 <__adddf3>
 8005432:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005436:	e75a      	b.n	80052ee <__kernel_rem_pio2+0x50e>
 8005438:	9b01      	ldr	r3, [sp, #4]
 800543a:	9a01      	ldr	r2, [sp, #4]
 800543c:	601d      	str	r5, [r3, #0]
 800543e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8005442:	605c      	str	r4, [r3, #4]
 8005444:	609f      	str	r7, [r3, #8]
 8005446:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800544a:	60d3      	str	r3, [r2, #12]
 800544c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005450:	6110      	str	r0, [r2, #16]
 8005452:	6153      	str	r3, [r2, #20]
 8005454:	e72e      	b.n	80052b4 <__kernel_rem_pio2+0x4d4>
 8005456:	bf00      	nop
 8005458:	41700000 	.word	0x41700000
 800545c:	3e700000 	.word	0x3e700000

08005460 <__kernel_tan>:
 8005460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005464:	ed2d 8b04 	vpush	{d8-d9}
 8005468:	ec5b ab10 	vmov	sl, fp, d0
 800546c:	4be2      	ldr	r3, [pc, #904]	; (80057f8 <__kernel_tan+0x398>)
 800546e:	b085      	sub	sp, #20
 8005470:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8005474:	429f      	cmp	r7, r3
 8005476:	ed8d 1b00 	vstr	d1, [sp]
 800547a:	4606      	mov	r6, r0
 800547c:	f8cd b00c 	str.w	fp, [sp, #12]
 8005480:	dc24      	bgt.n	80054cc <__kernel_tan+0x6c>
 8005482:	ee10 0a10 	vmov	r0, s0
 8005486:	4659      	mov	r1, fp
 8005488:	f7fb fafc 	bl	8000a84 <__aeabi_d2iz>
 800548c:	2800      	cmp	r0, #0
 800548e:	d148      	bne.n	8005522 <__kernel_tan+0xc2>
 8005490:	1c73      	adds	r3, r6, #1
 8005492:	4652      	mov	r2, sl
 8005494:	4313      	orrs	r3, r2
 8005496:	433b      	orrs	r3, r7
 8005498:	d112      	bne.n	80054c0 <__kernel_tan+0x60>
 800549a:	ec4b ab10 	vmov	d0, sl, fp
 800549e:	f000 f9b3 	bl	8005808 <fabs>
 80054a2:	49d6      	ldr	r1, [pc, #856]	; (80057fc <__kernel_tan+0x39c>)
 80054a4:	ec53 2b10 	vmov	r2, r3, d0
 80054a8:	2000      	movs	r0, #0
 80054aa:	f7fb f97b 	bl	80007a4 <__aeabi_ddiv>
 80054ae:	4682      	mov	sl, r0
 80054b0:	468b      	mov	fp, r1
 80054b2:	ec4b ab10 	vmov	d0, sl, fp
 80054b6:	b005      	add	sp, #20
 80054b8:	ecbd 8b04 	vpop	{d8-d9}
 80054bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054c0:	2e01      	cmp	r6, #1
 80054c2:	d0f6      	beq.n	80054b2 <__kernel_tan+0x52>
 80054c4:	49ce      	ldr	r1, [pc, #824]	; (8005800 <__kernel_tan+0x3a0>)
 80054c6:	465b      	mov	r3, fp
 80054c8:	2000      	movs	r0, #0
 80054ca:	e7ee      	b.n	80054aa <__kernel_tan+0x4a>
 80054cc:	4bcd      	ldr	r3, [pc, #820]	; (8005804 <__kernel_tan+0x3a4>)
 80054ce:	429f      	cmp	r7, r3
 80054d0:	dd27      	ble.n	8005522 <__kernel_tan+0xc2>
 80054d2:	9b03      	ldr	r3, [sp, #12]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	da0a      	bge.n	80054ee <__kernel_tan+0x8e>
 80054d8:	e9dd 2100 	ldrd	r2, r1, [sp]
 80054dc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80054e0:	469b      	mov	fp, r3
 80054e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80054e6:	e9cd 2300 	strd	r2, r3, [sp]
 80054ea:	ee10 aa10 	vmov	sl, s0
 80054ee:	4652      	mov	r2, sl
 80054f0:	465b      	mov	r3, fp
 80054f2:	a1a1      	add	r1, pc, #644	; (adr r1, 8005778 <__kernel_tan+0x318>)
 80054f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80054f8:	f7fa fe72 	bl	80001e0 <__aeabi_dsub>
 80054fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005500:	4604      	mov	r4, r0
 8005502:	460d      	mov	r5, r1
 8005504:	a19e      	add	r1, pc, #632	; (adr r1, 8005780 <__kernel_tan+0x320>)
 8005506:	e9d1 0100 	ldrd	r0, r1, [r1]
 800550a:	f7fa fe69 	bl	80001e0 <__aeabi_dsub>
 800550e:	4622      	mov	r2, r4
 8005510:	462b      	mov	r3, r5
 8005512:	f7fa fe67 	bl	80001e4 <__adddf3>
 8005516:	ed9f 7b9c 	vldr	d7, [pc, #624]	; 8005788 <__kernel_tan+0x328>
 800551a:	ed8d 7b00 	vstr	d7, [sp]
 800551e:	4682      	mov	sl, r0
 8005520:	468b      	mov	fp, r1
 8005522:	4652      	mov	r2, sl
 8005524:	465b      	mov	r3, fp
 8005526:	4650      	mov	r0, sl
 8005528:	4659      	mov	r1, fp
 800552a:	f7fb f811 	bl	8000550 <__aeabi_dmul>
 800552e:	4602      	mov	r2, r0
 8005530:	460b      	mov	r3, r1
 8005532:	4680      	mov	r8, r0
 8005534:	4689      	mov	r9, r1
 8005536:	f7fb f80b 	bl	8000550 <__aeabi_dmul>
 800553a:	4642      	mov	r2, r8
 800553c:	4604      	mov	r4, r0
 800553e:	460d      	mov	r5, r1
 8005540:	464b      	mov	r3, r9
 8005542:	4650      	mov	r0, sl
 8005544:	4659      	mov	r1, fp
 8005546:	f7fb f803 	bl	8000550 <__aeabi_dmul>
 800554a:	a391      	add	r3, pc, #580	; (adr r3, 8005790 <__kernel_tan+0x330>)
 800554c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005550:	ec41 0b18 	vmov	d8, r0, r1
 8005554:	4620      	mov	r0, r4
 8005556:	4629      	mov	r1, r5
 8005558:	f7fa fffa 	bl	8000550 <__aeabi_dmul>
 800555c:	a38e      	add	r3, pc, #568	; (adr r3, 8005798 <__kernel_tan+0x338>)
 800555e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005562:	f7fa fe3f 	bl	80001e4 <__adddf3>
 8005566:	4622      	mov	r2, r4
 8005568:	462b      	mov	r3, r5
 800556a:	f7fa fff1 	bl	8000550 <__aeabi_dmul>
 800556e:	a38c      	add	r3, pc, #560	; (adr r3, 80057a0 <__kernel_tan+0x340>)
 8005570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005574:	f7fa fe36 	bl	80001e4 <__adddf3>
 8005578:	4622      	mov	r2, r4
 800557a:	462b      	mov	r3, r5
 800557c:	f7fa ffe8 	bl	8000550 <__aeabi_dmul>
 8005580:	a389      	add	r3, pc, #548	; (adr r3, 80057a8 <__kernel_tan+0x348>)
 8005582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005586:	f7fa fe2d 	bl	80001e4 <__adddf3>
 800558a:	4622      	mov	r2, r4
 800558c:	462b      	mov	r3, r5
 800558e:	f7fa ffdf 	bl	8000550 <__aeabi_dmul>
 8005592:	a387      	add	r3, pc, #540	; (adr r3, 80057b0 <__kernel_tan+0x350>)
 8005594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005598:	f7fa fe24 	bl	80001e4 <__adddf3>
 800559c:	4622      	mov	r2, r4
 800559e:	462b      	mov	r3, r5
 80055a0:	f7fa ffd6 	bl	8000550 <__aeabi_dmul>
 80055a4:	a384      	add	r3, pc, #528	; (adr r3, 80057b8 <__kernel_tan+0x358>)
 80055a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055aa:	f7fa fe1b 	bl	80001e4 <__adddf3>
 80055ae:	4642      	mov	r2, r8
 80055b0:	464b      	mov	r3, r9
 80055b2:	f7fa ffcd 	bl	8000550 <__aeabi_dmul>
 80055b6:	a382      	add	r3, pc, #520	; (adr r3, 80057c0 <__kernel_tan+0x360>)
 80055b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055bc:	ec41 0b19 	vmov	d9, r0, r1
 80055c0:	4620      	mov	r0, r4
 80055c2:	4629      	mov	r1, r5
 80055c4:	f7fa ffc4 	bl	8000550 <__aeabi_dmul>
 80055c8:	a37f      	add	r3, pc, #508	; (adr r3, 80057c8 <__kernel_tan+0x368>)
 80055ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ce:	f7fa fe09 	bl	80001e4 <__adddf3>
 80055d2:	4622      	mov	r2, r4
 80055d4:	462b      	mov	r3, r5
 80055d6:	f7fa ffbb 	bl	8000550 <__aeabi_dmul>
 80055da:	a37d      	add	r3, pc, #500	; (adr r3, 80057d0 <__kernel_tan+0x370>)
 80055dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e0:	f7fa fe00 	bl	80001e4 <__adddf3>
 80055e4:	4622      	mov	r2, r4
 80055e6:	462b      	mov	r3, r5
 80055e8:	f7fa ffb2 	bl	8000550 <__aeabi_dmul>
 80055ec:	a37a      	add	r3, pc, #488	; (adr r3, 80057d8 <__kernel_tan+0x378>)
 80055ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f2:	f7fa fdf7 	bl	80001e4 <__adddf3>
 80055f6:	4622      	mov	r2, r4
 80055f8:	462b      	mov	r3, r5
 80055fa:	f7fa ffa9 	bl	8000550 <__aeabi_dmul>
 80055fe:	a378      	add	r3, pc, #480	; (adr r3, 80057e0 <__kernel_tan+0x380>)
 8005600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005604:	f7fa fdee 	bl	80001e4 <__adddf3>
 8005608:	4622      	mov	r2, r4
 800560a:	462b      	mov	r3, r5
 800560c:	f7fa ffa0 	bl	8000550 <__aeabi_dmul>
 8005610:	a375      	add	r3, pc, #468	; (adr r3, 80057e8 <__kernel_tan+0x388>)
 8005612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005616:	f7fa fde5 	bl	80001e4 <__adddf3>
 800561a:	4602      	mov	r2, r0
 800561c:	460b      	mov	r3, r1
 800561e:	ec51 0b19 	vmov	r0, r1, d9
 8005622:	f7fa fddf 	bl	80001e4 <__adddf3>
 8005626:	ec53 2b18 	vmov	r2, r3, d8
 800562a:	f7fa ff91 	bl	8000550 <__aeabi_dmul>
 800562e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005632:	f7fa fdd7 	bl	80001e4 <__adddf3>
 8005636:	4642      	mov	r2, r8
 8005638:	464b      	mov	r3, r9
 800563a:	f7fa ff89 	bl	8000550 <__aeabi_dmul>
 800563e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005642:	f7fa fdcf 	bl	80001e4 <__adddf3>
 8005646:	a36a      	add	r3, pc, #424	; (adr r3, 80057f0 <__kernel_tan+0x390>)
 8005648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800564c:	4604      	mov	r4, r0
 800564e:	460d      	mov	r5, r1
 8005650:	ec51 0b18 	vmov	r0, r1, d8
 8005654:	f7fa ff7c 	bl	8000550 <__aeabi_dmul>
 8005658:	4622      	mov	r2, r4
 800565a:	462b      	mov	r3, r5
 800565c:	f7fa fdc2 	bl	80001e4 <__adddf3>
 8005660:	460b      	mov	r3, r1
 8005662:	ec41 0b18 	vmov	d8, r0, r1
 8005666:	4602      	mov	r2, r0
 8005668:	4659      	mov	r1, fp
 800566a:	4650      	mov	r0, sl
 800566c:	f7fa fdba 	bl	80001e4 <__adddf3>
 8005670:	4b64      	ldr	r3, [pc, #400]	; (8005804 <__kernel_tan+0x3a4>)
 8005672:	429f      	cmp	r7, r3
 8005674:	4604      	mov	r4, r0
 8005676:	460d      	mov	r5, r1
 8005678:	dd3e      	ble.n	80056f8 <__kernel_tan+0x298>
 800567a:	4630      	mov	r0, r6
 800567c:	f7fa fefe 	bl	800047c <__aeabi_i2d>
 8005680:	4622      	mov	r2, r4
 8005682:	4680      	mov	r8, r0
 8005684:	4689      	mov	r9, r1
 8005686:	462b      	mov	r3, r5
 8005688:	4620      	mov	r0, r4
 800568a:	4629      	mov	r1, r5
 800568c:	f7fa ff60 	bl	8000550 <__aeabi_dmul>
 8005690:	4642      	mov	r2, r8
 8005692:	4606      	mov	r6, r0
 8005694:	460f      	mov	r7, r1
 8005696:	464b      	mov	r3, r9
 8005698:	4620      	mov	r0, r4
 800569a:	4629      	mov	r1, r5
 800569c:	f7fa fda2 	bl	80001e4 <__adddf3>
 80056a0:	4602      	mov	r2, r0
 80056a2:	460b      	mov	r3, r1
 80056a4:	4630      	mov	r0, r6
 80056a6:	4639      	mov	r1, r7
 80056a8:	f7fb f87c 	bl	80007a4 <__aeabi_ddiv>
 80056ac:	ec53 2b18 	vmov	r2, r3, d8
 80056b0:	f7fa fd96 	bl	80001e0 <__aeabi_dsub>
 80056b4:	4602      	mov	r2, r0
 80056b6:	460b      	mov	r3, r1
 80056b8:	4650      	mov	r0, sl
 80056ba:	4659      	mov	r1, fp
 80056bc:	f7fa fd90 	bl	80001e0 <__aeabi_dsub>
 80056c0:	4602      	mov	r2, r0
 80056c2:	460b      	mov	r3, r1
 80056c4:	f7fa fd8e 	bl	80001e4 <__adddf3>
 80056c8:	4602      	mov	r2, r0
 80056ca:	460b      	mov	r3, r1
 80056cc:	4640      	mov	r0, r8
 80056ce:	4649      	mov	r1, r9
 80056d0:	f7fa fd86 	bl	80001e0 <__aeabi_dsub>
 80056d4:	9b03      	ldr	r3, [sp, #12]
 80056d6:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 80056da:	f00a 0a02 	and.w	sl, sl, #2
 80056de:	4604      	mov	r4, r0
 80056e0:	f1ca 0001 	rsb	r0, sl, #1
 80056e4:	460d      	mov	r5, r1
 80056e6:	f7fa fec9 	bl	800047c <__aeabi_i2d>
 80056ea:	4602      	mov	r2, r0
 80056ec:	460b      	mov	r3, r1
 80056ee:	4620      	mov	r0, r4
 80056f0:	4629      	mov	r1, r5
 80056f2:	f7fa ff2d 	bl	8000550 <__aeabi_dmul>
 80056f6:	e6da      	b.n	80054ae <__kernel_tan+0x4e>
 80056f8:	2e01      	cmp	r6, #1
 80056fa:	d038      	beq.n	800576e <__kernel_tan+0x30e>
 80056fc:	460f      	mov	r7, r1
 80056fe:	4689      	mov	r9, r1
 8005700:	4602      	mov	r2, r0
 8005702:	460b      	mov	r3, r1
 8005704:	2000      	movs	r0, #0
 8005706:	493e      	ldr	r1, [pc, #248]	; (8005800 <__kernel_tan+0x3a0>)
 8005708:	f7fb f84c 	bl	80007a4 <__aeabi_ddiv>
 800570c:	2600      	movs	r6, #0
 800570e:	e9cd 0100 	strd	r0, r1, [sp]
 8005712:	4652      	mov	r2, sl
 8005714:	465b      	mov	r3, fp
 8005716:	4630      	mov	r0, r6
 8005718:	4639      	mov	r1, r7
 800571a:	f7fa fd61 	bl	80001e0 <__aeabi_dsub>
 800571e:	e9dd 4500 	ldrd	r4, r5, [sp]
 8005722:	4602      	mov	r2, r0
 8005724:	460b      	mov	r3, r1
 8005726:	ec51 0b18 	vmov	r0, r1, d8
 800572a:	f7fa fd59 	bl	80001e0 <__aeabi_dsub>
 800572e:	4632      	mov	r2, r6
 8005730:	462b      	mov	r3, r5
 8005732:	f7fa ff0d 	bl	8000550 <__aeabi_dmul>
 8005736:	46b0      	mov	r8, r6
 8005738:	460f      	mov	r7, r1
 800573a:	4606      	mov	r6, r0
 800573c:	4642      	mov	r2, r8
 800573e:	462b      	mov	r3, r5
 8005740:	4640      	mov	r0, r8
 8005742:	4649      	mov	r1, r9
 8005744:	f7fa ff04 	bl	8000550 <__aeabi_dmul>
 8005748:	4b2c      	ldr	r3, [pc, #176]	; (80057fc <__kernel_tan+0x39c>)
 800574a:	2200      	movs	r2, #0
 800574c:	f7fa fd4a 	bl	80001e4 <__adddf3>
 8005750:	4602      	mov	r2, r0
 8005752:	460b      	mov	r3, r1
 8005754:	4630      	mov	r0, r6
 8005756:	4639      	mov	r1, r7
 8005758:	f7fa fd44 	bl	80001e4 <__adddf3>
 800575c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005760:	f7fa fef6 	bl	8000550 <__aeabi_dmul>
 8005764:	4642      	mov	r2, r8
 8005766:	462b      	mov	r3, r5
 8005768:	f7fa fd3c 	bl	80001e4 <__adddf3>
 800576c:	e69f      	b.n	80054ae <__kernel_tan+0x4e>
 800576e:	4682      	mov	sl, r0
 8005770:	468b      	mov	fp, r1
 8005772:	e69e      	b.n	80054b2 <__kernel_tan+0x52>
 8005774:	f3af 8000 	nop.w
 8005778:	54442d18 	.word	0x54442d18
 800577c:	3fe921fb 	.word	0x3fe921fb
 8005780:	33145c07 	.word	0x33145c07
 8005784:	3c81a626 	.word	0x3c81a626
	...
 8005790:	74bf7ad4 	.word	0x74bf7ad4
 8005794:	3efb2a70 	.word	0x3efb2a70
 8005798:	32f0a7e9 	.word	0x32f0a7e9
 800579c:	3f12b80f 	.word	0x3f12b80f
 80057a0:	1a8d1068 	.word	0x1a8d1068
 80057a4:	3f3026f7 	.word	0x3f3026f7
 80057a8:	fee08315 	.word	0xfee08315
 80057ac:	3f57dbc8 	.word	0x3f57dbc8
 80057b0:	e96e8493 	.word	0xe96e8493
 80057b4:	3f8226e3 	.word	0x3f8226e3
 80057b8:	1bb341fe 	.word	0x1bb341fe
 80057bc:	3faba1ba 	.word	0x3faba1ba
 80057c0:	db605373 	.word	0xdb605373
 80057c4:	bef375cb 	.word	0xbef375cb
 80057c8:	a03792a6 	.word	0xa03792a6
 80057cc:	3f147e88 	.word	0x3f147e88
 80057d0:	f2f26501 	.word	0xf2f26501
 80057d4:	3f4344d8 	.word	0x3f4344d8
 80057d8:	c9560328 	.word	0xc9560328
 80057dc:	3f6d6d22 	.word	0x3f6d6d22
 80057e0:	8406d637 	.word	0x8406d637
 80057e4:	3f9664f4 	.word	0x3f9664f4
 80057e8:	1110fe7a 	.word	0x1110fe7a
 80057ec:	3fc11111 	.word	0x3fc11111
 80057f0:	55555563 	.word	0x55555563
 80057f4:	3fd55555 	.word	0x3fd55555
 80057f8:	3e2fffff 	.word	0x3e2fffff
 80057fc:	3ff00000 	.word	0x3ff00000
 8005800:	bff00000 	.word	0xbff00000
 8005804:	3fe59427 	.word	0x3fe59427

08005808 <fabs>:
 8005808:	ec51 0b10 	vmov	r0, r1, d0
 800580c:	ee10 2a10 	vmov	r2, s0
 8005810:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005814:	ec43 2b10 	vmov	d0, r2, r3
 8005818:	4770      	bx	lr
 800581a:	0000      	movs	r0, r0
 800581c:	0000      	movs	r0, r0
	...

08005820 <floor>:
 8005820:	ec51 0b10 	vmov	r0, r1, d0
 8005824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005828:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800582c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005830:	2e13      	cmp	r6, #19
 8005832:	ee10 5a10 	vmov	r5, s0
 8005836:	ee10 8a10 	vmov	r8, s0
 800583a:	460c      	mov	r4, r1
 800583c:	dc32      	bgt.n	80058a4 <floor+0x84>
 800583e:	2e00      	cmp	r6, #0
 8005840:	da14      	bge.n	800586c <floor+0x4c>
 8005842:	a333      	add	r3, pc, #204	; (adr r3, 8005910 <floor+0xf0>)
 8005844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005848:	f7fa fccc 	bl	80001e4 <__adddf3>
 800584c:	2200      	movs	r2, #0
 800584e:	2300      	movs	r3, #0
 8005850:	f7fb f90e 	bl	8000a70 <__aeabi_dcmpgt>
 8005854:	b138      	cbz	r0, 8005866 <floor+0x46>
 8005856:	2c00      	cmp	r4, #0
 8005858:	da57      	bge.n	800590a <floor+0xea>
 800585a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800585e:	431d      	orrs	r5, r3
 8005860:	d001      	beq.n	8005866 <floor+0x46>
 8005862:	4c2d      	ldr	r4, [pc, #180]	; (8005918 <floor+0xf8>)
 8005864:	2500      	movs	r5, #0
 8005866:	4621      	mov	r1, r4
 8005868:	4628      	mov	r0, r5
 800586a:	e025      	b.n	80058b8 <floor+0x98>
 800586c:	4f2b      	ldr	r7, [pc, #172]	; (800591c <floor+0xfc>)
 800586e:	4137      	asrs	r7, r6
 8005870:	ea01 0307 	and.w	r3, r1, r7
 8005874:	4303      	orrs	r3, r0
 8005876:	d01f      	beq.n	80058b8 <floor+0x98>
 8005878:	a325      	add	r3, pc, #148	; (adr r3, 8005910 <floor+0xf0>)
 800587a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800587e:	f7fa fcb1 	bl	80001e4 <__adddf3>
 8005882:	2200      	movs	r2, #0
 8005884:	2300      	movs	r3, #0
 8005886:	f7fb f8f3 	bl	8000a70 <__aeabi_dcmpgt>
 800588a:	2800      	cmp	r0, #0
 800588c:	d0eb      	beq.n	8005866 <floor+0x46>
 800588e:	2c00      	cmp	r4, #0
 8005890:	bfbe      	ittt	lt
 8005892:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005896:	fa43 f606 	asrlt.w	r6, r3, r6
 800589a:	19a4      	addlt	r4, r4, r6
 800589c:	ea24 0407 	bic.w	r4, r4, r7
 80058a0:	2500      	movs	r5, #0
 80058a2:	e7e0      	b.n	8005866 <floor+0x46>
 80058a4:	2e33      	cmp	r6, #51	; 0x33
 80058a6:	dd0b      	ble.n	80058c0 <floor+0xa0>
 80058a8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80058ac:	d104      	bne.n	80058b8 <floor+0x98>
 80058ae:	ee10 2a10 	vmov	r2, s0
 80058b2:	460b      	mov	r3, r1
 80058b4:	f7fa fc96 	bl	80001e4 <__adddf3>
 80058b8:	ec41 0b10 	vmov	d0, r0, r1
 80058bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058c0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80058c4:	f04f 33ff 	mov.w	r3, #4294967295
 80058c8:	fa23 f707 	lsr.w	r7, r3, r7
 80058cc:	4207      	tst	r7, r0
 80058ce:	d0f3      	beq.n	80058b8 <floor+0x98>
 80058d0:	a30f      	add	r3, pc, #60	; (adr r3, 8005910 <floor+0xf0>)
 80058d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d6:	f7fa fc85 	bl	80001e4 <__adddf3>
 80058da:	2200      	movs	r2, #0
 80058dc:	2300      	movs	r3, #0
 80058de:	f7fb f8c7 	bl	8000a70 <__aeabi_dcmpgt>
 80058e2:	2800      	cmp	r0, #0
 80058e4:	d0bf      	beq.n	8005866 <floor+0x46>
 80058e6:	2c00      	cmp	r4, #0
 80058e8:	da02      	bge.n	80058f0 <floor+0xd0>
 80058ea:	2e14      	cmp	r6, #20
 80058ec:	d103      	bne.n	80058f6 <floor+0xd6>
 80058ee:	3401      	adds	r4, #1
 80058f0:	ea25 0507 	bic.w	r5, r5, r7
 80058f4:	e7b7      	b.n	8005866 <floor+0x46>
 80058f6:	2301      	movs	r3, #1
 80058f8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80058fc:	fa03 f606 	lsl.w	r6, r3, r6
 8005900:	4435      	add	r5, r6
 8005902:	4545      	cmp	r5, r8
 8005904:	bf38      	it	cc
 8005906:	18e4      	addcc	r4, r4, r3
 8005908:	e7f2      	b.n	80058f0 <floor+0xd0>
 800590a:	2500      	movs	r5, #0
 800590c:	462c      	mov	r4, r5
 800590e:	e7aa      	b.n	8005866 <floor+0x46>
 8005910:	8800759c 	.word	0x8800759c
 8005914:	7e37e43c 	.word	0x7e37e43c
 8005918:	bff00000 	.word	0xbff00000
 800591c:	000fffff 	.word	0x000fffff

08005920 <scalbn>:
 8005920:	b570      	push	{r4, r5, r6, lr}
 8005922:	ec55 4b10 	vmov	r4, r5, d0
 8005926:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800592a:	4606      	mov	r6, r0
 800592c:	462b      	mov	r3, r5
 800592e:	b99a      	cbnz	r2, 8005958 <scalbn+0x38>
 8005930:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005934:	4323      	orrs	r3, r4
 8005936:	d036      	beq.n	80059a6 <scalbn+0x86>
 8005938:	4b39      	ldr	r3, [pc, #228]	; (8005a20 <scalbn+0x100>)
 800593a:	4629      	mov	r1, r5
 800593c:	ee10 0a10 	vmov	r0, s0
 8005940:	2200      	movs	r2, #0
 8005942:	f7fa fe05 	bl	8000550 <__aeabi_dmul>
 8005946:	4b37      	ldr	r3, [pc, #220]	; (8005a24 <scalbn+0x104>)
 8005948:	429e      	cmp	r6, r3
 800594a:	4604      	mov	r4, r0
 800594c:	460d      	mov	r5, r1
 800594e:	da10      	bge.n	8005972 <scalbn+0x52>
 8005950:	a32b      	add	r3, pc, #172	; (adr r3, 8005a00 <scalbn+0xe0>)
 8005952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005956:	e03a      	b.n	80059ce <scalbn+0xae>
 8005958:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800595c:	428a      	cmp	r2, r1
 800595e:	d10c      	bne.n	800597a <scalbn+0x5a>
 8005960:	ee10 2a10 	vmov	r2, s0
 8005964:	4620      	mov	r0, r4
 8005966:	4629      	mov	r1, r5
 8005968:	f7fa fc3c 	bl	80001e4 <__adddf3>
 800596c:	4604      	mov	r4, r0
 800596e:	460d      	mov	r5, r1
 8005970:	e019      	b.n	80059a6 <scalbn+0x86>
 8005972:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005976:	460b      	mov	r3, r1
 8005978:	3a36      	subs	r2, #54	; 0x36
 800597a:	4432      	add	r2, r6
 800597c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005980:	428a      	cmp	r2, r1
 8005982:	dd08      	ble.n	8005996 <scalbn+0x76>
 8005984:	2d00      	cmp	r5, #0
 8005986:	a120      	add	r1, pc, #128	; (adr r1, 8005a08 <scalbn+0xe8>)
 8005988:	e9d1 0100 	ldrd	r0, r1, [r1]
 800598c:	da1c      	bge.n	80059c8 <scalbn+0xa8>
 800598e:	a120      	add	r1, pc, #128	; (adr r1, 8005a10 <scalbn+0xf0>)
 8005990:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005994:	e018      	b.n	80059c8 <scalbn+0xa8>
 8005996:	2a00      	cmp	r2, #0
 8005998:	dd08      	ble.n	80059ac <scalbn+0x8c>
 800599a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800599e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80059a2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80059a6:	ec45 4b10 	vmov	d0, r4, r5
 80059aa:	bd70      	pop	{r4, r5, r6, pc}
 80059ac:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80059b0:	da19      	bge.n	80059e6 <scalbn+0xc6>
 80059b2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80059b6:	429e      	cmp	r6, r3
 80059b8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80059bc:	dd0a      	ble.n	80059d4 <scalbn+0xb4>
 80059be:	a112      	add	r1, pc, #72	; (adr r1, 8005a08 <scalbn+0xe8>)
 80059c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d1e2      	bne.n	800598e <scalbn+0x6e>
 80059c8:	a30f      	add	r3, pc, #60	; (adr r3, 8005a08 <scalbn+0xe8>)
 80059ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ce:	f7fa fdbf 	bl	8000550 <__aeabi_dmul>
 80059d2:	e7cb      	b.n	800596c <scalbn+0x4c>
 80059d4:	a10a      	add	r1, pc, #40	; (adr r1, 8005a00 <scalbn+0xe0>)
 80059d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d0b8      	beq.n	8005950 <scalbn+0x30>
 80059de:	a10e      	add	r1, pc, #56	; (adr r1, 8005a18 <scalbn+0xf8>)
 80059e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80059e4:	e7b4      	b.n	8005950 <scalbn+0x30>
 80059e6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80059ea:	3236      	adds	r2, #54	; 0x36
 80059ec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80059f0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80059f4:	4620      	mov	r0, r4
 80059f6:	4b0c      	ldr	r3, [pc, #48]	; (8005a28 <scalbn+0x108>)
 80059f8:	2200      	movs	r2, #0
 80059fa:	e7e8      	b.n	80059ce <scalbn+0xae>
 80059fc:	f3af 8000 	nop.w
 8005a00:	c2f8f359 	.word	0xc2f8f359
 8005a04:	01a56e1f 	.word	0x01a56e1f
 8005a08:	8800759c 	.word	0x8800759c
 8005a0c:	7e37e43c 	.word	0x7e37e43c
 8005a10:	8800759c 	.word	0x8800759c
 8005a14:	fe37e43c 	.word	0xfe37e43c
 8005a18:	c2f8f359 	.word	0xc2f8f359
 8005a1c:	81a56e1f 	.word	0x81a56e1f
 8005a20:	43500000 	.word	0x43500000
 8005a24:	ffff3cb0 	.word	0xffff3cb0
 8005a28:	3c900000 	.word	0x3c900000

08005a2c <_init>:
 8005a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a2e:	bf00      	nop
 8005a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a32:	bc08      	pop	{r3}
 8005a34:	469e      	mov	lr, r3
 8005a36:	4770      	bx	lr

08005a38 <_fini>:
 8005a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a3a:	bf00      	nop
 8005a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a3e:	bc08      	pop	{r3}
 8005a40:	469e      	mov	lr, r3
 8005a42:	4770      	bx	lr
